<?xml version="1.0"?>
<mysqldump xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<database name="mysql">
	<table_structure name="columns_priv">
		<field Field="Host" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Db" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="User" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Table_name" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Column_name" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Timestamp" Type="timestamp" Null="NO" Key="" Default="CURRENT_TIMESTAMP" Extra="DEFAULT_GENERATED on update CURRENT_TIMESTAMP" Comment="" />
		<field Field="Column_priv" Type="set('Select','Insert','Update','References')" Null="NO" Key="" Default="" Extra="" Comment="" />
		<key Table="columns_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Host" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="columns_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="User" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="columns_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="Db" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="columns_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="4" Column_name="Table_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="columns_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="5" Column_name="Column_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="columns_priv" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Column privileges" />
	</table_structure>
	<table_data name="columns_priv">
	</table_data>
	<table_structure name="component">
		<field Field="component_id" Type="int unsigned" Null="NO" Key="PRI" Extra="auto_increment" Comment="" />
		<field Field="component_group_id" Type="int unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="component_urn" Type="text" Null="NO" Key="" Extra="" Comment="" />
		<key Table="component" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="component_id" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="component" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Auto_increment="1" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC" Comment="Components" />
	</table_structure>
	<table_data name="component">
	</table_data>
	<table_structure name="db">
		<field Field="Host" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Db" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="User" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Select_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Insert_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Update_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Delete_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Drop_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Grant_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="References_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Index_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Alter_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_tmp_table_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Lock_tables_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_view_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Show_view_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_routine_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Alter_routine_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Execute_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Event_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Trigger_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<key Table="db" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Host" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="db" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="User" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="db" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="Db" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="db" Non_unique="1" Key_name="User" Seq_in_index="1" Column_name="User" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="db" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="2" Avg_row_length="8192" Data_length="16384" Max_data_length="0" Index_length="16384" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Database privileges" />
	</table_structure>
	<table_data name="db">
	<row>
		<field name="Host">localhost</field>
		<field name="Db">performance_schema</field>
		<field name="User">mysql.session</field>
		<field name="Select_priv">Y</field>
		<field name="Insert_priv">N</field>
		<field name="Update_priv">N</field>
		<field name="Delete_priv">N</field>
		<field name="Create_priv">N</field>
		<field name="Drop_priv">N</field>
		<field name="Grant_priv">N</field>
		<field name="References_priv">N</field>
		<field name="Index_priv">N</field>
		<field name="Alter_priv">N</field>
		<field name="Create_tmp_table_priv">N</field>
		<field name="Lock_tables_priv">N</field>
		<field name="Create_view_priv">N</field>
		<field name="Show_view_priv">N</field>
		<field name="Create_routine_priv">N</field>
		<field name="Alter_routine_priv">N</field>
		<field name="Execute_priv">N</field>
		<field name="Event_priv">N</field>
		<field name="Trigger_priv">N</field>
	</row>
	<row>
		<field name="Host">localhost</field>
		<field name="Db">sys</field>
		<field name="User">mysql.sys</field>
		<field name="Select_priv">N</field>
		<field name="Insert_priv">N</field>
		<field name="Update_priv">N</field>
		<field name="Delete_priv">N</field>
		<field name="Create_priv">N</field>
		<field name="Drop_priv">N</field>
		<field name="Grant_priv">N</field>
		<field name="References_priv">N</field>
		<field name="Index_priv">N</field>
		<field name="Alter_priv">N</field>
		<field name="Create_tmp_table_priv">N</field>
		<field name="Lock_tables_priv">N</field>
		<field name="Create_view_priv">N</field>
		<field name="Show_view_priv">N</field>
		<field name="Create_routine_priv">N</field>
		<field name="Alter_routine_priv">N</field>
		<field name="Execute_priv">N</field>
		<field name="Event_priv">N</field>
		<field name="Trigger_priv">Y</field>
	</row>
	</table_data>
	<table_structure name="default_roles">
		<field Field="HOST" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="USER" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="DEFAULT_ROLE_HOST" Type="char(255)" Null="NO" Key="PRI" Default="%" Extra="" Comment="" />
		<field Field="DEFAULT_ROLE_USER" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<key Table="default_roles" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="HOST" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="default_roles" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="USER" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="default_roles" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="DEFAULT_ROLE_HOST" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="default_roles" Non_unique="0" Key_name="PRIMARY" Seq_in_index="4" Column_name="DEFAULT_ROLE_USER" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="default_roles" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Default roles" />
	</table_structure>
	<table_data name="default_roles">
	</table_data>
	<table_structure name="engine_cost">
		<field Field="engine_name" Type="varchar(64)" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="device_type" Type="int" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="cost_name" Type="varchar(64)" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="cost_value" Type="float" Null="YES" Key="" Extra="" Comment="" />
		<field Field="last_update" Type="timestamp" Null="NO" Key="" Default="CURRENT_TIMESTAMP" Extra="DEFAULT_GENERATED on update CURRENT_TIMESTAMP" Comment="" />
		<field Field="comment" Type="varchar(1024)" Null="YES" Key="" Extra="" Comment="" />
		<key Table="engine_cost" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="cost_name" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="engine_cost" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="engine_name" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="engine_cost" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="device_type" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="engine_cost" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="2" Avg_row_length="8192" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="" />
	</table_structure>
	<table_data name="engine_cost">
	<row>
		<field name="engine_name">default</field>
		<field name="device_type">0</field>
		<field name="cost_name">io_block_read_cost</field>
		<field name="cost_value" xsi:nil="true" />
		<field name="last_update">2024-01-30 10:37:05</field>
		<field name="comment" xsi:nil="true" />
	</row>
	<row>
		<field name="engine_name">default</field>
		<field name="device_type">0</field>
		<field name="cost_name">memory_block_read_cost</field>
		<field name="cost_value" xsi:nil="true" />
		<field name="last_update">2024-01-30 10:37:05</field>
		<field name="comment" xsi:nil="true" />
	</row>
	</table_data>
	<table_structure name="func">
		<field Field="name" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="ret" Type="tinyint" Null="NO" Key="" Default="0" Extra="" Comment="" />
		<field Field="dl" Type="char(128)" Null="NO" Key="" Default="" Extra="" Comment="" />
		<field Field="type" Type="enum('function','aggregate')" Null="NO" Key="" Extra="" Comment="" />
		<key Table="func" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="func" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="User defined functions" />
	</table_structure>
	<table_data name="func">
	</table_data>
	<table_structure name="global_grants">
		<field Field="USER" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="HOST" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="PRIV" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="WITH_GRANT_OPTION" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<key Table="global_grants" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="USER" Collation="A" Cardinality="5" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="global_grants" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="HOST" Collation="A" Cardinality="5" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="global_grants" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="PRIV" Collation="A" Cardinality="89" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="global_grants" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="89" Avg_row_length="552" Data_length="49152" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Extended global grants" />
	</table_structure>
	<table_data name="global_grants">
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">APPLICATION_PASSWORD_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">AUDIT_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">AUTHENTICATION_POLICY_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">BACKUP_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">BINLOG_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">BINLOG_ENCRYPTION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">CLONE_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">CONNECTION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">ENCRYPTION_KEY_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FLUSH_OPTIMIZER_COSTS</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FLUSH_STATUS</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FLUSH_TABLES</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FLUSH_USER_RESOURCES</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">GROUP_REPLICATION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">GROUP_REPLICATION_STREAM</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">INNODB_REDO_LOG_ARCHIVE</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">INNODB_REDO_LOG_ENABLE</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">PASSWORDLESS_USER_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">PERSIST_RO_VARIABLES_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">REPLICATION_APPLIER</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">REPLICATION_SLAVE_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">RESOURCE_GROUP_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">RESOURCE_GROUP_USER</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">ROLE_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SENSITIVE_VARIABLES_OBSERVER</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SERVICE_CONNECTION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SESSION_VARIABLES_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SET_USER_ID</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SHOW_ROUTINE</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SYSTEM_USER</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SYSTEM_VARIABLES_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">TABLE_ENCRYPTION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">TELEMETRY_LOG_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">debian-sys-maint</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">XA_RECOVER_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">mysql.infoschema</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">AUDIT_ABORT_EXEMPT</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.infoschema</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FIREWALL_EXEMPT</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.infoschema</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SYSTEM_USER</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.session</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">AUDIT_ABORT_EXEMPT</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.session</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">AUTHENTICATION_POLICY_ADMIN</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.session</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">BACKUP_ADMIN</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.session</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">CLONE_ADMIN</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.session</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">CONNECTION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.session</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FIREWALL_EXEMPT</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.session</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">PERSIST_RO_VARIABLES_ADMIN</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.session</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SESSION_VARIABLES_ADMIN</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.session</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SYSTEM_USER</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.session</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SYSTEM_VARIABLES_ADMIN</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.sys</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">AUDIT_ABORT_EXEMPT</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.sys</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FIREWALL_EXEMPT</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">mysql.sys</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SYSTEM_USER</field>
		<field name="WITH_GRANT_OPTION">N</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">APPLICATION_PASSWORD_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">AUDIT_ABORT_EXEMPT</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">AUDIT_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">AUTHENTICATION_POLICY_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">BACKUP_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">BINLOG_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">BINLOG_ENCRYPTION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">CLONE_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">CONNECTION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">ENCRYPTION_KEY_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FIREWALL_EXEMPT</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FLUSH_OPTIMIZER_COSTS</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FLUSH_STATUS</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FLUSH_TABLES</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">FLUSH_USER_RESOURCES</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">GROUP_REPLICATION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">GROUP_REPLICATION_STREAM</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">INNODB_REDO_LOG_ARCHIVE</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">INNODB_REDO_LOG_ENABLE</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">PASSWORDLESS_USER_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">PERSIST_RO_VARIABLES_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">REPLICATION_APPLIER</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">REPLICATION_SLAVE_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">RESOURCE_GROUP_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">RESOURCE_GROUP_USER</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">ROLE_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SENSITIVE_VARIABLES_OBSERVER</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SERVICE_CONNECTION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SESSION_VARIABLES_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SET_USER_ID</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SHOW_ROUTINE</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SYSTEM_USER</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">SYSTEM_VARIABLES_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">TABLE_ENCRYPTION_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">TELEMETRY_LOG_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	<row>
		<field name="USER">root</field>
		<field name="HOST">localhost</field>
		<field name="PRIV">XA_RECOVER_ADMIN</field>
		<field name="WITH_GRANT_OPTION">Y</field>
	</row>
	</table_data>
	<table_structure name="gtid_executed">
		<field Field="source_uuid" Type="char(36)" Null="NO" Key="PRI" Extra="" Comment="uuid of the source where the transaction was originally executed." />
		<field Field="interval_start" Type="bigint" Null="NO" Key="PRI" Extra="" Comment="First number of interval." />
		<field Field="interval_end" Type="bigint" Null="NO" Key="" Extra="" Comment="Last number of interval." />
		<key Table="gtid_executed" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="source_uuid" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="gtid_executed" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="interval_start" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="gtid_executed" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb4_0900_ai_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="" />
	</table_structure>
	<table_structure name="help_category">
		<field Field="help_category_id" Type="smallint unsigned" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="name" Type="char(64)" Null="NO" Key="UNI" Extra="" Comment="" />
		<field Field="parent_category_id" Type="smallint unsigned" Null="YES" Key="" Extra="" Comment="" />
		<field Field="url" Type="text" Null="NO" Key="" Extra="" Comment="" />
		<key Table="help_category" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="help_category_id" Collation="A" Cardinality="53" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="help_category" Non_unique="0" Key_name="name" Seq_in_index="1" Column_name="name" Collation="A" Cardinality="53" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="help_category" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="53" Avg_row_length="309" Data_length="16384" Max_data_length="0" Index_length="16384" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="help categories" />
	</table_structure>
	<table_data name="help_category">
	<row>
		<field name="help_category_id">0</field>
		<field name="name">Contents</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">1</field>
		<field name="name">Help Metadata</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">2</field>
		<field name="name">Data Types</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">3</field>
		<field name="name">Administration</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">4</field>
		<field name="name">Functions</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">5</field>
		<field name="name">Enterprise Encryption Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">6</field>
		<field name="name">Language Structure</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">7</field>
		<field name="name">Geographic Features</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">8</field>
		<field name="name">MBR</field>
		<field name="parent_category_id">7</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">9</field>
		<field name="name">WKT</field>
		<field name="parent_category_id">7</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">10</field>
		<field name="name">Comparison Operators</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">11</field>
		<field name="name">Logical Operators</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">12</field>
		<field name="name">Flow Control Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">13</field>
		<field name="name">Numeric Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">14</field>
		<field name="name">Date and Time Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">15</field>
		<field name="name">String Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">16</field>
		<field name="name">Cast Functions and Operators</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">17</field>
		<field name="name">XML</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">18</field>
		<field name="name">Bit Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">19</field>
		<field name="name">Encryption Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">20</field>
		<field name="name">Locking Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">21</field>
		<field name="name">Information Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">22</field>
		<field name="name">Spatial Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">23</field>
		<field name="name">WKT Functions</field>
		<field name="parent_category_id">22</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">24</field>
		<field name="name">WKB Functions</field>
		<field name="parent_category_id">22</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">25</field>
		<field name="name">Geometry Constructors</field>
		<field name="parent_category_id">22</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">26</field>
		<field name="name">Geometry Property Functions</field>
		<field name="parent_category_id">22</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">27</field>
		<field name="name">Point Property Functions</field>
		<field name="parent_category_id">22</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">28</field>
		<field name="name">LineString Property Functions</field>
		<field name="parent_category_id">22</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">29</field>
		<field name="name">Polygon Property Functions</field>
		<field name="parent_category_id">22</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">30</field>
		<field name="name">GeometryCollection Property Functions</field>
		<field name="parent_category_id">22</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">31</field>
		<field name="name">Geometry Relation Functions</field>
		<field name="parent_category_id">22</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">32</field>
		<field name="name">MBR Functions</field>
		<field name="parent_category_id">22</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">33</field>
		<field name="name">GTID</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">34</field>
		<field name="name">Aggregate Functions and Modifiers</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">35</field>
		<field name="name">GROUP BY Functions and Modifiers</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">36</field>
		<field name="name">Window Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">37</field>
		<field name="name">Performance Schema Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">38</field>
		<field name="name">Internal Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">39</field>
		<field name="name">Miscellaneous Functions</field>
		<field name="parent_category_id">4</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">40</field>
		<field name="name">Data Definition</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">41</field>
		<field name="name">Data Manipulation</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">42</field>
		<field name="name">Transactions</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">43</field>
		<field name="name">Replication Statements</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">44</field>
		<field name="name">Prepared Statements</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">45</field>
		<field name="name">Compound Statements</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">46</field>
		<field name="name">Account Management</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">47</field>
		<field name="name">Table Maintenance</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">48</field>
		<field name="name">Loadable Functions</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">49</field>
		<field name="name">Components</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">50</field>
		<field name="name">Plugins</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">51</field>
		<field name="name">Utility</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_category_id">52</field>
		<field name="name">Storage Engines</field>
		<field name="parent_category_id">0</field>
		<field name="url"></field>
	</row>
	</table_data>
	<table_structure name="help_keyword">
		<field Field="help_keyword_id" Type="int unsigned" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="name" Type="char(64)" Null="NO" Key="UNI" Extra="" Comment="" />
		<key Table="help_keyword" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="help_keyword_id" Collation="A" Cardinality="1016" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="help_keyword" Non_unique="0" Key_name="name" Seq_in_index="1" Column_name="name" Collation="A" Cardinality="925" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="help_keyword" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="1016" Avg_row_length="129" Data_length="131072" Max_data_length="0" Index_length="131072" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="help keywords" />
	</table_structure>
	<table_data name="help_keyword">
	<row>
		<field name="help_keyword_id">108</field>
		<field name="name">%</field>
	</row>
	<row>
		<field name="help_keyword_id">264</field>
		<field name="name">&amp;</field>
	</row>
	<row>
		<field name="help_keyword_id">422</field>
		<field name="name">(JSON</field>
	</row>
	<row>
		<field name="help_keyword_id">86</field>
		<field name="name">*</field>
	</row>
	<row>
		<field name="help_keyword_id">84</field>
		<field name="name">+</field>
	</row>
	<row>
		<field name="help_keyword_id">85</field>
		<field name="name">-</field>
	</row>
	<row>
		<field name="help_keyword_id">423</field>
		<field name="name">-&gt;</field>
	</row>
	<row>
		<field name="help_keyword_id">425</field>
		<field name="name">-&gt;&gt;</field>
	</row>
	<row>
		<field name="help_keyword_id">87</field>
		<field name="name">/</field>
	</row>
	<row>
		<field name="help_keyword_id">75</field>
		<field name="name">:=</field>
	</row>
	<row>
		<field name="help_keyword_id">59</field>
		<field name="name">&lt;</field>
	</row>
	<row>
		<field name="help_keyword_id">266</field>
		<field name="name">&lt;&lt;</field>
	</row>
	<row>
		<field name="help_keyword_id">58</field>
		<field name="name">&lt;=</field>
	</row>
	<row>
		<field name="help_keyword_id">56</field>
		<field name="name">&lt;=&gt;</field>
	</row>
	<row>
		<field name="help_keyword_id">57</field>
		<field name="name">&lt;&gt;</field>
	</row>
	<row>
		<field name="help_keyword_id">55</field>
		<field name="name">=</field>
	</row>
	<row>
		<field name="help_keyword_id">61</field>
		<field name="name">&gt;</field>
	</row>
	<row>
		<field name="help_keyword_id">60</field>
		<field name="name">&gt;=</field>
	</row>
	<row>
		<field name="help_keyword_id">267</field>
		<field name="name">&gt;&gt;</field>
	</row>
	<row>
		<field name="help_keyword_id">90</field>
		<field name="name">ABS</field>
	</row>
	<row>
		<field name="help_keyword_id">881</field>
		<field name="name">ACCOUNT</field>
	</row>
	<row>
		<field name="help_keyword_id">91</field>
		<field name="name">ACOS</field>
	</row>
	<row>
		<field name="help_keyword_id">659</field>
		<field name="name">ACTION</field>
	</row>
	<row>
		<field name="help_keyword_id">49</field>
		<field name="name">ADD</field>
	</row>
	<row>
		<field name="help_keyword_id">120</field>
		<field name="name">ADDDATE</field>
	</row>
	<row>
		<field name="help_keyword_id">121</field>
		<field name="name">ADDTIME</field>
	</row>
	<row>
		<field name="help_keyword_id">915</field>
		<field name="name">ADMIN</field>
	</row>
	<row>
		<field name="help_keyword_id">270</field>
		<field name="name">AES_DECRYPT</field>
	</row>
	<row>
		<field name="help_keyword_id">271</field>
		<field name="name">AES_ENCRYPT</field>
	</row>
	<row>
		<field name="help_keyword_id">581</field>
		<field name="name">AFTER</field>
	</row>
	<row>
		<field name="help_keyword_id">247</field>
		<field name="name">AGAINST</field>
	</row>
	<row>
		<field name="help_keyword_id">936</field>
		<field name="name">AGGREGATE</field>
	</row>
	<row>
		<field name="help_keyword_id">582</field>
		<field name="name">ALGORITHM</field>
	</row>
	<row>
		<field name="help_keyword_id">695</field>
		<field name="name">ALL</field>
	</row>
	<row>
		<field name="help_keyword_id">50</field>
		<field name="name">ALTER</field>
	</row>
	<row>
		<field name="help_keyword_id">583</field>
		<field name="name">ANALYZE</field>
	</row>
	<row>
		<field name="help_keyword_id">62</field>
		<field name="name">AND</field>
	</row>
	<row>
		<field name="help_keyword_id">528</field>
		<field name="name">ANY_VALUE</field>
	</row>
	<row>
		<field name="help_keyword_id">660</field>
		<field name="name">ARCHIVE</field>
	</row>
	<row>
		<field name="help_keyword_id">254</field>
		<field name="name">ARRAY</field>
	</row>
	<row>
		<field name="help_keyword_id">724</field>
		<field name="name">AS</field>
	</row>
	<row>
		<field name="help_keyword_id">466</field>
		<field name="name">ASC</field>
	</row>
	<row>
		<field name="help_keyword_id">185</field>
		<field name="name">ASCII</field>
	</row>
	<row>
		<field name="help_keyword_id">92</field>
		<field name="name">ASIN</field>
	</row>
	<row>
		<field name="help_keyword_id">776</field>
		<field name="name">ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS</field>
	</row>
	<row>
		<field name="help_keyword_id">6</field>
		<field name="name">ASYMMETRIC_DECRYPT</field>
	</row>
	<row>
		<field name="help_keyword_id">13</field>
		<field name="name">ASYMMETRIC_DERIVE</field>
	</row>
	<row>
		<field name="help_keyword_id">7</field>
		<field name="name">ASYMMETRIC_ENCRYPT</field>
	</row>
	<row>
		<field name="help_keyword_id">8</field>
		<field name="name">ASYMMETRIC_SIGN</field>
	</row>
	<row>
		<field name="help_keyword_id">9</field>
		<field name="name">ASYMMETRIC_VERIFY</field>
	</row>
	<row>
		<field name="help_keyword_id">643</field>
		<field name="name">AT</field>
	</row>
	<row>
		<field name="help_keyword_id">93</field>
		<field name="name">ATAN</field>
	</row>
	<row>
		<field name="help_keyword_id">94</field>
		<field name="name">ATAN2</field>
	</row>
	<row>
		<field name="help_keyword_id">882</field>
		<field name="name">ATTRIBUTE</field>
	</row>
	<row>
		<field name="help_keyword_id">913</field>
		<field name="name">AUTHENTICATION</field>
	</row>
	<row>
		<field name="help_keyword_id">745</field>
		<field name="name">AUTOCOMMIT</field>
	</row>
	<row>
		<field name="help_keyword_id">584</field>
		<field name="name">AUTOEXTEND_SIZE</field>
	</row>
	<row>
		<field name="help_keyword_id">585</field>
		<field name="name">AUTO_INCREMENT</field>
	</row>
	<row>
		<field name="help_keyword_id">460</field>
		<field name="name">AVG</field>
	</row>
	<row>
		<field name="help_keyword_id">586</field>
		<field name="name">AVG_ROW_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">757</field>
		<field name="name">BACKUP</field>
	</row>
	<row>
		<field name="help_keyword_id">771</field>
		<field name="name">BEFORE</field>
	</row>
	<row>
		<field name="help_keyword_id">746</field>
		<field name="name">BEGIN</field>
	</row>
	<row>
		<field name="help_keyword_id">288</field>
		<field name="name">BENCHMARK</field>
	</row>
	<row>
		<field name="help_keyword_id">63</field>
		<field name="name">BETWEEN</field>
	</row>
	<row>
		<field name="help_keyword_id">186</field>
		<field name="name">BIN</field>
	</row>
	<row>
		<field name="help_keyword_id">253</field>
		<field name="name">BINARY</field>
	</row>
	<row>
		<field name="help_keyword_id">563</field>
		<field name="name">BINLOG</field>
	</row>
	<row>
		<field name="help_keyword_id">529</field>
		<field name="name">BIN_TO_UUID</field>
	</row>
	<row>
		<field name="help_keyword_id">462</field>
		<field name="name">BIT_AND</field>
	</row>
	<row>
		<field name="help_keyword_id">269</field>
		<field name="name">BIT_COUNT</field>
	</row>
	<row>
		<field name="help_keyword_id">187</field>
		<field name="name">BIT_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">463</field>
		<field name="name">BIT_OR</field>
	</row>
	<row>
		<field name="help_keyword_id">464</field>
		<field name="name">BIT_XOR</field>
	</row>
	<row>
		<field name="help_keyword_id">17</field>
		<field name="name">BOOL</field>
	</row>
	<row>
		<field name="help_keyword_id">18</field>
		<field name="name">BOOLEAN</field>
	</row>
	<row>
		<field name="help_keyword_id">230</field>
		<field name="name">BOTH</field>
	</row>
	<row>
		<field name="help_keyword_id">647</field>
		<field name="name">BTREE</field>
	</row>
	<row>
		<field name="help_keyword_id">467</field>
		<field name="name">BY</field>
	</row>
	<row>
		<field name="help_keyword_id">42</field>
		<field name="name">BYTE</field>
	</row>
	<row>
		<field name="help_keyword_id">971</field>
		<field name="name">CACHE</field>
	</row>
	<row>
		<field name="help_keyword_id">689</field>
		<field name="name">CALL</field>
	</row>
	<row>
		<field name="help_keyword_id">499</field>
		<field name="name">CAN_ACCESS_COLUMN</field>
	</row>
	<row>
		<field name="help_keyword_id">500</field>
		<field name="name">CAN_ACCESS_DATABASE</field>
	</row>
	<row>
		<field name="help_keyword_id">501</field>
		<field name="name">CAN_ACCESS_TABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">502</field>
		<field name="name">CAN_ACCESS_USER</field>
	</row>
	<row>
		<field name="help_keyword_id">503</field>
		<field name="name">CAN_ACCESS_VIEW</field>
	</row>
	<row>
		<field name="help_keyword_id">661</field>
		<field name="name">CASCADE</field>
	</row>
	<row>
		<field name="help_keyword_id">76</field>
		<field name="name">CASE</field>
	</row>
	<row>
		<field name="help_keyword_id">255</field>
		<field name="name">CAST</field>
	</row>
	<row>
		<field name="help_keyword_id">862</field>
		<field name="name">CATALOG_NAME</field>
	</row>
	<row>
		<field name="help_keyword_id">95</field>
		<field name="name">CEIL</field>
	</row>
	<row>
		<field name="help_keyword_id">96</field>
		<field name="name">CEILING</field>
	</row>
	<row>
		<field name="help_keyword_id">747</field>
		<field name="name">CHAIN</field>
	</row>
	<row>
		<field name="help_keyword_id">883</field>
		<field name="name">CHALLENGE_RESPONSE</field>
	</row>
	<row>
		<field name="help_keyword_id">587</field>
		<field name="name">CHANGE</field>
	</row>
	<row>
		<field name="help_keyword_id">564</field>
		<field name="name">CHANNEL</field>
	</row>
	<row>
		<field name="help_keyword_id">43</field>
		<field name="name">CHAR</field>
	</row>
	<row>
		<field name="help_keyword_id">39</field>
		<field name="name">CHARACTER</field>
	</row>
	<row>
		<field name="help_keyword_id">189</field>
		<field name="name">CHARACTER_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">289</field>
		<field name="name">CHARSET</field>
	</row>
	<row>
		<field name="help_keyword_id">188</field>
		<field name="name">CHAR_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">588</field>
		<field name="name">CHECK</field>
	</row>
	<row>
		<field name="help_keyword_id">589</field>
		<field name="name">CHECKSUM</field>
	</row>
	<row>
		<field name="help_keyword_id">884</field>
		<field name="name">CIPHER</field>
	</row>
	<row>
		<field name="help_keyword_id">863</field>
		<field name="name">CLASS_ORIGIN</field>
	</row>
	<row>
		<field name="help_keyword_id">916</field>
		<field name="name">CLIENT</field>
	</row>
	<row>
		<field name="help_keyword_id">944</field>
		<field name="name">CLONE</field>
	</row>
	<row>
		<field name="help_keyword_id">697</field>
		<field name="name">CLOSE</field>
	</row>
	<row>
		<field name="help_keyword_id">65</field>
		<field name="name">COALESCE</field>
	</row>
	<row>
		<field name="help_keyword_id">965</field>
		<field name="name">CODE</field>
	</row>
	<row>
		<field name="help_keyword_id">290</field>
		<field name="name">COERCIBILITY</field>
	</row>
	<row>
		<field name="help_keyword_id">546</field>
		<field name="name">COLLATE</field>
	</row>
	<row>
		<field name="help_keyword_id">291</field>
		<field name="name">COLLATION</field>
	</row>
	<row>
		<field name="help_keyword_id">590</field>
		<field name="name">COLUMN</field>
	</row>
	<row>
		<field name="help_keyword_id">591</field>
		<field name="name">COLUMNS</field>
	</row>
	<row>
		<field name="help_keyword_id">864</field>
		<field name="name">COLUMN_NAME</field>
	</row>
	<row>
		<field name="help_keyword_id">551</field>
		<field name="name">COMMENT</field>
	</row>
	<row>
		<field name="help_keyword_id">748</field>
		<field name="name">COMMIT</field>
	</row>
	<row>
		<field name="help_keyword_id">760</field>
		<field name="name">COMMITTED</field>
	</row>
	<row>
		<field name="help_keyword_id">662</field>
		<field name="name">COMPACT</field>
	</row>
	<row>
		<field name="help_keyword_id">552</field>
		<field name="name">COMPLETION</field>
	</row>
	<row>
		<field name="help_keyword_id">940</field>
		<field name="name">COMPONENT</field>
	</row>
	<row>
		<field name="help_keyword_id">272</field>
		<field name="name">COMPRESS</field>
	</row>
	<row>
		<field name="help_keyword_id">663</field>
		<field name="name">COMPRESSED</field>
	</row>
	<row>
		<field name="help_keyword_id">592</field>
		<field name="name">COMPRESSION</field>
	</row>
	<row>
		<field name="help_keyword_id">190</field>
		<field name="name">CONCAT</field>
	</row>
	<row>
		<field name="help_keyword_id">191</field>
		<field name="name">CONCAT_WS</field>
	</row>
	<row>
		<field name="help_keyword_id">711</field>
		<field name="name">CONCURRENT</field>
	</row>
	<row>
		<field name="help_keyword_id">859</field>
		<field name="name">CONDITION</field>
	</row>
	<row>
		<field name="help_keyword_id">593</field>
		<field name="name">CONNECTION</field>
	</row>
	<row>
		<field name="help_keyword_id">292</field>
		<field name="name">CONNECTION_ID</field>
	</row>
	<row>
		<field name="help_keyword_id">749</field>
		<field name="name">CONSISTENT</field>
	</row>
	<row>
		<field name="help_keyword_id">594</field>
		<field name="name">CONSTRAINT</field>
	</row>
	<row>
		<field name="help_keyword_id">865</field>
		<field name="name">CONSTRAINT_CATALOG</field>
	</row>
	<row>
		<field name="help_keyword_id">866</field>
		<field name="name">CONSTRAINT_NAME</field>
	</row>
	<row>
		<field name="help_keyword_id">867</field>
		<field name="name">CONSTRAINT_SCHEMA</field>
	</row>
	<row>
		<field name="help_keyword_id">860</field>
		<field name="name">CONTINUE</field>
	</row>
	<row>
		<field name="help_keyword_id">97</field>
		<field name="name">CONV</field>
	</row>
	<row>
		<field name="help_keyword_id">260</field>
		<field name="name">CONVERT</field>
	</row>
	<row>
		<field name="help_keyword_id">122</field>
		<field name="name">CONVERT_TZ</field>
	</row>
	<row>
		<field name="help_keyword_id">98</field>
		<field name="name">COS</field>
	</row>
	<row>
		<field name="help_keyword_id">99</field>
		<field name="name">COT</field>
	</row>
	<row>
		<field name="help_keyword_id">465</field>
		<field name="name">COUNT</field>
	</row>
	<row>
		<field name="help_keyword_id">100</field>
		<field name="name">CRC32</field>
	</row>
	<row>
		<field name="help_keyword_id">51</field>
		<field name="name">CREATE</field>
	</row>
	<row>
		<field name="help_keyword_id">10</field>
		<field name="name">CREATE_ASYMMETRIC_PRIV_KEY</field>
	</row>
	<row>
		<field name="help_keyword_id">11</field>
		<field name="name">CREATE_ASYMMETRIC_PUB_KEY</field>
	</row>
	<row>
		<field name="help_keyword_id">14</field>
		<field name="name">CREATE_DH_PARAMETERS</field>
	</row>
	<row>
		<field name="help_keyword_id">12</field>
		<field name="name">CREATE_DIGEST</field>
	</row>
	<row>
		<field name="help_keyword_id">740</field>
		<field name="name">CROSS</field>
	</row>
	<row>
		<field name="help_keyword_id">664</field>
		<field name="name">CSV</field>
	</row>
	<row>
		<field name="help_keyword_id">484</field>
		<field name="name">CUME_DIST</field>
	</row>
	<row>
		<field name="help_keyword_id">123</field>
		<field name="name">CURDATE</field>
	</row>
	<row>
		<field name="help_keyword_id">885</field>
		<field name="name">CURRENT</field>
	</row>
	<row>
		<field name="help_keyword_id">124</field>
		<field name="name">CURRENT_DATE</field>
	</row>
	<row>
		<field name="help_keyword_id">293</field>
		<field name="name">CURRENT_ROLE</field>
	</row>
	<row>
		<field name="help_keyword_id">125</field>
		<field name="name">CURRENT_TIME</field>
	</row>
	<row>
		<field name="help_keyword_id">126</field>
		<field name="name">CURRENT_TIMESTAMP</field>
	</row>
	<row>
		<field name="help_keyword_id">294</field>
		<field name="name">CURRENT_USER</field>
	</row>
	<row>
		<field name="help_keyword_id">857</field>
		<field name="name">CURSOR</field>
	</row>
	<row>
		<field name="help_keyword_id">868</field>
		<field name="name">CURSOR_NAME</field>
	</row>
	<row>
		<field name="help_keyword_id">127</field>
		<field name="name">CURTIME</field>
	</row>
	<row>
		<field name="help_keyword_id">595</field>
		<field name="name">DATA</field>
	</row>
	<row>
		<field name="help_keyword_id">295</field>
		<field name="name">DATABASE</field>
	</row>
	<row>
		<field name="help_keyword_id">949</field>
		<field name="name">DATABASES</field>
	</row>
	<row>
		<field name="help_keyword_id">636</field>
		<field name="name">DATAFILE</field>
	</row>
	<row>
		<field name="help_keyword_id">36</field>
		<field name="name">DATE</field>
	</row>
	<row>
		<field name="help_keyword_id">128</field>
		<field name="name">DATEDIFF</field>
	</row>
	<row>
		<field name="help_keyword_id">256</field>
		<field name="name">DATETIME</field>
	</row>
	<row>
		<field name="help_keyword_id">129</field>
		<field name="name">DATE_ADD</field>
	</row>
	<row>
		<field name="help_keyword_id">144</field>
		<field name="name">DATE_FORMAT</field>
	</row>
	<row>
		<field name="help_keyword_id">130</field>
		<field name="name">DATE_SUB</field>
	</row>
	<row>
		<field name="help_keyword_id">131</field>
		<field name="name">DAY</field>
	</row>
	<row>
		<field name="help_keyword_id">145</field>
		<field name="name">DAYNAME</field>
	</row>
	<row>
		<field name="help_keyword_id">146</field>
		<field name="name">DAYOFMONTH</field>
	</row>
	<row>
		<field name="help_keyword_id">147</field>
		<field name="name">DAYOFWEEK</field>
	</row>
	<row>
		<field name="help_keyword_id">148</field>
		<field name="name">DAYOFYEAR</field>
	</row>
	<row>
		<field name="help_keyword_id">132</field>
		<field name="name">DAY_HOUR</field>
	</row>
	<row>
		<field name="help_keyword_id">133</field>
		<field name="name">DAY_MINUTE</field>
	</row>
	<row>
		<field name="help_keyword_id">134</field>
		<field name="name">DAY_SECOND</field>
	</row>
	<row>
		<field name="help_keyword_id">848</field>
		<field name="name">DEALLOCATE</field>
	</row>
	<row>
		<field name="help_keyword_id">28</field>
		<field name="name">DEC</field>
	</row>
	<row>
		<field name="help_keyword_id">31</field>
		<field name="name">DECIMAL</field>
	</row>
	<row>
		<field name="help_keyword_id">849</field>
		<field name="name">DECLARE</field>
	</row>
	<row>
		<field name="help_keyword_id">2</field>
		<field name="name">DEFAULT</field>
	</row>
	<row>
		<field name="help_keyword_id">839</field>
		<field name="name">DEFAULT_AUTH</field>
	</row>
	<row>
		<field name="help_keyword_id">553</field>
		<field name="name">DEFINER</field>
	</row>
	<row>
		<field name="help_keyword_id">653</field>
		<field name="name">DEFINITION</field>
	</row>
	<row>
		<field name="help_keyword_id">101</field>
		<field name="name">DEGREES</field>
	</row>
	<row>
		<field name="help_keyword_id">703</field>
		<field name="name">DELAYED</field>
	</row>
	<row>
		<field name="help_keyword_id">596</field>
		<field name="name">DELAY_KEY_WRITE</field>
	</row>
	<row>
		<field name="help_keyword_id">665</field>
		<field name="name">DELETE</field>
	</row>
	<row>
		<field name="help_keyword_id">485</field>
		<field name="name">DENSE_RANK</field>
	</row>
	<row>
		<field name="help_keyword_id">468</field>
		<field name="name">DESC</field>
	</row>
	<row>
		<field name="help_keyword_id">982</field>
		<field name="name">DESCRIBE</field>
	</row>
	<row>
		<field name="help_keyword_id">654</field>
		<field name="name">DESCRIPTION</field>
	</row>
	<row>
		<field name="help_keyword_id">869</field>
		<field name="name">DIAGNOSTICS</field>
	</row>
	<row>
		<field name="help_keyword_id">597</field>
		<field name="name">DIRECTORY</field>
	</row>
	<row>
		<field name="help_keyword_id">554</field>
		<field name="name">DISABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">598</field>
		<field name="name">DISCARD</field>
	</row>
	<row>
		<field name="help_keyword_id">461</field>
		<field name="name">DISTINCT</field>
	</row>
	<row>
		<field name="help_keyword_id">725</field>
		<field name="name">DISTINCTROW</field>
	</row>
	<row>
		<field name="help_keyword_id">88</field>
		<field name="name">DIV</field>
	</row>
	<row>
		<field name="help_keyword_id">555</field>
		<field name="name">DO</field>
	</row>
	<row>
		<field name="help_keyword_id">599</field>
		<field name="name">DROP</field>
	</row>
	<row>
		<field name="help_keyword_id">739</field>
		<field name="name">DUAL</field>
	</row>
	<row>
		<field name="help_keyword_id">726</field>
		<field name="name">DUMPFILE</field>
	</row>
	<row>
		<field name="help_keyword_id">704</field>
		<field name="name">DUPLICATE</field>
	</row>
	<row>
		<field name="help_keyword_id">666</field>
		<field name="name">DYNAMIC</field>
	</row>
	<row>
		<field name="help_keyword_id">77</field>
		<field name="name">ELSE</field>
	</row>
	<row>
		<field name="help_keyword_id">850</field>
		<field name="name">ELSEIF</field>
	</row>
	<row>
		<field name="help_keyword_id">192</field>
		<field name="name">ELT</field>
	</row>
	<row>
		<field name="help_keyword_id">556</field>
		<field name="name">ENABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">712</field>
		<field name="name">ENCLOSED</field>
	</row>
	<row>
		<field name="help_keyword_id">547</field>
		<field name="name">ENCRYPTION</field>
	</row>
	<row>
		<field name="help_keyword_id">78</field>
		<field name="name">END</field>
	</row>
	<row>
		<field name="help_keyword_id">644</field>
		<field name="name">ENDS</field>
	</row>
	<row>
		<field name="help_keyword_id">600</field>
		<field name="name">ENGINE</field>
	</row>
	<row>
		<field name="help_keyword_id">950</field>
		<field name="name">ENGINES</field>
	</row>
	<row>
		<field name="help_keyword_id">565</field>
		<field name="name">ERROR</field>
	</row>
	<row>
		<field name="help_keyword_id">951</field>
		<field name="name">ERRORS</field>
	</row>
	<row>
		<field name="help_keyword_id">239</field>
		<field name="name">ESCAPE</field>
	</row>
	<row>
		<field name="help_keyword_id">713</field>
		<field name="name">ESCAPED</field>
	</row>
	<row>
		<field name="help_keyword_id">557</field>
		<field name="name">EVENT</field>
	</row>
	<row>
		<field name="help_keyword_id">963</field>
		<field name="name">EVENTS</field>
	</row>
	<row>
		<field name="help_keyword_id">645</field>
		<field name="name">EVERY</field>
	</row>
	<row>
		<field name="help_keyword_id">696</field>
		<field name="name">EXCEPT</field>
	</row>
	<row>
		<field name="help_keyword_id">601</field>
		<field name="name">EXCHANGE</field>
	</row>
	<row>
		<field name="help_keyword_id">847</field>
		<field name="name">EXECUTE</field>
	</row>
	<row>
		<field name="help_keyword_id">642</field>
		<field name="name">EXISTS</field>
	</row>
	<row>
		<field name="help_keyword_id">861</field>
		<field name="name">EXIT</field>
	</row>
	<row>
		<field name="help_keyword_id">102</field>
		<field name="name">EXP</field>
	</row>
	<row>
		<field name="help_keyword_id">248</field>
		<field name="name">EXPANSION</field>
	</row>
	<row>
		<field name="help_keyword_id">886</field>
		<field name="name">EXPIRE</field>
	</row>
	<row>
		<field name="help_keyword_id">983</field>
		<field name="name">EXPLAIN</field>
	</row>
	<row>
		<field name="help_keyword_id">972</field>
		<field name="name">EXPORT</field>
	</row>
	<row>
		<field name="help_keyword_id">193</field>
		<field name="name">EXPORT_SET</field>
	</row>
	<row>
		<field name="help_keyword_id">934</field>
		<field name="name">EXTENDED</field>
	</row>
	<row>
		<field name="help_keyword_id">682</field>
		<field name="name">EXTENT_SIZE</field>
	</row>
	<row>
		<field name="help_keyword_id">149</field>
		<field name="name">EXTRACT</field>
	</row>
	<row>
		<field name="help_keyword_id">424</field>
		<field name="name">EXTRACTION)</field>
	</row>
	<row>
		<field name="help_keyword_id">261</field>
		<field name="name">EXTRACTVALUE</field>
	</row>
	<row>
		<field name="help_keyword_id">887</field>
		<field name="name">FACTOR</field>
	</row>
	<row>
		<field name="help_keyword_id">888</field>
		<field name="name">FAILED_LOGIN_ATTEMPTS</field>
	</row>
	<row>
		<field name="help_keyword_id">15</field>
		<field name="name">FALSE</field>
	</row>
	<row>
		<field name="help_keyword_id">932</field>
		<field name="name">FAST</field>
	</row>
	<row>
		<field name="help_keyword_id">667</field>
		<field name="name">FEDERATED</field>
	</row>
	<row>
		<field name="help_keyword_id">858</field>
		<field name="name">FETCH</field>
	</row>
	<row>
		<field name="help_keyword_id">194</field>
		<field name="name">FIELD</field>
	</row>
	<row>
		<field name="help_keyword_id">714</field>
		<field name="name">FIELDS</field>
	</row>
	<row>
		<field name="help_keyword_id">917</field>
		<field name="name">FILE</field>
	</row>
	<row>
		<field name="help_keyword_id">683</field>
		<field name="name">FILE_BLOCK_SIZE</field>
	</row>
	<row>
		<field name="help_keyword_id">805</field>
		<field name="name">FILTER</field>
	</row>
	<row>
		<field name="help_keyword_id">195</field>
		<field name="name">FIND_IN_SET</field>
	</row>
	<row>
		<field name="help_keyword_id">889</field>
		<field name="name">FINISH</field>
	</row>
	<row>
		<field name="help_keyword_id">602</field>
		<field name="name">FIRST</field>
	</row>
	<row>
		<field name="help_keyword_id">486</field>
		<field name="name">FIRST_VALUE</field>
	</row>
	<row>
		<field name="help_keyword_id">29</field>
		<field name="name">FIXED</field>
	</row>
	<row>
		<field name="help_keyword_id">32</field>
		<field name="name">FLOAT4</field>
	</row>
	<row>
		<field name="help_keyword_id">33</field>
		<field name="name">FLOAT8</field>
	</row>
	<row>
		<field name="help_keyword_id">103</field>
		<field name="name">FLOOR</field>
	</row>
	<row>
		<field name="help_keyword_id">973</field>
		<field name="name">FLUSH</field>
	</row>
	<row>
		<field name="help_keyword_id">566</field>
		<field name="name">FOR</field>
	</row>
	<row>
		<field name="help_keyword_id">741</field>
		<field name="name">FORCE</field>
	</row>
	<row>
		<field name="help_keyword_id">603</field>
		<field name="name">FOREIGN</field>
	</row>
	<row>
		<field name="help_keyword_id">196</field>
		<field name="name">FORMAT</field>
	</row>
	<row>
		<field name="help_keyword_id">495</field>
		<field name="name">FORMAT_BYTES</field>
	</row>
	<row>
		<field name="help_keyword_id">496</field>
		<field name="name">FORMAT_PICO_TIME</field>
	</row>
	<row>
		<field name="help_keyword_id">296</field>
		<field name="name">FOUND_ROWS</field>
	</row>
	<row>
		<field name="help_keyword_id">231</field>
		<field name="name">FROM</field>
	</row>
	<row>
		<field name="help_keyword_id">197</field>
		<field name="name">FROM_BASE64</field>
	</row>
	<row>
		<field name="help_keyword_id">150</field>
		<field name="name">FROM_DAYS</field>
	</row>
	<row>
		<field name="help_keyword_id">151</field>
		<field name="name">FROM_UNIXTIME</field>
	</row>
	<row>
		<field name="help_keyword_id">668</field>
		<field name="name">FULL</field>
	</row>
	<row>
		<field name="help_keyword_id">604</field>
		<field name="name">FULLTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">169</field>
		<field name="name">FUNCTION</field>
	</row>
	<row>
		<field name="help_keyword_id">974</field>
		<field name="name">GENERAL</field>
	</row>
	<row>
		<field name="help_keyword_id">336</field>
		<field name="name">GEOMCOLLECTION</field>
	</row>
	<row>
		<field name="help_keyword_id">337</field>
		<field name="name">GEOMETRYCOLLECTION</field>
	</row>
	<row>
		<field name="help_keyword_id">870</field>
		<field name="name">GET</field>
	</row>
	<row>
		<field name="help_keyword_id">504</field>
		<field name="name">GET_DD_COLUMN_PRIVILEGES</field>
	</row>
	<row>
		<field name="help_keyword_id">505</field>
		<field name="name">GET_DD_CREATE_OPTIONS</field>
	</row>
	<row>
		<field name="help_keyword_id">506</field>
		<field name="name">GET_DD_INDEX_SUB_PART_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">152</field>
		<field name="name">GET_FORMAT</field>
	</row>
	<row>
		<field name="help_keyword_id">283</field>
		<field name="name">GET_LOCK</field>
	</row>
	<row>
		<field name="help_keyword_id">761</field>
		<field name="name">GLOBAL</field>
	</row>
	<row>
		<field name="help_keyword_id">918</field>
		<field name="name">GRANT</field>
	</row>
	<row>
		<field name="help_keyword_id">952</field>
		<field name="name">GRANTS</field>
	</row>
	<row>
		<field name="help_keyword_id">66</field>
		<field name="name">GREATEST</field>
	</row>
	<row>
		<field name="help_keyword_id">576</field>
		<field name="name">GROUP</field>
	</row>
	<row>
		<field name="help_keyword_id">530</field>
		<field name="name">GROUPING</field>
	</row>
	<row>
		<field name="help_keyword_id">469</field>
		<field name="name">GROUP_CONCAT</field>
	</row>
	<row>
		<field name="help_keyword_id">454</field>
		<field name="name">GTID_SUBSET</field>
	</row>
	<row>
		<field name="help_keyword_id">455</field>
		<field name="name">GTID_SUBTRACT</field>
	</row>
	<row>
		<field name="help_keyword_id">698</field>
		<field name="name">HANDLER</field>
	</row>
	<row>
		<field name="help_keyword_id">727</field>
		<field name="name">HAVING</field>
	</row>
	<row>
		<field name="help_keyword_id">669</field>
		<field name="name">HEAP</field>
	</row>
	<row>
		<field name="help_keyword_id">5</field>
		<field name="name">HELP</field>
	</row>
	<row>
		<field name="help_keyword_id">0</field>
		<field name="name">HELP_DATE</field>
	</row>
	<row>
		<field name="help_keyword_id">1</field>
		<field name="name">HELP_VERSION</field>
	</row>
	<row>
		<field name="help_keyword_id">198</field>
		<field name="name">HEX</field>
	</row>
	<row>
		<field name="help_keyword_id">705</field>
		<field name="name">HIGH_PRIORITY</field>
	</row>
	<row>
		<field name="help_keyword_id">890</field>
		<field name="name">HISTORY</field>
	</row>
	<row>
		<field name="help_keyword_id">648</field>
		<field name="name">HOST</field>
	</row>
	<row>
		<field name="help_keyword_id">953</field>
		<field name="name">HOSTS</field>
	</row>
	<row>
		<field name="help_keyword_id">135</field>
		<field name="name">HOUR</field>
	</row>
	<row>
		<field name="help_keyword_id">136</field>
		<field name="name">HOUR_MINUTE</field>
	</row>
	<row>
		<field name="help_keyword_id">137</field>
		<field name="name">HOUR_SECOND</field>
	</row>
	<row>
		<field name="help_keyword_id">297</field>
		<field name="name">ICU_VERSION</field>
	</row>
	<row>
		<field name="help_keyword_id">722</field>
		<field name="name">IDENTIFIED</field>
	</row>
	<row>
		<field name="help_keyword_id">81</field>
		<field name="name">IF</field>
	</row>
	<row>
		<field name="help_keyword_id">82</field>
		<field name="name">IFNULL</field>
	</row>
	<row>
		<field name="help_keyword_id">706</field>
		<field name="name">IGNORE</field>
	</row>
	<row>
		<field name="help_keyword_id">777</field>
		<field name="name">IGNORE_SERVER_IDS</field>
	</row>
	<row>
		<field name="help_keyword_id">605</field>
		<field name="name">IMPORT</field>
	</row>
	<row>
		<field name="help_keyword_id">67</field>
		<field name="name">IN</field>
	</row>
	<row>
		<field name="help_keyword_id">52</field>
		<field name="name">INDEX</field>
	</row>
	<row>
		<field name="help_keyword_id">954</field>
		<field name="name">INDEXES</field>
	</row>
	<row>
		<field name="help_keyword_id">533</field>
		<field name="name">INET6_ATON</field>
	</row>
	<row>
		<field name="help_keyword_id">534</field>
		<field name="name">INET6_NTOA</field>
	</row>
	<row>
		<field name="help_keyword_id">531</field>
		<field name="name">INET_ATON</field>
	</row>
	<row>
		<field name="help_keyword_id">532</field>
		<field name="name">INET_NTOA</field>
	</row>
	<row>
		<field name="help_keyword_id">715</field>
		<field name="name">INFILE</field>
	</row>
	<row>
		<field name="help_keyword_id">914</field>
		<field name="name">INITIAL</field>
	</row>
	<row>
		<field name="help_keyword_id">637</field>
		<field name="name">INITIAL_SIZE</field>
	</row>
	<row>
		<field name="help_keyword_id">891</field>
		<field name="name">INITIATE</field>
	</row>
	<row>
		<field name="help_keyword_id">426</field>
		<field name="name">INLINE</field>
	</row>
	<row>
		<field name="help_keyword_id">742</field>
		<field name="name">INNER</field>
	</row>
	<row>
		<field name="help_keyword_id">567</field>
		<field name="name">INNODB</field>
	</row>
	<row>
		<field name="help_keyword_id">199</field>
		<field name="name">INSERT</field>
	</row>
	<row>
		<field name="help_keyword_id">606</field>
		<field name="name">INSERT_METHOD</field>
	</row>
	<row>
		<field name="help_keyword_id">941</field>
		<field name="name">INSTALL</field>
	</row>
	<row>
		<field name="help_keyword_id">568</field>
		<field name="name">INSTANCE</field>
	</row>
	<row>
		<field name="help_keyword_id">200</field>
		<field name="name">INSTR</field>
	</row>
	<row>
		<field name="help_keyword_id">19</field>
		<field name="name">INT1</field>
	</row>
	<row>
		<field name="help_keyword_id">22</field>
		<field name="name">INT2</field>
	</row>
	<row>
		<field name="help_keyword_id">23</field>
		<field name="name">INT3</field>
	</row>
	<row>
		<field name="help_keyword_id">25</field>
		<field name="name">INT4</field>
	</row>
	<row>
		<field name="help_keyword_id">27</field>
		<field name="name">INT8</field>
	</row>
	<row>
		<field name="help_keyword_id">26</field>
		<field name="name">INTEGER</field>
	</row>
	<row>
		<field name="help_keyword_id">507</field>
		<field name="name">INTERNAL_AUTO_INCREMENT</field>
	</row>
	<row>
		<field name="help_keyword_id">508</field>
		<field name="name">INTERNAL_AVG_ROW_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">510</field>
		<field name="name">INTERNAL_CHECKSUM</field>
	</row>
	<row>
		<field name="help_keyword_id">509</field>
		<field name="name">INTERNAL_CHECK_TIME</field>
	</row>
	<row>
		<field name="help_keyword_id">511</field>
		<field name="name">INTERNAL_DATA_FREE</field>
	</row>
	<row>
		<field name="help_keyword_id">512</field>
		<field name="name">INTERNAL_DATA_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">513</field>
		<field name="name">INTERNAL_DD_CHAR_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">514</field>
		<field name="name">INTERNAL_GET_COMMENT_OR_ERROR</field>
	</row>
	<row>
		<field name="help_keyword_id">515</field>
		<field name="name">INTERNAL_GET_ENABLED_ROLE_JSON</field>
	</row>
	<row>
		<field name="help_keyword_id">516</field>
		<field name="name">INTERNAL_GET_HOSTNAME</field>
	</row>
	<row>
		<field name="help_keyword_id">517</field>
		<field name="name">INTERNAL_GET_USERNAME</field>
	</row>
	<row>
		<field name="help_keyword_id">518</field>
		<field name="name">INTERNAL_GET_VIEW_WARNING_OR_ERROR</field>
	</row>
	<row>
		<field name="help_keyword_id">519</field>
		<field name="name">INTERNAL_INDEX_COLUMN_CARDINALITY</field>
	</row>
	<row>
		<field name="help_keyword_id">520</field>
		<field name="name">INTERNAL_INDEX_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">521</field>
		<field name="name">INTERNAL_IS_ENABLED_ROLE</field>
	</row>
	<row>
		<field name="help_keyword_id">522</field>
		<field name="name">INTERNAL_IS_MANDATORY_ROLE</field>
	</row>
	<row>
		<field name="help_keyword_id">523</field>
		<field name="name">INTERNAL_KEYS_DISABLED</field>
	</row>
	<row>
		<field name="help_keyword_id">524</field>
		<field name="name">INTERNAL_MAX_DATA_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">525</field>
		<field name="name">INTERNAL_TABLE_ROWS</field>
	</row>
	<row>
		<field name="help_keyword_id">526</field>
		<field name="name">INTERNAL_UPDATE_TIME</field>
	</row>
	<row>
		<field name="help_keyword_id">710</field>
		<field name="name">INTERSECT</field>
	</row>
	<row>
		<field name="help_keyword_id">68</field>
		<field name="name">INTERVAL</field>
	</row>
	<row>
		<field name="help_keyword_id">707</field>
		<field name="name">INTO</field>
	</row>
	<row>
		<field name="help_keyword_id">607</field>
		<field name="name">INVISIBLE</field>
	</row>
	<row>
		<field name="help_keyword_id">840</field>
		<field name="name">IO_THREAD</field>
	</row>
	<row>
		<field name="help_keyword_id">69</field>
		<field name="name">IS</field>
	</row>
	<row>
		<field name="help_keyword_id">71</field>
		<field name="name">ISNULL</field>
	</row>
	<row>
		<field name="help_keyword_id">762</field>
		<field name="name">ISOLATION</field>
	</row>
	<row>
		<field name="help_keyword_id">892</field>
		<field name="name">ISSUER</field>
	</row>
	<row>
		<field name="help_keyword_id">284</field>
		<field name="name">IS_FREE_LOCK</field>
	</row>
	<row>
		<field name="help_keyword_id">535</field>
		<field name="name">IS_IPV4</field>
	</row>
	<row>
		<field name="help_keyword_id">536</field>
		<field name="name">IS_IPV4_COMPAT</field>
	</row>
	<row>
		<field name="help_keyword_id">537</field>
		<field name="name">IS_IPV4_MAPPED</field>
	</row>
	<row>
		<field name="help_keyword_id">538</field>
		<field name="name">IS_IPV6</field>
	</row>
	<row>
		<field name="help_keyword_id">285</field>
		<field name="name">IS_USED_LOCK</field>
	</row>
	<row>
		<field name="help_keyword_id">539</field>
		<field name="name">IS_UUID</field>
	</row>
	<row>
		<field name="help_keyword_id">527</field>
		<field name="name">IS_VISIBLE_DD_OBJECT</field>
	</row>
	<row>
		<field name="help_keyword_id">851</field>
		<field name="name">ITERATE</field>
	</row>
	<row>
		<field name="help_keyword_id">728</field>
		<field name="name">JOIN</field>
	</row>
	<row>
		<field name="help_keyword_id">257</field>
		<field name="name">JSON</field>
	</row>
	<row>
		<field name="help_keyword_id">416</field>
		<field name="name">JSON_ARRAY</field>
	</row>
	<row>
		<field name="help_keyword_id">472</field>
		<field name="name">JSON_ARRAYAGG</field>
	</row>
	<row>
		<field name="help_keyword_id">434</field>
		<field name="name">JSON_ARRAY_APPEND</field>
	</row>
	<row>
		<field name="help_keyword_id">435</field>
		<field name="name">JSON_ARRAY_INSERT</field>
	</row>
	<row>
		<field name="help_keyword_id">419</field>
		<field name="name">JSON_CONTAINS</field>
	</row>
	<row>
		<field name="help_keyword_id">420</field>
		<field name="name">JSON_CONTAINS_PATH</field>
	</row>
	<row>
		<field name="help_keyword_id">444</field>
		<field name="name">JSON_DEPTH</field>
	</row>
	<row>
		<field name="help_keyword_id">421</field>
		<field name="name">JSON_EXTRACT</field>
	</row>
	<row>
		<field name="help_keyword_id">436</field>
		<field name="name">JSON_INSERT</field>
	</row>
	<row>
		<field name="help_keyword_id">428</field>
		<field name="name">JSON_KEYS</field>
	</row>
	<row>
		<field name="help_keyword_id">445</field>
		<field name="name">JSON_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">437</field>
		<field name="name">JSON_MERGE</field>
	</row>
	<row>
		<field name="help_keyword_id">438</field>
		<field name="name">JSON_MERGE_PATCH</field>
	</row>
	<row>
		<field name="help_keyword_id">439</field>
		<field name="name">JSON_MERGE_PRESERVE</field>
	</row>
	<row>
		<field name="help_keyword_id">417</field>
		<field name="name">JSON_OBJECT</field>
	</row>
	<row>
		<field name="help_keyword_id">473</field>
		<field name="name">JSON_OBJECTAGG</field>
	</row>
	<row>
		<field name="help_keyword_id">429</field>
		<field name="name">JSON_OVERLAPS</field>
	</row>
	<row>
		<field name="help_keyword_id">451</field>
		<field name="name">JSON_PRETTY</field>
	</row>
	<row>
		<field name="help_keyword_id">418</field>
		<field name="name">JSON_QUOTE</field>
	</row>
	<row>
		<field name="help_keyword_id">440</field>
		<field name="name">JSON_REMOVE</field>
	</row>
	<row>
		<field name="help_keyword_id">441</field>
		<field name="name">JSON_REPLACE</field>
	</row>
	<row>
		<field name="help_keyword_id">449</field>
		<field name="name">JSON_SCHEMA_VALID</field>
	</row>
	<row>
		<field name="help_keyword_id">450</field>
		<field name="name">JSON_SCHEMA_VALIDATION_REPORT</field>
	</row>
	<row>
		<field name="help_keyword_id">430</field>
		<field name="name">JSON_SEARCH</field>
	</row>
	<row>
		<field name="help_keyword_id">442</field>
		<field name="name">JSON_SET</field>
	</row>
	<row>
		<field name="help_keyword_id">452</field>
		<field name="name">JSON_STORAGE_FREE</field>
	</row>
	<row>
		<field name="help_keyword_id">453</field>
		<field name="name">JSON_STORAGE_SIZE</field>
	</row>
	<row>
		<field name="help_keyword_id">448</field>
		<field name="name">JSON_TABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">446</field>
		<field name="name">JSON_TYPE</field>
	</row>
	<row>
		<field name="help_keyword_id">443</field>
		<field name="name">JSON_UNQUOTE</field>
	</row>
	<row>
		<field name="help_keyword_id">447</field>
		<field name="name">JSON_VALID</field>
	</row>
	<row>
		<field name="help_keyword_id">431</field>
		<field name="name">JSON_VALUE</field>
	</row>
	<row>
		<field name="help_keyword_id">53</field>
		<field name="name">KEY</field>
	</row>
	<row>
		<field name="help_keyword_id">569</field>
		<field name="name">KEYRING</field>
	</row>
	<row>
		<field name="help_keyword_id">608</field>
		<field name="name">KEYS</field>
	</row>
	<row>
		<field name="help_keyword_id">609</field>
		<field name="name">KEY_BLOCK_SIZE</field>
	</row>
	<row>
		<field name="help_keyword_id">979</field>
		<field name="name">KILL</field>
	</row>
	<row>
		<field name="help_keyword_id">487</field>
		<field name="name">LAG</field>
	</row>
	<row>
		<field name="help_keyword_id">699</field>
		<field name="name">LAST</field>
	</row>
	<row>
		<field name="help_keyword_id">153</field>
		<field name="name">LAST_DAY</field>
	</row>
	<row>
		<field name="help_keyword_id">298</field>
		<field name="name">LAST_INSERT_ID</field>
	</row>
	<row>
		<field name="help_keyword_id">488</field>
		<field name="name">LAST_VALUE</field>
	</row>
	<row>
		<field name="help_keyword_id">201</field>
		<field name="name">LCASE</field>
	</row>
	<row>
		<field name="help_keyword_id">489</field>
		<field name="name">LEAD</field>
	</row>
	<row>
		<field name="help_keyword_id">232</field>
		<field name="name">LEADING</field>
	</row>
	<row>
		<field name="help_keyword_id">72</field>
		<field name="name">LEAST</field>
	</row>
	<row>
		<field name="help_keyword_id">852</field>
		<field name="name">LEAVE</field>
	</row>
	<row>
		<field name="help_keyword_id">980</field>
		<field name="name">LEAVES</field>
	</row>
	<row>
		<field name="help_keyword_id">202</field>
		<field name="name">LEFT</field>
	</row>
	<row>
		<field name="help_keyword_id">203</field>
		<field name="name">LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">763</field>
		<field name="name">LEVEL</field>
	</row>
	<row>
		<field name="help_keyword_id">223</field>
		<field name="name">LIKE</field>
	</row>
	<row>
		<field name="help_keyword_id">690</field>
		<field name="name">LIMIT</field>
	</row>
	<row>
		<field name="help_keyword_id">716</field>
		<field name="name">LINES</field>
	</row>
	<row>
		<field name="help_keyword_id">338</field>
		<field name="name">LINESTRING</field>
	</row>
	<row>
		<field name="help_keyword_id">104</field>
		<field name="name">LN</field>
	</row>
	<row>
		<field name="help_keyword_id">717</field>
		<field name="name">LOAD</field>
	</row>
	<row>
		<field name="help_keyword_id">204</field>
		<field name="name">LOAD_FILE</field>
	</row>
	<row>
		<field name="help_keyword_id">718</field>
		<field name="name">LOCAL</field>
	</row>
	<row>
		<field name="help_keyword_id">154</field>
		<field name="name">LOCALTIME</field>
	</row>
	<row>
		<field name="help_keyword_id">155</field>
		<field name="name">LOCALTIMESTAMP</field>
	</row>
	<row>
		<field name="help_keyword_id">205</field>
		<field name="name">LOCATE</field>
	</row>
	<row>
		<field name="help_keyword_id">610</field>
		<field name="name">LOCK</field>
	</row>
	<row>
		<field name="help_keyword_id">105</field>
		<field name="name">LOG</field>
	</row>
	<row>
		<field name="help_keyword_id">107</field>
		<field name="name">LOG10</field>
	</row>
	<row>
		<field name="help_keyword_id">106</field>
		<field name="name">LOG2</field>
	</row>
	<row>
		<field name="help_keyword_id">577</field>
		<field name="name">LOGFILE</field>
	</row>
	<row>
		<field name="help_keyword_id">772</field>
		<field name="name">LOGS</field>
	</row>
	<row>
		<field name="help_keyword_id">47</field>
		<field name="name">LONG</field>
	</row>
	<row>
		<field name="help_keyword_id">48</field>
		<field name="name">LONGBINARY</field>
	</row>
	<row>
		<field name="help_keyword_id">853</field>
		<field name="name">LOOP</field>
	</row>
	<row>
		<field name="help_keyword_id">206</field>
		<field name="name">LOWER</field>
	</row>
	<row>
		<field name="help_keyword_id">691</field>
		<field name="name">LOW_PRIORITY</field>
	</row>
	<row>
		<field name="help_keyword_id">207</field>
		<field name="name">LPAD</field>
	</row>
	<row>
		<field name="help_keyword_id">208</field>
		<field name="name">LTRIM</field>
	</row>
	<row>
		<field name="help_keyword_id">156</field>
		<field name="name">MAKEDATE</field>
	</row>
	<row>
		<field name="help_keyword_id">157</field>
		<field name="name">MAKETIME</field>
	</row>
	<row>
		<field name="help_keyword_id">209</field>
		<field name="name">MAKE_SET</field>
	</row>
	<row>
		<field name="help_keyword_id">570</field>
		<field name="name">MASTER</field>
	</row>
	<row>
		<field name="help_keyword_id">778</field>
		<field name="name">MASTER_AUTO_POSITION</field>
	</row>
	<row>
		<field name="help_keyword_id">779</field>
		<field name="name">MASTER_BIND</field>
	</row>
	<row>
		<field name="help_keyword_id">780</field>
		<field name="name">MASTER_COMPRESSION_ALGORITHMS</field>
	</row>
	<row>
		<field name="help_keyword_id">781</field>
		<field name="name">MASTER_CONNECT_RETRY</field>
	</row>
	<row>
		<field name="help_keyword_id">782</field>
		<field name="name">MASTER_HEARTBEAT_PERIOD</field>
	</row>
	<row>
		<field name="help_keyword_id">783</field>
		<field name="name">MASTER_HOST</field>
	</row>
	<row>
		<field name="help_keyword_id">784</field>
		<field name="name">MASTER_LOG_FILE</field>
	</row>
	<row>
		<field name="help_keyword_id">785</field>
		<field name="name">MASTER_LOG_POS</field>
	</row>
	<row>
		<field name="help_keyword_id">786</field>
		<field name="name">MASTER_PASSWORD</field>
	</row>
	<row>
		<field name="help_keyword_id">787</field>
		<field name="name">MASTER_PORT</field>
	</row>
	<row>
		<field name="help_keyword_id">458</field>
		<field name="name">MASTER_POS_WAIT</field>
	</row>
	<row>
		<field name="help_keyword_id">788</field>
		<field name="name">MASTER_RETRY_COUNT</field>
	</row>
	<row>
		<field name="help_keyword_id">789</field>
		<field name="name">MASTER_SSL</field>
	</row>
	<row>
		<field name="help_keyword_id">790</field>
		<field name="name">MASTER_SSL_CA</field>
	</row>
	<row>
		<field name="help_keyword_id">791</field>
		<field name="name">MASTER_SSL_CERT</field>
	</row>
	<row>
		<field name="help_keyword_id">792</field>
		<field name="name">MASTER_SSL_CIPHER</field>
	</row>
	<row>
		<field name="help_keyword_id">793</field>
		<field name="name">MASTER_SSL_CRL</field>
	</row>
	<row>
		<field name="help_keyword_id">794</field>
		<field name="name">MASTER_SSL_CRLPATH</field>
	</row>
	<row>
		<field name="help_keyword_id">795</field>
		<field name="name">MASTER_SSL_KEY</field>
	</row>
	<row>
		<field name="help_keyword_id">796</field>
		<field name="name">MASTER_SSL_VERIFY_SERVER_CERT</field>
	</row>
	<row>
		<field name="help_keyword_id">797</field>
		<field name="name">MASTER_TLS_CIPHERSUITES</field>
	</row>
	<row>
		<field name="help_keyword_id">798</field>
		<field name="name">MASTER_TLS_VERSION</field>
	</row>
	<row>
		<field name="help_keyword_id">799</field>
		<field name="name">MASTER_USER</field>
	</row>
	<row>
		<field name="help_keyword_id">800</field>
		<field name="name">MASTER_ZSTD_COMPRESSION_LEVEL</field>
	</row>
	<row>
		<field name="help_keyword_id">249</field>
		<field name="name">MATCH</field>
	</row>
	<row>
		<field name="help_keyword_id">474</field>
		<field name="name">MAX</field>
	</row>
	<row>
		<field name="help_keyword_id">893</field>
		<field name="name">MAX_CONNECTIONS_PER_HOUR</field>
	</row>
	<row>
		<field name="help_keyword_id">894</field>
		<field name="name">MAX_QUERIES_PER_HOUR</field>
	</row>
	<row>
		<field name="help_keyword_id">611</field>
		<field name="name">MAX_ROWS</field>
	</row>
	<row>
		<field name="help_keyword_id">684</field>
		<field name="name">MAX_SIZE</field>
	</row>
	<row>
		<field name="help_keyword_id">895</field>
		<field name="name">MAX_UPDATES_PER_HOUR</field>
	</row>
	<row>
		<field name="help_keyword_id">896</field>
		<field name="name">MAX_USER_CONNECTIONS</field>
	</row>
	<row>
		<field name="help_keyword_id">395</field>
		<field name="name">MBRCONTAINS</field>
	</row>
	<row>
		<field name="help_keyword_id">396</field>
		<field name="name">MBRCOVEREDBY</field>
	</row>
	<row>
		<field name="help_keyword_id">397</field>
		<field name="name">MBRCOVERS</field>
	</row>
	<row>
		<field name="help_keyword_id">398</field>
		<field name="name">MBRDISJOINT</field>
	</row>
	<row>
		<field name="help_keyword_id">399</field>
		<field name="name">MBREQUALS</field>
	</row>
	<row>
		<field name="help_keyword_id">400</field>
		<field name="name">MBRINTERSECTS</field>
	</row>
	<row>
		<field name="help_keyword_id">401</field>
		<field name="name">MBROVERLAPS</field>
	</row>
	<row>
		<field name="help_keyword_id">402</field>
		<field name="name">MBRTOUCHES</field>
	</row>
	<row>
		<field name="help_keyword_id">403</field>
		<field name="name">MBRWITHIN</field>
	</row>
	<row>
		<field name="help_keyword_id">273</field>
		<field name="name">MD5</field>
	</row>
	<row>
		<field name="help_keyword_id">933</field>
		<field name="name">MEDIUM</field>
	</row>
	<row>
		<field name="help_keyword_id">432</field>
		<field name="name">MEMBER</field>
	</row>
	<row>
		<field name="help_keyword_id">729</field>
		<field name="name">MEMORY</field>
	</row>
	<row>
		<field name="help_keyword_id">670</field>
		<field name="name">MERGE</field>
	</row>
	<row>
		<field name="help_keyword_id">871</field>
		<field name="name">MESSAGE_TEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">158</field>
		<field name="name">MICROSECOND</field>
	</row>
	<row>
		<field name="help_keyword_id">210</field>
		<field name="name">MID</field>
	</row>
	<row>
		<field name="help_keyword_id">24</field>
		<field name="name">MIDDLEINT</field>
	</row>
	<row>
		<field name="help_keyword_id">475</field>
		<field name="name">MIN</field>
	</row>
	<row>
		<field name="help_keyword_id">138</field>
		<field name="name">MINUTE</field>
	</row>
	<row>
		<field name="help_keyword_id">139</field>
		<field name="name">MINUTE_SECOND</field>
	</row>
	<row>
		<field name="help_keyword_id">612</field>
		<field name="name">MIN_ROWS</field>
	</row>
	<row>
		<field name="help_keyword_id">89</field>
		<field name="name">MOD</field>
	</row>
	<row>
		<field name="help_keyword_id">250</field>
		<field name="name">MODE</field>
	</row>
	<row>
		<field name="help_keyword_id">613</field>
		<field name="name">MODIFY</field>
	</row>
	<row>
		<field name="help_keyword_id">140</field>
		<field name="name">MONTH</field>
	</row>
	<row>
		<field name="help_keyword_id">159</field>
		<field name="name">MONTHNAME</field>
	</row>
	<row>
		<field name="help_keyword_id">671</field>
		<field name="name">MRG_MYISAM</field>
	</row>
	<row>
		<field name="help_keyword_id">339</field>
		<field name="name">MULTILINESTRING</field>
	</row>
	<row>
		<field name="help_keyword_id">340</field>
		<field name="name">MULTIPOINT</field>
	</row>
	<row>
		<field name="help_keyword_id">341</field>
		<field name="name">MULTIPOLYGON</field>
	</row>
	<row>
		<field name="help_keyword_id">955</field>
		<field name="name">MUTEX</field>
	</row>
	<row>
		<field name="help_keyword_id">672</field>
		<field name="name">MYISAM</field>
	</row>
	<row>
		<field name="help_keyword_id">872</field>
		<field name="name">MYSQL_ERRNO</field>
	</row>
	<row>
		<field name="help_keyword_id">655</field>
		<field name="name">NAME</field>
	</row>
	<row>
		<field name="help_keyword_id">948</field>
		<field name="name">NAMES</field>
	</row>
	<row>
		<field name="help_keyword_id">540</field>
		<field name="name">NAME_CONST</field>
	</row>
	<row>
		<field name="help_keyword_id">40</field>
		<field name="name">NATIONAL</field>
	</row>
	<row>
		<field name="help_keyword_id">743</field>
		<field name="name">NATURAL</field>
	</row>
	<row>
		<field name="help_keyword_id">41</field>
		<field name="name">NCHAR</field>
	</row>
	<row>
		<field name="help_keyword_id">673</field>
		<field name="name">NDB</field>
	</row>
	<row>
		<field name="help_keyword_id">674</field>
		<field name="name">NDBCLUSTER</field>
	</row>
	<row>
		<field name="help_keyword_id">801</field>
		<field name="name">NETWORK_NAMESPACE</field>
	</row>
	<row>
		<field name="help_keyword_id">897</field>
		<field name="name">NEVER</field>
	</row>
	<row>
		<field name="help_keyword_id">700</field>
		<field name="name">NEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">571</field>
		<field name="name">NO</field>
	</row>
	<row>
		<field name="help_keyword_id">685</field>
		<field name="name">NODEGROUP</field>
	</row>
	<row>
		<field name="help_keyword_id">898</field>
		<field name="name">NONE</field>
	</row>
	<row>
		<field name="help_keyword_id">64</field>
		<field name="name">NOT</field>
	</row>
	<row>
		<field name="help_keyword_id">160</field>
		<field name="name">NOW</field>
	</row>
	<row>
		<field name="help_keyword_id">931</field>
		<field name="name">NO_WRITE_TO_BINLOG</field>
	</row>
	<row>
		<field name="help_keyword_id">490</field>
		<field name="name">NTH_VALUE</field>
	</row>
	<row>
		<field name="help_keyword_id">491</field>
		<field name="name">NTILE</field>
	</row>
	<row>
		<field name="help_keyword_id">70</field>
		<field name="name">NULL</field>
	</row>
	<row>
		<field name="help_keyword_id">83</field>
		<field name="name">NULLIF</field>
	</row>
	<row>
		<field name="help_keyword_id">873</field>
		<field name="name">NUMBER</field>
	</row>
	<row>
		<field name="help_keyword_id">30</field>
		<field name="name">NUMERIC</field>
	</row>
	<row>
		<field name="help_keyword_id">44</field>
		<field name="name">NVARCHAR</field>
	</row>
	<row>
		<field name="help_keyword_id">211</field>
		<field name="name">OCT</field>
	</row>
	<row>
		<field name="help_keyword_id">212</field>
		<field name="name">OCTET_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">433</field>
		<field name="name">OF</field>
	</row>
	<row>
		<field name="help_keyword_id">730</field>
		<field name="name">OFFSET</field>
	</row>
	<row>
		<field name="help_keyword_id">899</field>
		<field name="name">OLD</field>
	</row>
	<row>
		<field name="help_keyword_id">558</field>
		<field name="name">ON</field>
	</row>
	<row>
		<field name="help_keyword_id">548</field>
		<field name="name">ONLY</field>
	</row>
	<row>
		<field name="help_keyword_id">701</field>
		<field name="name">OPEN</field>
	</row>
	<row>
		<field name="help_keyword_id">614</field>
		<field name="name">OPTIMIZE</field>
	</row>
	<row>
		<field name="help_keyword_id">975</field>
		<field name="name">OPTIMIZER_COSTS</field>
	</row>
	<row>
		<field name="help_keyword_id">919</field>
		<field name="name">OPTION</field>
	</row>
	<row>
		<field name="help_keyword_id">900</field>
		<field name="name">OPTIONAL</field>
	</row>
	<row>
		<field name="help_keyword_id">719</field>
		<field name="name">OPTIONALLY</field>
	</row>
	<row>
		<field name="help_keyword_id">579</field>
		<field name="name">OPTIONS</field>
	</row>
	<row>
		<field name="help_keyword_id">73</field>
		<field name="name">OR</field>
	</row>
	<row>
		<field name="help_keyword_id">213</field>
		<field name="name">ORD</field>
	</row>
	<row>
		<field name="help_keyword_id">470</field>
		<field name="name">ORDER</field>
	</row>
	<row>
		<field name="help_keyword_id">656</field>
		<field name="name">ORGANIZATION</field>
	</row>
	<row>
		<field name="help_keyword_id">744</field>
		<field name="name">OUTER</field>
	</row>
	<row>
		<field name="help_keyword_id">731</field>
		<field name="name">OUTFILE</field>
	</row>
	<row>
		<field name="help_keyword_id">649</field>
		<field name="name">OWNER</field>
	</row>
	<row>
		<field name="help_keyword_id">615</field>
		<field name="name">PACK_KEYS</field>
	</row>
	<row>
		<field name="help_keyword_id">616</field>
		<field name="name">PARSER</field>
	</row>
	<row>
		<field name="help_keyword_id">675</field>
		<field name="name">PARTIAL</field>
	</row>
	<row>
		<field name="help_keyword_id">617</field>
		<field name="name">PARTITION</field>
	</row>
	<row>
		<field name="help_keyword_id">618</field>
		<field name="name">PARTITIONING</field>
	</row>
	<row>
		<field name="help_keyword_id">619</field>
		<field name="name">PASSWORD</field>
	</row>
	<row>
		<field name="help_keyword_id">901</field>
		<field name="name">PASSWORD_LOCK_TIME</field>
	</row>
	<row>
		<field name="help_keyword_id">427</field>
		<field name="name">PATH)</field>
	</row>
	<row>
		<field name="help_keyword_id">492</field>
		<field name="name">PERCENT_RANK</field>
	</row>
	<row>
		<field name="help_keyword_id">161</field>
		<field name="name">PERIOD_ADD</field>
	</row>
	<row>
		<field name="help_keyword_id">162</field>
		<field name="name">PERIOD_DIFF</field>
	</row>
	<row>
		<field name="help_keyword_id">945</field>
		<field name="name">PERSIST</field>
	</row>
	<row>
		<field name="help_keyword_id">946</field>
		<field name="name">PERSIST_ONLY</field>
	</row>
	<row>
		<field name="help_keyword_id">109</field>
		<field name="name">PI</field>
	</row>
	<row>
		<field name="help_keyword_id">942</field>
		<field name="name">PLUGIN</field>
	</row>
	<row>
		<field name="help_keyword_id">966</field>
		<field name="name">PLUGINS</field>
	</row>
	<row>
		<field name="help_keyword_id">841</field>
		<field name="name">PLUGIN_DIR</field>
	</row>
	<row>
		<field name="help_keyword_id">342</field>
		<field name="name">POINT</field>
	</row>
	<row>
		<field name="help_keyword_id">343</field>
		<field name="name">POLYGON</field>
	</row>
	<row>
		<field name="help_keyword_id">650</field>
		<field name="name">PORT</field>
	</row>
	<row>
		<field name="help_keyword_id">214</field>
		<field name="name">POSITION</field>
	</row>
	<row>
		<field name="help_keyword_id">110</field>
		<field name="name">POW</field>
	</row>
	<row>
		<field name="help_keyword_id">111</field>
		<field name="name">POWER</field>
	</row>
	<row>
		<field name="help_keyword_id">34</field>
		<field name="name">PRECISION</field>
	</row>
	<row>
		<field name="help_keyword_id">768</field>
		<field name="name">PREPARE</field>
	</row>
	<row>
		<field name="help_keyword_id">559</field>
		<field name="name">PRESERVE</field>
	</row>
	<row>
		<field name="help_keyword_id">702</field>
		<field name="name">PREV</field>
	</row>
	<row>
		<field name="help_keyword_id">620</field>
		<field name="name">PRIMARY</field>
	</row>
	<row>
		<field name="help_keyword_id">920</field>
		<field name="name">PRIVILEGES</field>
	</row>
	<row>
		<field name="help_keyword_id">802</field>
		<field name="name">PRIVILEGE_CHECKS_USER</field>
	</row>
	<row>
		<field name="help_keyword_id">578</field>
		<field name="name">PROCEDURE</field>
	</row>
	<row>
		<field name="help_keyword_id">921</field>
		<field name="name">PROCESS</field>
	</row>
	<row>
		<field name="help_keyword_id">956</field>
		<field name="name">PROCESSLIST</field>
	</row>
	<row>
		<field name="help_keyword_id">967</field>
		<field name="name">PROFILE</field>
	</row>
	<row>
		<field name="help_keyword_id">968</field>
		<field name="name">PROFILES</field>
	</row>
	<row>
		<field name="help_keyword_id">925</field>
		<field name="name">PROXY</field>
	</row>
	<row>
		<field name="help_keyword_id">497</field>
		<field name="name">PS_CURRENT_THREAD_ID</field>
	</row>
	<row>
		<field name="help_keyword_id">498</field>
		<field name="name">PS_THREAD_ID</field>
	</row>
	<row>
		<field name="help_keyword_id">773</field>
		<field name="name">PURGE</field>
	</row>
	<row>
		<field name="help_keyword_id">163</field>
		<field name="name">QUARTER</field>
	</row>
	<row>
		<field name="help_keyword_id">251</field>
		<field name="name">QUERY</field>
	</row>
	<row>
		<field name="help_keyword_id">692</field>
		<field name="name">QUICK</field>
	</row>
	<row>
		<field name="help_keyword_id">215</field>
		<field name="name">QUOTE</field>
	</row>
	<row>
		<field name="help_keyword_id">112</field>
		<field name="name">RADIANS</field>
	</row>
	<row>
		<field name="help_keyword_id">113</field>
		<field name="name">RAND</field>
	</row>
	<row>
		<field name="help_keyword_id">902</field>
		<field name="name">RANDOM</field>
	</row>
	<row>
		<field name="help_keyword_id">274</field>
		<field name="name">RANDOM_BYTES</field>
	</row>
	<row>
		<field name="help_keyword_id">493</field>
		<field name="name">RANK</field>
	</row>
	<row>
		<field name="help_keyword_id">549</field>
		<field name="name">READ</field>
	</row>
	<row>
		<field name="help_keyword_id">35</field>
		<field name="name">REAL</field>
	</row>
	<row>
		<field name="help_keyword_id">621</field>
		<field name="name">REBUILD</field>
	</row>
	<row>
		<field name="help_keyword_id">769</field>
		<field name="name">RECOVER</field>
	</row>
	<row>
		<field name="help_keyword_id">572</field>
		<field name="name">REDO_LOG</field>
	</row>
	<row>
		<field name="help_keyword_id">676</field>
		<field name="name">REDUNDANT</field>
	</row>
	<row>
		<field name="help_keyword_id">657</field>
		<field name="name">REFERENCE</field>
	</row>
	<row>
		<field name="help_keyword_id">677</field>
		<field name="name">REFERENCES</field>
	</row>
	<row>
		<field name="help_keyword_id">241</field>
		<field name="name">REGEXP</field>
	</row>
	<row>
		<field name="help_keyword_id">243</field>
		<field name="name">REGEXP_INSTR</field>
	</row>
	<row>
		<field name="help_keyword_id">244</field>
		<field name="name">REGEXP_LIKE</field>
	</row>
	<row>
		<field name="help_keyword_id">245</field>
		<field name="name">REGEXP_REPLACE</field>
	</row>
	<row>
		<field name="help_keyword_id">246</field>
		<field name="name">REGEXP_SUBSTR</field>
	</row>
	<row>
		<field name="help_keyword_id">903</field>
		<field name="name">REGISTRATION</field>
	</row>
	<row>
		<field name="help_keyword_id">976</field>
		<field name="name">RELAY</field>
	</row>
	<row>
		<field name="help_keyword_id">969</field>
		<field name="name">RELAYLOG</field>
	</row>
	<row>
		<field name="help_keyword_id">803</field>
		<field name="name">RELAY_LOG_FILE</field>
	</row>
	<row>
		<field name="help_keyword_id">804</field>
		<field name="name">RELAY_LOG_POS</field>
	</row>
	<row>
		<field name="help_keyword_id">750</field>
		<field name="name">RELEASE</field>
	</row>
	<row>
		<field name="help_keyword_id">286</field>
		<field name="name">RELEASE_ALL_LOCKS</field>
	</row>
	<row>
		<field name="help_keyword_id">287</field>
		<field name="name">RELEASE_LOCK</field>
	</row>
	<row>
		<field name="help_keyword_id">573</field>
		<field name="name">RELOAD</field>
	</row>
	<row>
		<field name="help_keyword_id">622</field>
		<field name="name">REMOVE</field>
	</row>
	<row>
		<field name="help_keyword_id">560</field>
		<field name="name">RENAME</field>
	</row>
	<row>
		<field name="help_keyword_id">623</field>
		<field name="name">REORGANIZE</field>
	</row>
	<row>
		<field name="help_keyword_id">624</field>
		<field name="name">REPAIR</field>
	</row>
	<row>
		<field name="help_keyword_id">216</field>
		<field name="name">REPEAT</field>
	</row>
	<row>
		<field name="help_keyword_id">764</field>
		<field name="name">REPEATABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">217</field>
		<field name="name">REPLACE</field>
	</row>
	<row>
		<field name="help_keyword_id">838</field>
		<field name="name">REPLICA</field>
	</row>
	<row>
		<field name="help_keyword_id">970</field>
		<field name="name">REPLICAS</field>
	</row>
	<row>
		<field name="help_keyword_id">806</field>
		<field name="name">REPLICATE_DO_DB</field>
	</row>
	<row>
		<field name="help_keyword_id">807</field>
		<field name="name">REPLICATE_DO_TABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">808</field>
		<field name="name">REPLICATE_IGNORE_DB</field>
	</row>
	<row>
		<field name="help_keyword_id">809</field>
		<field name="name">REPLICATE_IGNORE_TABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">810</field>
		<field name="name">REPLICATE_REWRITE_DB</field>
	</row>
	<row>
		<field name="help_keyword_id">811</field>
		<field name="name">REPLICATE_WILD_DO_TABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">812</field>
		<field name="name">REPLICATE_WILD_IGNORE_TABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">813</field>
		<field name="name">REPLICATION</field>
	</row>
	<row>
		<field name="help_keyword_id">904</field>
		<field name="name">REQUIRE</field>
	</row>
	<row>
		<field name="help_keyword_id">774</field>
		<field name="name">RESET</field>
	</row>
	<row>
		<field name="help_keyword_id">878</field>
		<field name="name">RESIGNAL</field>
	</row>
	<row>
		<field name="help_keyword_id">928</field>
		<field name="name">RESOURCE</field>
	</row>
	<row>
		<field name="help_keyword_id">981</field>
		<field name="name">RESTART</field>
	</row>
	<row>
		<field name="help_keyword_id">680</field>
		<field name="name">RESTRICT</field>
	</row>
	<row>
		<field name="help_keyword_id">905</field>
		<field name="name">RETAIN</field>
	</row>
	<row>
		<field name="help_keyword_id">855</field>
		<field name="name">RETURN</field>
	</row>
	<row>
		<field name="help_keyword_id">874</field>
		<field name="name">RETURNED_SQLSTATE</field>
	</row>
	<row>
		<field name="help_keyword_id">937</field>
		<field name="name">RETURNS</field>
	</row>
	<row>
		<field name="help_keyword_id">906</field>
		<field name="name">REUSE</field>
	</row>
	<row>
		<field name="help_keyword_id">218</field>
		<field name="name">REVERSE</field>
	</row>
	<row>
		<field name="help_keyword_id">926</field>
		<field name="name">REVOKE</field>
	</row>
	<row>
		<field name="help_keyword_id">219</field>
		<field name="name">RIGHT</field>
	</row>
	<row>
		<field name="help_keyword_id">242</field>
		<field name="name">RLIKE</field>
	</row>
	<row>
		<field name="help_keyword_id">907</field>
		<field name="name">ROLE</field>
	</row>
	<row>
		<field name="help_keyword_id">299</field>
		<field name="name">ROLES_GRAPHML</field>
	</row>
	<row>
		<field name="help_keyword_id">574</field>
		<field name="name">ROLLBACK</field>
	</row>
	<row>
		<field name="help_keyword_id">114</field>
		<field name="name">ROUND</field>
	</row>
	<row>
		<field name="help_keyword_id">708</field>
		<field name="name">ROW</field>
	</row>
	<row>
		<field name="help_keyword_id">723</field>
		<field name="name">ROWS</field>
	</row>
	<row>
		<field name="help_keyword_id">300</field>
		<field name="name">ROW_COUNT</field>
	</row>
	<row>
		<field name="help_keyword_id">625</field>
		<field name="name">ROW_FORMAT</field>
	</row>
	<row>
		<field name="help_keyword_id">494</field>
		<field name="name">ROW_NUMBER</field>
	</row>
	<row>
		<field name="help_keyword_id">220</field>
		<field name="name">RPAD</field>
	</row>
	<row>
		<field name="help_keyword_id">221</field>
		<field name="name">RTRIM</field>
	</row>
	<row>
		<field name="help_keyword_id">756</field>
		<field name="name">SAVEPOINT</field>
	</row>
	<row>
		<field name="help_keyword_id">561</field>
		<field name="name">SCHEDULE</field>
	</row>
	<row>
		<field name="help_keyword_id">301</field>
		<field name="name">SCHEMA</field>
	</row>
	<row>
		<field name="help_keyword_id">957</field>
		<field name="name">SCHEMAS</field>
	</row>
	<row>
		<field name="help_keyword_id">875</field>
		<field name="name">SCHEMA_NAME</field>
	</row>
	<row>
		<field name="help_keyword_id">141</field>
		<field name="name">SECOND</field>
	</row>
	<row>
		<field name="help_keyword_id">164</field>
		<field name="name">SEC_TO_TIME</field>
	</row>
	<row>
		<field name="help_keyword_id">709</field>
		<field name="name">SELECT</field>
	</row>
	<row>
		<field name="help_keyword_id">471</field>
		<field name="name">SEPARATOR</field>
	</row>
	<row>
		<field name="help_keyword_id">3</field>
		<field name="name">SERIAL</field>
	</row>
	<row>
		<field name="help_keyword_id">765</field>
		<field name="name">SERIALIZABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">580</field>
		<field name="name">SERVER</field>
	</row>
	<row>
		<field name="help_keyword_id">766</field>
		<field name="name">SESSION</field>
	</row>
	<row>
		<field name="help_keyword_id">302</field>
		<field name="name">SESSION_USER</field>
	</row>
	<row>
		<field name="help_keyword_id">550</field>
		<field name="name">SET</field>
	</row>
	<row>
		<field name="help_keyword_id">275</field>
		<field name="name">SHA</field>
	</row>
	<row>
		<field name="help_keyword_id">276</field>
		<field name="name">SHA1</field>
	</row>
	<row>
		<field name="help_keyword_id">277</field>
		<field name="name">SHA2</field>
	</row>
	<row>
		<field name="help_keyword_id">732</field>
		<field name="name">SHARE</field>
	</row>
	<row>
		<field name="help_keyword_id">958</field>
		<field name="name">SHOW</field>
	</row>
	<row>
		<field name="help_keyword_id">922</field>
		<field name="name">SHUTDOWN</field>
	</row>
	<row>
		<field name="help_keyword_id">115</field>
		<field name="name">SIGN</field>
	</row>
	<row>
		<field name="help_keyword_id">880</field>
		<field name="name">SIGNAL</field>
	</row>
	<row>
		<field name="help_keyword_id">258</field>
		<field name="name">SIGNED</field>
	</row>
	<row>
		<field name="help_keyword_id">116</field>
		<field name="name">SIN</field>
	</row>
	<row>
		<field name="help_keyword_id">562</field>
		<field name="name">SLAVE</field>
	</row>
	<row>
		<field name="help_keyword_id">541</field>
		<field name="name">SLEEP</field>
	</row>
	<row>
		<field name="help_keyword_id">977</field>
		<field name="name">SLOW</field>
	</row>
	<row>
		<field name="help_keyword_id">751</field>
		<field name="name">SNAPSHOT</field>
	</row>
	<row>
		<field name="help_keyword_id">651</field>
		<field name="name">SOCKET</field>
	</row>
	<row>
		<field name="help_keyword_id">938</field>
		<field name="name">SONAME</field>
	</row>
	<row>
		<field name="help_keyword_id">222</field>
		<field name="name">SOUNDEX</field>
	</row>
	<row>
		<field name="help_keyword_id">224</field>
		<field name="name">SOUNDS</field>
	</row>
	<row>
		<field name="help_keyword_id">814</field>
		<field name="name">SOURCE</field>
	</row>
	<row>
		<field name="help_keyword_id">815</field>
		<field name="name">SOURCE_AUTO_POSITION</field>
	</row>
	<row>
		<field name="help_keyword_id">816</field>
		<field name="name">SOURCE_BIND</field>
	</row>
	<row>
		<field name="help_keyword_id">817</field>
		<field name="name">SOURCE_COMPRESSION_ALGORITHMS</field>
	</row>
	<row>
		<field name="help_keyword_id">818</field>
		<field name="name">SOURCE_CONNECT_RETRY</field>
	</row>
	<row>
		<field name="help_keyword_id">819</field>
		<field name="name">SOURCE_HEARTBEAT_PERIOD</field>
	</row>
	<row>
		<field name="help_keyword_id">820</field>
		<field name="name">SOURCE_HOST</field>
	</row>
	<row>
		<field name="help_keyword_id">821</field>
		<field name="name">SOURCE_LOG_FILE</field>
	</row>
	<row>
		<field name="help_keyword_id">822</field>
		<field name="name">SOURCE_LOG_POS</field>
	</row>
	<row>
		<field name="help_keyword_id">823</field>
		<field name="name">SOURCE_PASSWORD</field>
	</row>
	<row>
		<field name="help_keyword_id">824</field>
		<field name="name">SOURCE_PORT</field>
	</row>
	<row>
		<field name="help_keyword_id">459</field>
		<field name="name">SOURCE_POS_WAIT</field>
	</row>
	<row>
		<field name="help_keyword_id">825</field>
		<field name="name">SOURCE_RETRY_COUNT</field>
	</row>
	<row>
		<field name="help_keyword_id">826</field>
		<field name="name">SOURCE_SSL</field>
	</row>
	<row>
		<field name="help_keyword_id">827</field>
		<field name="name">SOURCE_SSL_CA</field>
	</row>
	<row>
		<field name="help_keyword_id">828</field>
		<field name="name">SOURCE_SSL_CERT</field>
	</row>
	<row>
		<field name="help_keyword_id">829</field>
		<field name="name">SOURCE_SSL_CIPHER</field>
	</row>
	<row>
		<field name="help_keyword_id">830</field>
		<field name="name">SOURCE_SSL_CRL</field>
	</row>
	<row>
		<field name="help_keyword_id">831</field>
		<field name="name">SOURCE_SSL_CRLPATH</field>
	</row>
	<row>
		<field name="help_keyword_id">832</field>
		<field name="name">SOURCE_SSL_KEY</field>
	</row>
	<row>
		<field name="help_keyword_id">833</field>
		<field name="name">SOURCE_SSL_VERIFY_SERVER_CERT</field>
	</row>
	<row>
		<field name="help_keyword_id">834</field>
		<field name="name">SOURCE_TLS_CIPHERSUITES</field>
	</row>
	<row>
		<field name="help_keyword_id">835</field>
		<field name="name">SOURCE_TLS_VERSION</field>
	</row>
	<row>
		<field name="help_keyword_id">836</field>
		<field name="name">SOURCE_USER</field>
	</row>
	<row>
		<field name="help_keyword_id">837</field>
		<field name="name">SOURCE_ZSTD_COMPRESSION_LEVEL</field>
	</row>
	<row>
		<field name="help_keyword_id">225</field>
		<field name="name">SPACE</field>
	</row>
	<row>
		<field name="help_keyword_id">626</field>
		<field name="name">SPATIAL</field>
	</row>
	<row>
		<field name="help_keyword_id">879</field>
		<field name="name">SQLSTATE</field>
	</row>
	<row>
		<field name="help_keyword_id">842</field>
		<field name="name">SQL_AFTER_GTIDS</field>
	</row>
	<row>
		<field name="help_keyword_id">843</field>
		<field name="name">SQL_AFTER_MTS_GAPS</field>
	</row>
	<row>
		<field name="help_keyword_id">844</field>
		<field name="name">SQL_BEFORE_GTIDS</field>
	</row>
	<row>
		<field name="help_keyword_id">733</field>
		<field name="name">SQL_BIG_RESULT</field>
	</row>
	<row>
		<field name="help_keyword_id">734</field>
		<field name="name">SQL_BUFFER_RESULT</field>
	</row>
	<row>
		<field name="help_keyword_id">735</field>
		<field name="name">SQL_CALC_FOUND_ROWS</field>
	</row>
	<row>
		<field name="help_keyword_id">775</field>
		<field name="name">SQL_LOG_BIN</field>
	</row>
	<row>
		<field name="help_keyword_id">736</field>
		<field name="name">SQL_NO_CACHE</field>
	</row>
	<row>
		<field name="help_keyword_id">737</field>
		<field name="name">SQL_SMALL_RESULT</field>
	</row>
	<row>
		<field name="help_keyword_id">845</field>
		<field name="name">SQL_THREAD</field>
	</row>
	<row>
		<field name="help_keyword_id">117</field>
		<field name="name">SQRT</field>
	</row>
	<row>
		<field name="help_keyword_id">908</field>
		<field name="name">SSL</field>
	</row>
	<row>
		<field name="help_keyword_id">752</field>
		<field name="name">START</field>
	</row>
	<row>
		<field name="help_keyword_id">720</field>
		<field name="name">STARTING</field>
	</row>
	<row>
		<field name="help_keyword_id">646</field>
		<field name="name">STARTS</field>
	</row>
	<row>
		<field name="help_keyword_id">278</field>
		<field name="name">STATEMENT_DIGEST</field>
	</row>
	<row>
		<field name="help_keyword_id">279</field>
		<field name="name">STATEMENT_DIGEST_TEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">627</field>
		<field name="name">STATS_AUTO_RECALC</field>
	</row>
	<row>
		<field name="help_keyword_id">628</field>
		<field name="name">STATS_PERSISTENT</field>
	</row>
	<row>
		<field name="help_keyword_id">629</field>
		<field name="name">STATS_SAMPLE_PAGES</field>
	</row>
	<row>
		<field name="help_keyword_id">959</field>
		<field name="name">STATUS</field>
	</row>
	<row>
		<field name="help_keyword_id">476</field>
		<field name="name">STD</field>
	</row>
	<row>
		<field name="help_keyword_id">477</field>
		<field name="name">STDDEV</field>
	</row>
	<row>
		<field name="help_keyword_id">478</field>
		<field name="name">STDDEV_POP</field>
	</row>
	<row>
		<field name="help_keyword_id">479</field>
		<field name="name">STDDEV_SAMP</field>
	</row>
	<row>
		<field name="help_keyword_id">846</field>
		<field name="name">STOP</field>
	</row>
	<row>
		<field name="help_keyword_id">964</field>
		<field name="name">STORAGE</field>
	</row>
	<row>
		<field name="help_keyword_id">678</field>
		<field name="name">STORED</field>
	</row>
	<row>
		<field name="help_keyword_id">738</field>
		<field name="name">STRAIGHT_JOIN</field>
	</row>
	<row>
		<field name="help_keyword_id">240</field>
		<field name="name">STRCMP</field>
	</row>
	<row>
		<field name="help_keyword_id">939</field>
		<field name="name">STRING</field>
	</row>
	<row>
		<field name="help_keyword_id">165</field>
		<field name="name">STR_TO_DATE</field>
	</row>
	<row>
		<field name="help_keyword_id">365</field>
		<field name="name">ST_AREA</field>
	</row>
	<row>
		<field name="help_keyword_id">344</field>
		<field name="name">ST_ASBINARY</field>
	</row>
	<row>
		<field name="help_keyword_id">408</field>
		<field name="name">ST_ASGEOJSON</field>
	</row>
	<row>
		<field name="help_keyword_id">346</field>
		<field name="name">ST_ASTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">345</field>
		<field name="name">ST_ASWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">347</field>
		<field name="name">ST_ASWKT</field>
	</row>
	<row>
		<field name="help_keyword_id">373</field>
		<field name="name">ST_BUFFER</field>
	</row>
	<row>
		<field name="help_keyword_id">374</field>
		<field name="name">ST_BUFFER_STRATEGY</field>
	</row>
	<row>
		<field name="help_keyword_id">366</field>
		<field name="name">ST_CENTROID</field>
	</row>
	<row>
		<field name="help_keyword_id">410</field>
		<field name="name">ST_COLLECT</field>
	</row>
	<row>
		<field name="help_keyword_id">384</field>
		<field name="name">ST_CONTAINS</field>
	</row>
	<row>
		<field name="help_keyword_id">375</field>
		<field name="name">ST_CONVEXHULL</field>
	</row>
	<row>
		<field name="help_keyword_id">385</field>
		<field name="name">ST_CROSSES</field>
	</row>
	<row>
		<field name="help_keyword_id">376</field>
		<field name="name">ST_DIFFERENCE</field>
	</row>
	<row>
		<field name="help_keyword_id">349</field>
		<field name="name">ST_DIMENSION</field>
	</row>
	<row>
		<field name="help_keyword_id">386</field>
		<field name="name">ST_DISJOINT</field>
	</row>
	<row>
		<field name="help_keyword_id">387</field>
		<field name="name">ST_DISTANCE</field>
	</row>
	<row>
		<field name="help_keyword_id">411</field>
		<field name="name">ST_DISTANCE_SPHERE</field>
	</row>
	<row>
		<field name="help_keyword_id">359</field>
		<field name="name">ST_ENDPOINT</field>
	</row>
	<row>
		<field name="help_keyword_id">350</field>
		<field name="name">ST_ENVELOPE</field>
	</row>
	<row>
		<field name="help_keyword_id">388</field>
		<field name="name">ST_EQUALS</field>
	</row>
	<row>
		<field name="help_keyword_id">367</field>
		<field name="name">ST_EXTERIORRING</field>
	</row>
	<row>
		<field name="help_keyword_id">389</field>
		<field name="name">ST_FRECHETDISTANCE</field>
	</row>
	<row>
		<field name="help_keyword_id">404</field>
		<field name="name">ST_GEOHASH</field>
	</row>
	<row>
		<field name="help_keyword_id">306</field>
		<field name="name">ST_GEOMCOLLFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">321</field>
		<field name="name">ST_GEOMCOLLFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">307</field>
		<field name="name">ST_GEOMETRYCOLLECTIONFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">322</field>
		<field name="name">ST_GEOMETRYCOLLECTIONFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">308</field>
		<field name="name">ST_GEOMETRYFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">323</field>
		<field name="name">ST_GEOMETRYFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">371</field>
		<field name="name">ST_GEOMETRYN</field>
	</row>
	<row>
		<field name="help_keyword_id">351</field>
		<field name="name">ST_GEOMETRYTYPE</field>
	</row>
	<row>
		<field name="help_keyword_id">409</field>
		<field name="name">ST_GEOMFROMGEOJSON</field>
	</row>
	<row>
		<field name="help_keyword_id">309</field>
		<field name="name">ST_GEOMFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">324</field>
		<field name="name">ST_GEOMFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">390</field>
		<field name="name">ST_HAUSDORFFDISTANCE</field>
	</row>
	<row>
		<field name="help_keyword_id">368</field>
		<field name="name">ST_INTERIORRINGN</field>
	</row>
	<row>
		<field name="help_keyword_id">377</field>
		<field name="name">ST_INTERSECTION</field>
	</row>
	<row>
		<field name="help_keyword_id">391</field>
		<field name="name">ST_INTERSECTS</field>
	</row>
	<row>
		<field name="help_keyword_id">360</field>
		<field name="name">ST_ISCLOSED</field>
	</row>
	<row>
		<field name="help_keyword_id">352</field>
		<field name="name">ST_ISEMPTY</field>
	</row>
	<row>
		<field name="help_keyword_id">353</field>
		<field name="name">ST_ISSIMPLE</field>
	</row>
	<row>
		<field name="help_keyword_id">412</field>
		<field name="name">ST_ISVALID</field>
	</row>
	<row>
		<field name="help_keyword_id">405</field>
		<field name="name">ST_LATFROMGEOHASH</field>
	</row>
	<row>
		<field name="help_keyword_id">355</field>
		<field name="name">ST_LATITUDE</field>
	</row>
	<row>
		<field name="help_keyword_id">361</field>
		<field name="name">ST_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">310</field>
		<field name="name">ST_LINEFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">325</field>
		<field name="name">ST_LINEFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">378</field>
		<field name="name">ST_LINEINTERPOLATEPOINT</field>
	</row>
	<row>
		<field name="help_keyword_id">379</field>
		<field name="name">ST_LINEINTERPOLATEPOINTS</field>
	</row>
	<row>
		<field name="help_keyword_id">311</field>
		<field name="name">ST_LINESTRINGFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">326</field>
		<field name="name">ST_LINESTRINGFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">406</field>
		<field name="name">ST_LONGFROMGEOHASH</field>
	</row>
	<row>
		<field name="help_keyword_id">356</field>
		<field name="name">ST_LONGITUDE</field>
	</row>
	<row>
		<field name="help_keyword_id">413</field>
		<field name="name">ST_MAKEENVELOPE</field>
	</row>
	<row>
		<field name="help_keyword_id">312</field>
		<field name="name">ST_MLINEFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">327</field>
		<field name="name">ST_MLINEFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">314</field>
		<field name="name">ST_MPOINTFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">329</field>
		<field name="name">ST_MPOINTFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">316</field>
		<field name="name">ST_MPOLYFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">331</field>
		<field name="name">ST_MPOLYFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">313</field>
		<field name="name">ST_MULTILINESTRINGFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">328</field>
		<field name="name">ST_MULTILINESTRINGFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">315</field>
		<field name="name">ST_MULTIPOINTFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">330</field>
		<field name="name">ST_MULTIPOINTFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">317</field>
		<field name="name">ST_MULTIPOLYGONFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">332</field>
		<field name="name">ST_MULTIPOLYGONFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">372</field>
		<field name="name">ST_NUMGEOMETRIES</field>
	</row>
	<row>
		<field name="help_keyword_id">369</field>
		<field name="name">ST_NUMINTERIORRING</field>
	</row>
	<row>
		<field name="help_keyword_id">370</field>
		<field name="name">ST_NUMINTERIORRINGS</field>
	</row>
	<row>
		<field name="help_keyword_id">362</field>
		<field name="name">ST_NUMPOINTS</field>
	</row>
	<row>
		<field name="help_keyword_id">392</field>
		<field name="name">ST_OVERLAPS</field>
	</row>
	<row>
		<field name="help_keyword_id">380</field>
		<field name="name">ST_POINTATDISTANCE</field>
	</row>
	<row>
		<field name="help_keyword_id">407</field>
		<field name="name">ST_POINTFROMGEOHASH</field>
	</row>
	<row>
		<field name="help_keyword_id">318</field>
		<field name="name">ST_POINTFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">333</field>
		<field name="name">ST_POINTFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">363</field>
		<field name="name">ST_POINTN</field>
	</row>
	<row>
		<field name="help_keyword_id">319</field>
		<field name="name">ST_POLYFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">334</field>
		<field name="name">ST_POLYFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">320</field>
		<field name="name">ST_POLYGONFROMTEXT</field>
	</row>
	<row>
		<field name="help_keyword_id">335</field>
		<field name="name">ST_POLYGONFROMWKB</field>
	</row>
	<row>
		<field name="help_keyword_id">414</field>
		<field name="name">ST_SIMPLIFY</field>
	</row>
	<row>
		<field name="help_keyword_id">354</field>
		<field name="name">ST_SRID</field>
	</row>
	<row>
		<field name="help_keyword_id">364</field>
		<field name="name">ST_STARTPOINT</field>
	</row>
	<row>
		<field name="help_keyword_id">348</field>
		<field name="name">ST_SWAPXY</field>
	</row>
	<row>
		<field name="help_keyword_id">381</field>
		<field name="name">ST_SYMDIFFERENCE</field>
	</row>
	<row>
		<field name="help_keyword_id">393</field>
		<field name="name">ST_TOUCHES</field>
	</row>
	<row>
		<field name="help_keyword_id">382</field>
		<field name="name">ST_TRANSFORM</field>
	</row>
	<row>
		<field name="help_keyword_id">383</field>
		<field name="name">ST_UNION</field>
	</row>
	<row>
		<field name="help_keyword_id">415</field>
		<field name="name">ST_VALIDATE</field>
	</row>
	<row>
		<field name="help_keyword_id">394</field>
		<field name="name">ST_WITHIN</field>
	</row>
	<row>
		<field name="help_keyword_id">357</field>
		<field name="name">ST_X</field>
	</row>
	<row>
		<field name="help_keyword_id">358</field>
		<field name="name">ST_Y</field>
	</row>
	<row>
		<field name="help_keyword_id">876</field>
		<field name="name">SUBCLASS_ORIGIN</field>
	</row>
	<row>
		<field name="help_keyword_id">166</field>
		<field name="name">SUBDATE</field>
	</row>
	<row>
		<field name="help_keyword_id">909</field>
		<field name="name">SUBJECT</field>
	</row>
	<row>
		<field name="help_keyword_id">226</field>
		<field name="name">SUBSTR</field>
	</row>
	<row>
		<field name="help_keyword_id">227</field>
		<field name="name">SUBSTRING</field>
	</row>
	<row>
		<field name="help_keyword_id">228</field>
		<field name="name">SUBSTRING_INDEX</field>
	</row>
	<row>
		<field name="help_keyword_id">167</field>
		<field name="name">SUBTIME</field>
	</row>
	<row>
		<field name="help_keyword_id">480</field>
		<field name="name">SUM</field>
	</row>
	<row>
		<field name="help_keyword_id">923</field>
		<field name="name">SUPER</field>
	</row>
	<row>
		<field name="help_keyword_id">168</field>
		<field name="name">SYSDATE</field>
	</row>
	<row>
		<field name="help_keyword_id">658</field>
		<field name="name">SYSTEM</field>
	</row>
	<row>
		<field name="help_keyword_id">303</field>
		<field name="name">SYSTEM_USER</field>
	</row>
	<row>
		<field name="help_keyword_id">54</field>
		<field name="name">TABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">759</field>
		<field name="name">TABLES</field>
	</row>
	<row>
		<field name="help_keyword_id">630</field>
		<field name="name">TABLESPACE</field>
	</row>
	<row>
		<field name="help_keyword_id">877</field>
		<field name="name">TABLE_NAME</field>
	</row>
	<row>
		<field name="help_keyword_id">118</field>
		<field name="name">TAN</field>
	</row>
	<row>
		<field name="help_keyword_id">688</field>
		<field name="name">TEMPORARY</field>
	</row>
	<row>
		<field name="help_keyword_id">721</field>
		<field name="name">TERMINATED</field>
	</row>
	<row>
		<field name="help_keyword_id">79</field>
		<field name="name">THEN</field>
	</row>
	<row>
		<field name="help_keyword_id">929</field>
		<field name="name">THREAD_PRIORITY</field>
	</row>
	<row>
		<field name="help_keyword_id">38</field>
		<field name="name">TIME</field>
	</row>
	<row>
		<field name="help_keyword_id">170</field>
		<field name="name">TIMEDIFF</field>
	</row>
	<row>
		<field name="help_keyword_id">37</field>
		<field name="name">TIMESTAMP</field>
	</row>
	<row>
		<field name="help_keyword_id">171</field>
		<field name="name">TIMESTAMPADD</field>
	</row>
	<row>
		<field name="help_keyword_id">172</field>
		<field name="name">TIMESTAMPDIFF</field>
	</row>
	<row>
		<field name="help_keyword_id">259</field>
		<field name="name">TIMEZONE</field>
	</row>
	<row>
		<field name="help_keyword_id">173</field>
		<field name="name">TIME_FORMAT</field>
	</row>
	<row>
		<field name="help_keyword_id">174</field>
		<field name="name">TIME_TO_SEC</field>
	</row>
	<row>
		<field name="help_keyword_id">575</field>
		<field name="name">TLS</field>
	</row>
	<row>
		<field name="help_keyword_id">638</field>
		<field name="name">TO</field>
	</row>
	<row>
		<field name="help_keyword_id">229</field>
		<field name="name">TO_BASE64</field>
	</row>
	<row>
		<field name="help_keyword_id">175</field>
		<field name="name">TO_DAYS</field>
	</row>
	<row>
		<field name="help_keyword_id">176</field>
		<field name="name">TO_SECONDS</field>
	</row>
	<row>
		<field name="help_keyword_id">984</field>
		<field name="name">TRADITIONAL</field>
	</row>
	<row>
		<field name="help_keyword_id">233</field>
		<field name="name">TRAILING</field>
	</row>
	<row>
		<field name="help_keyword_id">753</field>
		<field name="name">TRANSACTION</field>
	</row>
	<row>
		<field name="help_keyword_id">985</field>
		<field name="name">TREE</field>
	</row>
	<row>
		<field name="help_keyword_id">687</field>
		<field name="name">TRIGGER</field>
	</row>
	<row>
		<field name="help_keyword_id">960</field>
		<field name="name">TRIGGERS</field>
	</row>
	<row>
		<field name="help_keyword_id">234</field>
		<field name="name">TRIM</field>
	</row>
	<row>
		<field name="help_keyword_id">16</field>
		<field name="name">TRUE</field>
	</row>
	<row>
		<field name="help_keyword_id">119</field>
		<field name="name">TRUNCATE</field>
	</row>
	<row>
		<field name="help_keyword_id">631</field>
		<field name="name">TYPE</field>
	</row>
	<row>
		<field name="help_keyword_id">235</field>
		<field name="name">UCASE</field>
	</row>
	<row>
		<field name="help_keyword_id">910</field>
		<field name="name">UNBOUNDED</field>
	</row>
	<row>
		<field name="help_keyword_id">767</field>
		<field name="name">UNCOMMITTED</field>
	</row>
	<row>
		<field name="help_keyword_id">280</field>
		<field name="name">UNCOMPRESS</field>
	</row>
	<row>
		<field name="help_keyword_id">281</field>
		<field name="name">UNCOMPRESSED_LENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">639</field>
		<field name="name">UNDO</field>
	</row>
	<row>
		<field name="help_keyword_id">236</field>
		<field name="name">UNHEX</field>
	</row>
	<row>
		<field name="help_keyword_id">943</field>
		<field name="name">UNINSTALL</field>
	</row>
	<row>
		<field name="help_keyword_id">632</field>
		<field name="name">UNION</field>
	</row>
	<row>
		<field name="help_keyword_id">633</field>
		<field name="name">UNIQUE</field>
	</row>
	<row>
		<field name="help_keyword_id">177</field>
		<field name="name">UNIX_TIMESTAMP</field>
	</row>
	<row>
		<field name="help_keyword_id">927</field>
		<field name="name">UNKNOWN</field>
	</row>
	<row>
		<field name="help_keyword_id">758</field>
		<field name="name">UNLOCK</field>
	</row>
	<row>
		<field name="help_keyword_id">911</field>
		<field name="name">UNREGISTER</field>
	</row>
	<row>
		<field name="help_keyword_id">20</field>
		<field name="name">UNSIGNED</field>
	</row>
	<row>
		<field name="help_keyword_id">854</field>
		<field name="name">UNTIL</field>
	</row>
	<row>
		<field name="help_keyword_id">681</field>
		<field name="name">UPDATE</field>
	</row>
	<row>
		<field name="help_keyword_id">262</field>
		<field name="name">UPDATEXML</field>
	</row>
	<row>
		<field name="help_keyword_id">634</field>
		<field name="name">UPGRADE</field>
	</row>
	<row>
		<field name="help_keyword_id">237</field>
		<field name="name">UPPER</field>
	</row>
	<row>
		<field name="help_keyword_id">924</field>
		<field name="name">USAGE</field>
	</row>
	<row>
		<field name="help_keyword_id">686</field>
		<field name="name">USE</field>
	</row>
	<row>
		<field name="help_keyword_id">304</field>
		<field name="name">USER</field>
	</row>
	<row>
		<field name="help_keyword_id">978</field>
		<field name="name">USER_RESOURCES</field>
	</row>
	<row>
		<field name="help_keyword_id">935</field>
		<field name="name">USE_FRM</field>
	</row>
	<row>
		<field name="help_keyword_id">693</field>
		<field name="name">USING</field>
	</row>
	<row>
		<field name="help_keyword_id">178</field>
		<field name="name">UTC_DATE</field>
	</row>
	<row>
		<field name="help_keyword_id">179</field>
		<field name="name">UTC_TIME</field>
	</row>
	<row>
		<field name="help_keyword_id">180</field>
		<field name="name">UTC_TIMESTAMP</field>
	</row>
	<row>
		<field name="help_keyword_id">542</field>
		<field name="name">UUID</field>
	</row>
	<row>
		<field name="help_keyword_id">543</field>
		<field name="name">UUID_SHORT</field>
	</row>
	<row>
		<field name="help_keyword_id">544</field>
		<field name="name">UUID_TO_BIN</field>
	</row>
	<row>
		<field name="help_keyword_id">282</field>
		<field name="name">VALIDATE_PASSWORD_STRENGTH</field>
	</row>
	<row>
		<field name="help_keyword_id">4</field>
		<field name="name">VALUE</field>
	</row>
	<row>
		<field name="help_keyword_id">545</field>
		<field name="name">VALUES</field>
	</row>
	<row>
		<field name="help_keyword_id">45</field>
		<field name="name">VARCHARACTER</field>
	</row>
	<row>
		<field name="help_keyword_id">947</field>
		<field name="name">VARIABLE</field>
	</row>
	<row>
		<field name="help_keyword_id">961</field>
		<field name="name">VARIABLES</field>
	</row>
	<row>
		<field name="help_keyword_id">483</field>
		<field name="name">VARIANCE</field>
	</row>
	<row>
		<field name="help_keyword_id">46</field>
		<field name="name">VARYING</field>
	</row>
	<row>
		<field name="help_keyword_id">481</field>
		<field name="name">VAR_POP</field>
	</row>
	<row>
		<field name="help_keyword_id">482</field>
		<field name="name">VAR_SAMP</field>
	</row>
	<row>
		<field name="help_keyword_id">930</field>
		<field name="name">VCPU</field>
	</row>
	<row>
		<field name="help_keyword_id">305</field>
		<field name="name">VERSION</field>
	</row>
	<row>
		<field name="help_keyword_id">641</field>
		<field name="name">VIEW</field>
	</row>
	<row>
		<field name="help_keyword_id">679</field>
		<field name="name">VIRTUAL</field>
	</row>
	<row>
		<field name="help_keyword_id">635</field>
		<field name="name">VISIBLE</field>
	</row>
	<row>
		<field name="help_keyword_id">640</field>
		<field name="name">WAIT</field>
	</row>
	<row>
		<field name="help_keyword_id">456</field>
		<field name="name">WAIT_FOR_EXECUTED_GTID_SET</field>
	</row>
	<row>
		<field name="help_keyword_id">457</field>
		<field name="name">WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS</field>
	</row>
	<row>
		<field name="help_keyword_id">962</field>
		<field name="name">WARNINGS</field>
	</row>
	<row>
		<field name="help_keyword_id">181</field>
		<field name="name">WEEK</field>
	</row>
	<row>
		<field name="help_keyword_id">182</field>
		<field name="name">WEEKDAY</field>
	</row>
	<row>
		<field name="help_keyword_id">183</field>
		<field name="name">WEEKOFYEAR</field>
	</row>
	<row>
		<field name="help_keyword_id">238</field>
		<field name="name">WEIGHT_STRING</field>
	</row>
	<row>
		<field name="help_keyword_id">80</field>
		<field name="name">WHEN</field>
	</row>
	<row>
		<field name="help_keyword_id">694</field>
		<field name="name">WHERE</field>
	</row>
	<row>
		<field name="help_keyword_id">856</field>
		<field name="name">WHILE</field>
	</row>
	<row>
		<field name="help_keyword_id">252</field>
		<field name="name">WITH</field>
	</row>
	<row>
		<field name="help_keyword_id">754</field>
		<field name="name">WORK</field>
	</row>
	<row>
		<field name="help_keyword_id">652</field>
		<field name="name">WRAPPER</field>
	</row>
	<row>
		<field name="help_keyword_id">755</field>
		<field name="name">WRITE</field>
	</row>
	<row>
		<field name="help_keyword_id">912</field>
		<field name="name">X509</field>
	</row>
	<row>
		<field name="help_keyword_id">770</field>
		<field name="name">XA</field>
	</row>
	<row>
		<field name="help_keyword_id">74</field>
		<field name="name">XOR</field>
	</row>
	<row>
		<field name="help_keyword_id">142</field>
		<field name="name">YEAR</field>
	</row>
	<row>
		<field name="help_keyword_id">184</field>
		<field name="name">YEARWEEK</field>
	</row>
	<row>
		<field name="help_keyword_id">143</field>
		<field name="name">YEAR_MONTH</field>
	</row>
	<row>
		<field name="help_keyword_id">21</field>
		<field name="name">ZEROFILL</field>
	</row>
	<row>
		<field name="help_keyword_id">265</field>
		<field name="name">^</field>
	</row>
	<row>
		<field name="help_keyword_id">263</field>
		<field name="name">|</field>
	</row>
	<row>
		<field name="help_keyword_id">268</field>
		<field name="name">~</field>
	</row>
	</table_data>
	<table_structure name="help_relation">
		<field Field="help_topic_id" Type="int unsigned" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="help_keyword_id" Type="int unsigned" Null="NO" Key="PRI" Extra="" Comment="" />
		<key Table="help_relation" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="help_keyword_id" Collation="A" Cardinality="1226" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="help_relation" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="help_topic_id" Collation="A" Cardinality="2394" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="help_relation" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="2394" Avg_row_length="41" Data_length="98304" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="keyword-topic relation" />
	</table_structure>
	<table_data name="help_relation">
	<row>
		<field name="help_topic_id">0</field>
		<field name="help_keyword_id">0</field>
	</row>
	<row>
		<field name="help_topic_id">1</field>
		<field name="help_keyword_id">1</field>
	</row>
	<row>
		<field name="help_topic_id">2</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">485</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">592</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">618</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">620</field>
		<field name="help_keyword_id">2</field>
	</row>
	<row>
		<field name="help_topic_id">2</field>
		<field name="help_keyword_id">3</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">3</field>
	</row>
	<row>
		<field name="help_topic_id">2</field>
		<field name="help_keyword_id">4</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">4</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="help_keyword_id">4</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">4</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">4</field>
	</row>
	<row>
		<field name="help_topic_id">3</field>
		<field name="help_keyword_id">5</field>
	</row>
	<row>
		<field name="help_topic_id">700</field>
		<field name="help_keyword_id">5</field>
	</row>
	<row>
		<field name="help_topic_id">4</field>
		<field name="help_keyword_id">6</field>
	</row>
	<row>
		<field name="help_topic_id">5</field>
		<field name="help_keyword_id">7</field>
	</row>
	<row>
		<field name="help_topic_id">6</field>
		<field name="help_keyword_id">8</field>
	</row>
	<row>
		<field name="help_topic_id">7</field>
		<field name="help_keyword_id">9</field>
	</row>
	<row>
		<field name="help_topic_id">8</field>
		<field name="help_keyword_id">10</field>
	</row>
	<row>
		<field name="help_topic_id">9</field>
		<field name="help_keyword_id">11</field>
	</row>
	<row>
		<field name="help_topic_id">10</field>
		<field name="help_keyword_id">12</field>
	</row>
	<row>
		<field name="help_topic_id">11</field>
		<field name="help_keyword_id">13</field>
	</row>
	<row>
		<field name="help_topic_id">12</field>
		<field name="help_keyword_id">14</field>
	</row>
	<row>
		<field name="help_topic_id">13</field>
		<field name="help_keyword_id">15</field>
	</row>
	<row>
		<field name="help_topic_id">14</field>
		<field name="help_keyword_id">15</field>
	</row>
	<row>
		<field name="help_topic_id">13</field>
		<field name="help_keyword_id">16</field>
	</row>
	<row>
		<field name="help_topic_id">14</field>
		<field name="help_keyword_id">16</field>
	</row>
	<row>
		<field name="help_topic_id">16</field>
		<field name="help_keyword_id">17</field>
	</row>
	<row>
		<field name="help_topic_id">17</field>
		<field name="help_keyword_id">17</field>
	</row>
	<row>
		<field name="help_topic_id">16</field>
		<field name="help_keyword_id">18</field>
	</row>
	<row>
		<field name="help_topic_id">240</field>
		<field name="help_keyword_id">18</field>
	</row>
	<row>
		<field name="help_topic_id">16</field>
		<field name="help_keyword_id">19</field>
	</row>
	<row>
		<field name="help_topic_id">16</field>
		<field name="help_keyword_id">20</field>
	</row>
	<row>
		<field name="help_topic_id">20</field>
		<field name="help_keyword_id">20</field>
	</row>
	<row>
		<field name="help_topic_id">22</field>
		<field name="help_keyword_id">20</field>
	</row>
	<row>
		<field name="help_topic_id">23</field>
		<field name="help_keyword_id">20</field>
	</row>
	<row>
		<field name="help_topic_id">25</field>
		<field name="help_keyword_id">20</field>
	</row>
	<row>
		<field name="help_topic_id">26</field>
		<field name="help_keyword_id">20</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">20</field>
	</row>
	<row>
		<field name="help_topic_id">16</field>
		<field name="help_keyword_id">21</field>
	</row>
	<row>
		<field name="help_topic_id">20</field>
		<field name="help_keyword_id">21</field>
	</row>
	<row>
		<field name="help_topic_id">22</field>
		<field name="help_keyword_id">21</field>
	</row>
	<row>
		<field name="help_topic_id">23</field>
		<field name="help_keyword_id">21</field>
	</row>
	<row>
		<field name="help_topic_id">25</field>
		<field name="help_keyword_id">21</field>
	</row>
	<row>
		<field name="help_topic_id">26</field>
		<field name="help_keyword_id">21</field>
	</row>
	<row>
		<field name="help_topic_id">18</field>
		<field name="help_keyword_id">22</field>
	</row>
	<row>
		<field name="help_topic_id">19</field>
		<field name="help_keyword_id">23</field>
	</row>
	<row>
		<field name="help_topic_id">19</field>
		<field name="help_keyword_id">24</field>
	</row>
	<row>
		<field name="help_topic_id">20</field>
		<field name="help_keyword_id">25</field>
	</row>
	<row>
		<field name="help_topic_id">20</field>
		<field name="help_keyword_id">26</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">26</field>
	</row>
	<row>
		<field name="help_topic_id">630</field>
		<field name="help_keyword_id">26</field>
	</row>
	<row>
		<field name="help_topic_id">22</field>
		<field name="help_keyword_id">27</field>
	</row>
	<row>
		<field name="help_topic_id">23</field>
		<field name="help_keyword_id">28</field>
	</row>
	<row>
		<field name="help_topic_id">23</field>
		<field name="help_keyword_id">29</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">29</field>
	</row>
	<row>
		<field name="help_topic_id">23</field>
		<field name="help_keyword_id">30</field>
	</row>
	<row>
		<field name="help_topic_id">24</field>
		<field name="help_keyword_id">31</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">31</field>
	</row>
	<row>
		<field name="help_topic_id">630</field>
		<field name="help_keyword_id">31</field>
	</row>
	<row>
		<field name="help_topic_id">25</field>
		<field name="help_keyword_id">32</field>
	</row>
	<row>
		<field name="help_topic_id">26</field>
		<field name="help_keyword_id">33</field>
	</row>
	<row>
		<field name="help_topic_id">26</field>
		<field name="help_keyword_id">34</field>
	</row>
	<row>
		<field name="help_topic_id">26</field>
		<field name="help_keyword_id">35</field>
	</row>
	<row>
		<field name="help_topic_id">630</field>
		<field name="help_keyword_id">35</field>
	</row>
	<row>
		<field name="help_topic_id">28</field>
		<field name="help_keyword_id">36</field>
	</row>
	<row>
		<field name="help_topic_id">129</field>
		<field name="help_keyword_id">36</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">36</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">36</field>
	</row>
	<row>
		<field name="help_topic_id">30</field>
		<field name="help_keyword_id">37</field>
	</row>
	<row>
		<field name="help_topic_id">165</field>
		<field name="help_keyword_id">37</field>
	</row>
	<row>
		<field name="help_topic_id">31</field>
		<field name="help_keyword_id">38</field>
	</row>
	<row>
		<field name="help_topic_id">163</field>
		<field name="help_keyword_id">38</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">38</field>
	</row>
	<row>
		<field name="help_topic_id">33</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">35</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">638</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">639</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">645</field>
		<field name="help_keyword_id">39</field>
	</row>
	<row>
		<field name="help_topic_id">33</field>
		<field name="help_keyword_id">40</field>
	</row>
	<row>
		<field name="help_topic_id">35</field>
		<field name="help_keyword_id">40</field>
	</row>
	<row>
		<field name="help_topic_id">33</field>
		<field name="help_keyword_id">41</field>
	</row>
	<row>
		<field name="help_topic_id">34</field>
		<field name="help_keyword_id">42</field>
	</row>
	<row>
		<field name="help_topic_id">34</field>
		<field name="help_keyword_id">43</field>
	</row>
	<row>
		<field name="help_topic_id">184</field>
		<field name="help_keyword_id">43</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">43</field>
	</row>
	<row>
		<field name="help_topic_id">35</field>
		<field name="help_keyword_id">44</field>
	</row>
	<row>
		<field name="help_topic_id">35</field>
		<field name="help_keyword_id">45</field>
	</row>
	<row>
		<field name="help_topic_id">35</field>
		<field name="help_keyword_id">46</field>
	</row>
	<row>
		<field name="help_topic_id">44</field>
		<field name="help_keyword_id">47</field>
	</row>
	<row>
		<field name="help_topic_id">44</field>
		<field name="help_keyword_id">48</field>
	</row>
	<row>
		<field name="help_topic_id">53</field>
		<field name="help_keyword_id">49</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">49</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">49</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">49</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">49</field>
	</row>
	<row>
		<field name="help_topic_id">53</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">505</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">507</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">508</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">509</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">512</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">621</field>
		<field name="help_keyword_id">50</field>
	</row>
	<row>
		<field name="help_topic_id">53</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">517</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">518</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">519</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">525</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">526</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">611</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">630</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">649</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">650</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">651</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">652</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">653</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">654</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">656</field>
		<field name="help_keyword_id">51</field>
	</row>
	<row>
		<field name="help_topic_id">53</field>
		<field name="help_keyword_id">52</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">52</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="help_keyword_id">52</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">52</field>
	</row>
	<row>
		<field name="help_topic_id">530</field>
		<field name="help_keyword_id">52</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">52</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">52</field>
	</row>
	<row>
		<field name="help_topic_id">667</field>
		<field name="help_keyword_id">52</field>
	</row>
	<row>
		<field name="help_topic_id">689</field>
		<field name="help_keyword_id">52</field>
	</row>
	<row>
		<field name="help_topic_id">692</field>
		<field name="help_keyword_id">52</field>
	</row>
	<row>
		<field name="help_topic_id">53</field>
		<field name="help_keyword_id">53</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">53</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">53</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">53</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">53</field>
	</row>
	<row>
		<field name="help_topic_id">53</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">535</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">539</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">540</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">546</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">548</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">558</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">625</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">626</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">627</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">628</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">629</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">654</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">683</field>
		<field name="help_keyword_id">54</field>
	</row>
	<row>
		<field name="help_topic_id">54</field>
		<field name="help_keyword_id">55</field>
	</row>
	<row>
		<field name="help_topic_id">79</field>
		<field name="help_keyword_id">55</field>
	</row>
	<row>
		<field name="help_topic_id">55</field>
		<field name="help_keyword_id">56</field>
	</row>
	<row>
		<field name="help_topic_id">56</field>
		<field name="help_keyword_id">57</field>
	</row>
	<row>
		<field name="help_topic_id">57</field>
		<field name="help_keyword_id">58</field>
	</row>
	<row>
		<field name="help_topic_id">58</field>
		<field name="help_keyword_id">59</field>
	</row>
	<row>
		<field name="help_topic_id">59</field>
		<field name="help_keyword_id">60</field>
	</row>
	<row>
		<field name="help_topic_id">60</field>
		<field name="help_keyword_id">61</field>
	</row>
	<row>
		<field name="help_topic_id">61</field>
		<field name="help_keyword_id">62</field>
	</row>
	<row>
		<field name="help_topic_id">75</field>
		<field name="help_keyword_id">62</field>
	</row>
	<row>
		<field name="help_topic_id">61</field>
		<field name="help_keyword_id">63</field>
	</row>
	<row>
		<field name="help_topic_id">62</field>
		<field name="help_keyword_id">63</field>
	</row>
	<row>
		<field name="help_topic_id">62</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">66</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">69</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">71</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">74</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">232</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">234</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">611</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">64</field>
	</row>
	<row>
		<field name="help_topic_id">63</field>
		<field name="help_keyword_id">65</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">65</field>
	</row>
	<row>
		<field name="help_topic_id">64</field>
		<field name="help_keyword_id">66</field>
	</row>
	<row>
		<field name="help_topic_id">65</field>
		<field name="help_keyword_id">67</field>
	</row>
	<row>
		<field name="help_topic_id">66</field>
		<field name="help_keyword_id">67</field>
	</row>
	<row>
		<field name="help_topic_id">240</field>
		<field name="help_keyword_id">67</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">67</field>
	</row>
	<row>
		<field name="help_topic_id">644</field>
		<field name="help_keyword_id">67</field>
	</row>
	<row>
		<field name="help_topic_id">647</field>
		<field name="help_keyword_id">67</field>
	</row>
	<row>
		<field name="help_topic_id">648</field>
		<field name="help_keyword_id">67</field>
	</row>
	<row>
		<field name="help_topic_id">667</field>
		<field name="help_keyword_id">67</field>
	</row>
	<row>
		<field name="help_topic_id">677</field>
		<field name="help_keyword_id">67</field>
	</row>
	<row>
		<field name="help_topic_id">67</field>
		<field name="help_keyword_id">68</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">68</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">68</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">68</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">68</field>
	</row>
	<row>
		<field name="help_topic_id">68</field>
		<field name="help_keyword_id">69</field>
	</row>
	<row>
		<field name="help_topic_id">69</field>
		<field name="help_keyword_id">69</field>
	</row>
	<row>
		<field name="help_topic_id">70</field>
		<field name="help_keyword_id">69</field>
	</row>
	<row>
		<field name="help_topic_id">71</field>
		<field name="help_keyword_id">69</field>
	</row>
	<row>
		<field name="help_topic_id">70</field>
		<field name="help_keyword_id">70</field>
	</row>
	<row>
		<field name="help_topic_id">71</field>
		<field name="help_keyword_id">70</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">70</field>
	</row>
	<row>
		<field name="help_topic_id">72</field>
		<field name="help_keyword_id">71</field>
	</row>
	<row>
		<field name="help_topic_id">73</field>
		<field name="help_keyword_id">72</field>
	</row>
	<row>
		<field name="help_topic_id">76</field>
		<field name="help_keyword_id">73</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">73</field>
	</row>
	<row>
		<field name="help_topic_id">77</field>
		<field name="help_keyword_id">74</field>
	</row>
	<row>
		<field name="help_topic_id">78</field>
		<field name="help_keyword_id">75</field>
	</row>
	<row>
		<field name="help_topic_id">80</field>
		<field name="help_keyword_id">76</field>
	</row>
	<row>
		<field name="help_topic_id">593</field>
		<field name="help_keyword_id">76</field>
	</row>
	<row>
		<field name="help_topic_id">80</field>
		<field name="help_keyword_id">77</field>
	</row>
	<row>
		<field name="help_topic_id">593</field>
		<field name="help_keyword_id">77</field>
	</row>
	<row>
		<field name="help_topic_id">80</field>
		<field name="help_keyword_id">78</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">78</field>
	</row>
	<row>
		<field name="help_topic_id">590</field>
		<field name="help_keyword_id">78</field>
	</row>
	<row>
		<field name="help_topic_id">593</field>
		<field name="help_keyword_id">78</field>
	</row>
	<row>
		<field name="help_topic_id">594</field>
		<field name="help_keyword_id">78</field>
	</row>
	<row>
		<field name="help_topic_id">597</field>
		<field name="help_keyword_id">78</field>
	</row>
	<row>
		<field name="help_topic_id">598</field>
		<field name="help_keyword_id">78</field>
	</row>
	<row>
		<field name="help_topic_id">600</field>
		<field name="help_keyword_id">78</field>
	</row>
	<row>
		<field name="help_topic_id">80</field>
		<field name="help_keyword_id">79</field>
	</row>
	<row>
		<field name="help_topic_id">593</field>
		<field name="help_keyword_id">79</field>
	</row>
	<row>
		<field name="help_topic_id">594</field>
		<field name="help_keyword_id">79</field>
	</row>
	<row>
		<field name="help_topic_id">80</field>
		<field name="help_keyword_id">80</field>
	</row>
	<row>
		<field name="help_topic_id">593</field>
		<field name="help_keyword_id">80</field>
	</row>
	<row>
		<field name="help_topic_id">81</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">527</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">528</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">529</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">533</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">534</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">535</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">538</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">594</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">611</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">613</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">614</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">631</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">694</field>
		<field name="help_keyword_id">81</field>
	</row>
	<row>
		<field name="help_topic_id">82</field>
		<field name="help_keyword_id">82</field>
	</row>
	<row>
		<field name="help_topic_id">83</field>
		<field name="help_keyword_id">83</field>
	</row>
	<row>
		<field name="help_topic_id">84</field>
		<field name="help_keyword_id">84</field>
	</row>
	<row>
		<field name="help_topic_id">85</field>
		<field name="help_keyword_id">85</field>
	</row>
	<row>
		<field name="help_topic_id">86</field>
		<field name="help_keyword_id">85</field>
	</row>
	<row>
		<field name="help_topic_id">87</field>
		<field name="help_keyword_id">86</field>
	</row>
	<row>
		<field name="help_topic_id">88</field>
		<field name="help_keyword_id">87</field>
	</row>
	<row>
		<field name="help_topic_id">89</field>
		<field name="help_keyword_id">88</field>
	</row>
	<row>
		<field name="help_topic_id">90</field>
		<field name="help_keyword_id">89</field>
	</row>
	<row>
		<field name="help_topic_id">109</field>
		<field name="help_keyword_id">89</field>
	</row>
	<row>
		<field name="help_topic_id">91</field>
		<field name="help_keyword_id">90</field>
	</row>
	<row>
		<field name="help_topic_id">92</field>
		<field name="help_keyword_id">91</field>
	</row>
	<row>
		<field name="help_topic_id">93</field>
		<field name="help_keyword_id">92</field>
	</row>
	<row>
		<field name="help_topic_id">94</field>
		<field name="help_keyword_id">93</field>
	</row>
	<row>
		<field name="help_topic_id">95</field>
		<field name="help_keyword_id">94</field>
	</row>
	<row>
		<field name="help_topic_id">96</field>
		<field name="help_keyword_id">95</field>
	</row>
	<row>
		<field name="help_topic_id">97</field>
		<field name="help_keyword_id">96</field>
	</row>
	<row>
		<field name="help_topic_id">98</field>
		<field name="help_keyword_id">97</field>
	</row>
	<row>
		<field name="help_topic_id">99</field>
		<field name="help_keyword_id">98</field>
	</row>
	<row>
		<field name="help_topic_id">100</field>
		<field name="help_keyword_id">99</field>
	</row>
	<row>
		<field name="help_topic_id">101</field>
		<field name="help_keyword_id">100</field>
	</row>
	<row>
		<field name="help_topic_id">102</field>
		<field name="help_keyword_id">101</field>
	</row>
	<row>
		<field name="help_topic_id">103</field>
		<field name="help_keyword_id">102</field>
	</row>
	<row>
		<field name="help_topic_id">104</field>
		<field name="help_keyword_id">103</field>
	</row>
	<row>
		<field name="help_topic_id">105</field>
		<field name="help_keyword_id">104</field>
	</row>
	<row>
		<field name="help_topic_id">106</field>
		<field name="help_keyword_id">105</field>
	</row>
	<row>
		<field name="help_topic_id">107</field>
		<field name="help_keyword_id">106</field>
	</row>
	<row>
		<field name="help_topic_id">108</field>
		<field name="help_keyword_id">107</field>
	</row>
	<row>
		<field name="help_topic_id">109</field>
		<field name="help_keyword_id">108</field>
	</row>
	<row>
		<field name="help_topic_id">110</field>
		<field name="help_keyword_id">109</field>
	</row>
	<row>
		<field name="help_topic_id">111</field>
		<field name="help_keyword_id">110</field>
	</row>
	<row>
		<field name="help_topic_id">112</field>
		<field name="help_keyword_id">111</field>
	</row>
	<row>
		<field name="help_topic_id">113</field>
		<field name="help_keyword_id">112</field>
	</row>
	<row>
		<field name="help_topic_id">114</field>
		<field name="help_keyword_id">113</field>
	</row>
	<row>
		<field name="help_topic_id">115</field>
		<field name="help_keyword_id">114</field>
	</row>
	<row>
		<field name="help_topic_id">116</field>
		<field name="help_keyword_id">115</field>
	</row>
	<row>
		<field name="help_topic_id">117</field>
		<field name="help_keyword_id">116</field>
	</row>
	<row>
		<field name="help_topic_id">118</field>
		<field name="help_keyword_id">117</field>
	</row>
	<row>
		<field name="help_topic_id">119</field>
		<field name="help_keyword_id">118</field>
	</row>
	<row>
		<field name="help_topic_id">120</field>
		<field name="help_keyword_id">119</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">119</field>
	</row>
	<row>
		<field name="help_topic_id">540</field>
		<field name="help_keyword_id">119</field>
	</row>
	<row>
		<field name="help_topic_id">121</field>
		<field name="help_keyword_id">120</field>
	</row>
	<row>
		<field name="help_topic_id">122</field>
		<field name="help_keyword_id">121</field>
	</row>
	<row>
		<field name="help_topic_id">123</field>
		<field name="help_keyword_id">122</field>
	</row>
	<row>
		<field name="help_topic_id">124</field>
		<field name="help_keyword_id">123</field>
	</row>
	<row>
		<field name="help_topic_id">125</field>
		<field name="help_keyword_id">124</field>
	</row>
	<row>
		<field name="help_topic_id">126</field>
		<field name="help_keyword_id">125</field>
	</row>
	<row>
		<field name="help_topic_id">127</field>
		<field name="help_keyword_id">126</field>
	</row>
	<row>
		<field name="help_topic_id">128</field>
		<field name="help_keyword_id">127</field>
	</row>
	<row>
		<field name="help_topic_id">130</field>
		<field name="help_keyword_id">128</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">129</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">130</field>
	</row>
	<row>
		<field name="help_topic_id">133</field>
		<field name="help_keyword_id">130</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">131</field>
	</row>
	<row>
		<field name="help_topic_id">134</field>
		<field name="help_keyword_id">131</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">131</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">131</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">132</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">133</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">134</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">135</field>
	</row>
	<row>
		<field name="help_topic_id">143</field>
		<field name="help_keyword_id">135</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">136</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">137</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">138</field>
	</row>
	<row>
		<field name="help_topic_id">150</field>
		<field name="help_keyword_id">138</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">139</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">140</field>
	</row>
	<row>
		<field name="help_topic_id">151</field>
		<field name="help_keyword_id">140</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">141</field>
	</row>
	<row>
		<field name="help_topic_id">157</field>
		<field name="help_keyword_id">141</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">142</field>
	</row>
	<row>
		<field name="help_topic_id">179</field>
		<field name="help_keyword_id">142</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">142</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="help_keyword_id">143</field>
	</row>
	<row>
		<field name="help_topic_id">132</field>
		<field name="help_keyword_id">144</field>
	</row>
	<row>
		<field name="help_topic_id">135</field>
		<field name="help_keyword_id">145</field>
	</row>
	<row>
		<field name="help_topic_id">136</field>
		<field name="help_keyword_id">146</field>
	</row>
	<row>
		<field name="help_topic_id">137</field>
		<field name="help_keyword_id">147</field>
	</row>
	<row>
		<field name="help_topic_id">138</field>
		<field name="help_keyword_id">148</field>
	</row>
	<row>
		<field name="help_topic_id">139</field>
		<field name="help_keyword_id">149</field>
	</row>
	<row>
		<field name="help_topic_id">140</field>
		<field name="help_keyword_id">150</field>
	</row>
	<row>
		<field name="help_topic_id">141</field>
		<field name="help_keyword_id">151</field>
	</row>
	<row>
		<field name="help_topic_id">142</field>
		<field name="help_keyword_id">152</field>
	</row>
	<row>
		<field name="help_topic_id">144</field>
		<field name="help_keyword_id">153</field>
	</row>
	<row>
		<field name="help_topic_id">145</field>
		<field name="help_keyword_id">154</field>
	</row>
	<row>
		<field name="help_topic_id">146</field>
		<field name="help_keyword_id">155</field>
	</row>
	<row>
		<field name="help_topic_id">147</field>
		<field name="help_keyword_id">156</field>
	</row>
	<row>
		<field name="help_topic_id">148</field>
		<field name="help_keyword_id">157</field>
	</row>
	<row>
		<field name="help_topic_id">149</field>
		<field name="help_keyword_id">158</field>
	</row>
	<row>
		<field name="help_topic_id">152</field>
		<field name="help_keyword_id">159</field>
	</row>
	<row>
		<field name="help_topic_id">153</field>
		<field name="help_keyword_id">160</field>
	</row>
	<row>
		<field name="help_topic_id">154</field>
		<field name="help_keyword_id">161</field>
	</row>
	<row>
		<field name="help_topic_id">155</field>
		<field name="help_keyword_id">162</field>
	</row>
	<row>
		<field name="help_topic_id">156</field>
		<field name="help_keyword_id">163</field>
	</row>
	<row>
		<field name="help_topic_id">158</field>
		<field name="help_keyword_id">164</field>
	</row>
	<row>
		<field name="help_topic_id">159</field>
		<field name="help_keyword_id">165</field>
	</row>
	<row>
		<field name="help_topic_id">160</field>
		<field name="help_keyword_id">166</field>
	</row>
	<row>
		<field name="help_topic_id">161</field>
		<field name="help_keyword_id">167</field>
	</row>
	<row>
		<field name="help_topic_id">162</field>
		<field name="help_keyword_id">168</field>
	</row>
	<row>
		<field name="help_topic_id">163</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">165</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">214</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">505</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">518</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">519</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">531</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">532</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">630</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">631</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">652</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">664</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">665</field>
		<field name="help_keyword_id">169</field>
	</row>
	<row>
		<field name="help_topic_id">164</field>
		<field name="help_keyword_id">170</field>
	</row>
	<row>
		<field name="help_topic_id">166</field>
		<field name="help_keyword_id">171</field>
	</row>
	<row>
		<field name="help_topic_id">167</field>
		<field name="help_keyword_id">172</field>
	</row>
	<row>
		<field name="help_topic_id">168</field>
		<field name="help_keyword_id">173</field>
	</row>
	<row>
		<field name="help_topic_id">169</field>
		<field name="help_keyword_id">174</field>
	</row>
	<row>
		<field name="help_topic_id">170</field>
		<field name="help_keyword_id">175</field>
	</row>
	<row>
		<field name="help_topic_id">171</field>
		<field name="help_keyword_id">176</field>
	</row>
	<row>
		<field name="help_topic_id">172</field>
		<field name="help_keyword_id">177</field>
	</row>
	<row>
		<field name="help_topic_id">173</field>
		<field name="help_keyword_id">178</field>
	</row>
	<row>
		<field name="help_topic_id">174</field>
		<field name="help_keyword_id">179</field>
	</row>
	<row>
		<field name="help_topic_id">175</field>
		<field name="help_keyword_id">180</field>
	</row>
	<row>
		<field name="help_topic_id">176</field>
		<field name="help_keyword_id">181</field>
	</row>
	<row>
		<field name="help_topic_id">177</field>
		<field name="help_keyword_id">182</field>
	</row>
	<row>
		<field name="help_topic_id">178</field>
		<field name="help_keyword_id">183</field>
	</row>
	<row>
		<field name="help_topic_id">180</field>
		<field name="help_keyword_id">184</field>
	</row>
	<row>
		<field name="help_topic_id">181</field>
		<field name="help_keyword_id">185</field>
	</row>
	<row>
		<field name="help_topic_id">182</field>
		<field name="help_keyword_id">186</field>
	</row>
	<row>
		<field name="help_topic_id">183</field>
		<field name="help_keyword_id">187</field>
	</row>
	<row>
		<field name="help_topic_id">185</field>
		<field name="help_keyword_id">188</field>
	</row>
	<row>
		<field name="help_topic_id">186</field>
		<field name="help_keyword_id">189</field>
	</row>
	<row>
		<field name="help_topic_id">187</field>
		<field name="help_keyword_id">190</field>
	</row>
	<row>
		<field name="help_topic_id">188</field>
		<field name="help_keyword_id">191</field>
	</row>
	<row>
		<field name="help_topic_id">189</field>
		<field name="help_keyword_id">192</field>
	</row>
	<row>
		<field name="help_topic_id">190</field>
		<field name="help_keyword_id">193</field>
	</row>
	<row>
		<field name="help_topic_id">191</field>
		<field name="help_keyword_id">194</field>
	</row>
	<row>
		<field name="help_topic_id">192</field>
		<field name="help_keyword_id">195</field>
	</row>
	<row>
		<field name="help_topic_id">193</field>
		<field name="help_keyword_id">196</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">196</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">196</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">196</field>
	</row>
	<row>
		<field name="help_topic_id">194</field>
		<field name="help_keyword_id">197</field>
	</row>
	<row>
		<field name="help_topic_id">195</field>
		<field name="help_keyword_id">198</field>
	</row>
	<row>
		<field name="help_topic_id">196</field>
		<field name="help_keyword_id">199</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">199</field>
	</row>
	<row>
		<field name="help_topic_id">548</field>
		<field name="help_keyword_id">199</field>
	</row>
	<row>
		<field name="help_topic_id">549</field>
		<field name="help_keyword_id">199</field>
	</row>
	<row>
		<field name="help_topic_id">197</field>
		<field name="help_keyword_id">200</field>
	</row>
	<row>
		<field name="help_topic_id">198</field>
		<field name="help_keyword_id">201</field>
	</row>
	<row>
		<field name="help_topic_id">199</field>
		<field name="help_keyword_id">202</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">202</field>
	</row>
	<row>
		<field name="help_topic_id">200</field>
		<field name="help_keyword_id">203</field>
	</row>
	<row>
		<field name="help_topic_id">201</field>
		<field name="help_keyword_id">204</field>
	</row>
	<row>
		<field name="help_topic_id">202</field>
		<field name="help_keyword_id">205</field>
	</row>
	<row>
		<field name="help_topic_id">203</field>
		<field name="help_keyword_id">206</field>
	</row>
	<row>
		<field name="help_topic_id">204</field>
		<field name="help_keyword_id">207</field>
	</row>
	<row>
		<field name="help_topic_id">205</field>
		<field name="help_keyword_id">208</field>
	</row>
	<row>
		<field name="help_topic_id">206</field>
		<field name="help_keyword_id">209</field>
	</row>
	<row>
		<field name="help_topic_id">207</field>
		<field name="help_keyword_id">210</field>
	</row>
	<row>
		<field name="help_topic_id">208</field>
		<field name="help_keyword_id">211</field>
	</row>
	<row>
		<field name="help_topic_id">209</field>
		<field name="help_keyword_id">212</field>
	</row>
	<row>
		<field name="help_topic_id">210</field>
		<field name="help_keyword_id">213</field>
	</row>
	<row>
		<field name="help_topic_id">211</field>
		<field name="help_keyword_id">214</field>
	</row>
	<row>
		<field name="help_topic_id">212</field>
		<field name="help_keyword_id">215</field>
	</row>
	<row>
		<field name="help_topic_id">213</field>
		<field name="help_keyword_id">216</field>
	</row>
	<row>
		<field name="help_topic_id">598</field>
		<field name="help_keyword_id">216</field>
	</row>
	<row>
		<field name="help_topic_id">214</field>
		<field name="help_keyword_id">217</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">217</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">217</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">217</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="help_keyword_id">217</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">217</field>
	</row>
	<row>
		<field name="help_topic_id">619</field>
		<field name="help_keyword_id">217</field>
	</row>
	<row>
		<field name="help_topic_id">215</field>
		<field name="help_keyword_id">218</field>
	</row>
	<row>
		<field name="help_topic_id">216</field>
		<field name="help_keyword_id">219</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">219</field>
	</row>
	<row>
		<field name="help_topic_id">217</field>
		<field name="help_keyword_id">220</field>
	</row>
	<row>
		<field name="help_topic_id">218</field>
		<field name="help_keyword_id">221</field>
	</row>
	<row>
		<field name="help_topic_id">219</field>
		<field name="help_keyword_id">222</field>
	</row>
	<row>
		<field name="help_topic_id">220</field>
		<field name="help_keyword_id">223</field>
	</row>
	<row>
		<field name="help_topic_id">232</field>
		<field name="help_keyword_id">223</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">223</field>
	</row>
	<row>
		<field name="help_topic_id">647</field>
		<field name="help_keyword_id">223</field>
	</row>
	<row>
		<field name="help_topic_id">648</field>
		<field name="help_keyword_id">223</field>
	</row>
	<row>
		<field name="help_topic_id">220</field>
		<field name="help_keyword_id">224</field>
	</row>
	<row>
		<field name="help_topic_id">221</field>
		<field name="help_keyword_id">225</field>
	</row>
	<row>
		<field name="help_topic_id">222</field>
		<field name="help_keyword_id">226</field>
	</row>
	<row>
		<field name="help_topic_id">223</field>
		<field name="help_keyword_id">227</field>
	</row>
	<row>
		<field name="help_topic_id">224</field>
		<field name="help_keyword_id">228</field>
	</row>
	<row>
		<field name="help_topic_id">225</field>
		<field name="help_keyword_id">229</field>
	</row>
	<row>
		<field name="help_topic_id">226</field>
		<field name="help_keyword_id">230</field>
	</row>
	<row>
		<field name="help_topic_id">226</field>
		<field name="help_keyword_id">231</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="help_keyword_id">231</field>
	</row>
	<row>
		<field name="help_topic_id">546</field>
		<field name="help_keyword_id">231</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">231</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">231</field>
	</row>
	<row>
		<field name="help_topic_id">644</field>
		<field name="help_keyword_id">231</field>
	</row>
	<row>
		<field name="help_topic_id">647</field>
		<field name="help_keyword_id">231</field>
	</row>
	<row>
		<field name="help_topic_id">648</field>
		<field name="help_keyword_id">231</field>
	</row>
	<row>
		<field name="help_topic_id">667</field>
		<field name="help_keyword_id">231</field>
	</row>
	<row>
		<field name="help_topic_id">677</field>
		<field name="help_keyword_id">231</field>
	</row>
	<row>
		<field name="help_topic_id">226</field>
		<field name="help_keyword_id">232</field>
	</row>
	<row>
		<field name="help_topic_id">226</field>
		<field name="help_keyword_id">233</field>
	</row>
	<row>
		<field name="help_topic_id">226</field>
		<field name="help_keyword_id">234</field>
	</row>
	<row>
		<field name="help_topic_id">227</field>
		<field name="help_keyword_id">235</field>
	</row>
	<row>
		<field name="help_topic_id">228</field>
		<field name="help_keyword_id">236</field>
	</row>
	<row>
		<field name="help_topic_id">229</field>
		<field name="help_keyword_id">237</field>
	</row>
	<row>
		<field name="help_topic_id">230</field>
		<field name="help_keyword_id">238</field>
	</row>
	<row>
		<field name="help_topic_id">231</field>
		<field name="help_keyword_id">239</field>
	</row>
	<row>
		<field name="help_topic_id">233</field>
		<field name="help_keyword_id">240</field>
	</row>
	<row>
		<field name="help_topic_id">234</field>
		<field name="help_keyword_id">241</field>
	</row>
	<row>
		<field name="help_topic_id">235</field>
		<field name="help_keyword_id">242</field>
	</row>
	<row>
		<field name="help_topic_id">236</field>
		<field name="help_keyword_id">243</field>
	</row>
	<row>
		<field name="help_topic_id">237</field>
		<field name="help_keyword_id">244</field>
	</row>
	<row>
		<field name="help_topic_id">238</field>
		<field name="help_keyword_id">245</field>
	</row>
	<row>
		<field name="help_topic_id">239</field>
		<field name="help_keyword_id">246</field>
	</row>
	<row>
		<field name="help_topic_id">240</field>
		<field name="help_keyword_id">247</field>
	</row>
	<row>
		<field name="help_topic_id">240</field>
		<field name="help_keyword_id">248</field>
	</row>
	<row>
		<field name="help_topic_id">240</field>
		<field name="help_keyword_id">249</field>
	</row>
	<row>
		<field name="help_topic_id">240</field>
		<field name="help_keyword_id">250</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">250</field>
	</row>
	<row>
		<field name="help_topic_id">240</field>
		<field name="help_keyword_id">251</field>
	</row>
	<row>
		<field name="help_topic_id">691</field>
		<field name="help_keyword_id">251</field>
	</row>
	<row>
		<field name="help_topic_id">240</field>
		<field name="help_keyword_id">252</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">252</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="help_keyword_id">252</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">252</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">252</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">252</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">252</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">252</field>
	</row>
	<row>
		<field name="help_topic_id">241</field>
		<field name="help_keyword_id">253</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">253</field>
	</row>
	<row>
		<field name="help_topic_id">573</field>
		<field name="help_keyword_id">253</field>
	</row>
	<row>
		<field name="help_topic_id">574</field>
		<field name="help_keyword_id">253</field>
	</row>
	<row>
		<field name="help_topic_id">642</field>
		<field name="help_keyword_id">253</field>
	</row>
	<row>
		<field name="help_topic_id">643</field>
		<field name="help_keyword_id">253</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">253</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">254</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">255</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">256</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">257</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">257</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">257</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">257</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">258</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="help_keyword_id">259</field>
	</row>
	<row>
		<field name="help_topic_id">243</field>
		<field name="help_keyword_id">260</field>
	</row>
	<row>
		<field name="help_topic_id">244</field>
		<field name="help_keyword_id">261</field>
	</row>
	<row>
		<field name="help_topic_id">245</field>
		<field name="help_keyword_id">262</field>
	</row>
	<row>
		<field name="help_topic_id">246</field>
		<field name="help_keyword_id">263</field>
	</row>
	<row>
		<field name="help_topic_id">247</field>
		<field name="help_keyword_id">264</field>
	</row>
	<row>
		<field name="help_topic_id">248</field>
		<field name="help_keyword_id">265</field>
	</row>
	<row>
		<field name="help_topic_id">249</field>
		<field name="help_keyword_id">266</field>
	</row>
	<row>
		<field name="help_topic_id">250</field>
		<field name="help_keyword_id">267</field>
	</row>
	<row>
		<field name="help_topic_id">251</field>
		<field name="help_keyword_id">268</field>
	</row>
	<row>
		<field name="help_topic_id">252</field>
		<field name="help_keyword_id">269</field>
	</row>
	<row>
		<field name="help_topic_id">253</field>
		<field name="help_keyword_id">270</field>
	</row>
	<row>
		<field name="help_topic_id">254</field>
		<field name="help_keyword_id">271</field>
	</row>
	<row>
		<field name="help_topic_id">255</field>
		<field name="help_keyword_id">272</field>
	</row>
	<row>
		<field name="help_topic_id">256</field>
		<field name="help_keyword_id">273</field>
	</row>
	<row>
		<field name="help_topic_id">257</field>
		<field name="help_keyword_id">274</field>
	</row>
	<row>
		<field name="help_topic_id">258</field>
		<field name="help_keyword_id">275</field>
	</row>
	<row>
		<field name="help_topic_id">258</field>
		<field name="help_keyword_id">276</field>
	</row>
	<row>
		<field name="help_topic_id">259</field>
		<field name="help_keyword_id">277</field>
	</row>
	<row>
		<field name="help_topic_id">260</field>
		<field name="help_keyword_id">278</field>
	</row>
	<row>
		<field name="help_topic_id">261</field>
		<field name="help_keyword_id">279</field>
	</row>
	<row>
		<field name="help_topic_id">262</field>
		<field name="help_keyword_id">280</field>
	</row>
	<row>
		<field name="help_topic_id">263</field>
		<field name="help_keyword_id">281</field>
	</row>
	<row>
		<field name="help_topic_id">264</field>
		<field name="help_keyword_id">282</field>
	</row>
	<row>
		<field name="help_topic_id">265</field>
		<field name="help_keyword_id">283</field>
	</row>
	<row>
		<field name="help_topic_id">266</field>
		<field name="help_keyword_id">284</field>
	</row>
	<row>
		<field name="help_topic_id">267</field>
		<field name="help_keyword_id">285</field>
	</row>
	<row>
		<field name="help_topic_id">268</field>
		<field name="help_keyword_id">286</field>
	</row>
	<row>
		<field name="help_topic_id">269</field>
		<field name="help_keyword_id">287</field>
	</row>
	<row>
		<field name="help_topic_id">270</field>
		<field name="help_keyword_id">288</field>
	</row>
	<row>
		<field name="help_topic_id">271</field>
		<field name="help_keyword_id">289</field>
	</row>
	<row>
		<field name="help_topic_id">638</field>
		<field name="help_keyword_id">289</field>
	</row>
	<row>
		<field name="help_topic_id">639</field>
		<field name="help_keyword_id">289</field>
	</row>
	<row>
		<field name="help_topic_id">272</field>
		<field name="help_keyword_id">290</field>
	</row>
	<row>
		<field name="help_topic_id">273</field>
		<field name="help_keyword_id">291</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">291</field>
	</row>
	<row>
		<field name="help_topic_id">646</field>
		<field name="help_keyword_id">291</field>
	</row>
	<row>
		<field name="help_topic_id">274</field>
		<field name="help_keyword_id">292</field>
	</row>
	<row>
		<field name="help_topic_id">275</field>
		<field name="help_keyword_id">293</field>
	</row>
	<row>
		<field name="help_topic_id">276</field>
		<field name="help_keyword_id">294</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">294</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">294</field>
	</row>
	<row>
		<field name="help_topic_id">277</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">527</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">528</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">649</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">650</field>
		<field name="help_keyword_id">295</field>
	</row>
	<row>
		<field name="help_topic_id">278</field>
		<field name="help_keyword_id">296</field>
	</row>
	<row>
		<field name="help_topic_id">279</field>
		<field name="help_keyword_id">297</field>
	</row>
	<row>
		<field name="help_topic_id">280</field>
		<field name="help_keyword_id">298</field>
	</row>
	<row>
		<field name="help_topic_id">281</field>
		<field name="help_keyword_id">299</field>
	</row>
	<row>
		<field name="help_topic_id">282</field>
		<field name="help_keyword_id">300</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">300</field>
	</row>
	<row>
		<field name="help_topic_id">283</field>
		<field name="help_keyword_id">301</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="help_keyword_id">301</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="help_keyword_id">301</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">301</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">301</field>
	</row>
	<row>
		<field name="help_topic_id">527</field>
		<field name="help_keyword_id">301</field>
	</row>
	<row>
		<field name="help_topic_id">528</field>
		<field name="help_keyword_id">301</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">301</field>
	</row>
	<row>
		<field name="help_topic_id">649</field>
		<field name="help_keyword_id">301</field>
	</row>
	<row>
		<field name="help_topic_id">650</field>
		<field name="help_keyword_id">301</field>
	</row>
	<row>
		<field name="help_topic_id">284</field>
		<field name="help_keyword_id">302</field>
	</row>
	<row>
		<field name="help_topic_id">285</field>
		<field name="help_keyword_id">303</field>
	</row>
	<row>
		<field name="help_topic_id">286</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">614</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">616</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">656</field>
		<field name="help_keyword_id">304</field>
	</row>
	<row>
		<field name="help_topic_id">287</field>
		<field name="help_keyword_id">305</field>
	</row>
	<row>
		<field name="help_topic_id">288</field>
		<field name="help_keyword_id">306</field>
	</row>
	<row>
		<field name="help_topic_id">288</field>
		<field name="help_keyword_id">307</field>
	</row>
	<row>
		<field name="help_topic_id">289</field>
		<field name="help_keyword_id">308</field>
	</row>
	<row>
		<field name="help_topic_id">289</field>
		<field name="help_keyword_id">309</field>
	</row>
	<row>
		<field name="help_topic_id">290</field>
		<field name="help_keyword_id">310</field>
	</row>
	<row>
		<field name="help_topic_id">290</field>
		<field name="help_keyword_id">311</field>
	</row>
	<row>
		<field name="help_topic_id">291</field>
		<field name="help_keyword_id">312</field>
	</row>
	<row>
		<field name="help_topic_id">291</field>
		<field name="help_keyword_id">313</field>
	</row>
	<row>
		<field name="help_topic_id">292</field>
		<field name="help_keyword_id">314</field>
	</row>
	<row>
		<field name="help_topic_id">292</field>
		<field name="help_keyword_id">315</field>
	</row>
	<row>
		<field name="help_topic_id">293</field>
		<field name="help_keyword_id">316</field>
	</row>
	<row>
		<field name="help_topic_id">293</field>
		<field name="help_keyword_id">317</field>
	</row>
	<row>
		<field name="help_topic_id">294</field>
		<field name="help_keyword_id">318</field>
	</row>
	<row>
		<field name="help_topic_id">295</field>
		<field name="help_keyword_id">319</field>
	</row>
	<row>
		<field name="help_topic_id">295</field>
		<field name="help_keyword_id">320</field>
	</row>
	<row>
		<field name="help_topic_id">296</field>
		<field name="help_keyword_id">321</field>
	</row>
	<row>
		<field name="help_topic_id">296</field>
		<field name="help_keyword_id">322</field>
	</row>
	<row>
		<field name="help_topic_id">297</field>
		<field name="help_keyword_id">323</field>
	</row>
	<row>
		<field name="help_topic_id">297</field>
		<field name="help_keyword_id">324</field>
	</row>
	<row>
		<field name="help_topic_id">298</field>
		<field name="help_keyword_id">325</field>
	</row>
	<row>
		<field name="help_topic_id">298</field>
		<field name="help_keyword_id">326</field>
	</row>
	<row>
		<field name="help_topic_id">299</field>
		<field name="help_keyword_id">327</field>
	</row>
	<row>
		<field name="help_topic_id">299</field>
		<field name="help_keyword_id">328</field>
	</row>
	<row>
		<field name="help_topic_id">300</field>
		<field name="help_keyword_id">329</field>
	</row>
	<row>
		<field name="help_topic_id">300</field>
		<field name="help_keyword_id">330</field>
	</row>
	<row>
		<field name="help_topic_id">301</field>
		<field name="help_keyword_id">331</field>
	</row>
	<row>
		<field name="help_topic_id">301</field>
		<field name="help_keyword_id">332</field>
	</row>
	<row>
		<field name="help_topic_id">302</field>
		<field name="help_keyword_id">333</field>
	</row>
	<row>
		<field name="help_topic_id">303</field>
		<field name="help_keyword_id">334</field>
	</row>
	<row>
		<field name="help_topic_id">303</field>
		<field name="help_keyword_id">335</field>
	</row>
	<row>
		<field name="help_topic_id">304</field>
		<field name="help_keyword_id">336</field>
	</row>
	<row>
		<field name="help_topic_id">305</field>
		<field name="help_keyword_id">337</field>
	</row>
	<row>
		<field name="help_topic_id">306</field>
		<field name="help_keyword_id">338</field>
	</row>
	<row>
		<field name="help_topic_id">307</field>
		<field name="help_keyword_id">339</field>
	</row>
	<row>
		<field name="help_topic_id">308</field>
		<field name="help_keyword_id">340</field>
	</row>
	<row>
		<field name="help_topic_id">309</field>
		<field name="help_keyword_id">341</field>
	</row>
	<row>
		<field name="help_topic_id">310</field>
		<field name="help_keyword_id">342</field>
	</row>
	<row>
		<field name="help_topic_id">311</field>
		<field name="help_keyword_id">343</field>
	</row>
	<row>
		<field name="help_topic_id">312</field>
		<field name="help_keyword_id">344</field>
	</row>
	<row>
		<field name="help_topic_id">312</field>
		<field name="help_keyword_id">345</field>
	</row>
	<row>
		<field name="help_topic_id">313</field>
		<field name="help_keyword_id">346</field>
	</row>
	<row>
		<field name="help_topic_id">313</field>
		<field name="help_keyword_id">347</field>
	</row>
	<row>
		<field name="help_topic_id">314</field>
		<field name="help_keyword_id">348</field>
	</row>
	<row>
		<field name="help_topic_id">315</field>
		<field name="help_keyword_id">349</field>
	</row>
	<row>
		<field name="help_topic_id">316</field>
		<field name="help_keyword_id">350</field>
	</row>
	<row>
		<field name="help_topic_id">317</field>
		<field name="help_keyword_id">351</field>
	</row>
	<row>
		<field name="help_topic_id">318</field>
		<field name="help_keyword_id">352</field>
	</row>
	<row>
		<field name="help_topic_id">319</field>
		<field name="help_keyword_id">353</field>
	</row>
	<row>
		<field name="help_topic_id">320</field>
		<field name="help_keyword_id">354</field>
	</row>
	<row>
		<field name="help_topic_id">321</field>
		<field name="help_keyword_id">355</field>
	</row>
	<row>
		<field name="help_topic_id">322</field>
		<field name="help_keyword_id">356</field>
	</row>
	<row>
		<field name="help_topic_id">323</field>
		<field name="help_keyword_id">357</field>
	</row>
	<row>
		<field name="help_topic_id">324</field>
		<field name="help_keyword_id">358</field>
	</row>
	<row>
		<field name="help_topic_id">325</field>
		<field name="help_keyword_id">359</field>
	</row>
	<row>
		<field name="help_topic_id">326</field>
		<field name="help_keyword_id">360</field>
	</row>
	<row>
		<field name="help_topic_id">327</field>
		<field name="help_keyword_id">361</field>
	</row>
	<row>
		<field name="help_topic_id">328</field>
		<field name="help_keyword_id">362</field>
	</row>
	<row>
		<field name="help_topic_id">329</field>
		<field name="help_keyword_id">363</field>
	</row>
	<row>
		<field name="help_topic_id">330</field>
		<field name="help_keyword_id">364</field>
	</row>
	<row>
		<field name="help_topic_id">331</field>
		<field name="help_keyword_id">365</field>
	</row>
	<row>
		<field name="help_topic_id">332</field>
		<field name="help_keyword_id">366</field>
	</row>
	<row>
		<field name="help_topic_id">333</field>
		<field name="help_keyword_id">367</field>
	</row>
	<row>
		<field name="help_topic_id">334</field>
		<field name="help_keyword_id">368</field>
	</row>
	<row>
		<field name="help_topic_id">335</field>
		<field name="help_keyword_id">369</field>
	</row>
	<row>
		<field name="help_topic_id">335</field>
		<field name="help_keyword_id">370</field>
	</row>
	<row>
		<field name="help_topic_id">336</field>
		<field name="help_keyword_id">371</field>
	</row>
	<row>
		<field name="help_topic_id">337</field>
		<field name="help_keyword_id">372</field>
	</row>
	<row>
		<field name="help_topic_id">338</field>
		<field name="help_keyword_id">373</field>
	</row>
	<row>
		<field name="help_topic_id">339</field>
		<field name="help_keyword_id">374</field>
	</row>
	<row>
		<field name="help_topic_id">340</field>
		<field name="help_keyword_id">375</field>
	</row>
	<row>
		<field name="help_topic_id">341</field>
		<field name="help_keyword_id">376</field>
	</row>
	<row>
		<field name="help_topic_id">342</field>
		<field name="help_keyword_id">377</field>
	</row>
	<row>
		<field name="help_topic_id">343</field>
		<field name="help_keyword_id">378</field>
	</row>
	<row>
		<field name="help_topic_id">344</field>
		<field name="help_keyword_id">379</field>
	</row>
	<row>
		<field name="help_topic_id">345</field>
		<field name="help_keyword_id">380</field>
	</row>
	<row>
		<field name="help_topic_id">346</field>
		<field name="help_keyword_id">381</field>
	</row>
	<row>
		<field name="help_topic_id">347</field>
		<field name="help_keyword_id">382</field>
	</row>
	<row>
		<field name="help_topic_id">348</field>
		<field name="help_keyword_id">383</field>
	</row>
	<row>
		<field name="help_topic_id">349</field>
		<field name="help_keyword_id">384</field>
	</row>
	<row>
		<field name="help_topic_id">350</field>
		<field name="help_keyword_id">385</field>
	</row>
	<row>
		<field name="help_topic_id">351</field>
		<field name="help_keyword_id">386</field>
	</row>
	<row>
		<field name="help_topic_id">352</field>
		<field name="help_keyword_id">387</field>
	</row>
	<row>
		<field name="help_topic_id">353</field>
		<field name="help_keyword_id">388</field>
	</row>
	<row>
		<field name="help_topic_id">354</field>
		<field name="help_keyword_id">389</field>
	</row>
	<row>
		<field name="help_topic_id">355</field>
		<field name="help_keyword_id">390</field>
	</row>
	<row>
		<field name="help_topic_id">356</field>
		<field name="help_keyword_id">391</field>
	</row>
	<row>
		<field name="help_topic_id">357</field>
		<field name="help_keyword_id">392</field>
	</row>
	<row>
		<field name="help_topic_id">358</field>
		<field name="help_keyword_id">393</field>
	</row>
	<row>
		<field name="help_topic_id">359</field>
		<field name="help_keyword_id">394</field>
	</row>
	<row>
		<field name="help_topic_id">360</field>
		<field name="help_keyword_id">395</field>
	</row>
	<row>
		<field name="help_topic_id">361</field>
		<field name="help_keyword_id">396</field>
	</row>
	<row>
		<field name="help_topic_id">362</field>
		<field name="help_keyword_id">397</field>
	</row>
	<row>
		<field name="help_topic_id">363</field>
		<field name="help_keyword_id">398</field>
	</row>
	<row>
		<field name="help_topic_id">364</field>
		<field name="help_keyword_id">399</field>
	</row>
	<row>
		<field name="help_topic_id">365</field>
		<field name="help_keyword_id">400</field>
	</row>
	<row>
		<field name="help_topic_id">366</field>
		<field name="help_keyword_id">401</field>
	</row>
	<row>
		<field name="help_topic_id">367</field>
		<field name="help_keyword_id">402</field>
	</row>
	<row>
		<field name="help_topic_id">368</field>
		<field name="help_keyword_id">403</field>
	</row>
	<row>
		<field name="help_topic_id">369</field>
		<field name="help_keyword_id">404</field>
	</row>
	<row>
		<field name="help_topic_id">370</field>
		<field name="help_keyword_id">405</field>
	</row>
	<row>
		<field name="help_topic_id">371</field>
		<field name="help_keyword_id">406</field>
	</row>
	<row>
		<field name="help_topic_id">372</field>
		<field name="help_keyword_id">407</field>
	</row>
	<row>
		<field name="help_topic_id">373</field>
		<field name="help_keyword_id">408</field>
	</row>
	<row>
		<field name="help_topic_id">374</field>
		<field name="help_keyword_id">409</field>
	</row>
	<row>
		<field name="help_topic_id">375</field>
		<field name="help_keyword_id">410</field>
	</row>
	<row>
		<field name="help_topic_id">376</field>
		<field name="help_keyword_id">411</field>
	</row>
	<row>
		<field name="help_topic_id">377</field>
		<field name="help_keyword_id">412</field>
	</row>
	<row>
		<field name="help_topic_id">378</field>
		<field name="help_keyword_id">413</field>
	</row>
	<row>
		<field name="help_topic_id">379</field>
		<field name="help_keyword_id">414</field>
	</row>
	<row>
		<field name="help_topic_id">380</field>
		<field name="help_keyword_id">415</field>
	</row>
	<row>
		<field name="help_topic_id">381</field>
		<field name="help_keyword_id">416</field>
	</row>
	<row>
		<field name="help_topic_id">382</field>
		<field name="help_keyword_id">417</field>
	</row>
	<row>
		<field name="help_topic_id">383</field>
		<field name="help_keyword_id">418</field>
	</row>
	<row>
		<field name="help_topic_id">384</field>
		<field name="help_keyword_id">419</field>
	</row>
	<row>
		<field name="help_topic_id">385</field>
		<field name="help_keyword_id">420</field>
	</row>
	<row>
		<field name="help_topic_id">386</field>
		<field name="help_keyword_id">421</field>
	</row>
	<row>
		<field name="help_topic_id">387</field>
		<field name="help_keyword_id">422</field>
	</row>
	<row>
		<field name="help_topic_id">388</field>
		<field name="help_keyword_id">422</field>
	</row>
	<row>
		<field name="help_topic_id">387</field>
		<field name="help_keyword_id">423</field>
	</row>
	<row>
		<field name="help_topic_id">387</field>
		<field name="help_keyword_id">424</field>
	</row>
	<row>
		<field name="help_topic_id">388</field>
		<field name="help_keyword_id">425</field>
	</row>
	<row>
		<field name="help_topic_id">388</field>
		<field name="help_keyword_id">426</field>
	</row>
	<row>
		<field name="help_topic_id">388</field>
		<field name="help_keyword_id">427</field>
	</row>
	<row>
		<field name="help_topic_id">389</field>
		<field name="help_keyword_id">428</field>
	</row>
	<row>
		<field name="help_topic_id">390</field>
		<field name="help_keyword_id">429</field>
	</row>
	<row>
		<field name="help_topic_id">391</field>
		<field name="help_keyword_id">430</field>
	</row>
	<row>
		<field name="help_topic_id">392</field>
		<field name="help_keyword_id">431</field>
	</row>
	<row>
		<field name="help_topic_id">393</field>
		<field name="help_keyword_id">432</field>
	</row>
	<row>
		<field name="help_topic_id">393</field>
		<field name="help_keyword_id">433</field>
	</row>
	<row>
		<field name="help_topic_id">394</field>
		<field name="help_keyword_id">434</field>
	</row>
	<row>
		<field name="help_topic_id">395</field>
		<field name="help_keyword_id">435</field>
	</row>
	<row>
		<field name="help_topic_id">396</field>
		<field name="help_keyword_id">436</field>
	</row>
	<row>
		<field name="help_topic_id">397</field>
		<field name="help_keyword_id">437</field>
	</row>
	<row>
		<field name="help_topic_id">398</field>
		<field name="help_keyword_id">438</field>
	</row>
	<row>
		<field name="help_topic_id">399</field>
		<field name="help_keyword_id">439</field>
	</row>
	<row>
		<field name="help_topic_id">400</field>
		<field name="help_keyword_id">440</field>
	</row>
	<row>
		<field name="help_topic_id">401</field>
		<field name="help_keyword_id">441</field>
	</row>
	<row>
		<field name="help_topic_id">402</field>
		<field name="help_keyword_id">442</field>
	</row>
	<row>
		<field name="help_topic_id">403</field>
		<field name="help_keyword_id">443</field>
	</row>
	<row>
		<field name="help_topic_id">404</field>
		<field name="help_keyword_id">444</field>
	</row>
	<row>
		<field name="help_topic_id">405</field>
		<field name="help_keyword_id">445</field>
	</row>
	<row>
		<field name="help_topic_id">406</field>
		<field name="help_keyword_id">446</field>
	</row>
	<row>
		<field name="help_topic_id">407</field>
		<field name="help_keyword_id">447</field>
	</row>
	<row>
		<field name="help_topic_id">408</field>
		<field name="help_keyword_id">448</field>
	</row>
	<row>
		<field name="help_topic_id">409</field>
		<field name="help_keyword_id">449</field>
	</row>
	<row>
		<field name="help_topic_id">410</field>
		<field name="help_keyword_id">450</field>
	</row>
	<row>
		<field name="help_topic_id">411</field>
		<field name="help_keyword_id">451</field>
	</row>
	<row>
		<field name="help_topic_id">412</field>
		<field name="help_keyword_id">452</field>
	</row>
	<row>
		<field name="help_topic_id">413</field>
		<field name="help_keyword_id">453</field>
	</row>
	<row>
		<field name="help_topic_id">414</field>
		<field name="help_keyword_id">454</field>
	</row>
	<row>
		<field name="help_topic_id">415</field>
		<field name="help_keyword_id">455</field>
	</row>
	<row>
		<field name="help_topic_id">416</field>
		<field name="help_keyword_id">456</field>
	</row>
	<row>
		<field name="help_topic_id">417</field>
		<field name="help_keyword_id">457</field>
	</row>
	<row>
		<field name="help_topic_id">418</field>
		<field name="help_keyword_id">458</field>
	</row>
	<row>
		<field name="help_topic_id">419</field>
		<field name="help_keyword_id">459</field>
	</row>
	<row>
		<field name="help_topic_id">420</field>
		<field name="help_keyword_id">460</field>
	</row>
	<row>
		<field name="help_topic_id">420</field>
		<field name="help_keyword_id">461</field>
	</row>
	<row>
		<field name="help_topic_id">425</field>
		<field name="help_keyword_id">461</field>
	</row>
	<row>
		<field name="help_topic_id">426</field>
		<field name="help_keyword_id">461</field>
	</row>
	<row>
		<field name="help_topic_id">429</field>
		<field name="help_keyword_id">461</field>
	</row>
	<row>
		<field name="help_topic_id">430</field>
		<field name="help_keyword_id">461</field>
	</row>
	<row>
		<field name="help_topic_id">435</field>
		<field name="help_keyword_id">461</field>
	</row>
	<row>
		<field name="help_topic_id">544</field>
		<field name="help_keyword_id">461</field>
	</row>
	<row>
		<field name="help_topic_id">550</field>
		<field name="help_keyword_id">461</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">461</field>
	</row>
	<row>
		<field name="help_topic_id">560</field>
		<field name="help_keyword_id">461</field>
	</row>
	<row>
		<field name="help_topic_id">421</field>
		<field name="help_keyword_id">462</field>
	</row>
	<row>
		<field name="help_topic_id">422</field>
		<field name="help_keyword_id">463</field>
	</row>
	<row>
		<field name="help_topic_id">423</field>
		<field name="help_keyword_id">464</field>
	</row>
	<row>
		<field name="help_topic_id">424</field>
		<field name="help_keyword_id">465</field>
	</row>
	<row>
		<field name="help_topic_id">425</field>
		<field name="help_keyword_id">465</field>
	</row>
	<row>
		<field name="help_topic_id">662</field>
		<field name="help_keyword_id">465</field>
	</row>
	<row>
		<field name="help_topic_id">687</field>
		<field name="help_keyword_id">465</field>
	</row>
	<row>
		<field name="help_topic_id">426</field>
		<field name="help_keyword_id">466</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">466</field>
	</row>
	<row>
		<field name="help_topic_id">426</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">553</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">559</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">467</field>
	</row>
	<row>
		<field name="help_topic_id">426</field>
		<field name="help_keyword_id">468</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">468</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">468</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">468</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">468</field>
	</row>
	<row>
		<field name="help_topic_id">426</field>
		<field name="help_keyword_id">469</field>
	</row>
	<row>
		<field name="help_topic_id">426</field>
		<field name="help_keyword_id">470</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">470</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="help_keyword_id">470</field>
	</row>
	<row>
		<field name="help_topic_id">553</field>
		<field name="help_keyword_id">470</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">470</field>
	</row>
	<row>
		<field name="help_topic_id">558</field>
		<field name="help_keyword_id">470</field>
	</row>
	<row>
		<field name="help_topic_id">559</field>
		<field name="help_keyword_id">470</field>
	</row>
	<row>
		<field name="help_topic_id">561</field>
		<field name="help_keyword_id">470</field>
	</row>
	<row>
		<field name="help_topic_id">426</field>
		<field name="help_keyword_id">471</field>
	</row>
	<row>
		<field name="help_topic_id">427</field>
		<field name="help_keyword_id">472</field>
	</row>
	<row>
		<field name="help_topic_id">428</field>
		<field name="help_keyword_id">473</field>
	</row>
	<row>
		<field name="help_topic_id">429</field>
		<field name="help_keyword_id">474</field>
	</row>
	<row>
		<field name="help_topic_id">430</field>
		<field name="help_keyword_id">475</field>
	</row>
	<row>
		<field name="help_topic_id">431</field>
		<field name="help_keyword_id">476</field>
	</row>
	<row>
		<field name="help_topic_id">432</field>
		<field name="help_keyword_id">477</field>
	</row>
	<row>
		<field name="help_topic_id">433</field>
		<field name="help_keyword_id">478</field>
	</row>
	<row>
		<field name="help_topic_id">434</field>
		<field name="help_keyword_id">479</field>
	</row>
	<row>
		<field name="help_topic_id">435</field>
		<field name="help_keyword_id">480</field>
	</row>
	<row>
		<field name="help_topic_id">436</field>
		<field name="help_keyword_id">481</field>
	</row>
	<row>
		<field name="help_topic_id">437</field>
		<field name="help_keyword_id">482</field>
	</row>
	<row>
		<field name="help_topic_id">438</field>
		<field name="help_keyword_id">483</field>
	</row>
	<row>
		<field name="help_topic_id">439</field>
		<field name="help_keyword_id">484</field>
	</row>
	<row>
		<field name="help_topic_id">440</field>
		<field name="help_keyword_id">485</field>
	</row>
	<row>
		<field name="help_topic_id">441</field>
		<field name="help_keyword_id">486</field>
	</row>
	<row>
		<field name="help_topic_id">442</field>
		<field name="help_keyword_id">487</field>
	</row>
	<row>
		<field name="help_topic_id">443</field>
		<field name="help_keyword_id">488</field>
	</row>
	<row>
		<field name="help_topic_id">444</field>
		<field name="help_keyword_id">489</field>
	</row>
	<row>
		<field name="help_topic_id">445</field>
		<field name="help_keyword_id">490</field>
	</row>
	<row>
		<field name="help_topic_id">446</field>
		<field name="help_keyword_id">491</field>
	</row>
	<row>
		<field name="help_topic_id">447</field>
		<field name="help_keyword_id">492</field>
	</row>
	<row>
		<field name="help_topic_id">448</field>
		<field name="help_keyword_id">493</field>
	</row>
	<row>
		<field name="help_topic_id">449</field>
		<field name="help_keyword_id">494</field>
	</row>
	<row>
		<field name="help_topic_id">450</field>
		<field name="help_keyword_id">495</field>
	</row>
	<row>
		<field name="help_topic_id">451</field>
		<field name="help_keyword_id">496</field>
	</row>
	<row>
		<field name="help_topic_id">452</field>
		<field name="help_keyword_id">497</field>
	</row>
	<row>
		<field name="help_topic_id">453</field>
		<field name="help_keyword_id">498</field>
	</row>
	<row>
		<field name="help_topic_id">454</field>
		<field name="help_keyword_id">499</field>
	</row>
	<row>
		<field name="help_topic_id">455</field>
		<field name="help_keyword_id">500</field>
	</row>
	<row>
		<field name="help_topic_id">456</field>
		<field name="help_keyword_id">501</field>
	</row>
	<row>
		<field name="help_topic_id">457</field>
		<field name="help_keyword_id">502</field>
	</row>
	<row>
		<field name="help_topic_id">458</field>
		<field name="help_keyword_id">503</field>
	</row>
	<row>
		<field name="help_topic_id">459</field>
		<field name="help_keyword_id">504</field>
	</row>
	<row>
		<field name="help_topic_id">460</field>
		<field name="help_keyword_id">505</field>
	</row>
	<row>
		<field name="help_topic_id">461</field>
		<field name="help_keyword_id">506</field>
	</row>
	<row>
		<field name="help_topic_id">462</field>
		<field name="help_keyword_id">507</field>
	</row>
	<row>
		<field name="help_topic_id">463</field>
		<field name="help_keyword_id">508</field>
	</row>
	<row>
		<field name="help_topic_id">464</field>
		<field name="help_keyword_id">509</field>
	</row>
	<row>
		<field name="help_topic_id">465</field>
		<field name="help_keyword_id">510</field>
	</row>
	<row>
		<field name="help_topic_id">466</field>
		<field name="help_keyword_id">511</field>
	</row>
	<row>
		<field name="help_topic_id">467</field>
		<field name="help_keyword_id">512</field>
	</row>
	<row>
		<field name="help_topic_id">468</field>
		<field name="help_keyword_id">513</field>
	</row>
	<row>
		<field name="help_topic_id">469</field>
		<field name="help_keyword_id">514</field>
	</row>
	<row>
		<field name="help_topic_id">470</field>
		<field name="help_keyword_id">515</field>
	</row>
	<row>
		<field name="help_topic_id">471</field>
		<field name="help_keyword_id">516</field>
	</row>
	<row>
		<field name="help_topic_id">472</field>
		<field name="help_keyword_id">517</field>
	</row>
	<row>
		<field name="help_topic_id">473</field>
		<field name="help_keyword_id">518</field>
	</row>
	<row>
		<field name="help_topic_id">474</field>
		<field name="help_keyword_id">519</field>
	</row>
	<row>
		<field name="help_topic_id">475</field>
		<field name="help_keyword_id">520</field>
	</row>
	<row>
		<field name="help_topic_id">476</field>
		<field name="help_keyword_id">521</field>
	</row>
	<row>
		<field name="help_topic_id">477</field>
		<field name="help_keyword_id">522</field>
	</row>
	<row>
		<field name="help_topic_id">478</field>
		<field name="help_keyword_id">523</field>
	</row>
	<row>
		<field name="help_topic_id">479</field>
		<field name="help_keyword_id">524</field>
	</row>
	<row>
		<field name="help_topic_id">480</field>
		<field name="help_keyword_id">525</field>
	</row>
	<row>
		<field name="help_topic_id">481</field>
		<field name="help_keyword_id">526</field>
	</row>
	<row>
		<field name="help_topic_id">482</field>
		<field name="help_keyword_id">527</field>
	</row>
	<row>
		<field name="help_topic_id">483</field>
		<field name="help_keyword_id">528</field>
	</row>
	<row>
		<field name="help_topic_id">484</field>
		<field name="help_keyword_id">529</field>
	</row>
	<row>
		<field name="help_topic_id">486</field>
		<field name="help_keyword_id">530</field>
	</row>
	<row>
		<field name="help_topic_id">487</field>
		<field name="help_keyword_id">531</field>
	</row>
	<row>
		<field name="help_topic_id">488</field>
		<field name="help_keyword_id">532</field>
	</row>
	<row>
		<field name="help_topic_id">489</field>
		<field name="help_keyword_id">533</field>
	</row>
	<row>
		<field name="help_topic_id">490</field>
		<field name="help_keyword_id">534</field>
	</row>
	<row>
		<field name="help_topic_id">491</field>
		<field name="help_keyword_id">535</field>
	</row>
	<row>
		<field name="help_topic_id">492</field>
		<field name="help_keyword_id">536</field>
	</row>
	<row>
		<field name="help_topic_id">493</field>
		<field name="help_keyword_id">537</field>
	</row>
	<row>
		<field name="help_topic_id">494</field>
		<field name="help_keyword_id">538</field>
	</row>
	<row>
		<field name="help_topic_id">495</field>
		<field name="help_keyword_id">539</field>
	</row>
	<row>
		<field name="help_topic_id">496</field>
		<field name="help_keyword_id">540</field>
	</row>
	<row>
		<field name="help_topic_id">497</field>
		<field name="help_keyword_id">541</field>
	</row>
	<row>
		<field name="help_topic_id">498</field>
		<field name="help_keyword_id">542</field>
	</row>
	<row>
		<field name="help_topic_id">499</field>
		<field name="help_keyword_id">543</field>
	</row>
	<row>
		<field name="help_topic_id">500</field>
		<field name="help_keyword_id">544</field>
	</row>
	<row>
		<field name="help_topic_id">501</field>
		<field name="help_keyword_id">545</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">545</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="help_keyword_id">545</field>
	</row>
	<row>
		<field name="help_topic_id">561</field>
		<field name="help_keyword_id">545</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="help_keyword_id">546</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="help_keyword_id">546</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">546</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">546</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">546</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">546</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="help_keyword_id">547</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="help_keyword_id">547</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">547</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">547</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">547</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">547</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="help_keyword_id">548</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="help_keyword_id">548</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">548</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">548</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">548</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">548</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">548</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">548</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">570</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">549</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">559</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">576</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">618</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">619</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">620</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">624</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">637</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">638</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">639</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">640</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">645</field>
		<field name="help_keyword_id">550</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">551</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">551</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">551</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="help_keyword_id">551</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">551</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">551</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">551</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">551</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">552</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">552</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">553</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">553</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">554</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">554</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">554</field>
	</row>
	<row>
		<field name="help_topic_id">621</field>
		<field name="help_keyword_id">554</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="help_keyword_id">554</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">555</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">555</field>
	</row>
	<row>
		<field name="help_topic_id">543</field>
		<field name="help_keyword_id">555</field>
	</row>
	<row>
		<field name="help_topic_id">600</field>
		<field name="help_keyword_id">555</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">556</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">556</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">556</field>
	</row>
	<row>
		<field name="help_topic_id">621</field>
		<field name="help_keyword_id">556</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="help_keyword_id">556</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">557</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">557</field>
	</row>
	<row>
		<field name="help_topic_id">529</field>
		<field name="help_keyword_id">557</field>
	</row>
	<row>
		<field name="help_topic_id">651</field>
		<field name="help_keyword_id">557</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">558</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">558</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">558</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">558</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">558</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">559</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">559</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">560</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">560</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">560</field>
	</row>
	<row>
		<field name="help_topic_id">539</field>
		<field name="help_keyword_id">560</field>
	</row>
	<row>
		<field name="help_topic_id">616</field>
		<field name="help_keyword_id">560</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">561</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">561</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="help_keyword_id">562</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">562</field>
	</row>
	<row>
		<field name="help_topic_id">581</field>
		<field name="help_keyword_id">562</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">562</field>
	</row>
	<row>
		<field name="help_topic_id">585</field>
		<field name="help_keyword_id">562</field>
	</row>
	<row>
		<field name="help_topic_id">679</field>
		<field name="help_keyword_id">562</field>
	</row>
	<row>
		<field name="help_topic_id">681</field>
		<field name="help_keyword_id">562</field>
	</row>
	<row>
		<field name="help_topic_id">693</field>
		<field name="help_keyword_id">562</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">563</field>
	</row>
	<row>
		<field name="help_topic_id">644</field>
		<field name="help_keyword_id">563</field>
	</row>
	<row>
		<field name="help_topic_id">688</field>
		<field name="help_keyword_id">563</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">580</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">581</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">584</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">585</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">677</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">680</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">681</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">564</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">565</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">565</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">580</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">581</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">584</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">585</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">602</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">605</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">606</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">619</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">624</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">677</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">680</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">681</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">566</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">567</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">567</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">567</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">568</field>
	</row>
	<row>
		<field name="help_topic_id">569</field>
		<field name="help_keyword_id">568</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">569</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">570</field>
	</row>
	<row>
		<field name="help_topic_id">573</field>
		<field name="help_keyword_id">570</field>
	</row>
	<row>
		<field name="help_topic_id">574</field>
		<field name="help_keyword_id">570</field>
	</row>
	<row>
		<field name="help_topic_id">575</field>
		<field name="help_keyword_id">570</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">570</field>
	</row>
	<row>
		<field name="help_topic_id">642</field>
		<field name="help_keyword_id">570</field>
	</row>
	<row>
		<field name="help_topic_id">643</field>
		<field name="help_keyword_id">570</field>
	</row>
	<row>
		<field name="help_topic_id">668</field>
		<field name="help_keyword_id">570</field>
	</row>
	<row>
		<field name="help_topic_id">693</field>
		<field name="help_keyword_id">570</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">571</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">571</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">571</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">572</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">573</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">573</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">574</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">574</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">574</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">574</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">574</field>
	</row>
	<row>
		<field name="help_topic_id">566</field>
		<field name="help_keyword_id">574</field>
	</row>
	<row>
		<field name="help_topic_id">567</field>
		<field name="help_keyword_id">574</field>
	</row>
	<row>
		<field name="help_topic_id">568</field>
		<field name="help_keyword_id">574</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">574</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="help_keyword_id">575</field>
	</row>
	<row>
		<field name="help_topic_id">507</field>
		<field name="help_keyword_id">576</field>
	</row>
	<row>
		<field name="help_topic_id">517</field>
		<field name="help_keyword_id">576</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">576</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">576</field>
	</row>
	<row>
		<field name="help_topic_id">621</field>
		<field name="help_keyword_id">576</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="help_keyword_id">576</field>
	</row>
	<row>
		<field name="help_topic_id">623</field>
		<field name="help_keyword_id">576</field>
	</row>
	<row>
		<field name="help_topic_id">624</field>
		<field name="help_keyword_id">576</field>
	</row>
	<row>
		<field name="help_topic_id">507</field>
		<field name="help_keyword_id">577</field>
	</row>
	<row>
		<field name="help_topic_id">517</field>
		<field name="help_keyword_id">577</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">577</field>
	</row>
	<row>
		<field name="help_topic_id">508</field>
		<field name="help_keyword_id">578</field>
	</row>
	<row>
		<field name="help_topic_id">518</field>
		<field name="help_keyword_id">578</field>
	</row>
	<row>
		<field name="help_topic_id">519</field>
		<field name="help_keyword_id">578</field>
	</row>
	<row>
		<field name="help_topic_id">531</field>
		<field name="help_keyword_id">578</field>
	</row>
	<row>
		<field name="help_topic_id">532</field>
		<field name="help_keyword_id">578</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">578</field>
	</row>
	<row>
		<field name="help_topic_id">653</field>
		<field name="help_keyword_id">578</field>
	</row>
	<row>
		<field name="help_topic_id">672</field>
		<field name="help_keyword_id">578</field>
	</row>
	<row>
		<field name="help_topic_id">673</field>
		<field name="help_keyword_id">578</field>
	</row>
	<row>
		<field name="help_topic_id">509</field>
		<field name="help_keyword_id">579</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">579</field>
	</row>
	<row>
		<field name="help_topic_id">509</field>
		<field name="help_keyword_id">580</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">580</field>
	</row>
	<row>
		<field name="help_topic_id">533</field>
		<field name="help_keyword_id">580</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">581</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">582</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">583</field>
	</row>
	<row>
		<field name="help_topic_id">625</field>
		<field name="help_keyword_id">583</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">583</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">583</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">583</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">584</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">584</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">584</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">584</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">585</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">586</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">586</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">587</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">587</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="help_keyword_id">587</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">587</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">588</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">588</field>
	</row>
	<row>
		<field name="help_topic_id">626</field>
		<field name="help_keyword_id">588</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">589</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">589</field>
	</row>
	<row>
		<field name="help_topic_id">627</field>
		<field name="help_keyword_id">589</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">590</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">591</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">591</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">591</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">591</field>
	</row>
	<row>
		<field name="help_topic_id">647</field>
		<field name="help_keyword_id">591</field>
	</row>
	<row>
		<field name="help_topic_id">648</field>
		<field name="help_keyword_id">591</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">592</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">592</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">593</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">593</field>
	</row>
	<row>
		<field name="help_topic_id">691</field>
		<field name="help_keyword_id">593</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">593</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">593</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">593</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">594</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">594</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">595</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">595</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">595</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">595</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">596</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">596</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">597</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">597</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">598</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">598</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">527</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">528</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">529</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">530</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">531</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">532</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">533</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">534</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">535</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">536</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">537</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">538</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">588</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">589</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">613</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">614</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">623</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">631</field>
		<field name="help_keyword_id">599</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">600</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">600</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">600</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">600</field>
	</row>
	<row>
		<field name="help_topic_id">536</field>
		<field name="help_keyword_id">600</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">600</field>
	</row>
	<row>
		<field name="help_topic_id">660</field>
		<field name="help_keyword_id">600</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">600</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">601</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">602</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">602</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="help_keyword_id">602</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">603</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">603</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">603</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">603</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">604</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="help_keyword_id">604</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">604</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">605</field>
	</row>
	<row>
		<field name="help_topic_id">546</field>
		<field name="help_keyword_id">605</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">605</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">606</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">606</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">607</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="help_keyword_id">607</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">607</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">608</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">608</field>
	</row>
	<row>
		<field name="help_topic_id">667</field>
		<field name="help_keyword_id">608</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">609</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">609</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">610</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">610</field>
	</row>
	<row>
		<field name="help_topic_id">569</field>
		<field name="help_keyword_id">610</field>
	</row>
	<row>
		<field name="help_topic_id">570</field>
		<field name="help_keyword_id">610</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">610</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">610</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">610</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">611</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">611</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">612</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">612</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">613</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">613</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">614</field>
	</row>
	<row>
		<field name="help_topic_id">628</field>
		<field name="help_keyword_id">614</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">615</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">615</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">616</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="help_keyword_id">616</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">616</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">617</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">617</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="help_keyword_id">617</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">617</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">617</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="help_keyword_id">617</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">617</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">617</field>
	</row>
	<row>
		<field name="help_topic_id">689</field>
		<field name="help_keyword_id">617</field>
	</row>
	<row>
		<field name="help_topic_id">692</field>
		<field name="help_keyword_id">617</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">618</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">619</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">619</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">619</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">619</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">619</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">619</field>
	</row>
	<row>
		<field name="help_topic_id">619</field>
		<field name="help_keyword_id">619</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">620</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">621</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">622</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">623</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">624</field>
	</row>
	<row>
		<field name="help_topic_id">629</field>
		<field name="help_keyword_id">624</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">625</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">625</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">626</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="help_keyword_id">626</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">626</field>
	</row>
	<row>
		<field name="help_topic_id">534</field>
		<field name="help_keyword_id">626</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">627</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">627</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">628</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">628</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">629</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">629</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">630</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">630</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">630</field>
	</row>
	<row>
		<field name="help_topic_id">536</field>
		<field name="help_keyword_id">630</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">631</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="help_keyword_id">631</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">632</field>
	</row>
	<row>
		<field name="help_topic_id">553</field>
		<field name="help_keyword_id">632</field>
	</row>
	<row>
		<field name="help_topic_id">560</field>
		<field name="help_keyword_id">632</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">633</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">634</field>
	</row>
	<row>
		<field name="help_topic_id">626</field>
		<field name="help_keyword_id">634</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="help_keyword_id">635</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="help_keyword_id">635</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">635</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">636</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">636</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">637</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">637</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">638</field>
	</row>
	<row>
		<field name="help_topic_id">566</field>
		<field name="help_keyword_id">638</field>
	</row>
	<row>
		<field name="help_topic_id">567</field>
		<field name="help_keyword_id">638</field>
	</row>
	<row>
		<field name="help_topic_id">568</field>
		<field name="help_keyword_id">638</field>
	</row>
	<row>
		<field name="help_topic_id">573</field>
		<field name="help_keyword_id">638</field>
	</row>
	<row>
		<field name="help_topic_id">574</field>
		<field name="help_keyword_id">638</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">638</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">638</field>
	</row>
	<row>
		<field name="help_topic_id">619</field>
		<field name="help_keyword_id">638</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">639</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">639</field>
	</row>
	<row>
		<field name="help_topic_id">536</field>
		<field name="help_keyword_id">639</field>
	</row>
	<row>
		<field name="help_topic_id">606</field>
		<field name="help_keyword_id">639</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="help_keyword_id">640</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">640</field>
	</row>
	<row>
		<field name="help_topic_id">512</field>
		<field name="help_keyword_id">641</field>
	</row>
	<row>
		<field name="help_topic_id">526</field>
		<field name="help_keyword_id">641</field>
	</row>
	<row>
		<field name="help_topic_id">538</field>
		<field name="help_keyword_id">641</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">527</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">528</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">529</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">533</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">534</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">535</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">538</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">611</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">613</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">614</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">631</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">694</field>
		<field name="help_keyword_id">642</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">643</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">644</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">645</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="help_keyword_id">646</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="help_keyword_id">647</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">648</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">649</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">650</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">651</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="help_keyword_id">652</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">653</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">654</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">655</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">656</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">657</field>
	</row>
	<row>
		<field name="help_topic_id">534</field>
		<field name="help_keyword_id">657</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="help_keyword_id">658</field>
	</row>
	<row>
		<field name="help_topic_id">534</field>
		<field name="help_keyword_id">658</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="help_keyword_id">658</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">659</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">659</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">660</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">661</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">661</field>
	</row>
	<row>
		<field name="help_topic_id">535</field>
		<field name="help_keyword_id">661</field>
	</row>
	<row>
		<field name="help_topic_id">538</field>
		<field name="help_keyword_id">661</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">662</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">663</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">664</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">664</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">665</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">665</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="help_keyword_id">665</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">666</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">667</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">668</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">668</field>
	</row>
	<row>
		<field name="help_topic_id">647</field>
		<field name="help_keyword_id">668</field>
	</row>
	<row>
		<field name="help_topic_id">648</field>
		<field name="help_keyword_id">668</field>
	</row>
	<row>
		<field name="help_topic_id">674</field>
		<field name="help_keyword_id">668</field>
	</row>
	<row>
		<field name="help_topic_id">684</field>
		<field name="help_keyword_id">668</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">669</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">670</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">671</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">672</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">673</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">674</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">675</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">676</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">677</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">677</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">677</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">678</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="help_keyword_id">679</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">680</field>
	</row>
	<row>
		<field name="help_topic_id">535</field>
		<field name="help_keyword_id">680</field>
	</row>
	<row>
		<field name="help_topic_id">538</field>
		<field name="help_keyword_id">680</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="help_keyword_id">681</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">681</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">681</field>
	</row>
	<row>
		<field name="help_topic_id">559</field>
		<field name="help_keyword_id">681</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">682</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">683</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">684</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">685</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="help_keyword_id">686</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">686</field>
	</row>
	<row>
		<field name="help_topic_id">701</field>
		<field name="help_keyword_id">686</field>
	</row>
	<row>
		<field name="help_topic_id">525</field>
		<field name="help_keyword_id">687</field>
	</row>
	<row>
		<field name="help_topic_id">537</field>
		<field name="help_keyword_id">687</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">687</field>
	</row>
	<row>
		<field name="help_topic_id">535</field>
		<field name="help_keyword_id">688</field>
	</row>
	<row>
		<field name="help_topic_id">541</field>
		<field name="help_keyword_id">689</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="help_keyword_id">690</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="help_keyword_id">690</field>
	</row>
	<row>
		<field name="help_topic_id">553</field>
		<field name="help_keyword_id">690</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">690</field>
	</row>
	<row>
		<field name="help_topic_id">558</field>
		<field name="help_keyword_id">690</field>
	</row>
	<row>
		<field name="help_topic_id">559</field>
		<field name="help_keyword_id">690</field>
	</row>
	<row>
		<field name="help_topic_id">561</field>
		<field name="help_keyword_id">690</field>
	</row>
	<row>
		<field name="help_topic_id">644</field>
		<field name="help_keyword_id">690</field>
	</row>
	<row>
		<field name="help_topic_id">677</field>
		<field name="help_keyword_id">690</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="help_keyword_id">691</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">691</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">691</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">691</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="help_keyword_id">691</field>
	</row>
	<row>
		<field name="help_topic_id">559</field>
		<field name="help_keyword_id">691</field>
	</row>
	<row>
		<field name="help_topic_id">570</field>
		<field name="help_keyword_id">691</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="help_keyword_id">692</field>
	</row>
	<row>
		<field name="help_topic_id">626</field>
		<field name="help_keyword_id">692</field>
	</row>
	<row>
		<field name="help_topic_id">629</field>
		<field name="help_keyword_id">692</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="help_keyword_id">693</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">693</field>
	</row>
	<row>
		<field name="help_topic_id">587</field>
		<field name="help_keyword_id">693</field>
	</row>
	<row>
		<field name="help_topic_id">666</field>
		<field name="help_keyword_id">693</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="help_keyword_id">694</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="help_keyword_id">694</field>
	</row>
	<row>
		<field name="help_topic_id">559</field>
		<field name="help_keyword_id">694</field>
	</row>
	<row>
		<field name="help_topic_id">647</field>
		<field name="help_keyword_id">694</field>
	</row>
	<row>
		<field name="help_topic_id">648</field>
		<field name="help_keyword_id">694</field>
	</row>
	<row>
		<field name="help_topic_id">667</field>
		<field name="help_keyword_id">694</field>
	</row>
	<row>
		<field name="help_topic_id">544</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">550</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">560</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">580</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">581</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">618</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">620</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">689</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">692</field>
		<field name="help_keyword_id">695</field>
	</row>
	<row>
		<field name="help_topic_id">544</field>
		<field name="help_keyword_id">696</field>
	</row>
	<row>
		<field name="help_topic_id">553</field>
		<field name="help_keyword_id">696</field>
	</row>
	<row>
		<field name="help_topic_id">620</field>
		<field name="help_keyword_id">696</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="help_keyword_id">697</field>
	</row>
	<row>
		<field name="help_topic_id">601</field>
		<field name="help_keyword_id">697</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="help_keyword_id">698</field>
	</row>
	<row>
		<field name="help_topic_id">606</field>
		<field name="help_keyword_id">698</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="help_keyword_id">699</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="help_keyword_id">700</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="help_keyword_id">701</field>
	</row>
	<row>
		<field name="help_topic_id">604</field>
		<field name="help_keyword_id">701</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">701</field>
	</row>
	<row>
		<field name="help_topic_id">669</field>
		<field name="help_keyword_id">701</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="help_keyword_id">702</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">703</field>
	</row>
	<row>
		<field name="help_topic_id">549</field>
		<field name="help_keyword_id">703</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="help_keyword_id">703</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">704</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">705</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">705</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">706</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">706</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">706</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">706</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">706</field>
	</row>
	<row>
		<field name="help_topic_id">559</field>
		<field name="help_keyword_id">706</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">706</field>
	</row>
	<row>
		<field name="help_topic_id">692</field>
		<field name="help_keyword_id">706</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">707</field>
	</row>
	<row>
		<field name="help_topic_id">553</field>
		<field name="help_keyword_id">707</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="help_keyword_id">707</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">707</field>
	</row>
	<row>
		<field name="help_topic_id">692</field>
		<field name="help_keyword_id">707</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">708</field>
	</row>
	<row>
		<field name="help_topic_id">561</field>
		<field name="help_keyword_id">708</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="help_keyword_id">709</field>
	</row>
	<row>
		<field name="help_topic_id">548</field>
		<field name="help_keyword_id">709</field>
	</row>
	<row>
		<field name="help_topic_id">553</field>
		<field name="help_keyword_id">709</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="help_keyword_id">709</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">709</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">709</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">709</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">709</field>
	</row>
	<row>
		<field name="help_topic_id">550</field>
		<field name="help_keyword_id">710</field>
	</row>
	<row>
		<field name="help_topic_id">553</field>
		<field name="help_keyword_id">710</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">711</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">711</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">712</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">713</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">714</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">714</field>
	</row>
	<row>
		<field name="help_topic_id">647</field>
		<field name="help_keyword_id">714</field>
	</row>
	<row>
		<field name="help_topic_id">648</field>
		<field name="help_keyword_id">714</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">715</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">715</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">716</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">716</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">717</field>
	</row>
	<row>
		<field name="help_topic_id">692</field>
		<field name="help_keyword_id">717</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">718</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">718</field>
	</row>
	<row>
		<field name="help_topic_id">570</field>
		<field name="help_keyword_id">718</field>
	</row>
	<row>
		<field name="help_topic_id">625</field>
		<field name="help_keyword_id">718</field>
	</row>
	<row>
		<field name="help_topic_id">628</field>
		<field name="help_keyword_id">718</field>
	</row>
	<row>
		<field name="help_topic_id">629</field>
		<field name="help_keyword_id">718</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">718</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">719</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">720</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="help_keyword_id">721</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">722</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">722</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">722</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="help_keyword_id">723</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">724</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">724</field>
	</row>
	<row>
		<field name="help_topic_id">570</field>
		<field name="help_keyword_id">724</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">724</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">724</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">724</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">725</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">726</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">727</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">728</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">728</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">729</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">730</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">731</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">732</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">733</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">734</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">735</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">736</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">737</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="help_keyword_id">738</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">738</field>
	</row>
	<row>
		<field name="help_topic_id">556</field>
		<field name="help_keyword_id">739</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">740</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">741</field>
	</row>
	<row>
		<field name="help_topic_id">621</field>
		<field name="help_keyword_id">741</field>
	</row>
	<row>
		<field name="help_topic_id">623</field>
		<field name="help_keyword_id">741</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">742</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">743</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="help_keyword_id">744</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">745</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">745</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">745</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">745</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">746</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">746</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">746</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">746</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">746</field>
	</row>
	<row>
		<field name="help_topic_id">590</field>
		<field name="help_keyword_id">746</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">747</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">747</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">747</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">747</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">748</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">748</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">748</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">748</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">748</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">749</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">749</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">749</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">749</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">749</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">750</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">750</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">750</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">750</field>
	</row>
	<row>
		<field name="help_topic_id">566</field>
		<field name="help_keyword_id">750</field>
	</row>
	<row>
		<field name="help_topic_id">567</field>
		<field name="help_keyword_id">750</field>
	</row>
	<row>
		<field name="help_topic_id">568</field>
		<field name="help_keyword_id">750</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">750</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">751</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">751</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">751</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">751</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">751</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">752</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">752</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">752</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">752</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">752</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">752</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">752</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">753</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">753</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">753</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">753</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">753</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">754</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">754</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">754</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">754</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="help_keyword_id">755</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="help_keyword_id">755</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="help_keyword_id">755</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="help_keyword_id">755</field>
	</row>
	<row>
		<field name="help_topic_id">570</field>
		<field name="help_keyword_id">755</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">755</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">755</field>
	</row>
	<row>
		<field name="help_topic_id">566</field>
		<field name="help_keyword_id">756</field>
	</row>
	<row>
		<field name="help_topic_id">567</field>
		<field name="help_keyword_id">756</field>
	</row>
	<row>
		<field name="help_topic_id">568</field>
		<field name="help_keyword_id">756</field>
	</row>
	<row>
		<field name="help_topic_id">569</field>
		<field name="help_keyword_id">757</field>
	</row>
	<row>
		<field name="help_topic_id">569</field>
		<field name="help_keyword_id">758</field>
	</row>
	<row>
		<field name="help_topic_id">570</field>
		<field name="help_keyword_id">758</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">758</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">758</field>
	</row>
	<row>
		<field name="help_topic_id">570</field>
		<field name="help_keyword_id">759</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">759</field>
	</row>
	<row>
		<field name="help_topic_id">669</field>
		<field name="help_keyword_id">759</field>
	</row>
	<row>
		<field name="help_topic_id">684</field>
		<field name="help_keyword_id">759</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">759</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">760</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">761</field>
	</row>
	<row>
		<field name="help_topic_id">637</field>
		<field name="help_keyword_id">761</field>
	</row>
	<row>
		<field name="help_topic_id">682</field>
		<field name="help_keyword_id">761</field>
	</row>
	<row>
		<field name="help_topic_id">686</field>
		<field name="help_keyword_id">761</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">762</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">763</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">764</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">765</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">766</field>
	</row>
	<row>
		<field name="help_topic_id">637</field>
		<field name="help_keyword_id">766</field>
	</row>
	<row>
		<field name="help_topic_id">682</field>
		<field name="help_keyword_id">766</field>
	</row>
	<row>
		<field name="help_topic_id">686</field>
		<field name="help_keyword_id">766</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="help_keyword_id">767</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">768</field>
	</row>
	<row>
		<field name="help_topic_id">586</field>
		<field name="help_keyword_id">768</field>
	</row>
	<row>
		<field name="help_topic_id">588</field>
		<field name="help_keyword_id">768</field>
	</row>
	<row>
		<field name="help_topic_id">589</field>
		<field name="help_keyword_id">768</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">769</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="help_keyword_id">770</field>
	</row>
	<row>
		<field name="help_topic_id">573</field>
		<field name="help_keyword_id">771</field>
	</row>
	<row>
		<field name="help_topic_id">574</field>
		<field name="help_keyword_id">771</field>
	</row>
	<row>
		<field name="help_topic_id">573</field>
		<field name="help_keyword_id">772</field>
	</row>
	<row>
		<field name="help_topic_id">574</field>
		<field name="help_keyword_id">772</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">772</field>
	</row>
	<row>
		<field name="help_topic_id">642</field>
		<field name="help_keyword_id">772</field>
	</row>
	<row>
		<field name="help_topic_id">643</field>
		<field name="help_keyword_id">772</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">772</field>
	</row>
	<row>
		<field name="help_topic_id">573</field>
		<field name="help_keyword_id">773</field>
	</row>
	<row>
		<field name="help_topic_id">574</field>
		<field name="help_keyword_id">773</field>
	</row>
	<row>
		<field name="help_topic_id">575</field>
		<field name="help_keyword_id">774</field>
	</row>
	<row>
		<field name="help_topic_id">580</field>
		<field name="help_keyword_id">774</field>
	</row>
	<row>
		<field name="help_topic_id">581</field>
		<field name="help_keyword_id">774</field>
	</row>
	<row>
		<field name="help_topic_id">693</field>
		<field name="help_keyword_id">774</field>
	</row>
	<row>
		<field name="help_topic_id">694</field>
		<field name="help_keyword_id">774</field>
	</row>
	<row>
		<field name="help_topic_id">576</field>
		<field name="help_keyword_id">775</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">776</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">776</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">777</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">777</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">778</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">779</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">780</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">781</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">782</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">783</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">784</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">785</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">786</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">787</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">788</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">789</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">790</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">791</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">792</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">793</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">794</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">795</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">796</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">797</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">798</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">799</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">800</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">801</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">801</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">802</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">802</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">803</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">803</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="help_keyword_id">804</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">804</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="help_keyword_id">805</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="help_keyword_id">806</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="help_keyword_id">807</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="help_keyword_id">808</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="help_keyword_id">809</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="help_keyword_id">810</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="help_keyword_id">811</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="help_keyword_id">812</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="help_keyword_id">813</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">813</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">813</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">814</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">815</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">816</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">817</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">818</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">819</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">820</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">821</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">822</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">823</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">824</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">825</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">826</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">827</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">828</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">829</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">830</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">831</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">832</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">833</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">834</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">835</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">836</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="help_keyword_id">837</field>
	</row>
	<row>
		<field name="help_topic_id">580</field>
		<field name="help_keyword_id">838</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">838</field>
	</row>
	<row>
		<field name="help_topic_id">584</field>
		<field name="help_keyword_id">838</field>
	</row>
	<row>
		<field name="help_topic_id">680</field>
		<field name="help_keyword_id">838</field>
	</row>
	<row>
		<field name="help_topic_id">693</field>
		<field name="help_keyword_id">838</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">839</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">839</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">840</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">840</field>
	</row>
	<row>
		<field name="help_topic_id">584</field>
		<field name="help_keyword_id">840</field>
	</row>
	<row>
		<field name="help_topic_id">585</field>
		<field name="help_keyword_id">840</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">841</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">841</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">842</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">842</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">843</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">843</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">844</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">844</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="help_keyword_id">845</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="help_keyword_id">845</field>
	</row>
	<row>
		<field name="help_topic_id">584</field>
		<field name="help_keyword_id">845</field>
	</row>
	<row>
		<field name="help_topic_id">585</field>
		<field name="help_keyword_id">845</field>
	</row>
	<row>
		<field name="help_topic_id">584</field>
		<field name="help_keyword_id">846</field>
	</row>
	<row>
		<field name="help_topic_id">585</field>
		<field name="help_keyword_id">846</field>
	</row>
	<row>
		<field name="help_topic_id">587</field>
		<field name="help_keyword_id">847</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">847</field>
	</row>
	<row>
		<field name="help_topic_id">588</field>
		<field name="help_keyword_id">848</field>
	</row>
	<row>
		<field name="help_topic_id">589</field>
		<field name="help_keyword_id">848</field>
	</row>
	<row>
		<field name="help_topic_id">592</field>
		<field name="help_keyword_id">849</field>
	</row>
	<row>
		<field name="help_topic_id">602</field>
		<field name="help_keyword_id">849</field>
	</row>
	<row>
		<field name="help_topic_id">605</field>
		<field name="help_keyword_id">849</field>
	</row>
	<row>
		<field name="help_topic_id">606</field>
		<field name="help_keyword_id">849</field>
	</row>
	<row>
		<field name="help_topic_id">594</field>
		<field name="help_keyword_id">850</field>
	</row>
	<row>
		<field name="help_topic_id">595</field>
		<field name="help_keyword_id">851</field>
	</row>
	<row>
		<field name="help_topic_id">596</field>
		<field name="help_keyword_id">852</field>
	</row>
	<row>
		<field name="help_topic_id">597</field>
		<field name="help_keyword_id">853</field>
	</row>
	<row>
		<field name="help_topic_id">598</field>
		<field name="help_keyword_id">854</field>
	</row>
	<row>
		<field name="help_topic_id">599</field>
		<field name="help_keyword_id">855</field>
	</row>
	<row>
		<field name="help_topic_id">600</field>
		<field name="help_keyword_id">856</field>
	</row>
	<row>
		<field name="help_topic_id">602</field>
		<field name="help_keyword_id">857</field>
	</row>
	<row>
		<field name="help_topic_id">603</field>
		<field name="help_keyword_id">858</field>
	</row>
	<row>
		<field name="help_topic_id">605</field>
		<field name="help_keyword_id">859</field>
	</row>
	<row>
		<field name="help_topic_id">606</field>
		<field name="help_keyword_id">860</field>
	</row>
	<row>
		<field name="help_topic_id">606</field>
		<field name="help_keyword_id">861</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">862</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">862</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">862</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">863</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">863</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">863</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">864</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">864</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">864</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">865</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">865</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">865</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">866</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">866</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">866</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">867</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">867</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">867</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">868</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">868</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">868</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">869</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">870</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">871</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">871</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">871</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">872</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">872</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">872</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">873</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">874</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">875</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">875</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">875</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">876</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">876</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">876</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="help_keyword_id">877</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">877</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">877</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">878</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="help_keyword_id">879</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">879</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="help_keyword_id">880</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">881</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">881</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">882</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">882</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">883</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">884</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">884</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">885</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">885</field>
	</row>
	<row>
		<field name="help_topic_id">619</field>
		<field name="help_keyword_id">885</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">886</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">886</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">887</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">888</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">888</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">889</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">890</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">890</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">891</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">892</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">892</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">893</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">893</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">894</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">894</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">895</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">895</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">896</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">896</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">897</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">897</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">898</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">898</field>
	</row>
	<row>
		<field name="help_topic_id">618</field>
		<field name="help_keyword_id">898</field>
	</row>
	<row>
		<field name="help_topic_id">620</field>
		<field name="help_keyword_id">898</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">899</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">900</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">900</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">901</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">901</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">902</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">902</field>
	</row>
	<row>
		<field name="help_topic_id">619</field>
		<field name="help_keyword_id">902</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">903</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">904</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">904</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">905</field>
	</row>
	<row>
		<field name="help_topic_id">619</field>
		<field name="help_keyword_id">905</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">906</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">906</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">907</field>
	</row>
	<row>
		<field name="help_topic_id">611</field>
		<field name="help_keyword_id">907</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">907</field>
	</row>
	<row>
		<field name="help_topic_id">613</field>
		<field name="help_keyword_id">907</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">907</field>
	</row>
	<row>
		<field name="help_topic_id">618</field>
		<field name="help_keyword_id">907</field>
	</row>
	<row>
		<field name="help_topic_id">620</field>
		<field name="help_keyword_id">907</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">908</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">908</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">909</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">909</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">910</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">910</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">911</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="help_keyword_id">912</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">912</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">913</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="help_keyword_id">914</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">915</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">916</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">917</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">918</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">918</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">919</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">919</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">920</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">920</field>
	</row>
	<row>
		<field name="help_topic_id">671</field>
		<field name="help_keyword_id">920</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">920</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">921</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">922</field>
	</row>
	<row>
		<field name="help_topic_id">696</field>
		<field name="help_keyword_id">922</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">923</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="help_keyword_id">924</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">925</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">926</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="help_keyword_id">927</field>
	</row>
	<row>
		<field name="help_topic_id">621</field>
		<field name="help_keyword_id">928</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="help_keyword_id">928</field>
	</row>
	<row>
		<field name="help_topic_id">623</field>
		<field name="help_keyword_id">928</field>
	</row>
	<row>
		<field name="help_topic_id">624</field>
		<field name="help_keyword_id">928</field>
	</row>
	<row>
		<field name="help_topic_id">621</field>
		<field name="help_keyword_id">929</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="help_keyword_id">929</field>
	</row>
	<row>
		<field name="help_topic_id">621</field>
		<field name="help_keyword_id">930</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="help_keyword_id">930</field>
	</row>
	<row>
		<field name="help_topic_id">625</field>
		<field name="help_keyword_id">931</field>
	</row>
	<row>
		<field name="help_topic_id">628</field>
		<field name="help_keyword_id">931</field>
	</row>
	<row>
		<field name="help_topic_id">629</field>
		<field name="help_keyword_id">931</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">931</field>
	</row>
	<row>
		<field name="help_topic_id">626</field>
		<field name="help_keyword_id">932</field>
	</row>
	<row>
		<field name="help_topic_id">626</field>
		<field name="help_keyword_id">933</field>
	</row>
	<row>
		<field name="help_topic_id">629</field>
		<field name="help_keyword_id">934</field>
	</row>
	<row>
		<field name="help_topic_id">647</field>
		<field name="help_keyword_id">934</field>
	</row>
	<row>
		<field name="help_topic_id">648</field>
		<field name="help_keyword_id">934</field>
	</row>
	<row>
		<field name="help_topic_id">667</field>
		<field name="help_keyword_id">934</field>
	</row>
	<row>
		<field name="help_topic_id">684</field>
		<field name="help_keyword_id">934</field>
	</row>
	<row>
		<field name="help_topic_id">629</field>
		<field name="help_keyword_id">935</field>
	</row>
	<row>
		<field name="help_topic_id">630</field>
		<field name="help_keyword_id">936</field>
	</row>
	<row>
		<field name="help_topic_id">630</field>
		<field name="help_keyword_id">937</field>
	</row>
	<row>
		<field name="help_topic_id">630</field>
		<field name="help_keyword_id">938</field>
	</row>
	<row>
		<field name="help_topic_id">630</field>
		<field name="help_keyword_id">939</field>
	</row>
	<row>
		<field name="help_topic_id">632</field>
		<field name="help_keyword_id">940</field>
	</row>
	<row>
		<field name="help_topic_id">634</field>
		<field name="help_keyword_id">940</field>
	</row>
	<row>
		<field name="help_topic_id">632</field>
		<field name="help_keyword_id">941</field>
	</row>
	<row>
		<field name="help_topic_id">633</field>
		<field name="help_keyword_id">941</field>
	</row>
	<row>
		<field name="help_topic_id">633</field>
		<field name="help_keyword_id">942</field>
	</row>
	<row>
		<field name="help_topic_id">635</field>
		<field name="help_keyword_id">942</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">942</field>
	</row>
	<row>
		<field name="help_topic_id">634</field>
		<field name="help_keyword_id">943</field>
	</row>
	<row>
		<field name="help_topic_id">635</field>
		<field name="help_keyword_id">943</field>
	</row>
	<row>
		<field name="help_topic_id">636</field>
		<field name="help_keyword_id">944</field>
	</row>
	<row>
		<field name="help_topic_id">637</field>
		<field name="help_keyword_id">945</field>
	</row>
	<row>
		<field name="help_topic_id">694</field>
		<field name="help_keyword_id">945</field>
	</row>
	<row>
		<field name="help_topic_id">637</field>
		<field name="help_keyword_id">946</field>
	</row>
	<row>
		<field name="help_topic_id">637</field>
		<field name="help_keyword_id">947</field>
	</row>
	<row>
		<field name="help_topic_id">640</field>
		<field name="help_keyword_id">948</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">949</field>
	</row>
	<row>
		<field name="help_topic_id">658</field>
		<field name="help_keyword_id">949</field>
	</row>
	<row>
		<field name="help_topic_id">659</field>
		<field name="help_keyword_id">949</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">950</field>
	</row>
	<row>
		<field name="help_topic_id">661</field>
		<field name="help_keyword_id">950</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">951</field>
	</row>
	<row>
		<field name="help_topic_id">662</field>
		<field name="help_keyword_id">951</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">952</field>
	</row>
	<row>
		<field name="help_topic_id">666</field>
		<field name="help_keyword_id">952</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">953</field>
	</row>
	<row>
		<field name="help_topic_id">679</field>
		<field name="help_keyword_id">953</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">953</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">954</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">955</field>
	</row>
	<row>
		<field name="help_topic_id">660</field>
		<field name="help_keyword_id">955</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">956</field>
	</row>
	<row>
		<field name="help_topic_id">674</field>
		<field name="help_keyword_id">956</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">957</field>
	</row>
	<row>
		<field name="help_topic_id">658</field>
		<field name="help_keyword_id">957</field>
	</row>
	<row>
		<field name="help_topic_id">659</field>
		<field name="help_keyword_id">957</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">642</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">643</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">644</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">645</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">646</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">647</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">648</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">649</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">650</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">651</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">652</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">653</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">654</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">656</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">658</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">659</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">660</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">661</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">662</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">663</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">664</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">665</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">666</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">667</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">668</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">669</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">670</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">671</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">672</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">673</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">674</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">675</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">676</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">677</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">678</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">679</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">680</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">681</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">682</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">683</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">684</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">685</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">686</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">687</field>
		<field name="help_keyword_id">958</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">959</field>
	</row>
	<row>
		<field name="help_topic_id">660</field>
		<field name="help_keyword_id">959</field>
	</row>
	<row>
		<field name="help_topic_id">665</field>
		<field name="help_keyword_id">959</field>
	</row>
	<row>
		<field name="help_topic_id">668</field>
		<field name="help_keyword_id">959</field>
	</row>
	<row>
		<field name="help_topic_id">673</field>
		<field name="help_keyword_id">959</field>
	</row>
	<row>
		<field name="help_topic_id">680</field>
		<field name="help_keyword_id">959</field>
	</row>
	<row>
		<field name="help_topic_id">681</field>
		<field name="help_keyword_id">959</field>
	</row>
	<row>
		<field name="help_topic_id">682</field>
		<field name="help_keyword_id">959</field>
	</row>
	<row>
		<field name="help_topic_id">683</field>
		<field name="help_keyword_id">959</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">959</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">960</field>
	</row>
	<row>
		<field name="help_topic_id">685</field>
		<field name="help_keyword_id">960</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">961</field>
	</row>
	<row>
		<field name="help_topic_id">686</field>
		<field name="help_keyword_id">961</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="help_keyword_id">962</field>
	</row>
	<row>
		<field name="help_topic_id">687</field>
		<field name="help_keyword_id">962</field>
	</row>
	<row>
		<field name="help_topic_id">644</field>
		<field name="help_keyword_id">963</field>
	</row>
	<row>
		<field name="help_topic_id">663</field>
		<field name="help_keyword_id">963</field>
	</row>
	<row>
		<field name="help_topic_id">677</field>
		<field name="help_keyword_id">963</field>
	</row>
	<row>
		<field name="help_topic_id">661</field>
		<field name="help_keyword_id">964</field>
	</row>
	<row>
		<field name="help_topic_id">664</field>
		<field name="help_keyword_id">965</field>
	</row>
	<row>
		<field name="help_topic_id">672</field>
		<field name="help_keyword_id">965</field>
	</row>
	<row>
		<field name="help_topic_id">670</field>
		<field name="help_keyword_id">966</field>
	</row>
	<row>
		<field name="help_topic_id">675</field>
		<field name="help_keyword_id">967</field>
	</row>
	<row>
		<field name="help_topic_id">676</field>
		<field name="help_keyword_id">968</field>
	</row>
	<row>
		<field name="help_topic_id">677</field>
		<field name="help_keyword_id">969</field>
	</row>
	<row>
		<field name="help_topic_id">678</field>
		<field name="help_keyword_id">970</field>
	</row>
	<row>
		<field name="help_topic_id">689</field>
		<field name="help_keyword_id">971</field>
	</row>
	<row>
		<field name="help_topic_id">692</field>
		<field name="help_keyword_id">971</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">972</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">973</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">974</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">975</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">976</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">977</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="help_keyword_id">978</field>
	</row>
	<row>
		<field name="help_topic_id">691</field>
		<field name="help_keyword_id">979</field>
	</row>
	<row>
		<field name="help_topic_id">692</field>
		<field name="help_keyword_id">980</field>
	</row>
	<row>
		<field name="help_topic_id">695</field>
		<field name="help_keyword_id">981</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">982</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">982</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">982</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">983</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">983</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">983</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">984</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">984</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">984</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="help_keyword_id">985</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="help_keyword_id">985</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="help_keyword_id">985</field>
	</row>
	</table_data>
	<table_structure name="help_topic">
		<field Field="help_topic_id" Type="int unsigned" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="name" Type="char(64)" Null="NO" Key="UNI" Extra="" Comment="" />
		<field Field="help_category_id" Type="smallint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="description" Type="text" Null="NO" Key="" Extra="" Comment="" />
		<field Field="example" Type="text" Null="NO" Key="" Extra="" Comment="" />
		<field Field="url" Type="text" Null="NO" Key="" Extra="" Comment="" />
		<key Table="help_topic" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="help_topic_id" Collation="A" Cardinality="825" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="help_topic" Non_unique="0" Key_name="name" Seq_in_index="1" Column_name="name" Collation="A" Cardinality="741" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="help_topic" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="825" Avg_row_length="1926" Data_length="1589248" Max_data_length="0" Index_length="98304" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="help topics" />
	</table_structure>
	<table_data name="help_topic">
	<row>
		<field name="help_topic_id">0</field>
		<field name="name">HELP_DATE</field>
		<field name="help_category_id">1</field>
		<field name="description">This help information was generated from the MySQL 8.0 Reference Manual
on: 2023-11-27
</field>
		<field name="example"></field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_topic_id">1</field>
		<field name="name">HELP_VERSION</field>
		<field name="help_category_id">1</field>
		<field name="description">This help information was generated from the MySQL 8.0 Reference Manual
on: 2023-11-27 (revision: 77335)

This information applies to MySQL 8.0 through 8.0.35.
</field>
		<field name="example"></field>
		<field name="url"></field>
	</row>
	<row>
		<field name="help_topic_id">2</field>
		<field name="name">AUTO_INCREMENT</field>
		<field name="help_category_id">2</field>
		<field name="description">The AUTO_INCREMENT attribute can be used to generate a unique identity
for new rows:

URL: https://dev.mysql.com/doc/refman/8.0/en/example-auto-increment.html

</field>
		<field name="example">CREATE TABLE animals (
     id MEDIUMINT NOT NULL AUTO_INCREMENT,
     name CHAR(30) NOT NULL,
     PRIMARY KEY (id)
);

INSERT INTO animals (name) VALUES
    ('dog'),('cat'),('penguin'),
    ('lax'),('whale'),('ostrich');

SELECT * FROM animals;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/example-auto-increment.html</field>
	</row>
	<row>
		<field name="help_topic_id">3</field>
		<field name="name">HELP COMMAND</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
mysql&gt; help search_string

If you provide an argument to the help command, mysql uses it as a
search string to access server-side help from the contents of the MySQL
Reference Manual. The proper operation of this command requires that
the help tables in the mysql database be initialized with help topic
information (see
https://dev.mysql.com/doc/refman/8.0/en/server-side-help-support.html).

If there is no match for the search string, the search fails:

mysql&gt; help me

Nothing found
Please try to run 'help contents' for a list of all accessible topics

Use help contents to see a list of the help categories:

mysql&gt; help contents
You asked for help about help category: &quot;Contents&quot;
For more information, type 'help &lt;item&gt;', where &lt;item&gt; is one of the
following categories:
   Account Management
   Administration
   Data Definition
   Data Manipulation
   Data Types
   Functions
   Functions and Modifiers for Use with GROUP BY
   Geographic Features
   Language Structure
   Plugins
   Storage Engines
   Stored Routines
   Table Maintenance
   Transactions
   Triggers

If the search string matches multiple items, mysql shows a list of
matching topics:

mysql&gt; help logs
Many help items for your request exist.
To make a more specific request, please type 'help &lt;item&gt;',
where &lt;item&gt; is one of the following topics:
   SHOW
   SHOW BINARY LOGS
   SHOW ENGINE
   SHOW LOGS

Use a topic as the search string to see the help entry for that topic:

mysql&gt; help show binary logs
Name: 'SHOW BINARY LOGS'
Description:
Syntax:
SHOW BINARY LOGS
SHOW MASTER LOGS

Lists the binary log files on the server. This statement is used as
part of the procedure described in [purge-binary-logs], that shows how
to determine which logs can be purged.

mysql&gt; SHOW BINARY LOGS;
+---------------+-----------+-----------+
| Log_name      | File_size | Encrypted |
+---------------+-----------+-----------+
| binlog.000015 |    724935 | Yes       |
| binlog.000016 |    733481 | Yes       |
+---------------+-----------+-----------+

The search string can contain the wildcard characters % and _. These
have the same meaning as for pattern-matching operations performed with
the LIKE operator. For example, HELP rep% returns a list of topics that
begin with rep:

mysql&gt; HELP rep%
Many help items for your request exist.
To make a more specific request, please type 'help &lt;item&gt;',
where &lt;item&gt; is one of the following
topics:
   REPAIR TABLE
   REPEAT FUNCTION
   REPEAT LOOP
   REPLACE
   REPLACE FUNCTION

URL: https://dev.mysql.com/doc/refman/8.0/en/mysql-server-side-help.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mysql-server-side-help.html</field>
	</row>
	<row>
		<field name="help_topic_id">4</field>
		<field name="name">ASYMMETRIC_DECRYPT</field>
		<field name="help_category_id">5</field>
		<field name="description">Syntax:
asymmetric_decrypt(algorithm, data_str, priv_key_str)

Decrypts an encrypted string using the given algorithm and key string,
and returns the resulting plaintext as a binary string. If decryption
fails, the result is NULL.

For the legacy version of this function in use before MySQL 8.0.29, see
https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions
-legacy.html.

By default, the component_enterprise_encryption function assumes that
encrypted text uses the RSAES-OAEP padding scheme. The function
supports decryption for content encrypted by the legacy openssl_udf
shared library functions if the system variable
enterprise_encryption.rsa_support_legacy_padding is set to ON (the
default is OFF). When ON is set, the function also supports the
RSAES-PKCS1-v1_5 padding scheme, as used by the legacy openssl_udf
shared library functions. When OFF is set, content encrypted by the
legacy functions cannot be decrypted, and the function returns null
output for such content.

algorithm is the encryption algorithm used to create the key. The
supported algorithm value is 'RSA'.

data_str is the encrypted string to decrypt, which was encrypted with
asymmetric_encrypt().

priv_key_str is a valid PEM encoded RSA private key. For successful
decryption, the key string must correspond to the public key string
used with asymmetric_encrypt() to produce the encrypted string. The
asymmetric_encrypt() component function only supports encryption using
a public key, so decryption takes place with the corresponding private
key.

For a usage example, see the description of asymmetric_encrypt().

URL: https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">5</field>
		<field name="name">ASYMMETRIC_ENCRYPT</field>
		<field name="help_category_id">5</field>
		<field name="description">Syntax:
asymmetric_encrypt(algorithm, data_str, pub_key_str)

Encrypts a string using the given algorithm and key string, and returns
the resulting ciphertext as a binary string. If encryption fails, the
result is NULL.

For the legacy version of this function in use before MySQL 8.0.29, see
https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions
-legacy.html.

algorithm is the encryption algorithm used to create the key. The
supported algorithm value is 'RSA'.

data_str is the string to encrypt. The length of this string cannot be
greater than the key string length in bytes, minus 42 (to account for
the padding).

pub_key_str is a valid PEM encoded RSA public key. The
asymmetric_encrypt() component function only supports encryption using
a public key.

To recover the original unencrypted string, pass the encrypted string
to asymmetric_decrypt(), along with the other part of the key pair used
for encryption, as in the following example:

URL: https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html

</field>
		<field name="example">-- Generate private/public key pair
SET @priv = create_asymmetric_priv_key('RSA', 2048);
SET @pub = create_asymmetric_pub_key('RSA', @priv);

-- Encrypt using public key, decrypt using private key
SET @ciphertext = asymmetric_encrypt('RSA', 'The quick brown fox', @pub);
SET @plaintext = asymmetric_decrypt('RSA', @ciphertext, @priv);
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">6</field>
		<field name="name">ASYMMETRIC_SIGN</field>
		<field name="help_category_id">5</field>
		<field name="description">Syntax:
asymmetric_sign(algorithm, text, priv_key_str, digest_type)

Signs a digest string or data string using a private key, and returns
the signature as a binary string. If signing fails, the result is NULL.

For the legacy version of this function in use before MySQL 8.0.29, see
https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions
-legacy.html.

algorithm is the encryption algorithm used to create the key. The
supported algorithm value is 'RSA'.

text is a data string or digest string. The function accepts digests
but does not require them, as it is also capable of handling data
strings of an arbitrary length. A digest string can be generated by
calling create_digest().

priv_key_str is the private key string to use for signing the digest
string. It must be a valid PEM encoded RSA private key.

digest_type is the algorithm to be used to sign the data. The supported
digest_type values are 'SHA224', 'SHA256', 'SHA384', and 'SHA512' when
OpenSSL 1.0.1 is in use. If OpenSSL 1.1.1 is in use, the additional
digest_type values 'SHA3-224', 'SHA3-256', 'SHA3-384', and 'SHA3-512'
are available.

For a usage example, see the description of asymmetric_verify().

URL: https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">7</field>
		<field name="name">ASYMMETRIC_VERIFY</field>
		<field name="help_category_id">5</field>
		<field name="description">Syntax:
asymmetric_verify(algorithm, text, sig_str, pub_key_str, digest_type)

Verifies whether the signature string matches the digest string, and
returns 1 or 0 to indicate whether verification succeeded or failed. If
verification fails, the result is NULL.

For the legacy version of this function in use before MySQL 8.0.29, see
https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions
-legacy.html.

By default, the component_enterprise_encryption function assumes that
signatures use the RSASSA-PSS signature scheme. The function supports
verification for signatures produced by the legacy openssl_udf shared
library functions if the system variable
enterprise_encryption.rsa_support_legacy_padding is set to ON (the
default is OFF). When ON is set, the function also supports the
RSASSA-PKCS1-v1_5 signature scheme, as used by the legacy openssl_udf
shared library functions. When OFF is set, signatures produced by the
legacy functions cannot be verified, and the function returns null
output for such content.

algorithm is the encryption algorithm used to create the key. The
supported algorithm value is 'RSA'.

text is a data string or digest string. The component function accepts
digests but does not require them, as it is also capable of handling
data strings of an arbitrary length. A digest string can be generated
by calling create_digest().

sig_str is the signature string to be verified. A signature string can
be generated by calling asymmetric_sign().

pub_key_str is the public key string of the signer. It corresponds to
the private key passed to asymmetric_sign() to generate the signature
string. It must be a valid PEM encoded RSA public key.

digest_type is the algorithm that was used to sign the data. The
supported digest_type values are 'SHA224', 'SHA256', 'SHA384', and
'SHA512' when OpenSSL 1.0.1 is in use. If OpenSSL 1.1.1 is in use, the
additional digest_type values 'SHA3-224', 'SHA3-256', 'SHA3-384', and
'SHA3-512' are available.

URL: https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html

</field>
		<field name="example">-- Set the encryption algorithm and digest type
SET @algo = 'RSA';
SET @dig_type = 'SHA512';

-- Create private/public key pair
SET @priv = create_asymmetric_priv_key(@algo, 2048);
SET @pub = create_asymmetric_pub_key(@algo, @priv);

-- Generate digest from string
SET @dig = create_digest(@dig_type, 'The quick brown fox');

-- Generate signature for digest and verify signature against digest
SET @sig = asymmetric_sign(@algo, @dig, @priv, @dig_type);
SET @verf = asymmetric_verify(@algo, @dig, @sig, @pub, @dig_type);
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">8</field>
		<field name="name">CREATE_ASYMMETRIC_PRIV_KEY</field>
		<field name="help_category_id">5</field>
		<field name="description">Syntax:
create_asymmetric_priv_key(algorithm, key_length)

Creates a private key using the given algorithm and key length, and
returns the key as a binary string in PEM format. The key is in PKCS #8
format. If key generation fails, the result is NULL.

For the legacy version of this function in use before MySQL 8.0.29, see
https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions
-legacy.html.

algorithm is the encryption algorithm used to create the key. The
supported algorithm value is 'RSA'.

key_length is the key length in bits. If you exceed the maximum allowed
key length or specify less than the minimum, key generation fails and
the result is null output. The minimum allowed key length in bits is
2048. The maximum allowed key length is the value of the
enterprise_encryption.maximum_rsa_key_size system variable, which
defaults to 4096. It has a maximum setting of 16384, which is the
maximum key length allowed for the RSA algorithm. See
https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-configuri
ng.html.

*Note*:

Generating longer keys can consume significant CPU resources. Limiting
the key length using the enterprise_encryption.maximum_rsa_key_size
system variable lets you provide adequate security for your
requirements while balancing this with resource usage.

This example creates a 2048-bit RSA private key, then derives a public
key from the private key:

URL: https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html

</field>
		<field name="example">SET @priv = create_asymmetric_priv_key('RSA', 2048);
SET @pub = create_asymmetric_pub_key('RSA', @priv);
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">9</field>
		<field name="name">CREATE_ASYMMETRIC_PUB_KEY</field>
		<field name="help_category_id">5</field>
		<field name="description">Syntax:
create_asymmetric_pub_key(algorithm, priv_key_str)

Derives a public key from the given private key using the given
algorithm, and returns the key as a binary string in PEM format. The
key is in PKCS #8 format. If key derivation fails, the result is NULL.

For the legacy version of this function in use before MySQL 8.0.29, see
https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions
-legacy.html.

algorithm is the encryption algorithm used to create the key. The
supported algorithm value is 'RSA'.

priv_key_str is a valid PEM encoded RSA private key.

For a usage example, see the description of
create_asymmetric_priv_key().

URL: https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">10</field>
		<field name="name">CREATE_DIGEST</field>
		<field name="help_category_id">5</field>
		<field name="description">Syntax:
create_digest(digest_type, str)

Creates a digest from the given string using the given digest type, and
returns the digest as a binary string. If digest generation fails, the
result is NULL.

For the legacy version of this function in use before MySQL 8.0.29, see
https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions
-legacy.html.

The resulting digest string is suitable for use with asymmetric_sign()
and asymmetric_verify(). The component versions of these functions
accept digests but do not require them, as they are capable of handling
data of an arbitrary length.

digest_type is the digest algorithm to be used to generate the digest
string. The supported digest_type values are 'SHA224', 'SHA256',
'SHA384', and 'SHA512' when OpenSSL 1.0.1 is in use. If OpenSSL 1.1.1
is in use, the additional digest_type values 'SHA3-224', 'SHA3-256',
'SHA3-384', and 'SHA3-512' are available.

str is the non-null data string for which the digest is to be
generated.

URL: https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html

</field>
		<field name="example">SET @dig = create_digest('SHA512', 'The quick brown fox');
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">11</field>
		<field name="name">ASYMMETRIC_DERIVE</field>
		<field name="help_category_id">5</field>
		<field name="description">Syntax:
asymmetric_derive(pub_key_str, priv_key_str)

Derives a symmetric key using the private key of one party and the
public key of another, and returns the resulting key as a binary
string. If key derivation fails, the result is NULL.

pub_key_str and priv_key_str are valid PEM encoded key strings that
were created using the DH algorithm.

Suppose that you have two pairs of public and private keys:

SET @dhp = create_dh_parameters(1024);
SET @priv1 = create_asymmetric_priv_key('DH', @dhp);
SET @pub1 = create_asymmetric_pub_key('DH', @priv1);
SET @priv2 = create_asymmetric_priv_key('DH', @dhp);
SET @pub2 = create_asymmetric_pub_key('DH', @priv2);

Suppose further that you use the private key from one pair and the
public key from the other pair to create a symmetric key string. Then
this symmetric key identity relationship holds:

asymmetric_derive(@pub1, @priv2) = asymmetric_derive(@pub2, @priv1)

This example requires DH private/public keys as inputs, created using a
shared symmetric secret. Create the secret by passing the key length to
create_dh_parameters(), then pass the secret as the &quot;key length&quot; to
create_asymmetric_priv_key().

URL: https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions-legacy.html

</field>
		<field name="example">-- Generate DH shared symmetric secret
SET @dhp = create_dh_parameters(1024);
-- Generate DH key pairs
SET @algo = 'DH';
SET @priv1 = create_asymmetric_priv_key(@algo, @dhp);
SET @pub1 = create_asymmetric_pub_key(@algo, @priv1);
SET @priv2 = create_asymmetric_priv_key(@algo, @dhp);
SET @pub2 = create_asymmetric_pub_key(@algo, @priv2);

-- Generate symmetric key using public key of first party,
-- private key of second party
SET @sym1 = asymmetric_derive(@pub1, @priv2);

-- Or use public key of second party, private key of first party
SET @sym2 = asymmetric_derive(@pub2, @priv1);
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions-legacy.html</field>
	</row>
	<row>
		<field name="help_topic_id">12</field>
		<field name="name">CREATE_DH_PARAMETERS</field>
		<field name="help_category_id">5</field>
		<field name="description">create_dh_parameters(key_len)

Creates a shared secret for generating a DH private/public key pair and
returns a binary string that can be passed to
create_asymmetric_priv_key(). If secret generation fails, the result is
NULL.

key_len is the key length. The minimum and maximum key lengths in bits
are 1,024 and 10,000. These key-length limits are constraints imposed
by OpenSSL. Server administrators can impose additional limits on
maximum key length by setting the MYSQL_OPENSSL_UDF_RSA_BITS_THRESHOLD,
MYSQL_OPENSSL_UDF_DSA_BITS_THRESHOLD, and
MYSQL_OPENSSL_UDF_DH_BITS_THRESHOLD environment variables. See
https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-configuri
ng.html.

For an example showing how to use the return value for generating
symmetric keys, see the description of asymmetric_derive().

URL: https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions-legacy.html

</field>
		<field name="example">SET @dhp = create_dh_parameters(1024);
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions-legacy.html</field>
	</row>
	<row>
		<field name="help_topic_id">13</field>
		<field name="name">TRUE</field>
		<field name="help_category_id">6</field>
		<field name="description">The constants TRUE and FALSE evaluate to 1 and 0, respectively. The
constant names can be written in any lettercase.

mysql&gt; SELECT TRUE, true, FALSE, false;
        -&gt; 1, 1, 0, 0

URL: https://dev.mysql.com/doc/refman/8.0/en/boolean-literals.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/boolean-literals.html</field>
	</row>
	<row>
		<field name="help_topic_id">14</field>
		<field name="name">FALSE</field>
		<field name="help_category_id">6</field>
		<field name="description">The constants TRUE and FALSE evaluate to 1 and 0, respectively. The
constant names can be written in any lettercase.

mysql&gt; SELECT TRUE, true, FALSE, false;
        -&gt; 1, 1, 0, 0

URL: https://dev.mysql.com/doc/refman/8.0/en/boolean-literals.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/boolean-literals.html</field>
	</row>
	<row>
		<field name="help_topic_id">15</field>
		<field name="name">BIT</field>
		<field name="help_category_id">2</field>
		<field name="description">BIT[(M)]

A bit-value type. M indicates the number of bits per value, from 1 to
64. The default is 1 if M is omitted.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">16</field>
		<field name="name">TINYINT</field>
		<field name="help_category_id">2</field>
		<field name="description">TINYINT[(M)] [UNSIGNED] [ZEROFILL]

A very small integer. The signed range is -128 to 127. The unsigned
range is 0 to 255.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">17</field>
		<field name="name">BOOLEAN</field>
		<field name="help_category_id">2</field>
		<field name="description">BOOL, BOOLEAN

These types are synonyms for TINYINT(1). A value of zero is considered
false. Nonzero values are considered true:

mysql&gt; SELECT IF(0, 'true', 'false');
+------------------------+
| IF(0, 'true', 'false') |
+------------------------+
| false                  |
+------------------------+

mysql&gt; SELECT IF(1, 'true', 'false');
+------------------------+
| IF(1, 'true', 'false') |
+------------------------+
| true                   |
+------------------------+

mysql&gt; SELECT IF(2, 'true', 'false');
+------------------------+
| IF(2, 'true', 'false') |
+------------------------+
| true                   |
+------------------------+

However, the values TRUE and FALSE are merely aliases for 1 and 0,
respectively, as shown here:

mysql&gt; SELECT IF(0 = FALSE, 'true', 'false');
+--------------------------------+
| IF(0 = FALSE, 'true', 'false') |
+--------------------------------+
| true                           |
+--------------------------------+

mysql&gt; SELECT IF(1 = TRUE, 'true', 'false');
+-------------------------------+
| IF(1 = TRUE, 'true', 'false') |
+-------------------------------+
| true                          |
+-------------------------------+

mysql&gt; SELECT IF(2 = TRUE, 'true', 'false');
+-------------------------------+
| IF(2 = TRUE, 'true', 'false') |
+-------------------------------+
| false                         |
+-------------------------------+

mysql&gt; SELECT IF(2 = FALSE, 'true', 'false');
+--------------------------------+
| IF(2 = FALSE, 'true', 'false') |
+--------------------------------+
| false                          |
+--------------------------------+

The last two statements display the results shown because 2 is equal to
neither 1 nor 0.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">18</field>
		<field name="name">SMALLINT</field>
		<field name="help_category_id">2</field>
		<field name="description">SMALLINT[(M)] [UNSIGNED] [ZEROFILL]

A small integer. The signed range is -32768 to 32767. The unsigned
range is 0 to 65535.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">19</field>
		<field name="name">MEDIUMINT</field>
		<field name="help_category_id">2</field>
		<field name="description">MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]

A medium-sized integer. The signed range is -8388608 to 8388607. The
unsigned range is 0 to 16777215.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">20</field>
		<field name="name">INT</field>
		<field name="help_category_id">2</field>
		<field name="description">INT[(M)] [UNSIGNED] [ZEROFILL]

A normal-size integer. The signed range is -2147483648 to 2147483647.
The unsigned range is 0 to 4294967295.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">21</field>
		<field name="name">INTEGER</field>
		<field name="help_category_id">2</field>
		<field name="description">INTEGER[(M)] [UNSIGNED] [ZEROFILL]

This type is a synonym for INT.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">22</field>
		<field name="name">BIGINT</field>
		<field name="help_category_id">2</field>
		<field name="description">BIGINT[(M)] [UNSIGNED] [ZEROFILL]

A large integer. The signed range is -9223372036854775808 to
9223372036854775807. The unsigned range is 0 to 18446744073709551615.

SERIAL is an alias for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">23</field>
		<field name="name">DECIMAL</field>
		<field name="help_category_id">2</field>
		<field name="description">DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]

A packed &quot;exact&quot; fixed-point number. M is the total number of digits
(the precision) and D is the number of digits after the decimal point
(the scale). The decimal point and (for negative numbers) the - sign
are not counted in M. If D is 0, values have no decimal point or
fractional part. The maximum number of digits (M) for DECIMAL is 65.
The maximum number of supported decimals (D) is 30. If D is omitted,
the default is 0. If M is omitted, the default is 10. (There is also a
limit on how long the text of DECIMAL literals can be; see
https://dev.mysql.com/doc/refman/8.0/en/precision-math-expressions.html
.)

UNSIGNED, if specified, disallows negative values. As of MySQL 8.0.17,
the UNSIGNED attribute is deprecated for columns of type DECIMAL (and
any synonyms); you should expect support for it to be removed in a
future version of MySQL. Consider using a simple CHECK constraint
instead for such columns.

All basic calculations (+, -, *, /) with DECIMAL columns are done with
a precision of 65 digits.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">24</field>
		<field name="name">DEC</field>
		<field name="help_category_id">2</field>
		<field name="description">DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED]
[ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL]

These types are synonyms for DECIMAL. The FIXED synonym is available
for compatibility with other database systems.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">25</field>
		<field name="name">FLOAT</field>
		<field name="help_category_id">2</field>
		<field name="description">FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]

A small (single-precision) floating-point number. Permissible values
are -3.402823466E+38 to -1.175494351E-38, 0, and 1.175494351E-38 to
3.402823466E+38. These are the theoretical limits, based on the IEEE
standard. The actual range might be slightly smaller depending on your
hardware or operating system.

M is the total number of digits and D is the number of digits following
the decimal point. If M and D are omitted, values are stored to the
limits permitted by the hardware. A single-precision floating-point
number is accurate to approximately 7 decimal places.

FLOAT(M,D) is a nonstandard MySQL extension. As of MySQL 8.0.17, this
syntax is deprecated, and you should expect support for it to be
removed in a future version of MySQL.

UNSIGNED, if specified, disallows negative values. As of MySQL 8.0.17,
the UNSIGNED attribute is deprecated for columns of type FLOAT (and any
synonyms) and you should expect support for it to be removed in a
future version of MySQL. Consider using a simple CHECK constraint
instead for such columns.

Using FLOAT might give you some unexpected problems because all
calculations in MySQL are done with double precision. See
https://dev.mysql.com/doc/refman/8.0/en/no-matching-rows.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">26</field>
		<field name="name">DOUBLE</field>
		<field name="help_category_id">2</field>
		<field name="description">DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]

A normal-size (double-precision) floating-point number. Permissible
values are -1.7976931348623157E+308 to -2.2250738585072014E-308, 0, and
2.2250738585072014E-308 to 1.7976931348623157E+308. These are the
theoretical limits, based on the IEEE standard. The actual range might
be slightly smaller depending on your hardware or operating system.

M is the total number of digits and D is the number of digits following
the decimal point. If M and D are omitted, values are stored to the
limits permitted by the hardware. A double-precision floating-point
number is accurate to approximately 15 decimal places.

DOUBLE(M,D) is a nonstandard MySQL extension. As of MySQL 8.0.17, this
syntax is deprecated and you should expect support for it to be removed
in a future version of MySQL.

UNSIGNED, if specified, disallows negative values. As of MySQL 8.0.17,
the UNSIGNED attribute is deprecated for columns of type DOUBLE (and
any synonyms) and you should expect support for it to be removed in a
future version of MySQL. Consider using a simple CHECK constraint
instead for such columns.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">27</field>
		<field name="name">DOUBLE PRECISION</field>
		<field name="help_category_id">2</field>
		<field name="description">DOUBLE PRECISION[(M,D)] [UNSIGNED] [ZEROFILL], REAL[(M,D)] [UNSIGNED]
[ZEROFILL]

These types are synonyms for DOUBLE. Exception: If the REAL_AS_FLOAT
SQL mode is enabled, REAL is a synonym for FLOAT rather than DOUBLE.

URL: https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">28</field>
		<field name="name">DATE</field>
		<field name="help_category_id">2</field>
		<field name="description">DATE

A date. The supported range is '1000-01-01' to '9999-12-31'. MySQL
displays DATE values in 'YYYY-MM-DD' format, but permits assignment of
values to DATE columns using either strings or numbers.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">29</field>
		<field name="name">DATETIME</field>
		<field name="help_category_id">2</field>
		<field name="description">DATETIME[(fsp)]

A date and time combination. The supported range is '1000-01-01
00:00:00.000000' to '9999-12-31 23:59:59.499999'. MySQL displays
DATETIME values in 'YYYY-MM-DD hh:mm:ss[.fraction]' format, but permits
assignment of values to DATETIME columns using either strings or
numbers.

An optional fsp value in the range from 0 to 6 may be given to specify
fractional seconds precision. A value of 0 signifies that there is no
fractional part. If omitted, the default precision is 0.

Automatic initialization and updating to the current date and time for
DATETIME columns can be specified using DEFAULT and ON UPDATE column
definition clauses, as described in
https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">30</field>
		<field name="name">TIMESTAMP</field>
		<field name="help_category_id">2</field>
		<field name="description">TIMESTAMP[(fsp)]

A timestamp. The range is '1970-01-01 00:00:01.000000' UTC to
'2038-01-19 03:14:07.499999' UTC. TIMESTAMP values are stored as the
number of seconds since the epoch ('1970-01-01 00:00:00' UTC). A
TIMESTAMP cannot represent the value '1970-01-01 00:00:00' because that
is equivalent to 0 seconds from the epoch and the value 0 is reserved
for representing '0000-00-00 00:00:00', the &quot;zero&quot; TIMESTAMP value.

An optional fsp value in the range from 0 to 6 may be given to specify
fractional seconds precision. A value of 0 signifies that there is no
fractional part. If omitted, the default precision is 0.

The way the server handles TIMESTAMP definitions depends on the value
of the explicit_defaults_for_timestamp system variable (see
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html).

If explicit_defaults_for_timestamp is enabled, there is no automatic
assignment of the DEFAULT CURRENT_TIMESTAMP or ON UPDATE
CURRENT_TIMESTAMP attributes to any TIMESTAMP column. They must be
included explicitly in the column definition. Also, any TIMESTAMP not
explicitly declared as NOT NULL permits NULL values.

If explicit_defaults_for_timestamp is disabled, the server handles
TIMESTAMP as follows:

Unless specified otherwise, the first TIMESTAMP column in a table is
defined to be automatically set to the date and time of the most recent
modification if not explicitly assigned a value. This makes TIMESTAMP
useful for recording the timestamp of an INSERT or UPDATE operation.
You can also set any TIMESTAMP column to the current date and time by
assigning it a NULL value, unless it has been defined with the NULL
attribute to permit NULL values.

Automatic initialization and updating to the current date and time can
be specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE
CURRENT_TIMESTAMP column definition clauses. By default, the first
TIMESTAMP column has these properties, as previously noted. However,
any TIMESTAMP column in a table can be defined to have these
properties.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">31</field>
		<field name="name">TIME</field>
		<field name="help_category_id">2</field>
		<field name="description">TIME[(fsp)]

A time. The range is '-838:59:59.000000' to '838:59:59.000000'. MySQL
displays TIME values in 'hh:mm:ss[.fraction]' format, but permits
assignment of values to TIME columns using either strings or numbers.

An optional fsp value in the range from 0 to 6 may be given to specify
fractional seconds precision. A value of 0 signifies that there is no
fractional part. If omitted, the default precision is 0.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">32</field>
		<field name="name">YEAR DATA TYPE</field>
		<field name="help_category_id">2</field>
		<field name="description">YEAR[(4)]

A year in 4-digit format. MySQL displays YEAR values in YYYY format,
but permits assignment of values to YEAR columns using either strings
or numbers. Values display as 1901 to 2155, or 0000.

For additional information about YEAR display format and interpretation
of input values, see https://dev.mysql.com/doc/refman/8.0/en/year.html.

*Note*:

As of MySQL 8.0.19, the YEAR(4) data type with an explicit display
width is deprecated; you should expect support for it to be removed in
a future version of MySQL. Instead, use YEAR without a display width,
which has the same meaning.

MySQL 8.0 does not support the 2-digit YEAR(2) data type permitted in
older versions of MySQL. For instructions on converting to 4-digit
YEAR, see 2-Digit YEAR(2) Limitations and Migrating to 4-Digit YEAR
(https://dev.mysql.com/doc/refman/5.7/en/migrating-from-year2.html), in
MySQL 5.7 Reference Manual (https://dev.mysql.com/doc/refman/5.7/en/).

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">33</field>
		<field name="name">CHAR</field>
		<field name="help_category_id">2</field>
		<field name="description">[NATIONAL] CHAR[(M)] [CHARACTER SET charset_name] [COLLATE
collation_name]

A fixed-length string that is always right-padded with spaces to the
specified length when stored. M represents the column length in
characters. The range of M is 0 to 255. If M is omitted, the length is
1.

*Note*:

Trailing spaces are removed when CHAR values are retrieved unless the
PAD_CHAR_TO_FULL_LENGTH SQL mode is enabled.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">34</field>
		<field name="name">CHAR BYTE</field>
		<field name="help_category_id">2</field>
		<field name="description">The CHAR BYTE data type is an alias for the BINARY data type. This is a
compatibility feature.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">35</field>
		<field name="name">VARCHAR</field>
		<field name="help_category_id">2</field>
		<field name="description">[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE
collation_name]

A variable-length string. M represents the maximum column length in
characters. The range of M is 0 to 65,535. The effective maximum length
of a VARCHAR is subject to the maximum row size (65,535 bytes, which is
shared among all columns) and the character set used. For example,
utf8mb3 characters can require up to three bytes per character, so a
VARCHAR column that uses the utf8mb3 character set can be declared to
be a maximum of 21,844 characters. See
https://dev.mysql.com/doc/refman/8.0/en/column-count-limit.html.

MySQL stores VARCHAR values as a 1-byte or 2-byte length prefix plus
data. The length prefix indicates the number of bytes in the value. A
VARCHAR column uses one length byte if values require no more than 255
bytes, two length bytes if values may require more than 255 bytes.

*Note*:

MySQL follows the standard SQL specification, and does not remove
trailing spaces from VARCHAR values.

VARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR is the
standard SQL way to define that a VARCHAR column should use some
predefined character set. MySQL uses utf8mb3 as this predefined
character set.
https://dev.mysql.com/doc/refman/8.0/en/charset-national.html. NVARCHAR
is shorthand for NATIONAL VARCHAR.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">36</field>
		<field name="name">BINARY</field>
		<field name="help_category_id">2</field>
		<field name="description">BINARY[(M)]

The BINARY type is similar to the CHAR type, but stores binary byte
strings rather than nonbinary character strings. An optional length M
represents the column length in bytes. If omitted, M defaults to 1.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">37</field>
		<field name="name">VARBINARY</field>
		<field name="help_category_id">2</field>
		<field name="description">VARBINARY(M)

The VARBINARY type is similar to the VARCHAR type, but stores binary
byte strings rather than nonbinary character strings. M represents the
maximum column length in bytes.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">38</field>
		<field name="name">TINYBLOB</field>
		<field name="help_category_id">2</field>
		<field name="description">TINYBLOB

A BLOB column with a maximum length of 255 (28 − 1) bytes. Each
TINYBLOB value is stored using a 1-byte length prefix that indicates
the number of bytes in the value.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">39</field>
		<field name="name">TINYTEXT</field>
		<field name="help_category_id">2</field>
		<field name="description">TINYTEXT [CHARACTER SET charset_name] [COLLATE collation_name]

A TEXT column with a maximum length of 255 (28 − 1) characters. The
effective maximum length is less if the value contains multibyte
characters. Each TINYTEXT value is stored using a 1-byte length prefix
that indicates the number of bytes in the value.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">40</field>
		<field name="name">BLOB</field>
		<field name="help_category_id">2</field>
		<field name="description">BLOB[(M)]

A BLOB column with a maximum length of 65,535 (216 − 1) bytes. Each
BLOB value is stored using a 2-byte length prefix that indicates the
number of bytes in the value.

An optional length M can be given for this type. If this is done, MySQL
creates the column as the smallest BLOB type large enough to hold
values M bytes long.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">41</field>
		<field name="name">TEXT</field>
		<field name="help_category_id">2</field>
		<field name="description">TEXT[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]

A TEXT column with a maximum length of 65,535 (216 − 1) characters.
The effective maximum length is less if the value contains multibyte
characters. Each TEXT value is stored using a 2-byte length prefix that
indicates the number of bytes in the value.

An optional length M can be given for this type. If this is done, MySQL
creates the column as the smallest TEXT type large enough to hold
values M characters long.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">42</field>
		<field name="name">MEDIUMBLOB</field>
		<field name="help_category_id">2</field>
		<field name="description">MEDIUMBLOB

A BLOB column with a maximum length of 16,777,215 (224 − 1) bytes.
Each MEDIUMBLOB value is stored using a 3-byte length prefix that
indicates the number of bytes in the value.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">43</field>
		<field name="name">MEDIUMTEXT</field>
		<field name="help_category_id">2</field>
		<field name="description">MEDIUMTEXT [CHARACTER SET charset_name] [COLLATE collation_name]

A TEXT column with a maximum length of 16,777,215 (224 − 1)
characters. The effective maximum length is less if the value contains
multibyte characters. Each MEDIUMTEXT value is stored using a 3-byte
length prefix that indicates the number of bytes in the value.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">44</field>
		<field name="name">LONGBLOB</field>
		<field name="help_category_id">2</field>
		<field name="description">LONGBLOB

A BLOB column with a maximum length of 4,294,967,295 or 4GB (232 − 1)
bytes. The effective maximum length of LONGBLOB columns depends on the
configured maximum packet size in the client/server protocol and
available memory. Each LONGBLOB value is stored using a 4-byte length
prefix that indicates the number of bytes in the value.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">45</field>
		<field name="name">LONGTEXT</field>
		<field name="help_category_id">2</field>
		<field name="description">LONGTEXT [CHARACTER SET charset_name] [COLLATE collation_name]

A TEXT column with a maximum length of 4,294,967,295 or 4GB (232 − 1)
characters. The effective maximum length is less if the value contains
multibyte characters. The effective maximum length of LONGTEXT columns
also depends on the configured maximum packet size in the client/server
protocol and available memory. Each LONGTEXT value is stored using a
4-byte length prefix that indicates the number of bytes in the value.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">46</field>
		<field name="name">ENUM</field>
		<field name="help_category_id">2</field>
		<field name="description">ENUM('value1','value2',...) [CHARACTER SET charset_name] [COLLATE
collation_name]

An enumeration. A string object that can have only one value, chosen
from the list of values 'value1', 'value2', ..., NULL or the special ''
error value. ENUM values are represented internally as integers.

An ENUM column can have a maximum of 65,535 distinct elements.

The maximum supported length of an individual ENUM element is M &lt;= 255
and (M x w) &lt;= 1020, where M is the element literal length and w is the
number of bytes required for the maximum-length character in the
character set.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">47</field>
		<field name="name">SET DATA TYPE</field>
		<field name="help_category_id">2</field>
		<field name="description">SET('value1','value2',...) [CHARACTER SET charset_name] [COLLATE
collation_name]

A set. A string object that can have zero or more values, each of which
must be chosen from the list of values 'value1', 'value2', ... SET
values are represented internally as integers.

A SET column can have a maximum of 64 distinct members.

The maximum supported length of an individual SET element is M &lt;= 255
and (M x w) &lt;= 1020, where M is the element literal length and w is the
number of bytes required for the maximum-length character in the
character set.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html</field>
	</row>
	<row>
		<field name="help_topic_id">48</field>
		<field name="name">BLOB DATA TYPE</field>
		<field name="help_category_id">2</field>
		<field name="description">A BLOB is a binary large object that can hold a variable amount of
data. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB.
These differ only in the maximum length of the values they can hold.
The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These
correspond to the four BLOB types and have the same maximum lengths and
storage requirements. See
https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/blob.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/blob.html</field>
	</row>
	<row>
		<field name="help_topic_id">49</field>
		<field name="name">GEOMETRY HIERARCHY</field>
		<field name="help_category_id">7</field>
		<field name="description">Geometry is the base class. It is an abstract class. The instantiable
subclasses of Geometry are restricted to zero-, one-, and
two-dimensional geometric objects that exist in two-dimensional
coordinate space. All instantiable geometry classes are defined so that
valid instances of a geometry class are topologically closed (that is,
all defined geometries include their boundary).

The base Geometry class has subclasses for Point, Curve, Surface, and
GeometryCollection:

o Point represents zero-dimensional objects.

o Curve represents one-dimensional objects, and has subclass
  LineString, with sub-subclasses Line and LinearRing.

o Surface is designed for two-dimensional objects and has subclass
  Polygon.

o GeometryCollection has specialized zero-, one-, and two-dimensional
  collection classes named MultiPoint, MultiLineString, and
  MultiPolygon for modeling geometries corresponding to collections of
  Points, LineStrings, and Polygons, respectively. MultiCurve and
  MultiSurface are introduced as abstract superclasses that generalize
  the collection interfaces to handle Curves and Surfaces.

Geometry, Curve, Surface, MultiCurve, and MultiSurface are defined as
noninstantiable classes. They define a common set of methods for their
subclasses and are included for extensibility.

Point, LineString, Polygon, GeometryCollection, MultiPoint,
MultiLineString, and MultiPolygon are instantiable classes.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html</field>
	</row>
	<row>
		<field name="help_topic_id">50</field>
		<field name="name">MBR DEFINITION</field>
		<field name="help_category_id">8</field>
		<field name="description">Its MBR (minimum bounding rectangle), or envelope. This is the bounding
geometry, formed by the minimum and maximum (X,Y) coordinates:

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html

</field>
		<field name="example">((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html</field>
	</row>
	<row>
		<field name="help_topic_id">51</field>
		<field name="name">WKT DEFINITION</field>
		<field name="help_category_id">9</field>
		<field name="description">The Well-Known Text (WKT) representation of geometry values is designed
for exchanging geometry data in ASCII form. The OpenGIS specification
provides a Backus-Naur grammar that specifies the formal production
rules for writing WKT values (see
https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html).

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html</field>
	</row>
	<row>
		<field name="help_topic_id">52</field>
		<field name="name">SPATIAL COLUMNS</field>
		<field name="help_category_id">7</field>
		<field name="description">MySQL provides a standard way of creating spatial columns for geometry
types, for example, with CREATE TABLE or ALTER TABLE. Spatial columns
are supported for MyISAM, InnoDB, NDB, and ARCHIVE tables. See also the
notes about spatial indexes under [HELP SPATIAL indexes].

Columns with a spatial data type can have an SRID attribute, to
explicitly indicate the spatial reference system (SRS) for values
stored in the column. For implications of an SRID-restricted column,
see https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html

</field>
		<field name="example">CREATE TABLE geom (g GEOMETRY);
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html</field>
	</row>
	<row>
		<field name="help_topic_id">53</field>
		<field name="name">SPATIAL INDEXES</field>
		<field name="help_category_id">7</field>
		<field name="description">For InnoDB and MyISAM tables, MySQL can create spatial indexes using
syntax similar to that for creating regular indexes, but using the
SPATIAL keyword. Columns in spatial indexes must be declared NOT NULL.
The following examples demonstrate how to create spatial indexes:

o With CREATE TABLE:

CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326, SPATIAL INDEX(g));

o With ALTER TABLE:

CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);
ALTER TABLE geom ADD SPATIAL INDEX(g);

o With CREATE INDEX:

CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);
CREATE SPATIAL INDEX g ON geom (g);

SPATIAL INDEX creates an R-tree index. For storage engines that support
nonspatial indexing of spatial columns, the engine creates a B-tree
index. A B-tree index on spatial values is useful for exact-value
lookups, but not for range scans.

The optimizer can use spatial indexes defined on columns that are
SRID-restricted. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html, and
https://dev.mysql.com/doc/refman/8.0/en/spatial-index-optimization.html
.

For more information on indexing spatial columns, see [HELP CREATE
INDEX].

To drop spatial indexes, use ALTER TABLE or DROP INDEX:

o With ALTER TABLE:

ALTER TABLE geom DROP INDEX g;

o With DROP INDEX:

DROP INDEX g ON geom;

Example: Suppose that a table geom contains more than 32,000
geometries, which are stored in the column g of type GEOMETRY. The
table also has an AUTO_INCREMENT column fid for storing object ID
values.

URL: https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-indexes.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-indexes.html</field>
	</row>
	<row>
		<field name="help_topic_id">54</field>
		<field name="name">=</field>
		<field name="help_category_id">10</field>
		<field name="description">=

Equal:

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 1 = 0;
        -&gt; 0
mysql&gt; SELECT '0' = 0;
        -&gt; 1
mysql&gt; SELECT '0.0' = 0;
        -&gt; 1
mysql&gt; SELECT '0.01' = 0;
        -&gt; 0
mysql&gt; SELECT '.01' = 0.01;
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">55</field>
		<field name="name">&lt;=&gt;</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
&lt;=&gt;

NULL-safe equal. This operator performs an equality comparison like the
= operator, but returns 1 rather than NULL if both operands are NULL,
and 0 rather than NULL if one operand is NULL.

The &lt;=&gt; operator is equivalent to the standard SQL IS NOT DISTINCT FROM
operator.

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 1 &lt;=&gt; 1, NULL &lt;=&gt; NULL, 1 &lt;=&gt; NULL;
        -&gt; 1, 1, 0
mysql&gt; SELECT 1 = 1, NULL = NULL, 1 = NULL;
        -&gt; 1, NULL, NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">56</field>
		<field name="name">!=</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
&lt;&gt;, !=

Not equal:

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT '.01' &lt;&gt; '0.01';
        -&gt; 1
mysql&gt; SELECT .01 &lt;&gt; '0.01';
        -&gt; 0
mysql&gt; SELECT 'zapp' &lt;&gt; 'zappp';
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">57</field>
		<field name="name">&lt;=</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
&lt;=

Less than or equal:

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 0.1 &lt;= 2;
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">58</field>
		<field name="name">&lt;</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
&lt;

Less than:

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 2 &lt; 2;
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">59</field>
		<field name="name">&gt;=</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
&gt;=

Greater than or equal:

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 2 &gt;= 2;
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">60</field>
		<field name="name">&gt;</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
&gt;

Greater than:

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 2 &gt; 2;
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">61</field>
		<field name="name">BETWEEN AND</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
expr BETWEEN min AND max

If expr is greater than or equal to min and expr is less than or equal
to max, BETWEEN returns 1, otherwise it returns 0. This is equivalent
to the expression (min &lt;= expr AND expr &lt;= max) if all the arguments
are of the same type. Otherwise type conversion takes place according
to the rules described in
https://dev.mysql.com/doc/refman/8.0/en/type-conversion.html, but
applied to all the three arguments.

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;
        -&gt; 1, 0
mysql&gt; SELECT 1 BETWEEN 2 AND 3;
        -&gt; 0
mysql&gt; SELECT 'b' BETWEEN 'a' AND 'c';
        -&gt; 1
mysql&gt; SELECT 2 BETWEEN 2 AND '3';
        -&gt; 1
mysql&gt; SELECT 2 BETWEEN 2 AND 'x-3';
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">62</field>
		<field name="name">NOT BETWEEN</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
expr NOT BETWEEN min AND max

This is the same as NOT (expr BETWEEN min AND max).

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">63</field>
		<field name="name">COALESCE</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
COALESCE(value,...)

Returns the first non-NULL value in the list, or NULL if there are no
non-NULL values.

The return type of COALESCE() is the aggregated type of the argument
types.

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT COALESCE(NULL,1);
        -&gt; 1
mysql&gt; SELECT COALESCE(NULL,NULL,NULL);
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">64</field>
		<field name="name">GREATEST</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
GREATEST(value1,value2,...)

With two or more arguments, returns the largest (maximum-valued)
argument. The arguments are compared using the same rules as for
LEAST().

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT GREATEST(2,0);
        -&gt; 2
mysql&gt; SELECT GREATEST(34.0,3.0,5.0,767.0);
        -&gt; 767.0
mysql&gt; SELECT GREATEST('B','A','C');
        -&gt; 'C'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">65</field>
		<field name="name">IN</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
expr IN (value,...)

Returns 1 (true) if expr is equal to any of the values in the IN()
list, else returns 0 (false).

Type conversion takes place according to the rules described in
https://dev.mysql.com/doc/refman/8.0/en/type-conversion.html, applied
to all the arguments. If no type conversion is needed for the values in
the IN() list, they are all non-JSON constants of the same type, and
expr can be compared to each of them as a value of the same type
(possibly after type conversion), an optimization takes place. The
values the list are sorted and the search for expr is done using a
binary search, which makes the IN() operation very quick.

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 2 IN (0,3,5,7);
        -&gt; 0
mysql&gt; SELECT 'wefwf' IN ('wee','wefwf','weg');
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">66</field>
		<field name="name">NOT IN</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
expr NOT IN (value,...)

This is the same as NOT (expr IN (value,...)).

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">67</field>
		<field name="name">INTERVAL</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
INTERVAL(N,N1,N2,N3,...)

Returns 0 if N &lt;= N1, 1 if N &lt;= N2 and so on, or -1 if N is NULL. All
arguments are treated as integers. It is required that N1 &lt;= N2 &lt;= N3
&lt;= ... &lt;= Nn for this function to work correctly. This is because a
binary search is used (very fast).

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);
        -&gt; 3
mysql&gt; SELECT INTERVAL(10, 1, 10, 100, 1000);
        -&gt; 2
mysql&gt; SELECT INTERVAL(22, 23, 30, 44, 200);
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">68</field>
		<field name="name">IS</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
IS boolean_value

Tests a value against a boolean value, where boolean_value can be TRUE,
FALSE, or UNKNOWN.

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;
        -&gt; 1, 1, 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">69</field>
		<field name="name">IS NOT</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
IS NOT boolean_value

Tests a value against a boolean value, where boolean_value can be TRUE,
FALSE, or UNKNOWN.

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;
        -&gt; 1, 1, 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">70</field>
		<field name="name">IS NULL</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
IS NULL

Tests whether a value is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;
        -&gt; 0, 0, 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">71</field>
		<field name="name">IS NOT NULL</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
IS NOT NULL

Tests whether a value is not NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;
        -&gt; 1, 1, 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">72</field>
		<field name="name">ISNULL</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
ISNULL(expr)

If expr is NULL, ISNULL() returns 1, otherwise it returns 0.

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT ISNULL(1+1);
        -&gt; 0
mysql&gt; SELECT ISNULL(1/0);
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">73</field>
		<field name="name">LEAST</field>
		<field name="help_category_id">10</field>
		<field name="description">Syntax:
LEAST(value1,value2,...)

With two or more arguments, returns the smallest (minimum-valued)
argument. The arguments are compared using the following rules:

o If any argument is NULL, the result is NULL. No comparison is needed.

o If all arguments are integer-valued, they are compared as integers.

o If at least one argument is double precision, they are compared as
  double-precision values. Otherwise, if at least one argument is a
  DECIMAL value, they are compared as DECIMAL values.

o If the arguments comprise a mix of numbers and strings, they are
  compared as strings.

o If any argument is a nonbinary (character) string, the arguments are
  compared as nonbinary strings.

o In all other cases, the arguments are compared as binary strings.

The return type of LEAST() is the aggregated type of the comparison
argument types.

URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html

</field>
		<field name="example">mysql&gt; SELECT LEAST(2,0);
        -&gt; 0
mysql&gt; SELECT LEAST(34.0,3.0,5.0,767.0);
        -&gt; 3.0
mysql&gt; SELECT LEAST('B','A','C');
        -&gt; 'A'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">74</field>
		<field name="name">!</field>
		<field name="help_category_id">11</field>
		<field name="description">Syntax:
NOT, !

Logical NOT. Evaluates to 1 if the operand is 0, to 0 if the operand is
nonzero, and NOT NULL returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html

</field>
		<field name="example">mysql&gt; SELECT NOT 10;
        -&gt; 0
mysql&gt; SELECT NOT 0;
        -&gt; 1
mysql&gt; SELECT NOT NULL;
        -&gt; NULL
mysql&gt; SELECT ! (1+1);
        -&gt; 0
mysql&gt; SELECT ! 1+1;
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">75</field>
		<field name="name">AND</field>
		<field name="help_category_id">11</field>
		<field name="description">Syntax:
AND, &amp;&amp;

Logical AND. Evaluates to 1 if all operands are nonzero and not NULL,
to 0 if one or more operands are 0, otherwise NULL is returned.

URL: https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html

</field>
		<field name="example">mysql&gt; SELECT 1 AND 1;
        -&gt; 1
mysql&gt; SELECT 1 AND 0;
        -&gt; 0
mysql&gt; SELECT 1 AND NULL;
        -&gt; NULL
mysql&gt; SELECT 0 AND NULL;
        -&gt; 0
mysql&gt; SELECT NULL AND 0;
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">76</field>
		<field name="name">OR</field>
		<field name="help_category_id">11</field>
		<field name="description">Syntax:
OR, ||

Logical OR. When both operands are non-NULL, the result is 1 if any
operand is nonzero, and 0 otherwise. With a NULL operand, the result is
1 if the other operand is nonzero, and NULL otherwise. If both operands
are NULL, the result is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html

</field>
		<field name="example">mysql&gt; SELECT 1 OR 1;
        -&gt; 1
mysql&gt; SELECT 1 OR 0;
        -&gt; 1
mysql&gt; SELECT 0 OR 0;
        -&gt; 0
mysql&gt; SELECT 0 OR NULL;
        -&gt; NULL
mysql&gt; SELECT 1 OR NULL;
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">77</field>
		<field name="name">XOR</field>
		<field name="help_category_id">11</field>
		<field name="description">Syntax:
XOR

Logical XOR. Returns NULL if either operand is NULL. For non-NULL
operands, evaluates to 1 if an odd number of operands is nonzero,
otherwise 0 is returned.

URL: https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html

</field>
		<field name="example">mysql&gt; SELECT 1 XOR 1;
        -&gt; 0
mysql&gt; SELECT 1 XOR 0;
        -&gt; 1
mysql&gt; SELECT 1 XOR NULL;
        -&gt; NULL
mysql&gt; SELECT 1 XOR 1 XOR 1;
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">78</field>
		<field name="name">ASSIGN-VALUE</field>
		<field name="help_category_id">11</field>
		<field name="description">Syntax:
:=

Assignment operator. Causes the user variable on the left hand side of
the operator to take on the value to its right. The value on the right
hand side may be a literal value, another variable storing a value, or
any legal expression that yields a scalar value, including the result
of a query (provided that this value is a scalar value). You can
perform multiple assignments in the same SET statement. You can perform
multiple assignments in the same statement.

Unlike =, the := operator is never interpreted as a comparison
operator. This means you can use := in any valid SQL statement (not
just in SET statements) to assign a value to a variable.

URL: https://dev.mysql.com/doc/refman/8.0/en/assignment-operators.html

</field>
		<field name="example">mysql&gt; SELECT @var1, @var2;
        -&gt; NULL, NULL
mysql&gt; SELECT @var1 := 1, @var2;
        -&gt; 1, NULL
mysql&gt; SELECT @var1, @var2;
        -&gt; 1, NULL
mysql&gt; SELECT @var1, @var2 := @var1;
        -&gt; 1, 1
mysql&gt; SELECT @var1, @var2;
        -&gt; 1, 1

mysql&gt; SELECT @var1:=COUNT(*) FROM t1;
        -&gt; 4
mysql&gt; SELECT @var1;
        -&gt; 4
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/assignment-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">79</field>
		<field name="name">ASSIGN-EQUAL</field>
		<field name="help_category_id">11</field>
		<field name="description">Syntax:
=

This operator is used to perform value assignments in two cases,
described in the next two paragraphs.

Within a SET statement, = is treated as an assignment operator that
causes the user variable on the left hand side of the operator to take
on the value to its right. (In other words, when used in a SET
statement, = is treated identically to :=.) The value on the right hand
side may be a literal value, another variable storing a value, or any
legal expression that yields a scalar value, including the result of a
query (provided that this value is a scalar value). You can perform
multiple assignments in the same SET statement.

In the SET clause of an UPDATE statement, = also acts as an assignment
operator; in this case, however, it causes the column named on the left
hand side of the operator to assume the value given to the right,
provided any WHERE conditions that are part of the UPDATE are met. You
can make multiple assignments in the same SET clause of an UPDATE
statement.

In any other context, = is treated as a comparison operator.

URL: https://dev.mysql.com/doc/refman/8.0/en/assignment-operators.html

</field>
		<field name="example">mysql&gt; SELECT @var1, @var2;
        -&gt; NULL, NULL
mysql&gt; SELECT @var1 := 1, @var2;
        -&gt; 1, NULL
mysql&gt; SELECT @var1, @var2;
        -&gt; 1, NULL
mysql&gt; SELECT @var1, @var2 := @var1;
        -&gt; 1, 1
mysql&gt; SELECT @var1, @var2;
        -&gt; 1, 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/assignment-operators.html</field>
	</row>
	<row>
		<field name="help_topic_id">80</field>
		<field name="name">CASE OPERATOR</field>
		<field name="help_category_id">12</field>
		<field name="description">Syntax:
CASE value WHEN compare_value THEN result [WHEN compare_value THEN
result ...] [ELSE result] END

CASE WHEN condition THEN result [WHEN condition THEN result ...] [ELSE
result] END

The first CASE syntax returns the result for the first
value=compare_value comparison that is true. The second syntax returns
the result for the first condition that is true. If no comparison or
condition is true, the result after ELSE is returned, or NULL if there
is no ELSE part.

*Note*:

The syntax of the CASE operator described here differs slightly from
that of the SQL CASE statement described in [HELP CASE statement], for
use inside stored programs. The CASE statement cannot have an ELSE NULL
clause, and it is terminated with END CASE instead of END.

The return type of a CASE expression result is the aggregated type of
all result values:

o If all types are numeric, the aggregated type is also numeric:

  o If at least one argument is double precision, the result is double
    precision.

  o Otherwise, if at least one argument is DECIMAL, the result is
    DECIMAL.

  o Otherwise, the result is an integer type (with one exception):

    o If all integer types are all signed or all unsigned, the result
      is the same sign and the precision is the highest of all
      specified integer types (that is, TINYINT, SMALLINT, MEDIUMINT,
      INT, or BIGINT).

    o If there is a combination of signed and unsigned integer types,
      the result is signed and the precision may be higher. For
      example, if the types are signed INT and unsigned INT, the result
      is signed BIGINT.

    o The exception is unsigned BIGINT combined with any signed integer
      type. The result is DECIMAL with sufficient precision and scale
      0.

o If all types are BIT, the result is BIT. Otherwise, BIT arguments are
  treated similar to BIGINT.

o If all types are YEAR, the result is YEAR. Otherwise, YEAR arguments
  are treated similar to INT.

o If all types are character string (CHAR or VARCHAR), the result is
  VARCHAR with maximum length determined by the longest character
  length of the operands.

o If all types are character or binary string, the result is VARBINARY.

o SET and ENUM are treated similar to VARCHAR; the result is VARCHAR.

o If all types are JSON, the result is JSON.

o If all types are temporal, the result is temporal:

  o If all temporal types are DATE, TIME, or TIMESTAMP, the result is
    DATE, TIME, or TIMESTAMP, respectively.

  o Otherwise, for a mix of temporal types, the result is DATETIME.

o If all types are GEOMETRY, the result is GEOMETRY.

o If any type is BLOB, the result is BLOB.

o For all other type combinations, the result is VARCHAR.

o Literal NULL operands are ignored for type aggregation.

URL: https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html

</field>
		<field name="example">mysql&gt; SELECT CASE 1 WHEN 1 THEN 'one'
    -&gt;     WHEN 2 THEN 'two' ELSE 'more' END;
        -&gt; 'one'
mysql&gt; SELECT CASE WHEN 1&gt;0 THEN 'true' ELSE 'false' END;
        -&gt; 'true'
mysql&gt; SELECT CASE BINARY 'B'
    -&gt;     WHEN 'a' THEN 1 WHEN 'b' THEN 2 END;
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">81</field>
		<field name="name">IF FUNCTION</field>
		<field name="help_category_id">12</field>
		<field name="description">Syntax:
IF(expr1,expr2,expr3)

If expr1 is TRUE (expr1 &lt;&gt; 0 and expr1 IS NOT NULL), IF() returns
expr2. Otherwise, it returns expr3.

*Note*:

There is also an IF statement, which differs from the IF() function
described here. See [HELP IF statement].

If only one of expr2 or expr3 is explicitly NULL, the result type of
the IF() function is the type of the non-NULL expression.

The default return type of IF() (which may matter when it is stored
into a temporary table) is calculated as follows:

o If expr2 or expr3 produce a string, the result is a string.

  If expr2 and expr3 are both strings, the result is case-sensitive if
  either string is case-sensitive.

o If expr2 or expr3 produce a floating-point value, the result is a
  floating-point value.

o If expr2 or expr3 produce an integer, the result is an integer.

URL: https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html

</field>
		<field name="example">mysql&gt; SELECT IF(1&gt;2,2,3);
        -&gt; 3
mysql&gt; SELECT IF(1&lt;2,'yes','no');
        -&gt; 'yes'
mysql&gt; SELECT IF(STRCMP('test','test1'),'no','yes');
        -&gt; 'no'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">82</field>
		<field name="name">IFNULL</field>
		<field name="help_category_id">12</field>
		<field name="description">Syntax:
IFNULL(expr1,expr2)

If expr1 is not NULL, IFNULL() returns expr1; otherwise it returns
expr2.

URL: https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html

</field>
		<field name="example">mysql&gt; SELECT IFNULL(1,0);
        -&gt; 1
mysql&gt; SELECT IFNULL(NULL,10);
        -&gt; 10
mysql&gt; SELECT IFNULL(1/0,10);
        -&gt; 10
mysql&gt; SELECT IFNULL(1/0,'yes');
        -&gt; 'yes'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">83</field>
		<field name="name">NULLIF</field>
		<field name="help_category_id">12</field>
		<field name="description">Syntax:
NULLIF(expr1,expr2)

Returns NULL if expr1 = expr2 is true, otherwise returns expr1. This is
the same as CASE WHEN expr1 = expr2 THEN NULL ELSE expr1 END.

The return value has the same type as the first argument.

URL: https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html

</field>
		<field name="example">mysql&gt; SELECT NULLIF(1,1);
        -&gt; NULL
mysql&gt; SELECT NULLIF(1,2);
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">84</field>
		<field name="name">+</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
+

Addition:

URL: https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html

</field>
		<field name="example">mysql&gt; SELECT 3+5;
        -&gt; 8
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">85</field>
		<field name="name">- BINARY</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
-

Subtraction:

URL: https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html

</field>
		<field name="example">mysql&gt; SELECT 3-5;
        -&gt; -2
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">86</field>
		<field name="name">- UNARY</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
-

Unary minus. This operator changes the sign of the operand.

URL: https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html

</field>
		<field name="example">mysql&gt; SELECT - 2;
        -&gt; -2
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">87</field>
		<field name="name">*</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
*

Multiplication:

URL: https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html

</field>
		<field name="example">mysql&gt; SELECT 3*5;
        -&gt; 15
mysql&gt; SELECT 18014398509481984*18014398509481984.0;
        -&gt; 324518553658426726783156020576256.0
mysql&gt; SELECT 18014398509481984*18014398509481984;
        -&gt; out-of-range error
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">88</field>
		<field name="name">/</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
/

Division:

URL: https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html

</field>
		<field name="example">mysql&gt; SELECT 3/5;
        -&gt; 0.60
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">89</field>
		<field name="name">DIV</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
DIV

Integer division. Discards from the division result any fractional part
to the right of the decimal point.

If either operand has a noninteger type, the operands are converted to
DECIMAL and divided using DECIMAL arithmetic before converting the
result to BIGINT. If the result exceeds BIGINT range, an error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html

</field>
		<field name="example">mysql&gt; SELECT 5 DIV 2, -5 DIV 2, 5 DIV -2, -5 DIV -2;
        -&gt; 2, -2, -2, 2
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">90</field>
		<field name="name">%</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
N % M, N MOD M

Modulo operation. Returns the remainder of N divided by M. For more
information, see the description for the MOD() function in
https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">91</field>
		<field name="name">ABS</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
ABS(X)

Returns the absolute value of X, or NULL if X is NULL.

The result type is derived from the argument type. An implication of
this is that ABS(-9223372036854775808) produces an error because the
result cannot be stored in a signed BIGINT value.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT ABS(2);
        -&gt; 2
mysql&gt; SELECT ABS(-32);
        -&gt; 32
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">92</field>
		<field name="name">ACOS</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
ACOS(X)

Returns the arc cosine of X, that is, the value whose cosine is X.
Returns NULL if X is not in the range -1 to 1, or if X is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT ACOS(1);
        -&gt; 0
mysql&gt; SELECT ACOS(1.0001);
        -&gt; NULL
mysql&gt; SELECT ACOS(0);
        -&gt; 1.5707963267949
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">93</field>
		<field name="name">ASIN</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
ASIN(X)

Returns the arc sine of X, that is, the value whose sine is X. Returns
NULL if X is not in the range -1 to 1, or if X is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT ASIN(0.2);
        -&gt; 0.20135792079033
mysql&gt; SELECT ASIN('foo');

+-------------+
| ASIN('foo') |
+-------------+
|           0 |
+-------------+
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS;
+---------+------+-----------------------------------------+
| Level   | Code | Message                                 |
+---------+------+-----------------------------------------+
| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |
+---------+------+-----------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">94</field>
		<field name="name">ATAN</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
ATAN(X)

Returns the arc tangent of X, that is, the value whose tangent is X.
Returns NULL if X is NULL

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT ATAN(2);
        -&gt; 1.1071487177941
mysql&gt; SELECT ATAN(-2);
        -&gt; -1.1071487177941
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">95</field>
		<field name="name">ATAN2</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
ATAN(Y,X), ATAN2(Y,X)

Returns the arc tangent of the two variables X and Y. It is similar to
calculating the arc tangent of Y / X, except that the signs of both
arguments are used to determine the quadrant of the result. Returns
NULL if X or Y is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT ATAN(-2,2);
        -&gt; -0.78539816339745
mysql&gt; SELECT ATAN2(PI(),0);
        -&gt; 1.5707963267949
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">96</field>
		<field name="name">CEIL</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
CEIL(X)

CEIL() is a synonym for CEILING().

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">97</field>
		<field name="name">CEILING</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
CEILING(X)

Returns the smallest integer value not less than X. Returns NULL if X
is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT CEILING(1.23);
        -&gt; 2
mysql&gt; SELECT CEILING(-1.23);
        -&gt; -1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">98</field>
		<field name="name">CONV</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
CONV(N,from_base,to_base)

Converts numbers between different number bases. Returns a string
representation of the number N, converted from base from_base to base
to_base. Returns NULL if any argument is NULL. The argument N is
interpreted as an integer, but may be specified as an integer or a
string. The minimum base is 2 and the maximum base is 36. If from_base
is a negative number, N is regarded as a signed number. Otherwise, N is
treated as unsigned. CONV() works with 64-bit precision.

CONV() returns NULL if any of its arguments are NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT CONV('a',16,2);
        -&gt; '1010'
mysql&gt; SELECT CONV('6E',18,8);
        -&gt; '172'
mysql&gt; SELECT CONV(-17,10,-18);
        -&gt; '-H'
mysql&gt; SELECT CONV(10+'10'+'10'+X'0a',10,10);
        -&gt; '40'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">99</field>
		<field name="name">COS</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
COS(X)

Returns the cosine of X, where X is given in radians. Returns NULL if X
is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT COS(PI());
        -&gt; -1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">100</field>
		<field name="name">COT</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
COT(X)

Returns the cotangent of X. Returns NULL if X is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT COT(12);
        -&gt; -1.5726734063977
mysql&gt; SELECT COT(0);
        -&gt; out-of-range error
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">101</field>
		<field name="name">CRC32</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
CRC32(expr)

Computes a cyclic redundancy check value and returns a 32-bit unsigned
value. The result is NULL if the argument is NULL. The argument is
expected to be a string and (if possible) is treated as one if it is
not.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT CRC32('MySQL');
        -&gt; 3259397556
mysql&gt; SELECT CRC32('mysql');
        -&gt; 2501908538
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">102</field>
		<field name="name">DEGREES</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
DEGREES(X)

Returns the argument X, converted from radians to degrees. Returns NULL
if X is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT DEGREES(PI());
        -&gt; 180
mysql&gt; SELECT DEGREES(PI() / 2);
        -&gt; 90
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">103</field>
		<field name="name">EXP</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
EXP(X)

Returns the value of e (the base of natural logarithms) raised to the
power of X. The inverse of this function is LOG() (using a single
argument only) or LN().

If X is NULL, this function returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT EXP(2);
        -&gt; 7.3890560989307
mysql&gt; SELECT EXP(-2);
        -&gt; 0.13533528323661
mysql&gt; SELECT EXP(0);
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">104</field>
		<field name="name">FLOOR</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
FLOOR(X)

Returns the largest integer value not greater than X. Returns NULL if X
is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT FLOOR(1.23), FLOOR(-1.23);
        -&gt; 1, -2
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">105</field>
		<field name="name">LN</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
LN(X)

Returns the natural logarithm of X; that is, the base-e logarithm of X.
If X is less than or equal to 0.0E0, the function returns NULL and a
warning &quot;Invalid argument for logarithm&quot; is reported. Returns NULL if X
is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT LN(2);
        -&gt; 0.69314718055995
mysql&gt; SELECT LN(-2);
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">106</field>
		<field name="name">LOG</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
LOG(X), LOG(B,X)

If called with one parameter, this function returns the natural
logarithm of X. If X is less than or equal to 0.0E0, the function
returns NULL and a warning &quot;Invalid argument for logarithm&quot; is
reported. Returns NULL if X or B is NULL.

The inverse of this function (when called with a single argument) is
the EXP() function.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT LOG(2);
        -&gt; 0.69314718055995
mysql&gt; SELECT LOG(-2);
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">107</field>
		<field name="name">LOG2</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
LOG2(X)

Returns the base-2 logarithm of X. If X is less than or equal to 0.0E0,
the function returns NULL and a warning &quot;Invalid argument for
logarithm&quot; is reported. Returns NULL if X is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT LOG2(65536);
        -&gt; 16
mysql&gt; SELECT LOG2(-100);
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">108</field>
		<field name="name">LOG10</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
LOG10(X)

Returns the base-10 logarithm of X. If X is less than or equal to
0.0E0, the function returns NULL and a warning &quot;Invalid argument for
logarithm&quot; is reported. Returns NULL if X is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT LOG10(2);
        -&gt; 0.30102999566398
mysql&gt; SELECT LOG10(100);
        -&gt; 2
mysql&gt; SELECT LOG10(-100);
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">109</field>
		<field name="name">MOD</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
MOD(N,M), N % M, N MOD M

Modulo operation. Returns the remainder of N divided by M. Returns NULL
if M or N is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT MOD(234, 10);
        -&gt; 4
mysql&gt; SELECT 253 % 7;
        -&gt; 1
mysql&gt; SELECT MOD(29,9);
        -&gt; 2
mysql&gt; SELECT 29 MOD 9;
        -&gt; 2
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">110</field>
		<field name="name">PI</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
PI()

Returns the value of π (pi). The default number of decimal places
displayed is seven, but MySQL uses the full double-precision value
internally.

Because the return value of this function is a double-precision value,
its exact representation may vary between platforms or implementations.
This also applies to any expressions making use of PI(). See
https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT PI();
        -&gt; 3.141593
mysql&gt; SELECT PI()+0.000000000000000000;
        -&gt; 3.141592653589793000
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">111</field>
		<field name="name">POW</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
POW(X,Y)

Returns the value of X raised to the power of Y. Returns NULL if X or Y
is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT POW(2,2);
        -&gt; 4
mysql&gt; SELECT POW(2,-2);
        -&gt; 0.25
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">112</field>
		<field name="name">POWER</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
POWER(X,Y)

This is a synonym for POW().

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">113</field>
		<field name="name">RADIANS</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
RADIANS(X)

Returns the argument X, converted from degrees to radians. (Note that
π radians equals 180 degrees.) Returns NULL if X is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT RADIANS(90);
        -&gt; 1.5707963267949
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">114</field>
		<field name="name">RAND</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
RAND([N])

Returns a random floating-point value v in the range 0 &lt;= v &lt; 1.0. To
obtain a random integer R in the range i &lt;= R &lt; j, use the expression
FLOOR(i + RAND() * (j − i)). For example, to obtain a random integer
in the range the range 7 &lt;= R &lt; 12, use the following statement:

SELECT FLOOR(7 + (RAND() * 5));

If an integer argument N is specified, it is used as the seed value:

o With a constant initializer argument, the seed is initialized once
  when the statement is prepared, prior to execution.

o With a nonconstant initializer argument (such as a column name), the
  seed is initialized with the value for each invocation of RAND().

One implication of this behavior is that for equal argument values,
RAND(N) returns the same value each time, and thus produces a
repeatable sequence of column values. In the following example, the
sequence of values produced by RAND(3) is the same both places it
occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; CREATE TABLE t (i INT);
Query OK, 0 rows affected (0.42 sec)

mysql&gt; INSERT INTO t VALUES(1),(2),(3);
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql&gt; SELECT i, RAND() FROM t;
+------+------------------+
| i    | RAND()           |
+------+------------------+
|    1 | 0.61914388706828 |
|    2 | 0.93845168309142 |
|    3 | 0.83482678498591 |
+------+------------------+
3 rows in set (0.00 sec)

mysql&gt; SELECT i, RAND(3) FROM t;
+------+------------------+
| i    | RAND(3)          |
+------+------------------+
|    1 | 0.90576975597606 |
|    2 | 0.37307905813035 |
|    3 | 0.14808605345719 |
+------+------------------+
3 rows in set (0.00 sec)

mysql&gt; SELECT i, RAND() FROM t;
+------+------------------+
| i    | RAND()           |
+------+------------------+
|    1 | 0.35877890638893 |
|    2 | 0.28941420772058 |
|    3 | 0.37073435016976 |
+------+------------------+
3 rows in set (0.00 sec)

mysql&gt; SELECT i, RAND(3) FROM t;
+------+------------------+
| i    | RAND(3)          |
+------+------------------+
|    1 | 0.90576975597606 |
|    2 | 0.37307905813035 |
|    3 | 0.14808605345719 |
+------+------------------+
3 rows in set (0.01 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">115</field>
		<field name="name">ROUND</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
ROUND(X), ROUND(X,D)

Rounds the argument X to D decimal places. The rounding algorithm
depends on the data type of X. D defaults to 0 if not specified. D can
be negative to cause D digits left of the decimal point of the value X
to become zero. The maximum absolute value for D is 30; any digits in
excess of 30 (or -30) are truncated. If X or D is NULL, the function
returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT ROUND(-1.23);
        -&gt; -1
mysql&gt; SELECT ROUND(-1.58);
        -&gt; -2
mysql&gt; SELECT ROUND(1.58);
        -&gt; 2
mysql&gt; SELECT ROUND(1.298, 1);
        -&gt; 1.3
mysql&gt; SELECT ROUND(1.298, 0);
        -&gt; 1
mysql&gt; SELECT ROUND(23.298, -1);
        -&gt; 20
mysql&gt; SELECT ROUND(.12345678901234567890123456789012345, 35);
        -&gt; 0.123456789012345678901234567890
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">116</field>
		<field name="name">SIGN</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
SIGN(X)

Returns the sign of the argument as -1, 0, or 1, depending on whether X
is negative, zero, or positive. Returns NULL if X is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT SIGN(-32);
        -&gt; -1
mysql&gt; SELECT SIGN(0);
        -&gt; 0
mysql&gt; SELECT SIGN(234);
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">117</field>
		<field name="name">SIN</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
SIN(X)

Returns the sine of X, where X is given in radians. Returns NULL if X
is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT SIN(PI());
        -&gt; 1.2246063538224e-16
mysql&gt; SELECT ROUND(SIN(PI()));
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">118</field>
		<field name="name">SQRT</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
SQRT(X)

Returns the square root of a nonnegative number X. If X is NULL, the
function returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT SQRT(4);
        -&gt; 2
mysql&gt; SELECT SQRT(20);
        -&gt; 4.4721359549996
mysql&gt; SELECT SQRT(-16);
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">119</field>
		<field name="name">TAN</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
TAN(X)

Returns the tangent of X, where X is given in radians. Returns NULL if
X is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT TAN(PI());
        -&gt; -1.2246063538224e-16
mysql&gt; SELECT TAN(PI()+1);
        -&gt; 1.5574077246549
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">120</field>
		<field name="name">TRUNCATE</field>
		<field name="help_category_id">13</field>
		<field name="description">Syntax:
TRUNCATE(X,D)

Returns the number X, truncated to D decimal places. If D is 0, the
result has no decimal point or fractional part. D can be negative to
cause D digits left of the decimal point of the value X to become zero.
If X or D is NULL, the function returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html

</field>
		<field name="example">mysql&gt; SELECT TRUNCATE(1.223,1);
        -&gt; 1.2
mysql&gt; SELECT TRUNCATE(1.999,1);
        -&gt; 1.9
mysql&gt; SELECT TRUNCATE(1.999,0);
        -&gt; 1
mysql&gt; SELECT TRUNCATE(-1.999,1);
        -&gt; -1.9
mysql&gt; SELECT TRUNCATE(122,-2);
       -&gt; 100
mysql&gt; SELECT TRUNCATE(10.28*100,0);
       -&gt; 1028
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">121</field>
		<field name="name">ADDDATE</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
ADDDATE(date,INTERVAL expr unit), ADDDATE(date,days)

When invoked with the INTERVAL form of the second argument, ADDDATE()
is a synonym for DATE_ADD(). The related function SUBDATE() is a
synonym for DATE_SUB(). For information on the INTERVAL unit argument,
see
https://dev.mysql.com/doc/refman/8.0/en/expressions.html#temporal-inter
vals.

mysql&gt; SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);
        -&gt; '2008-02-02'
mysql&gt; SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);
        -&gt; '2008-02-02'

When invoked with the days form of the second argument, MySQL treats it
as an integer number of days to be added to expr.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT ADDDATE('2008-01-02', 31);
        -&gt; '2008-02-02'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">122</field>
		<field name="name">ADDTIME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
ADDTIME(expr1,expr2)

ADDTIME() adds expr2 to expr1 and returns the result. expr1 is a time
or datetime expression, and expr2 is a time expression. Returns NULL if
expr1or expr2 is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');
        -&gt; '2008-01-02 01:01:01.000001'
mysql&gt; SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');
        -&gt; '03:00:01.999997'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">123</field>
		<field name="name">CONVERT_TZ</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
CONVERT_TZ(dt,from_tz,to_tz)

CONVERT_TZ() converts a datetime value dt from the time zone given by
from_tz to the time zone given by to_tz and returns the resulting
value. Time zones are specified as described in
https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html. This
function returns NULL if any of the arguments are invalid, or if any of
them are NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');
        -&gt; '2004-01-01 13:00:00'
mysql&gt; SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');
        -&gt; '2004-01-01 22:00:00'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">124</field>
		<field name="name">CURDATE</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
CURDATE()

Returns the current date as a value in 'YYYY-MM-DD' or YYYYMMDD format,
depending on whether the function is used in string or numeric context.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT CURDATE();
        -&gt; '2008-06-13'
mysql&gt; SELECT CURDATE() + 0;
        -&gt; 20080613
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">125</field>
		<field name="name">CURRENT_DATE</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
CURRENT_DATE, CURRENT_DATE()

CURRENT_DATE and CURRENT_DATE() are synonyms for CURDATE().

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">126</field>
		<field name="name">CURRENT_TIME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
CURRENT_TIME, CURRENT_TIME([fsp])

CURRENT_TIME and CURRENT_TIME() are synonyms for CURTIME().

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">127</field>
		<field name="name">CURRENT_TIMESTAMP</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP([fsp])

CURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for NOW().

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">128</field>
		<field name="name">CURTIME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
CURTIME([fsp])

Returns the current time as a value in 'hh:mm:ss' or hhmmss format,
depending on whether the function is used in string or numeric context.
The value is expressed in the session time zone.

If the fsp argument is given to specify a fractional seconds precision
from 0 to 6, the return value includes a fractional seconds part of
that many digits.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT CURTIME();
+-----------+
| CURTIME() |
+-----------+
| 19:25:37  |
+-----------+

mysql&gt; SELECT CURTIME() + 0;
+---------------+
| CURTIME() + 0 |
+---------------+
|        192537 |
+---------------+

mysql&gt; SELECT CURTIME(3);
+--------------+
| CURTIME(3)   |
+--------------+
| 19:25:37.840 |
+--------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">129</field>
		<field name="name">DATE FUNCTION</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
DATE(expr)

Extracts the date part of the date or datetime expression expr. Returns
NULL if expr is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT DATE('2003-12-31 01:02:03');
        -&gt; '2003-12-31'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">130</field>
		<field name="name">DATEDIFF</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
DATEDIFF(expr1,expr2)

DATEDIFF() returns expr1 − expr2 expressed as a value in days from
one date to the other. expr1 and expr2 are date or date-and-time
expressions. Only the date parts of the values are used in the
calculation.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');
        -&gt; 1
mysql&gt; SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');
        -&gt; -31
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">131</field>
		<field name="name">DATE_ADD</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
DATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)

These functions perform date arithmetic. The date argument specifies
the starting date or datetime value. expr is an expression specifying
the interval value to be added or subtracted from the starting date.
expr is evaluated as a string; it may start with a - for negative
intervals. unit is a keyword indicating the units in which the
expression should be interpreted.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);
        -&gt; '2018-05-02'
mysql&gt; SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);
        -&gt; '2017-05-01'
mysql&gt; SELECT DATE_ADD('2020-12-31 23:59:59',
    -&gt;                 INTERVAL 1 SECOND);
        -&gt; '2021-01-01 00:00:00'
mysql&gt; SELECT DATE_ADD('2018-12-31 23:59:59',
    -&gt;                 INTERVAL 1 DAY);
        -&gt; '2019-01-01 23:59:59'
mysql&gt; SELECT DATE_ADD('2100-12-31 23:59:59',
    -&gt;                 INTERVAL '1:1' MINUTE_SECOND);
        -&gt; '2101-01-01 00:01:00'
mysql&gt; SELECT DATE_SUB('2025-01-01 00:00:00',
    -&gt;                 INTERVAL '1 1:1:1' DAY_SECOND);
        -&gt; '2024-12-30 22:58:59'
mysql&gt; SELECT DATE_ADD('1900-01-01 00:00:00',
    -&gt;                 INTERVAL '-1 10' DAY_HOUR);
        -&gt; '1899-12-30 14:00:00'
mysql&gt; SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);
        -&gt; '1997-12-02'
mysql&gt; SELECT DATE_ADD('1992-12-31 23:59:59.000002',
    -&gt;            INTERVAL '1.999999' SECOND_MICROSECOND);
        -&gt; '1993-01-01 00:00:01.000001'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">132</field>
		<field name="name">DATE_FORMAT</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
DATE_FORMAT(date,format)

Formats the date value according to the format string. If either
argument is NULL, the function returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');
        -&gt; 'Sunday October 2009'
mysql&gt; SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');
        -&gt; '22:23:00'
mysql&gt; SELECT DATE_FORMAT('1900-10-04 22:23:00',
    -&gt;                 '%D %y %a %d %m %b %j');
        -&gt; '4th 00 Thu 04 10 Oct 277'
mysql&gt; SELECT DATE_FORMAT('1997-10-04 22:23:00',
    -&gt;                 '%H %k %I %r %T %S %w');
        -&gt; '22 22 10 10:23:00 PM 22:23:00 00 6'
mysql&gt; SELECT DATE_FORMAT('1999-01-01', '%X %V');
        -&gt; '1998 52'
mysql&gt; SELECT DATE_FORMAT('2006-06-00', '%d');
        -&gt; '00'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">133</field>
		<field name="name">DATE_SUB</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
DATE_SUB(date,INTERVAL expr unit)

See the description for DATE_ADD().

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">134</field>
		<field name="name">DAY</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
DAY(date)

DAY() is a synonym for DAYOFMONTH().

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">135</field>
		<field name="name">DAYNAME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
DAYNAME(date)

Returns the name of the weekday for date. The language used for the
name is controlled by the value of the lc_time_names system variable
(see https://dev.mysql.com/doc/refman/8.0/en/locale-support.html).
Returns NULL if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT DAYNAME('2007-02-03');
        -&gt; 'Saturday'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">136</field>
		<field name="name">DAYOFMONTH</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
DAYOFMONTH(date)

Returns the day of the month for date, in the range 1 to 31, or 0 for
dates such as '0000-00-00' or '2008-00-00' that have a zero day part.
Returns NULL if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT DAYOFMONTH('2007-02-03');
        -&gt; 3
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">137</field>
		<field name="name">DAYOFWEEK</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
DAYOFWEEK(date)

Returns the weekday index for date (1 = Sunday, 2 = Monday, ..., 7 =
Saturday). These index values correspond to the ODBC standard. Returns
NULL if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT DAYOFWEEK('2007-02-03');
        -&gt; 7
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">138</field>
		<field name="name">DAYOFYEAR</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
DAYOFYEAR(date)

Returns the day of the year for date, in the range 1 to 366. Returns
NULL if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT DAYOFYEAR('2007-02-03');
        -&gt; 34
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">139</field>
		<field name="name">EXTRACT</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
EXTRACT(unit FROM date)

The EXTRACT() function uses the same kinds of unit specifiers as
DATE_ADD() or DATE_SUB(), but extracts parts from the date rather than
performing date arithmetic. For information on the unit argument, see
https://dev.mysql.com/doc/refman/8.0/en/expressions.html#temporal-inter
vals. Returns NULL if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT EXTRACT(YEAR FROM '2019-07-02');
        -&gt; 2019
mysql&gt; SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');
        -&gt; 201907
mysql&gt; SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');
        -&gt; 20102
mysql&gt; SELECT EXTRACT(MICROSECOND
    -&gt;                FROM '2003-01-02 10:30:00.000123');
        -&gt; 123
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">140</field>
		<field name="name">FROM_DAYS</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
FROM_DAYS(N)

Given a day number N, returns a DATE value. Returns NULL if N is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT FROM_DAYS(730669);
        -&gt; '2000-07-03'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">141</field>
		<field name="name">FROM_UNIXTIME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
FROM_UNIXTIME(unix_timestamp[,format])

Returns a representation of unix_timestamp as a datetime or character
string value. The value returned is expressed using the session time
zone. (Clients can set the session time zone as described in
https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html.)
unix_timestamp is an internal timestamp value representing seconds
since '1970-01-01 00:00:00' UTC, such as produced by the
UNIX_TIMESTAMP() function.

If format is omitted, this function returns a DATETIME value.

If unix_timestamp or format is NULL, this function returns NULL.

If unix_timestamp is an integer, the fractional seconds precision of
the DATETIME is zero. When unix_timestamp is a decimal value, the
fractional seconds precision of the DATETIME is the same as the
precision of the decimal value, up to a maximum of 6. When
unix_timestamp is a floating point number, the fractional seconds
precision of the datetime is 6.

On 32-bit platforms, the maximum useful value for unix_timestamp is
2147483647.999999, which returns '2038-01-19 03:14:07.999999' UTC. On
64-bit platforms running MySQL 8.0.28 or later, the effective maximum
is 32536771199.999999, which returns '3001-01-18 23:59:59.999999' UTC.
Regardless of platform or version, a greater value for unix_timestamp
than the effective maximum returns 0.

format is used to format the result in the same way as the format
string used for the DATE_FORMAT() function. If format is supplied, the
value returned is a VARCHAR.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT FROM_UNIXTIME(1447430881);
        -&gt; '2015-11-13 10:08:01'
mysql&gt; SELECT FROM_UNIXTIME(1447430881) + 0;
        -&gt; 20151113100801
mysql&gt; SELECT FROM_UNIXTIME(1447430881,
    -&gt;                      '%Y %D %M %h:%i:%s %x');
        -&gt; '2015 13th November 10:08:01 2015'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">142</field>
		<field name="name">GET_FORMAT</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
GET_FORMAT({DATE|TIME|DATETIME}, {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})

Returns a format string. This function is useful in combination with
the DATE_FORMAT() and the STR_TO_DATE() functions.

If format is NULL, this function returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));
        -&gt; '03.10.2003'
mysql&gt; SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));
        -&gt; '2003-10-31'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">143</field>
		<field name="name">HOUR</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
HOUR(time)

Returns the hour for time. The range of the return value is 0 to 23 for
time-of-day values. However, the range of TIME values actually is much
larger, so HOUR can return values greater than 23. Returns NULL if time
is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT HOUR('10:05:03');
        -&gt; 10
mysql&gt; SELECT HOUR('272:59:59');
        -&gt; 272
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">144</field>
		<field name="name">LAST_DAY</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
LAST_DAY(date)

Takes a date or datetime value and returns the corresponding value for
the last day of the month. Returns NULL if the argument is invalid or
NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT LAST_DAY('2003-02-05');
        -&gt; '2003-02-28'
mysql&gt; SELECT LAST_DAY('2004-02-05');
        -&gt; '2004-02-29'
mysql&gt; SELECT LAST_DAY('2004-01-01 01:01:01');
        -&gt; '2004-01-31'
mysql&gt; SELECT LAST_DAY('2003-03-32');
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">145</field>
		<field name="name">LOCALTIME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
LOCALTIME, LOCALTIME([fsp])

LOCALTIME and LOCALTIME() are synonyms for NOW().

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">146</field>
		<field name="name">LOCALTIMESTAMP</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
LOCALTIMESTAMP, LOCALTIMESTAMP([fsp])

LOCALTIMESTAMP and LOCALTIMESTAMP() are synonyms for NOW().

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">147</field>
		<field name="name">MAKEDATE</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
MAKEDATE(year,dayofyear)

Returns a date, given year and day-of-year values. dayofyear must be
greater than 0 or the result is NULL. The result is also NULL if either
argument is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);
        -&gt; '2011-01-31', '2011-02-01'
mysql&gt; SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);
        -&gt; '2011-12-31', '2014-12-31'
mysql&gt; SELECT MAKEDATE(2011,0);
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">148</field>
		<field name="name">MAKETIME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
MAKETIME(hour,minute,second)

Returns a time value calculated from the hour, minute, and second
arguments. Returns NULL if any of its arguments are NULL.

The second argument can have a fractional part.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT MAKETIME(12,15,30);
        -&gt; '12:15:30'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">149</field>
		<field name="name">MICROSECOND</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
MICROSECOND(expr)

Returns the microseconds from the time or datetime expression expr as a
number in the range from 0 to 999999. Returns NULL if expr is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT MICROSECOND('12:00:00.123456');
        -&gt; 123456
mysql&gt; SELECT MICROSECOND('2019-12-31 23:59:59.000010');
        -&gt; 10
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">150</field>
		<field name="name">MINUTE</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
MINUTE(time)

Returns the minute for time, in the range 0 to 59, or NULL if time is
NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT MINUTE('2008-02-03 10:05:03');
        -&gt; 5
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">151</field>
		<field name="name">MONTH</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
MONTH(date)

Returns the month for date, in the range 1 to 12 for January to
December, or 0 for dates such as '0000-00-00' or '2008-00-00' that have
a zero month part. Returns NULL if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT MONTH('2008-02-03');
        -&gt; 2
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">152</field>
		<field name="name">MONTHNAME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
MONTHNAME(date)

Returns the full name of the month for date. The language used for the
name is controlled by the value of the lc_time_names system variable
(https://dev.mysql.com/doc/refman/8.0/en/locale-support.html). Returns
NULL if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT MONTHNAME('2008-02-03');
        -&gt; 'February'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">153</field>
		<field name="name">NOW</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
NOW([fsp])

Returns the current date and time as a value in 'YYYY-MM-DD hh:mm:ss'
or YYYYMMDDhhmmss format, depending on whether the function is used in
string or numeric context. The value is expressed in the session time
zone.

If the fsp argument is given to specify a fractional seconds precision
from 0 to 6, the return value includes a fractional seconds part of
that many digits.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT NOW();
        -&gt; '2007-12-15 23:50:26'
mysql&gt; SELECT NOW() + 0;
        -&gt; 20071215235026.000000
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">154</field>
		<field name="name">PERIOD_ADD</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
PERIOD_ADD(P,N)

Adds N months to period P (in the format YYMM or YYYYMM). Returns a
value in the format YYYYMM.

*Note*:

The period argument P is not a date value.

This function returns NULL if P or N is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT PERIOD_ADD(200801,2);
        -&gt; 200803
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">155</field>
		<field name="name">PERIOD_DIFF</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
PERIOD_DIFF(P1,P2)

Returns the number of months between periods P1 and P2. P1 and P2
should be in the format YYMM or YYYYMM. Note that the period arguments
P1 and P2 are not date values.

This function returns NULL if P1 or P2 is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT PERIOD_DIFF(200802,200703);
        -&gt; 11
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">156</field>
		<field name="name">QUARTER</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
QUARTER(date)

Returns the quarter of the year for date, in the range 1 to 4, or NULL
if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT QUARTER('2008-04-01');
        -&gt; 2
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">157</field>
		<field name="name">SECOND</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
SECOND(time)

Returns the second for time, in the range 0 to 59, or NULL if time is
NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT SECOND('10:05:03');
        -&gt; 3
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">158</field>
		<field name="name">SEC_TO_TIME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
SEC_TO_TIME(seconds)

Returns the seconds argument, converted to hours, minutes, and seconds,
as a TIME value. The range of the result is constrained to that of the
TIME data type. A warning occurs if the argument corresponds to a value
outside that range.

The function returns NULL if seconds is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT SEC_TO_TIME(2378);
        -&gt; '00:39:38'
mysql&gt; SELECT SEC_TO_TIME(2378) + 0;
        -&gt; 3938
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">159</field>
		<field name="name">STR_TO_DATE</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
STR_TO_DATE(str,format)

This is the inverse of the DATE_FORMAT() function. It takes a string
str and a format string format. STR_TO_DATE() returns a DATETIME value
if the format string contains both date and time parts, or a DATE or
TIME value if the string contains only date or time parts. If str or
format is NULL, the function returns NULL. If the date, time, or
datetime value extracted from str cannot be parsed according to the
rules followed by the server, STR_TO_DATE() returns NULL and produces a
warning.

The server scans str attempting to match format to it. The format
string can contain literal characters and format specifiers beginning
with %. Literal characters in format must match literally in str.
Format specifiers in format must match a date or time part in str. For
the specifiers that can be used in format, see the DATE_FORMAT()
function description.

mysql&gt; SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');
        -&gt; '2013-05-01'
mysql&gt; SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');
        -&gt; '2013-05-01'

Scanning starts at the beginning of str and fails if format is found
not to match. Extra characters at the end of str are ignored.

mysql&gt; SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');
        -&gt; '09:30:17'
mysql&gt; SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');
        -&gt; NULL
mysql&gt; SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');
        -&gt; '09:30:17'

Unspecified date or time parts have a value of 0, so incompletely
specified values in str produce a result with some or all parts set to
0:

mysql&gt; SELECT STR_TO_DATE('abc','abc');
        -&gt; '0000-00-00'
mysql&gt; SELECT STR_TO_DATE('9','%m');
        -&gt; '0000-09-00'
mysql&gt; SELECT STR_TO_DATE('9','%s');
        -&gt; '00:00:09'

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">160</field>
		<field name="name">SUBDATE</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
SUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)

When invoked with the INTERVAL form of the second argument, SUBDATE()
is a synonym for DATE_SUB(). For information on the INTERVAL unit
argument, see the discussion for DATE_ADD().

mysql&gt; SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);
        -&gt; '2007-12-02'
mysql&gt; SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);
        -&gt; '2007-12-02'

The second form enables the use of an integer value for days. In such
cases, it is interpreted as the number of days to be subtracted from
the date or datetime expression expr.

mysql&gt; SELECT SUBDATE('2008-01-02 12:00:00', 31);
        -&gt; '2007-12-02 12:00:00'

This function returns NULL if any of its arguments are NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">161</field>
		<field name="name">SUBTIME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
SUBTIME(expr1,expr2)

SUBTIME() returns expr1 − expr2 expressed as a value in the same
format as expr1. expr1 is a time or datetime expression, and expr2 is a
time expression.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');
        -&gt; '2007-12-30 22:58:58.999997'
mysql&gt; SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');
        -&gt; '-00:59:59.999999'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">162</field>
		<field name="name">SYSDATE</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
SYSDATE([fsp])

Returns the current date and time as a value in 'YYYY-MM-DD hh:mm:ss'
or YYYYMMDDhhmmss format, depending on whether the function is used in
string or numeric context.

If the fsp argument is given to specify a fractional seconds precision
from 0 to 6, the return value includes a fractional seconds part of
that many digits.

SYSDATE() returns the time at which it executes. This differs from the
behavior for NOW(), which returns a constant time that indicates the
time at which the statement began to execute. (Within a stored function
or trigger, NOW() returns the time at which the function or triggering
statement began to execute.)

mysql&gt; SELECT NOW(), SLEEP(2), NOW();
+---------------------+----------+---------------------+
| NOW()               | SLEEP(2) | NOW()               |
+---------------------+----------+---------------------+
| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |
+---------------------+----------+---------------------+

mysql&gt; SELECT SYSDATE(), SLEEP(2), SYSDATE();
+---------------------+----------+---------------------+
| SYSDATE()           | SLEEP(2) | SYSDATE()           |
+---------------------+----------+---------------------+
| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |
+---------------------+----------+---------------------+

In addition, the SET TIMESTAMP statement affects the value returned by
NOW() but not by SYSDATE(). This means that timestamp settings in the
binary log have no effect on invocations of SYSDATE().

Because SYSDATE() can return different values even within the same
statement, and is not affected by SET TIMESTAMP, it is nondeterministic
and therefore unsafe for replication if statement-based binary logging
is used. If that is a problem, you can use row-based logging.

Alternatively, you can use the --sysdate-is-now option to cause
SYSDATE() to be an alias for NOW(). This works if the option is used on
both the replication source server and the replica.

The nondeterministic nature of SYSDATE() also means that indexes cannot
be used for evaluating expressions that refer to it.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">163</field>
		<field name="name">TIME FUNCTION</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
TIME(expr)

Extracts the time part of the time or datetime expression expr and
returns it as a string. Returns NULL if expr is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT TIME('2003-12-31 01:02:03');
        -&gt; '01:02:03'
mysql&gt; SELECT TIME('2003-12-31 01:02:03.000123');
        -&gt; '01:02:03.000123'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">164</field>
		<field name="name">TIMEDIFF</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
TIMEDIFF(expr1,expr2)

TIMEDIFF() returns expr1 − expr2 expressed as a time value. expr1 and
expr2 are strings which are converted to TIME or DATETIME expressions;
these must be of the same type following conversion. Returns NULL if
expr1 or expr2 is NULL.

The result returned by TIMEDIFF() is limited to the range allowed for
TIME values. Alternatively, you can use either of the functions
TIMESTAMPDIFF() and UNIX_TIMESTAMP(), both of which return integers.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT TIMEDIFF('2000-01-01 00:00:00',
    -&gt;                 '2000-01-01 00:00:00.000001');
        -&gt; '-00:00:00.000001'
mysql&gt; SELECT TIMEDIFF('2008-12-31 23:59:59.000001',
    -&gt;                 '2008-12-30 01:01:01.000002');
        -&gt; '46:58:57.999999'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">165</field>
		<field name="name">TIMESTAMP FUNCTION</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
TIMESTAMP(expr), TIMESTAMP(expr1,expr2)

With a single argument, this function returns the date or datetime
expression expr as a datetime value. With two arguments, it adds the
time expression expr2 to the date or datetime expression expr1 and
returns the result as a datetime value. Returns NULL if expr, expr1, or
expr2 is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT TIMESTAMP('2003-12-31');
        -&gt; '2003-12-31 00:00:00'
mysql&gt; SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');
        -&gt; '2004-01-01 00:00:00'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">166</field>
		<field name="name">TIMESTAMPADD</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
TIMESTAMPADD(unit,interval,datetime_expr)

Adds the integer expression interval to the date or datetime expression
datetime_expr. The unit for interval is given by the unit argument,
which should be one of the following values: MICROSECOND
(microseconds), SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or
YEAR.

The unit value may be specified using one of keywords as shown, or with
a prefix of SQL_TSI_. For example, DAY and SQL_TSI_DAY both are legal.

This function returns NULL if interval or datetime_expr is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');
        -&gt; '2003-01-02 00:01:00'
mysql&gt; SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');
        -&gt; '2003-01-09'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">167</field>
		<field name="name">TIMESTAMPDIFF</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)

Returns datetime_expr2 − datetime_expr1, where datetime_expr1 and
datetime_expr2 are date or datetime expressions. One expression may be
a date and the other a datetime; a date value is treated as a datetime
having the time part '00:00:00' where necessary. The unit for the
result (an integer) is given by the unit argument. The legal values for
unit are the same as those listed in the description of the
TIMESTAMPADD() function.

This function returns NULL if datetime_expr1 or datetime_expr2 is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');
        -&gt; 3
mysql&gt; SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');
        -&gt; -1
mysql&gt; SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');
        -&gt; 128885
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">168</field>
		<field name="name">TIME_FORMAT</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
TIME_FORMAT(time,format)

This is used like the DATE_FORMAT() function, but the format string may
contain format specifiers only for hours, minutes, seconds, and
microseconds. Other specifiers produce a NULL or 0. TIME_FORMAT()
returns NULL if time or format is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');
        -&gt; '100 100 04 04 4'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">169</field>
		<field name="name">TIME_TO_SEC</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
TIME_TO_SEC(time)

Returns the time argument, converted to seconds. Returns NULL if time
is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT TIME_TO_SEC('22:23:00');
        -&gt; 80580
mysql&gt; SELECT TIME_TO_SEC('00:39:38');
        -&gt; 2378
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">170</field>
		<field name="name">TO_DAYS</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
TO_DAYS(date)

Given a date date, returns a day number (the number of days since year
0). Returns NULL if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT TO_DAYS(950501);
        -&gt; 728779
mysql&gt; SELECT TO_DAYS('2007-10-07');
        -&gt; 733321
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">171</field>
		<field name="name">TO_SECONDS</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
TO_SECONDS(expr)

Given a date or datetime expr, returns the number of seconds since the
year 0. If expr is not a valid date or datetime value (including NULL),
it returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT TO_SECONDS(950501);
        -&gt; 62966505600
mysql&gt; SELECT TO_SECONDS('2009-11-29');
        -&gt; 63426672000
mysql&gt; SELECT TO_SECONDS('2009-11-29 13:43:32');
        -&gt; 63426721412
mysql&gt; SELECT TO_SECONDS( NOW() );
        -&gt; 63426721458
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">172</field>
		<field name="name">UNIX_TIMESTAMP</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
UNIX_TIMESTAMP([date])

If UNIX_TIMESTAMP() is called with no date argument, it returns a Unix
timestamp representing seconds since '1970-01-01 00:00:00' UTC.

If UNIX_TIMESTAMP() is called with a date argument, it returns the
value of the argument as seconds since '1970-01-01 00:00:00' UTC. The
server interprets date as a value in the session time zone and converts
it to an internal Unix timestamp value in UTC. (Clients can set the
session time zone as described in
https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html.) The
date argument may be a DATE, DATETIME, or TIMESTAMP string, or a number
in YYMMDD, YYMMDDhhmmss, YYYYMMDD, or YYYYMMDDhhmmss format. If the
argument includes a time part, it may optionally include a fractional
seconds part.

The return value is an integer if no argument is given or the argument
does not include a fractional seconds part, or DECIMAL if an argument
is given that includes a fractional seconds part.

When the date argument is a TIMESTAMP column, UNIX_TIMESTAMP() returns
the internal timestamp value directly, with no implicit
&quot;string-to-Unix-timestamp&quot; conversion.

Prior to MySQL 8.0.28, the valid range of argument values is the same
as for the TIMESTAMP data type: '1970-01-01 00:00:01.000000' UTC to
'2038-01-19 03:14:07.999999' UTC. This is also the case in MySQL 8.0.28
and later for 32-bit platforms. For MySQL 8.0.28 and later running on
64-bit platforms, the valid range of argument values for
UNIX_TIMESTAMP() is '1970-01-01 00:00:01.000000' UTC to '3001-01-19
03:14:07.999999' UTC (corresponding to 32536771199.999999 seconds).

Regardless of MySQL version or platform architecture, if you pass an
out-of-range date to UNIX_TIMESTAMP(), it returns 0. If date is NULL,
it returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT UNIX_TIMESTAMP();
        -&gt; 1447431666
mysql&gt; SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');
        -&gt; 1447431619
mysql&gt; SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');
        -&gt; 1447431619.012
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">173</field>
		<field name="name">UTC_DATE</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
UTC_DATE, UTC_DATE()

Returns the current UTC date as a value in 'YYYY-MM-DD' or YYYYMMDD
format, depending on whether the function is used in string or numeric
context.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT UTC_DATE(), UTC_DATE() + 0;
        -&gt; '2003-08-14', 20030814
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">174</field>
		<field name="name">UTC_TIME</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
UTC_TIME, UTC_TIME([fsp])

Returns the current UTC time as a value in 'hh:mm:ss' or hhmmss format,
depending on whether the function is used in string or numeric context.

If the fsp argument is given to specify a fractional seconds precision
from 0 to 6, the return value includes a fractional seconds part of
that many digits.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT UTC_TIME(), UTC_TIME() + 0;
        -&gt; '18:07:53', 180753.000000
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">175</field>
		<field name="name">UTC_TIMESTAMP</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
UTC_TIMESTAMP, UTC_TIMESTAMP([fsp])

Returns the current UTC date and time as a value in 'YYYY-MM-DD
hh:mm:ss' or YYYYMMDDhhmmss format, depending on whether the function
is used in string or numeric context.

If the fsp argument is given to specify a fractional seconds precision
from 0 to 6, the return value includes a fractional seconds part of
that many digits.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;
        -&gt; '2003-08-14 18:08:04', 20030814180804.000000
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">176</field>
		<field name="name">WEEK</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
WEEK(date[,mode])

This function returns the week number for date. The two-argument form
of WEEK() enables you to specify whether the week starts on Sunday or
Monday and whether the return value should be in the range from 0 to 53
or from 1 to 53. If the mode argument is omitted, the value of the
default_week_format system variable is used. See
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.
For a NULL date value, the function returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT WEEK('2008-02-20');
        -&gt; 7
mysql&gt; SELECT WEEK('2008-02-20',0);
        -&gt; 7
mysql&gt; SELECT WEEK('2008-02-20',1);
        -&gt; 8
mysql&gt; SELECT WEEK('2008-12-31',1);
        -&gt; 53
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">177</field>
		<field name="name">WEEKDAY</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
WEEKDAY(date)

Returns the weekday index for date (0 = Monday, 1 = Tuesday, ... 6 =
Sunday). Returns NULL if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT WEEKDAY('2008-02-03 22:23:00');
        -&gt; 6
mysql&gt; SELECT WEEKDAY('2007-11-06');
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">178</field>
		<field name="name">WEEKOFYEAR</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
WEEKOFYEAR(date)

Returns the calendar week of the date as a number in the range from 1
to 53. Returns NULL if date is NULL.

WEEKOFYEAR() is a compatibility function that is equivalent to
WEEK(date,3).

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT WEEKOFYEAR('2008-02-20');
        -&gt; 8
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">179</field>
		<field name="name">YEAR</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
YEAR(date)

Returns the year for date, in the range 1000 to 9999, or 0 for the
&quot;zero&quot; date. Returns NULL if date is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT YEAR('1987-01-01');
        -&gt; 1987
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">180</field>
		<field name="name">YEARWEEK</field>
		<field name="help_category_id">14</field>
		<field name="description">Syntax:
YEARWEEK(date), YEARWEEK(date,mode)

Returns year and week for a date. The year in the result may be
different from the year in the date argument for the first and the last
week of the year. Returns NULL if date is NULL.

The mode argument works exactly like the mode argument to WEEK(). For
the single-argument syntax, a mode value of 0 is used. Unlike WEEK(),
the value of default_week_format does not influence YEARWEEK().

URL: https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

</field>
		<field name="example">mysql&gt; SELECT YEARWEEK('1987-01-01');
        -&gt; 198652
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">181</field>
		<field name="name">ASCII</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
ASCII(str)

Returns the numeric value of the leftmost character of the string str.
Returns 0 if str is the empty string. Returns NULL if str is NULL.
ASCII() works for 8-bit characters.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT ASCII('2');
        -&gt; 50
mysql&gt; SELECT ASCII(2);
        -&gt; 50
mysql&gt; SELECT ASCII('dx');
        -&gt; 100
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">182</field>
		<field name="name">BIN</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
BIN(N)

Returns a string representation of the binary value of N, where N is a
longlong (BIGINT) number. This is equivalent to CONV(N,10,2). Returns
NULL if N is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT BIN(12);
        -&gt; '1100'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">183</field>
		<field name="name">BIT_LENGTH</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
BIT_LENGTH(str)

Returns the length of the string str in bits. Returns NULL if str is
NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT BIT_LENGTH('text');
        -&gt; 32
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">184</field>
		<field name="name">CHAR FUNCTION</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
CHAR(N,... [USING charset_name])

CHAR() interprets each argument N as an integer and returns a string
consisting of the characters given by the code values of those
integers. NULL values are skipped.

By default, CHAR() returns a binary string. To produce a string in a
given character set, use the optional USING clause:

mysql&gt; SELECT CHAR(77,121,83,81,'76' USING utf8mb4);
+---------------------------------------+
| CHAR(77,121,83,81,'76' USING utf8mb4) |
+---------------------------------------+
| MySQL                                 |
+---------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT CHAR(77,77.3,'77.3' USING utf8mb4);
+------------------------------------+
| CHAR(77,77.3,'77.3' USING utf8mb4) |
+------------------------------------+
| MMM                                |
+------------------------------------+
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS;
+---------+------+-------------------------------------------+
| Level   | Code | Message                                   |
+---------+------+-------------------------------------------+
| Warning | 1292 | Truncated incorrect INTEGER value: '77.3' |
+---------+------+-------------------------------------------+
1 row in set (0.00 sec)

If USING is given and the result string is illegal for the given
character set, a warning is issued. Also, if strict SQL mode is
enabled, the result from CHAR() becomes NULL.

If CHAR() is invoked from within the mysql client, binary strings
display using hexadecimal notation, depending on the value of the
--binary-as-hex. For more information about that option, see
https://dev.mysql.com/doc/refman/8.0/en/mysql.html.

CHAR() arguments larger than 255 are converted into multiple result
bytes. For example, CHAR(256) is equivalent to CHAR(1,0), and
CHAR(256*256) is equivalent to CHAR(1,0,0):

mysql&gt; SELECT HEX(CHAR(1,0)), HEX(CHAR(256));
+----------------+----------------+
| HEX(CHAR(1,0)) | HEX(CHAR(256)) |
+----------------+----------------+
| 0100           | 0100           |
+----------------+----------------+
1 row in set (0.00 sec)

mysql&gt; SELECT HEX(CHAR(1,0,0)), HEX(CHAR(256*256));
+------------------+--------------------+
| HEX(CHAR(1,0,0)) | HEX(CHAR(256*256)) |
+------------------+--------------------+
| 010000           | 010000             |
+------------------+--------------------+
1 row in set (0.00 sec)

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT CHAR(77,121,83,81,'76');
+--------------------------------------------------+
| CHAR(77,121,83,81,'76')                          |
+--------------------------------------------------+
| 0x4D7953514C                                     |
+--------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT CHAR(77,77.3,'77.3');
+--------------------------------------------+
| CHAR(77,77.3,'77.3')                       |
+--------------------------------------------+
| 0x4D4D4D                                   |
+--------------------------------------------+
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">185</field>
		<field name="name">CHAR_LENGTH</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
CHAR_LENGTH(str)

Returns the length of the string str, measured in code points. A
multibyte character counts as a single code point. This means that, for
a string containing two 3-byte characters, LENGTH() returns 6, whereas
CHAR_LENGTH() returns 2, as shown here:

mysql&gt; SET @dolphin:='海豚';
Query OK, 0 rows affected (0.01 sec)

mysql&gt; SELECT LENGTH(@dolphin), CHAR_LENGTH(@dolphin);
+------------------+-----------------------+
| LENGTH(@dolphin) | CHAR_LENGTH(@dolphin) |
+------------------+-----------------------+
|                6 |                     2 |
+------------------+-----------------------+
1 row in set (0.00 sec)

CHAR_LENGTH() returns NULL if str is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">186</field>
		<field name="name">CHARACTER_LENGTH</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
CHARACTER_LENGTH(str)

CHARACTER_LENGTH() is a synonym for CHAR_LENGTH().

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">187</field>
		<field name="name">CONCAT</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
CONCAT(str1,str2,...)

Returns the string that results from concatenating the arguments. May
have one or more arguments. If all arguments are nonbinary strings, the
result is a nonbinary string. If the arguments include any binary
strings, the result is a binary string. A numeric argument is converted
to its equivalent nonbinary string form.

CONCAT() returns NULL if any argument is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT CONCAT('My', 'S', 'QL');
        -&gt; 'MySQL'
mysql&gt; SELECT CONCAT('My', NULL, 'QL');
        -&gt; NULL
mysql&gt; SELECT CONCAT(14.3);
        -&gt; '14.3'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">188</field>
		<field name="name">CONCAT_WS</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
CONCAT_WS(separator,str1,str2,...)

CONCAT_WS() stands for Concatenate With Separator and is a special form
of CONCAT(). The first argument is the separator for the rest of the
arguments. The separator is added between the strings to be
concatenated. The separator can be a string, as can the rest of the
arguments. If the separator is NULL, the result is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT CONCAT_WS(',','First name','Second name','Last Name');
        -&gt; 'First name,Second name,Last Name'
mysql&gt; SELECT CONCAT_WS(',','First name',NULL,'Last Name');
        -&gt; 'First name,Last Name'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">189</field>
		<field name="name">ELT</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
ELT(N,str1,str2,str3,...)

ELT() returns the Nth element of the list of strings: str1 if N = 1,
str2 if N = 2, and so on. Returns NULL if N is less than 1, greater
than the number of arguments, or NULL. ELT() is the complement of
FIELD().

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT ELT(1, 'Aa', 'Bb', 'Cc', 'Dd');
        -&gt; 'Aa'
mysql&gt; SELECT ELT(4, 'Aa', 'Bb', 'Cc', 'Dd');
        -&gt; 'Dd'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">190</field>
		<field name="name">EXPORT_SET</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
EXPORT_SET(bits,on,off[,separator[,number_of_bits]])

Returns a string such that for every bit set in the value bits, you get
an on string and for every bit not set in the value, you get an off
string. Bits in bits are examined from right to left (from low-order to
high-order bits). Strings are added to the result from left to right,
separated by the separator string (the default being the comma
character ,). The number of bits examined is given by number_of_bits,
which has a default of 64 if not specified. number_of_bits is silently
clipped to 64 if larger than 64. It is treated as an unsigned integer,
so a value of −1 is effectively the same as 64.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT EXPORT_SET(5,'Y','N',',',4);
        -&gt; 'Y,N,Y,N'
mysql&gt; SELECT EXPORT_SET(6,'1','0',',',10);
        -&gt; '0,1,1,0,0,0,0,0,0,0'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">191</field>
		<field name="name">FIELD</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
FIELD(str,str1,str2,str3,...)

Returns the index (position) of str in the str1, str2, str3, ... list.
Returns 0 if str is not found.

If all arguments to FIELD() are strings, all arguments are compared as
strings. If all arguments are numbers, they are compared as numbers.
Otherwise, the arguments are compared as double.

If str is NULL, the return value is 0 because NULL fails equality
comparison with any value. FIELD() is the complement of ELT().

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT FIELD('Bb', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');
        -&gt; 2
mysql&gt; SELECT FIELD('Gg', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">192</field>
		<field name="name">FIND_IN_SET</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
FIND_IN_SET(str,strlist)

Returns a value in the range of 1 to N if the string str is in the
string list strlist consisting of N substrings. A string list is a
string composed of substrings separated by , characters. If the first
argument is a constant string and the second is a column of type SET,
the FIND_IN_SET() function is optimized to use bit arithmetic. Returns
0 if str is not in strlist or if strlist is the empty string. Returns
NULL if either argument is NULL. This function does not work properly
if the first argument contains a comma (,) character.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT FIND_IN_SET('b','a,b,c,d');
        -&gt; 2
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">193</field>
		<field name="name">FORMAT</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
FORMAT(X,D[,locale])

Formats the number X to a format like '#,###,###.##', rounded to D
decimal places, and returns the result as a string. If D is 0, the
result has no decimal point or fractional part. If X or D is NULL, the
function returns NULL.

The optional third parameter enables a locale to be specified to be
used for the result number's decimal point, thousands separator, and
grouping between separators. Permissible locale values are the same as
the legal values for the lc_time_names system variable (see
https://dev.mysql.com/doc/refman/8.0/en/locale-support.html). If the
locale is NULL or not specified, the default locale is 'en_US'.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT FORMAT(12332.123456, 4);
        -&gt; '12,332.1235'
mysql&gt; SELECT FORMAT(12332.1,4);
        -&gt; '12,332.1000'
mysql&gt; SELECT FORMAT(12332.2,0);
        -&gt; '12,332'
mysql&gt; SELECT FORMAT(12332.2,2,'de_DE');
        -&gt; '12.332,20'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">194</field>
		<field name="name">FROM_BASE64</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
FROM_BASE64(str)

Takes a string encoded with the base-64 encoded rules used by
TO_BASE64() and returns the decoded result as a binary string. The
result is NULL if the argument is NULL or not a valid base-64 string.
See the description of TO_BASE64() for details about the encoding and
decoding rules.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT TO_BASE64('abc'), FROM_BASE64(TO_BASE64('abc'));
        -&gt; 'JWJj', 'abc'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">195</field>
		<field name="name">HEX</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
HEX(str), HEX(N)

For a string argument str, HEX() returns a hexadecimal string
representation of str where each byte of each character in str is
converted to two hexadecimal digits. (Multibyte characters therefore
become more than two digits.) The inverse of this operation is
performed by the UNHEX() function.

For a numeric argument N, HEX() returns a hexadecimal string
representation of the value of N treated as a longlong (BIGINT) number.
This is equivalent to CONV(N,10,16). The inverse of this operation is
performed by CONV(HEX(N),16,10).

For a NULL argument, this function returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT X'616263', HEX('abc'), UNHEX(HEX('abc'));
        -&gt; 'abc', 616263, 'abc'
mysql&gt; SELECT HEX(255), CONV(HEX(255),16,10);
        -&gt; 'FF', 255
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">196</field>
		<field name="name">INSERT FUNCTION</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
INSERT(str,pos,len,newstr)

Returns the string str, with the substring beginning at position pos
and len characters long replaced by the string newstr. Returns the
original string if pos is not within the length of the string. Replaces
the rest of the string from position pos if len is not within the
length of the rest of the string. Returns NULL if any argument is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT INSERT('Quadratic', 3, 4, 'What');
        -&gt; 'QuWhattic'
mysql&gt; SELECT INSERT('Quadratic', -1, 4, 'What');
        -&gt; 'Quadratic'
mysql&gt; SELECT INSERT('Quadratic', 3, 100, 'What');
        -&gt; 'QuWhat'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">197</field>
		<field name="name">INSTR</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
INSTR(str,substr)

Returns the position of the first occurrence of substring substr in
string str. This is the same as the two-argument form of LOCATE(),
except that the order of the arguments is reversed.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT INSTR('foobarbar', 'bar');
        -&gt; 4
mysql&gt; SELECT INSTR('xbar', 'foobar');
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">198</field>
		<field name="name">LCASE</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
LCASE(str)

LCASE() is a synonym for LOWER().

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">199</field>
		<field name="name">LEFT</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
LEFT(str,len)

Returns the leftmost len characters from the string str, or NULL if any
argument is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT LEFT('foobarbar', 5);
        -&gt; 'fooba'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">200</field>
		<field name="name">LENGTH</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
LENGTH(str)

Returns the length of the string str, measured in bytes. A multibyte
character counts as multiple bytes. This means that for a string
containing five 2-byte characters, LENGTH() returns 10, whereas
CHAR_LENGTH() returns 5. Returns NULL if str is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT LENGTH('text');
        -&gt; 4
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">201</field>
		<field name="name">LOAD_FILE</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
LOAD_FILE(file_name)

Reads the file and returns the file contents as a string. To use this
function, the file must be located on the server host, you must specify
the full path name to the file, and you must have the FILE privilege.
The file must be readable by the server and its size less than
max_allowed_packet bytes. If the secure_file_priv system variable is
set to a nonempty directory name, the file to be loaded must be located
in that directory. (Prior to MySQL 8.0.17, the file must be readable by
all, not just readable by the server.)

If the file does not exist or cannot be read because one of the
preceding conditions is not satisfied, the function returns NULL.

The character_set_filesystem system variable controls interpretation of
file names that are given as literal strings.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; UPDATE t
            SET blob_col=LOAD_FILE('/tmp/picture')
            WHERE id=1;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">202</field>
		<field name="name">LOCATE</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
LOCATE(substr,str), LOCATE(substr,str,pos)

The first syntax returns the position of the first occurrence of
substring substr in string str. The second syntax returns the position
of the first occurrence of substring substr in string str, starting at
position pos. Returns 0 if substr is not in str. Returns NULL if any
argument is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT LOCATE('bar', 'foobarbar');
        -&gt; 4
mysql&gt; SELECT LOCATE('xbar', 'foobar');
        -&gt; 0
mysql&gt; SELECT LOCATE('bar', 'foobarbar', 5);
        -&gt; 7
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">203</field>
		<field name="name">LOWER</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
LOWER(str)

Returns the string str with all characters changed to lowercase
according to the current character set mapping, or NULL if str is NULL.
The default character set is utf8mb4.

mysql&gt; SELECT LOWER('QUADRATICALLY');
        -&gt; 'quadratically'

LOWER() (and UPPER()) are ineffective when applied to binary strings
(BINARY, VARBINARY, BLOB). To perform lettercase conversion of a binary
string, first convert it to a nonbinary string using a character set
appropriate for the data stored in the string:

mysql&gt; SET @str = BINARY 'New York';
mysql&gt; SELECT LOWER(@str), LOWER(CONVERT(@str USING utf8mb4));
+-------------+------------------------------------+
| LOWER(@str) | LOWER(CONVERT(@str USING utf8mb4)) |
+-------------+------------------------------------+
| New York    | new york                           |
+-------------+------------------------------------+

For collations of Unicode character sets, LOWER() and UPPER() work
according to the Unicode Collation Algorithm (UCA) version in the
collation name, if there is one, and UCA 4.0.0 if no version is
specified. For example, utf8mb4_0900_ai_ci and utf8mb3_unicode_520_ci
work according to UCA 9.0.0 and 5.2.0, respectively, whereas
utf8mb3_unicode_ci works according to UCA 4.0.0. See
https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">204</field>
		<field name="name">LPAD</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
LPAD(str,len,padstr)

Returns the string str, left-padded with the string padstr to a length
of len characters. If str is longer than len, the return value is
shortened to len characters.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT LPAD('hi',4,'??');
        -&gt; '??hi'
mysql&gt; SELECT LPAD('hi',1,'??');
        -&gt; 'h'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">205</field>
		<field name="name">LTRIM</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
LTRIM(str)

Returns the string str with leading space characters removed. Returns
NULL if str is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT LTRIM('  barbar');
        -&gt; 'barbar'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">206</field>
		<field name="name">MAKE_SET</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
MAKE_SET(bits,str1,str2,...)

Returns a set value (a string containing substrings separated by ,
characters) consisting of the strings that have the corresponding bit
in bits set. str1 corresponds to bit 0, str2 to bit 1, and so on. NULL
values in str1, str2, ... are not appended to the result.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT MAKE_SET(1,'a','b','c');
        -&gt; 'a'
mysql&gt; SELECT MAKE_SET(1 | 4,'hello','nice','world');
        -&gt; 'hello,world'
mysql&gt; SELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');
        -&gt; 'hello'
mysql&gt; SELECT MAKE_SET(0,'a','b','c');
        -&gt; ''
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">207</field>
		<field name="name">MID</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
MID(str,pos,len)

MID(str,pos,len) is a synonym for SUBSTRING(str,pos,len).

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">208</field>
		<field name="name">OCT</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
OCT(N)

Returns a string representation of the octal value of N, where N is a
longlong (BIGINT) number. This is equivalent to CONV(N,10,8). Returns
NULL if N is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT OCT(12);
        -&gt; '14'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">209</field>
		<field name="name">OCTET_LENGTH</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
OCTET_LENGTH(str)

OCTET_LENGTH() is a synonym for LENGTH().

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">210</field>
		<field name="name">ORD</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
ORD(str)

If the leftmost character of the string str is a multibyte character,
returns the code for that character, calculated from the numeric values
of its constituent bytes using this formula:

  (1st byte code)
+ (2nd byte code * 256)
+ (3rd byte code * 256^2) ...

If the leftmost character is not a multibyte character, ORD() returns
the same value as the ASCII() function. The function returns NULL if
str is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT ORD('2');
        -&gt; 50
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">211</field>
		<field name="name">POSITION</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
POSITION(substr IN str)

POSITION(substr IN str) is a synonym for LOCATE(substr,str).

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">212</field>
		<field name="name">QUOTE</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
QUOTE(str)

Quotes a string to produce a result that can be used as a properly
escaped data value in an SQL statement. The string is returned enclosed
by single quotation marks and with each instance of backslash (\),
single quote ('), ASCII NUL, and Control+Z preceded by a backslash. If
the argument is NULL, the return value is the word &quot;NULL&quot; without
enclosing single quotation marks.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT QUOTE('Don\'t!');
        -&gt; 'Don\'t!'
mysql&gt; SELECT QUOTE(NULL);
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">213</field>
		<field name="name">REPEAT FUNCTION</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
REPEAT(str,count)

Returns a string consisting of the string str repeated count times. If
count is less than 1, returns an empty string. Returns NULL if str or
count is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT REPEAT('MySQL', 3);
        -&gt; 'MySQLMySQLMySQL'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">214</field>
		<field name="name">REPLACE FUNCTION</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
REPLACE(str,from_str,to_str)

Returns the string str with all occurrences of the string from_str
replaced by the string to_str. REPLACE() performs a case-sensitive
match when searching for from_str.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT REPLACE('www.mysql.com', 'w', 'Ww');
        -&gt; 'WwWwWw.mysql.com'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">215</field>
		<field name="name">REVERSE</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
REVERSE(str)

Returns the string str with the order of the characters reversed, or
NULL if str is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT REVERSE('abc');
        -&gt; 'cba'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">216</field>
		<field name="name">RIGHT</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
RIGHT(str,len)

Returns the rightmost len characters from the string str, or NULL if
any argument is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT RIGHT('foobarbar', 4);
        -&gt; 'rbar'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">217</field>
		<field name="name">RPAD</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
RPAD(str,len,padstr)

Returns the string str, right-padded with the string padstr to a length
of len characters. If str is longer than len, the return value is
shortened to len characters. If str, padstr, or len is NULL, the
function returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT RPAD('hi',5,'?');
        -&gt; 'hi???'
mysql&gt; SELECT RPAD('hi',1,'?');
        -&gt; 'h'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">218</field>
		<field name="name">RTRIM</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
RTRIM(str)

Returns the string str with trailing space characters removed.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT RTRIM('barbar   ');
        -&gt; 'barbar'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">219</field>
		<field name="name">SOUNDEX</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
SOUNDEX(str)

Returns a soundex string from str, or NULL if str is NULL. Two strings
that sound almost the same should have identical soundex strings. A
standard soundex string is four characters long, but the SOUNDEX()
function returns an arbitrarily long string. You can use SUBSTRING() on
the result to get a standard soundex string. All nonalphabetic
characters in str are ignored. All international alphabetic characters
outside the A-Z range are treated as vowels.

*Important*:

When using SOUNDEX(), you should be aware of the following limitations:

o This function, as currently implemented, is intended to work well
  with strings that are in the English language only. Strings in other
  languages may not produce reliable results.

o This function is not guaranteed to provide consistent results with
  strings that use multibyte character sets, including utf-8. See Bug
  #22638 for more information.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT SOUNDEX('Hello');
        -&gt; 'H400'
mysql&gt; SELECT SOUNDEX('Quadratically');
        -&gt; 'Q36324'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">220</field>
		<field name="name">SOUNDS LIKE</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
expr1 SOUNDS LIKE expr2

This is the same as SOUNDEX(expr1) = SOUNDEX(expr2).

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">221</field>
		<field name="name">SPACE</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
SPACE(N)

Returns a string consisting of N space characters, or NULL if N is
NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT SPACE(6);
        -&gt; '      '
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">222</field>
		<field name="name">SUBSTR</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
SUBSTR(str,pos), SUBSTR(str FROM pos), SUBSTR(str,pos,len), SUBSTR(str
FROM pos FOR len)

SUBSTR() is a synonym for SUBSTRING().

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">223</field>
		<field name="name">SUBSTRING</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
SUBSTRING(str,pos), SUBSTRING(str FROM pos), SUBSTRING(str,pos,len),
SUBSTRING(str FROM pos FOR len)

The forms without a len argument return a substring from string str
starting at position pos. The forms with a len argument return a
substring len characters long from string str, starting at position
pos. The forms that use FROM are standard SQL syntax. It is also
possible to use a negative value for pos. In this case, the beginning
of the substring is pos characters from the end of the string, rather
than the beginning. A negative value may be used for pos in any of the
forms of this function. A value of 0 for pos returns an empty string.

For all forms of SUBSTRING(), the position of the first character in
the string from which the substring is to be extracted is reckoned as
1.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT SUBSTRING('Quadratically',5);
        -&gt; 'ratically'
mysql&gt; SELECT SUBSTRING('foobarbar' FROM 4);
        -&gt; 'barbar'
mysql&gt; SELECT SUBSTRING('Quadratically',5,6);
        -&gt; 'ratica'
mysql&gt; SELECT SUBSTRING('Sakila', -3);
        -&gt; 'ila'
mysql&gt; SELECT SUBSTRING('Sakila', -5, 3);
        -&gt; 'aki'
mysql&gt; SELECT SUBSTRING('Sakila' FROM -4 FOR 2);
        -&gt; 'ki'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">224</field>
		<field name="name">SUBSTRING_INDEX</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
SUBSTRING_INDEX(str,delim,count)

Returns the substring from string str before count occurrences of the
delimiter delim. If count is positive, everything to the left of the
final delimiter (counting from the left) is returned. If count is
negative, everything to the right of the final delimiter (counting from
the right) is returned. SUBSTRING_INDEX() performs a case-sensitive
match when searching for delim.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);
        -&gt; 'www.mysql'
mysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);
        -&gt; 'mysql.com'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">225</field>
		<field name="name">TO_BASE64</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
TO_BASE64(str)

Converts the string argument to base-64 encoded form and returns the
result as a character string with the connection character set and
collation. If the argument is not a string, it is converted to a string
before conversion takes place. The result is NULL if the argument is
NULL. Base-64 encoded strings can be decoded using the FROM_BASE64()
function.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT TO_BASE64('abc'), FROM_BASE64(TO_BASE64('abc'));
        -&gt; 'JWJj', 'abc'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">226</field>
		<field name="name">TRIM</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr
FROM] str)

Returns the string str with all remstr prefixes or suffixes removed. If
none of the specifiers BOTH, LEADING, or TRAILING is given, BOTH is
assumed. remstr is optional and, if not specified, spaces are removed.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT TRIM('  bar   ');
        -&gt; 'bar'
mysql&gt; SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');
        -&gt; 'barxxx'
mysql&gt; SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');
        -&gt; 'bar'
mysql&gt; SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');
        -&gt; 'barx'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">227</field>
		<field name="name">UCASE</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
UCASE(str)

UCASE() is a synonym for UPPER().

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">228</field>
		<field name="name">UNHEX</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
UNHEX(str)

For a string argument str, UNHEX(str) interprets each pair of
characters in the argument as a hexadecimal number and converts it to
the byte represented by the number. The return value is a binary
string.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example">mysql&gt; SELECT UNHEX('4D7953514C');
        -&gt; 'MySQL'
mysql&gt; SELECT X'4D7953514C';
        -&gt; 'MySQL'
mysql&gt; SELECT UNHEX(HEX('string'));
        -&gt; 'string'
mysql&gt; SELECT HEX(UNHEX('1267'));
        -&gt; '1267'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">229</field>
		<field name="name">UPPER</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
UPPER(str)

Returns the string str with all characters changed to uppercase
according to the current character set mapping, or NULL if str is NULL.
The default character set is utf8mb4.

mysql&gt; SELECT UPPER('Hej');
        -&gt; 'HEJ'

See the description of LOWER() for information that also applies to
UPPER(). This included information about how to perform lettercase
conversion of binary strings (BINARY, VARBINARY, BLOB) for which these
functions are ineffective, and information about case folding for
Unicode character sets.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">230</field>
		<field name="name">WEIGHT_STRING</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
WEIGHT_STRING(str [AS {CHAR|BINARY}(N)] [flags])

This function returns the weight string for the input string. The
return value is a binary string that represents the comparison and
sorting value of the string, or NULL if the argument is NULL. It has
these properties:

o If WEIGHT_STRING(str1) = WEIGHT_STRING(str2), then str1 = str2 (str1
  and str2 are considered equal)

o If WEIGHT_STRING(str1) &lt; WEIGHT_STRING(str2), then str1 &lt; str2 (str1
  sorts before str2)

WEIGHT_STRING() is a debugging function intended for internal use. Its
behavior can change without notice between MySQL versions. It can be
used for testing and debugging of collations, especially if you are
adding a new collation. See
https://dev.mysql.com/doc/refman/8.0/en/adding-collation.html.

This list briefly summarizes the arguments. More details are given in
the discussion following the list.

o str: The input string expression.

o AS clause: Optional; cast the input string to a given type and
  length.

o flags: Optional; unused.

The input string, str, is a string expression. If the input is a
nonbinary (character) string such as a CHAR, VARCHAR, or TEXT value,
the return value contains the collation weights for the string. If the
input is a binary (byte) string such as a BINARY, VARBINARY, or BLOB
value, the return value is the same as the input (the weight for each
byte in a binary string is the byte value). If the input is NULL,
WEIGHT_STRING() returns NULL.

Examples:

mysql&gt; SET @s = _utf8mb4 'AB' COLLATE utf8mb4_0900_ai_ci;
mysql&gt; SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));
+------+---------+------------------------+
| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |
+------+---------+------------------------+
| AB   | 4142    | 1C471C60               |
+------+---------+------------------------+

mysql&gt; SET @s = _utf8mb4 'ab' COLLATE utf8mb4_0900_ai_ci;
mysql&gt; SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));
+------+---------+------------------------+
| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |
+------+---------+------------------------+
| ab   | 6162    | 1C471C60               |
+------+---------+------------------------+

mysql&gt; SET @s = CAST('AB' AS BINARY);
mysql&gt; SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));
+------+---------+------------------------+
| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |
+------+---------+------------------------+
| AB   | 4142    | 4142                   |
+------+---------+------------------------+

mysql&gt; SET @s = CAST('ab' AS BINARY);
mysql&gt; SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));
+------+---------+------------------------+
| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |
+------+---------+------------------------+
| ab   | 6162    | 6162                   |
+------+---------+------------------------+

URL: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">231</field>
		<field name="name">LIKE</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
expr LIKE pat [ESCAPE 'escape_char']

Pattern matching using an SQL pattern. Returns 1 (TRUE) or 0 (FALSE).
If either expr or pat is NULL, the result is NULL.

The pattern need not be a literal string. For example, it can be
specified as a string expression or table column. In the latter case,
the column must be defined as one of the MySQL string types (see
https://dev.mysql.com/doc/refman/8.0/en/string-types.html).

URL: https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html

</field>
		<field name="example">mysql&gt; SELECT 'David!' LIKE 'David_';
        -&gt; 1
mysql&gt; SELECT 'David!' LIKE '%D%v%';
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">232</field>
		<field name="name">NOT LIKE</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
expr NOT LIKE pat [ESCAPE 'escape_char']

This is the same as NOT (expr LIKE pat [ESCAPE 'escape_char']).

URL: https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">233</field>
		<field name="name">STRCMP</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
STRCMP(expr1,expr2)

STRCMP() returns 0 if the strings are the same, -1 if the first
argument is smaller than the second according to the current sort
order, and NULL if either argument is NULL. It returns 1 otherwise.

URL: https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html

</field>
		<field name="example">mysql&gt; SELECT STRCMP('text', 'text2');
        -&gt; -1
mysql&gt; SELECT STRCMP('text2', 'text');
        -&gt; 1
mysql&gt; SELECT STRCMP('text', 'text');
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">234</field>
		<field name="name">NOT REGEXP</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
expr NOT REGEXP pat, expr NOT RLIKE pat

This is the same as NOT (expr REGEXP pat).

URL: https://dev.mysql.com/doc/refman/8.0/en/regexp.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/regexp.html</field>
	</row>
	<row>
		<field name="help_topic_id">235</field>
		<field name="name">REGEXP</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
expr REGEXP pat, expr RLIKE pat

Returns 1 if the string expr matches the regular expression specified
by the pattern pat, 0 otherwise. If expr or pat is NULL, the return
value is NULL.

REGEXP and RLIKE are synonyms for REGEXP_LIKE().

For additional information about how matching occurs, see the
description for REGEXP_LIKE().

URL: https://dev.mysql.com/doc/refman/8.0/en/regexp.html

</field>
		<field name="example">mysql&gt; SELECT 'Michael!' REGEXP '.*';
+------------------------+
| 'Michael!' REGEXP '.*' |
+------------------------+
|                      1 |
+------------------------+
mysql&gt; SELECT 'new*\n*line' REGEXP 'new\\*.\\*line';
+---------------------------------------+
| 'new*\n*line' REGEXP 'new\\*.\\*line' |
+---------------------------------------+
|                                     0 |
+---------------------------------------+
mysql&gt; SELECT 'a' REGEXP '^[a-d]';
+---------------------+
| 'a' REGEXP '^[a-d]' |
+---------------------+
|                   1 |
+---------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/regexp.html</field>
	</row>
	<row>
		<field name="help_topic_id">236</field>
		<field name="name">REGEXP_INSTR</field>
		<field name="help_category_id">15</field>
		<field name="description">REGEXP_INSTR(expr, pat[, pos[, occurrence[, return_option[,
match_type]]]])

Returns the starting index of the substring of the string expr that
matches the regular expression specified by the pattern pat, 0 if there
is no match. If expr or pat is NULL, the return value is NULL.
Character indexes begin at 1.

REGEXP_INSTR() takes these optional arguments:

o pos: The position in expr at which to start the search. If omitted,
  the default is 1.

o occurrence: Which occurrence of a match to search for. If omitted,
  the default is 1.

o return_option: Which type of position to return. If this value is 0,
  REGEXP_INSTR() returns the position of the matched substring's first
  character. If this value is 1, REGEXP_INSTR() returns the position
  following the matched substring. If omitted, the default is 0.

o match_type: A string that specifies how to perform matching. The
  meaning is as described for REGEXP_LIKE().

For additional information about how matching occurs, see the
description for REGEXP_LIKE().

URL: https://dev.mysql.com/doc/refman/8.0/en/regexp.html

</field>
		<field name="example">mysql&gt; SELECT REGEXP_INSTR('dog cat dog', 'dog');
+------------------------------------+
| REGEXP_INSTR('dog cat dog', 'dog') |
+------------------------------------+
|                                  1 |
+------------------------------------+
mysql&gt; SELECT REGEXP_INSTR('dog cat dog', 'dog', 2);
+---------------------------------------+
| REGEXP_INSTR('dog cat dog', 'dog', 2) |
+---------------------------------------+
|                                     9 |
+---------------------------------------+
mysql&gt; SELECT REGEXP_INSTR('aa aaa aaaa', 'a{2}');
+-------------------------------------+
| REGEXP_INSTR('aa aaa aaaa', 'a{2}') |
+-------------------------------------+
|                                   1 |
+-------------------------------------+
mysql&gt; SELECT REGEXP_INSTR('aa aaa aaaa', 'a{4}');
+-------------------------------------+
| REGEXP_INSTR('aa aaa aaaa', 'a{4}') |
+-------------------------------------+
|                                   8 |
+-------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/regexp.html</field>
	</row>
	<row>
		<field name="help_topic_id">237</field>
		<field name="name">REGEXP_LIKE</field>
		<field name="help_category_id">15</field>
		<field name="description">REGEXP_LIKE(expr, pat[, match_type])

Returns 1 if the string expr matches the regular expression specified
by the pattern pat, 0 otherwise. If expr or pat is NULL, the return
value is NULL.

The pattern can be an extended regular expression, the syntax for which
is discussed in
https://dev.mysql.com/doc/refman/8.0/en/regexp.html#regexp-syntax. The
pattern need not be a literal string. For example, it can be specified
as a string expression or table column.

The optional match_type argument is a string that may contain any or
all the following characters specifying how to perform matching:

o c: Case-sensitive matching.

o i: Case-insensitive matching.

o m: Multiple-line mode. Recognize line terminators within the string.
  The default behavior is to match line terminators only at the start
  and end of the string expression.

o n: The . character matches line terminators. The default is for .
  matching to stop at the end of a line.

o u: Unix-only line endings. Only the newline character is recognized
  as a line ending by the ., ^, and $ match operators.

If characters specifying contradictory options are specified within
match_type, the rightmost one takes precedence.

By default, regular expression operations use the character set and
collation of the expr and pat arguments when deciding the type of a
character and performing the comparison. If the arguments have
different character sets or collations, coercibility rules apply as
described in
https://dev.mysql.com/doc/refman/8.0/en/charset-collation-coercibility.
html. Arguments may be specified with explicit collation indicators to
change comparison behavior.

mysql&gt; SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE');
+---------------------------------------+
| REGEXP_LIKE('CamelCase', 'CAMELCASE') |
+---------------------------------------+
|                                     1 |
+---------------------------------------+
mysql&gt; SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs);
+------------------------------------------------------------------+
| REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs) |
+------------------------------------------------------------------+
|                                                                0 |
+------------------------------------------------------------------+

match_type may be specified with the c or i characters to override the
default case sensitivity. Exception: If either argument is a binary
string, the arguments are handled in case-sensitive fashion as binary
strings, even if match_type contains the i character.

*Note*:

MySQL uses C escape syntax in strings (for example, \n to represent the
newline character). If you want your expr or pat argument to contain a
literal \, you must double it. (Unless the NO_BACKSLASH_ESCAPES SQL
mode is enabled, in which case no escape character is used.)

URL: https://dev.mysql.com/doc/refman/8.0/en/regexp.html

</field>
		<field name="example">mysql&gt; SELECT REGEXP_LIKE('Michael!', '.*');
+-------------------------------+
| REGEXP_LIKE('Michael!', '.*') |
+-------------------------------+
|                             1 |
+-------------------------------+
mysql&gt; SELECT REGEXP_LIKE('new*\n*line', 'new\\*.\\*line');
+----------------------------------------------+
| REGEXP_LIKE('new*\n*line', 'new\\*.\\*line') |
+----------------------------------------------+
|                                            0 |
+----------------------------------------------+
mysql&gt; SELECT REGEXP_LIKE('a', '^[a-d]');
+----------------------------+
| REGEXP_LIKE('a', '^[a-d]') |
+----------------------------+
|                          1 |
+----------------------------+

mysql&gt; SELECT REGEXP_LIKE('abc', 'ABC');
+---------------------------+
| REGEXP_LIKE('abc', 'ABC') |
+---------------------------+
|                         1 |
+---------------------------+
mysql&gt; SELECT REGEXP_LIKE('abc', 'ABC', 'c');
+--------------------------------+
| REGEXP_LIKE('abc', 'ABC', 'c') |
+--------------------------------+
|                              0 |
+--------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/regexp.html</field>
	</row>
	<row>
		<field name="help_topic_id">238</field>
		<field name="name">REGEXP_REPLACE</field>
		<field name="help_category_id">15</field>
		<field name="description">REGEXP_REPLACE(expr, pat, repl[, pos[, occurrence[, match_type]]])

Replaces occurrences in the string expr that match the regular
expression specified by the pattern pat with the replacement string
repl, and returns the resulting string. If expr, pat, or repl is NULL,
the return value is NULL.

REGEXP_REPLACE() takes these optional arguments:

o pos: The position in expr at which to start the search. If omitted,
  the default is 1.

o occurrence: Which occurrence of a match to replace. If omitted, the
  default is 0 (which means &quot;replace all occurrences&quot;).

o match_type: A string that specifies how to perform matching. The
  meaning is as described for REGEXP_LIKE().

Prior to MySQL 8.0.17, the result returned by this function used the
UTF-16 character set; in MySQL 8.0.17 and later, the character set and
collation of the expression searched for matches is used. (Bug #94203,
Bug #29308212)

For additional information about how matching occurs, see the
description for REGEXP_LIKE().

URL: https://dev.mysql.com/doc/refman/8.0/en/regexp.html

</field>
		<field name="example">mysql&gt; SELECT REGEXP_REPLACE('a b c', 'b', 'X');
+-----------------------------------+
| REGEXP_REPLACE('a b c', 'b', 'X') |
+-----------------------------------+
| a X c                             |
+-----------------------------------+
mysql&gt; SELECT REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3);
+----------------------------------------------------+
| REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3) |
+----------------------------------------------------+
| abc def X                                          |
+----------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/regexp.html</field>
	</row>
	<row>
		<field name="help_topic_id">239</field>
		<field name="name">REGEXP_SUBSTR</field>
		<field name="help_category_id">15</field>
		<field name="description">REGEXP_SUBSTR(expr, pat[, pos[, occurrence[, match_type]]])

Returns the substring of the string expr that matches the regular
expression specified by the pattern pat, NULL if there is no match. If
expr or pat is NULL, the return value is NULL.

REGEXP_SUBSTR() takes these optional arguments:

o pos: The position in expr at which to start the search. If omitted,
  the default is 1.

o occurrence: Which occurrence of a match to search for. If omitted,
  the default is 1.

o match_type: A string that specifies how to perform matching. The
  meaning is as described for REGEXP_LIKE().

Prior to MySQL 8.0.17, the result returned by this function used the
UTF-16 character set; in MySQL 8.0.17 and later, the character set and
collation of the expression searched for matches is used. (Bug #94203,
Bug #29308212)

For additional information about how matching occurs, see the
description for REGEXP_LIKE().

URL: https://dev.mysql.com/doc/refman/8.0/en/regexp.html

</field>
		<field name="example">mysql&gt; SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+');
+----------------------------------------+
| REGEXP_SUBSTR('abc def ghi', '[a-z]+') |
+----------------------------------------+
| abc                                    |
+----------------------------------------+
mysql&gt; SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3);
+----------------------------------------------+
| REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3) |
+----------------------------------------------+
| ghi                                          |
+----------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/regexp.html</field>
	</row>
	<row>
		<field name="help_topic_id">240</field>
		<field name="name">MATCH AGAINST</field>
		<field name="help_category_id">15</field>
		<field name="description">Syntax:
MATCH (col1,col2,...) AGAINST (expr [search_modifier])

MySQL has support for full-text indexing and searching:

o A full-text index in MySQL is an index of type FULLTEXT.

o Full-text indexes can be used only with InnoDB or MyISAM tables, and
  can be created only for CHAR, VARCHAR, or TEXT columns.

o MySQL provides a built-in full-text ngram parser that supports
  Chinese, Japanese, and Korean (CJK), and an installable MeCab
  full-text parser plugin for Japanese. Parsing differences are
  outlined in
  https://dev.mysql.com/doc/refman/8.0/en/fulltext-search-ngram.html,
  and
  https://dev.mysql.com/doc/refman/8.0/en/fulltext-search-mecab.html.

o A FULLTEXT index definition can be given in the CREATE TABLE
  statement when a table is created, or added later using ALTER TABLE
  or CREATE INDEX.

o For large data sets, it is much faster to load your data into a table
  that has no FULLTEXT index and then create the index after that, than
  to load data into a table that has an existing FULLTEXT index.

Full-text searching is performed using MATCH() AGAINST() syntax.
MATCH() takes a comma-separated list that names the columns to be
searched. AGAINST takes a string to search for, and an optional
modifier that indicates what type of search to perform. The search
string must be a string value that is constant during query evaluation.
This rules out, for example, a table column because that can differ for
each row.

Previously, MySQL permitted the use of a rollup column with MATCH(),
but queries employing this construct performed poorly and with
unreliable results. (This is due to the fact that MATCH() is not
implemented as a function of its arguments, but rather as a function of
the row ID of the current row in the underlying scan of the base
table.) As of MySQL 8.0.28, MySQL no longer allows such queries; more
specifically, any query matching all of the criteria listed here is
rejected with ER_FULLTEXT_WITH_ROLLUP
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_fulltext_with_rollup):

o MATCH() appears in the SELECT list, GROUP BY clause, HAVING clause,
  or ORDER BY clause of a query block.

o The query block contains a GROUP BY ... WITH ROLLUP clause.

o The argument of the call to the MATCH() function is one of the
  grouping columns.

Some examples of such queries are shown here:

# MATCH() in SELECT list...
SELECT MATCH (a) AGAINST ('abc') FROM t GROUP BY a WITH ROLLUP;
SELECT 1 FROM t GROUP BY a, MATCH (a) AGAINST ('abc') WITH ROLLUP;

# ...in HAVING clause...
SELECT 1 FROM t GROUP BY a WITH ROLLUP HAVING MATCH (a) AGAINST ('abc');

# ...and in ORDER BY clause
SELECT 1 FROM t GROUP BY a WITH ROLLUP ORDER BY MATCH (a) AGAINST ('abc');

The use of MATCH() with a rollup column in the WHERE clause is
permitted.

There are three types of full-text searches:

o A natural language search interprets the search string as a phrase in
  natural human language (a phrase in free text). There are no special
  operators, with the exception of double quote (&quot;) characters. The
  stopword list applies. For more information about stopword lists, see
  https://dev.mysql.com/doc/refman/8.0/en/fulltext-stopwords.html.

  Full-text searches are natural language searches if the IN NATURAL
  LANGUAGE MODE modifier is given or if no modifier is given. For more
  information, see
  https://dev.mysql.com/doc/refman/8.0/en/fulltext-natural-language.htm
  l.

o A boolean search interprets the search string using the rules of a
  special query language. The string contains the words to search for.
  It can also contain operators that specify requirements such that a
  word must be present or absent in matching rows, or that it should be
  weighted higher or lower than usual. Certain common words (stopwords)
  are omitted from the search index and do not match if present in the
  search string. The IN BOOLEAN MODE modifier specifies a boolean
  search. For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/fulltext-boolean.html.

o A query expansion search is a modification of a natural language
  search. The search string is used to perform a natural language
  search. Then words from the most relevant rows returned by the search
  are added to the search string and the search is done again. The
  query returns the rows from the second search. The IN NATURAL
  LANGUAGE MODE WITH QUERY EXPANSION or WITH QUERY EXPANSION modifier
  specifies a query expansion search. For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/fulltext-query-expansion.html
  .

URL: https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html

</field>
		<field name="example">mysql&gt; SELECT id, body, MATCH (title,body)
    -&gt;   AGAINST ('Security implications of running MySQL as root'
    -&gt;   IN NATURAL LANGUAGE MODE) AS score
    -&gt; FROM articles
    -&gt;   WHERE MATCH (title,body) 
    -&gt;   AGAINST('Security implications of running MySQL as root'
    -&gt;   IN NATURAL LANGUAGE MODE);
+----+-------------------------------------+-----------------+
| id | body                                | score           |
+----+-------------------------------------+-----------------+
|  4 | 1. Never run mysqld as root. 2. ... | 1.5219271183014 |
|  6 | When configured properly, MySQL ... | 1.3114095926285 |
+----+-------------------------------------+-----------------+
2 rows in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html</field>
	</row>
	<row>
		<field name="help_topic_id">241</field>
		<field name="name">BINARY OPERATOR</field>
		<field name="help_category_id">16</field>
		<field name="description">Syntax:
BINARY expr

The BINARY operator converts the expression to a binary string (a
string that has the binary character set and binary collation). A
common use for BINARY is to force a character string comparison to be
done byte by byte using numeric byte values rather than character by
character. The BINARY operator also causes trailing spaces in
comparisons to be significant. For information about the differences
between the binary collation of the binary character set and the _bin
collations of nonbinary character sets, see
https://dev.mysql.com/doc/refman/8.0/en/charset-binary-collations.html.

The BINARY operator is deprecated as of MySQL 8.0.27, and you should
expect its removal in a future version of MySQL. Use CAST(... AS
BINARY) instead.

URL: https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html

</field>
		<field name="example">mysql&gt; SET NAMES utf8mb4 COLLATE utf8mb4_general_ci;
        -&gt; OK
mysql&gt; SELECT 'a' = 'A';
        -&gt; 1
mysql&gt; SELECT BINARY 'a' = 'A';
        -&gt; 0
mysql&gt; SELECT 'a' = 'a ';
        -&gt; 1
mysql&gt; SELECT BINARY 'a' = 'a ';
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">242</field>
		<field name="name">CAST</field>
		<field name="help_category_id">16</field>
		<field name="description">Syntax:
CAST(expr AS type [ARRAY])

CAST(timestamp_value AT TIME ZONE timezone_specifier AS
DATETIME[(precision)])

timezone_specifier: [INTERVAL] '+00:00' | 'UTC'

With CAST(expr AS type syntax, the CAST() function takes an expression
of any type and produces a result value of the specified type. This
operation may also be expressed as CONVERT(expr, type), which is
equivalent. If expr is NULL, CAST() returns NULL.

These type values are permitted:

o BINARY[(N)]

  Produces a string with the VARBINARY data type, except that when the
  expression expr is empty (zero length), the result type is BINARY(0).
  If the optional length N is given, BINARY(N) causes the cast to use
  no more than N bytes of the argument. Values shorter than N bytes are
  padded with 0x00 bytes to a length of N. If the optional length N is
  not given, MySQL calculates the maximum length from the expression.
  If the supplied or calculated length is greater than an internal
  threshold, the result type is BLOB. If the length is still too long,
  the result type is LONGBLOB.

  For a description of how casting to BINARY affects comparisons, see
  https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html.

o CHAR[(N)] [charset_info]

  Produces a string with the VARCHAR data type, unless the expression
  expr is empty (zero length), in which case the result type is
  CHAR(0). If the optional length N is given, CHAR(N) causes the cast
  to use no more than N characters of the argument. No padding occurs
  for values shorter than N characters. If the optional length N is not
  given, MySQL calculates the maximum length from the expression. If
  the supplied or calculated length is greater than an internal
  threshold, the result type is TEXT. If the length is still too long,
  the result type is LONGTEXT.

  With no charset_info clause, CHAR produces a string with the default
  character set. To specify the character set explicitly, these
  charset_info values are permitted:

  o CHARACTER SET charset_name: Produces a string with the given
    character set.

  o ASCII: Shorthand for CHARACTER SET latin1.

  o UNICODE: Shorthand for CHARACTER SET ucs2.

  In all cases, the string has the character set default collation.

o DATE

  Produces a DATE value.

o DATETIME[(M)]

  Produces a DATETIME value. If the optional M value is given, it
  specifies the fractional seconds precision.

o DECIMAL[(M[,D])]

  Produces a DECIMAL value. If the optional M and D values are given,
  they specify the maximum number of digits (the precision) and the
  number of digits following the decimal point (the scale). If D is
  omitted, 0 is assumed. If M is omitted, 10 is assumed.

o DOUBLE

  Produces a DOUBLE result. Added in MySQL 8.0.17.

o FLOAT[(p)]

  If the precision p is not specified, produces a result of type FLOAT.
  If p is provided and 0 &lt;= &lt; p &lt;= 24, the result is of type FLOAT. If
  25 &lt;= p &lt;= 53, the result is of type DOUBLE. If p &lt; 0 or p &gt; 53, an
  error is returned. Added in MySQL 8.0.17.

o JSON

  Produces a JSON value. For details on the rules for conversion of
  values between JSON and other types, see
  https://dev.mysql.com/doc/refman/8.0/en/json.html#json-comparison.

o NCHAR[(N)]

  Like CHAR, but produces a string with the national character set. See
  https://dev.mysql.com/doc/refman/8.0/en/charset-national.html.

  Unlike CHAR, NCHAR does not permit trailing character set information
  to be specified.

o REAL

  Produces a result of type REAL. This is actually FLOAT if the
  REAL_AS_FLOAT SQL mode is enabled; otherwise the result is of type
  DOUBLE.

o SIGNED [INTEGER]

  Produces a signed BIGINT value.

o spatial_type

  As of MySQL 8.0.24, CAST() and CONVERT() support casting geometry
  values from one spatial type to another, for certain combinations of
  spatial types. For details, see
  https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#cast-spat
  ial-types.

o TIME[(M)]

  Produces a TIME value. If the optional M value is given, it specifies
  the fractional seconds precision.

o UNSIGNED [INTEGER]

  Produces an unsigned BIGINT value.

o YEAR

  Produces a YEAR value. Added in MySQL 8.0.22. These rules govern
  conversion to YEAR:

  o For a four-digit number in the range 1901-2155 inclusive, or for a
    string which can be interpreted as a four-digit number in this
    range, return the corresponding YEAR value.

  o For a number consisting of one or two digits, or for a string which
    can be interpreted as such a number, return a YEAR value as
    follows:

    o If the number is in the range 1-69 inclusive, add 2000 and return
      the sum.

    o If the number is in the range 70-99 inclusive, add 1900 and
      return the sum.

  o For a string which evaluates to 0, return 2000.

  o For the number 0, return 0.

  o For a DATE, DATETIME, or TIMESTAMP value, return the YEAR portion
    of the value. For a TIME value, return the current year.

    If you do not specify the type of a TIME argument, you may get a
    different result from what you expect, as shown here:

mysql&gt; SELECT CAST(&quot;11:35:00&quot; AS YEAR), CAST(TIME &quot;11:35:00&quot; AS YEAR);
+--------------------------+-------------------------------+
| CAST(&quot;11:35:00&quot; AS YEAR) | CAST(TIME &quot;11:35:00&quot; AS YEAR) |
+--------------------------+-------------------------------+
|                     2011 |                          2021 |
+--------------------------+-------------------------------+

  o If the argument is of type DECIMAL, DOUBLE, DECIMAL, or REAL, round
    the value to the nearest integer, then attempt to cast the value to
    YEAR using the rules for integer values, as shown here:

mysql&gt; SELECT CAST(1944.35 AS YEAR), CAST(1944.50 AS YEAR);
+-----------------------+-----------------------+
| CAST(1944.35 AS YEAR) | CAST(1944.50 AS YEAR) |
+-----------------------+-----------------------+
|                  1944 |                  1945 |
+-----------------------+-----------------------+

mysql&gt; SELECT CAST(66.35 AS YEAR), CAST(66.50 AS YEAR);
+---------------------+---------------------+
| CAST(66.35 AS YEAR) | CAST(66.50 AS YEAR) |
+---------------------+---------------------+
|                2066 |                2067 |
+---------------------+---------------------+

  o An argument of type GEOMETRY cannot be converted to YEAR.

  o For a value that cannot be successfully converted to YEAR, return
    NULL.

  A string value containing non-numeric characters which must be
  truncated prior to conversion raises a warning, as shown here:

mysql&gt; SELECT CAST(&quot;1979aaa&quot; AS YEAR);
+-------------------------+
| CAST(&quot;1979aaa&quot; AS YEAR) |
+-------------------------+
|                    1979 |
+-------------------------+
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS;
+---------+------+-------------------------------------------+
| Level   | Code | Message                                   |
+---------+------+-------------------------------------------+
| Warning | 1292 | Truncated incorrect YEAR value: '1979aaa' |
+---------+------+-------------------------------------------+

In MySQL 8.0.17 and higher, InnoDB allows the use of an additional
ARRAY keyword for creating a multi-valued index on a JSON array as part
of CREATE INDEX, CREATE TABLE, and ALTER TABLE statements. ARRAY is not
supported except when used to create a multi-valued index in one of
these statements, in which case it is required. The column being
indexed must be a column of type JSON. With ARRAY, the type following
the AS keyword may specify any of the types supported by CAST(), with
the exceptions of BINARY, JSON, and YEAR. For syntax information and
examples, as well as other relevant information, see
https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-
multi-valued.

*Note*:

CONVERT(), unlike CAST(), does not support multi-valued index creation
or the ARRAY keyword.

Beginning with MySQL 8.0.22, CAST() supports retrieval of a TIMESTAMP
value as being in UTC, using the AT TIMEZONE operator. The only
supported time zone is UTC; this can be specified as either of '+00:00'
or 'UTC'. The only return type supported by this syntax is DATETIME,
with an optional precision specifier in the range of 0 to 6, inclusive.

TIMESTAMP values that use timezone offsets are also supported.

mysql&gt; SELECT @@system_time_zone;
+--------------------+
| @@system_time_zone |
+--------------------+
| EDT                |
+--------------------+
1 row in set (0.00 sec)

mysql&gt; CREATE TABLE TZ (c TIMESTAMP);
Query OK, 0 rows affected (0.41 sec)

mysql&gt; INSERT INTO tz VALUES
    -&gt;     ROW(CURRENT_TIMESTAMP),
    -&gt;     ROW('2020-07-28 14:50:15+1:00');
Query OK, 1 row affected (0.08 sec)

mysql&gt; TABLE tz;
+---------------------+
| c                   |
+---------------------+
| 2020-07-28 09:22:41 |
| 2020-07-28 09:50:15 |
+---------------------+
2 rows in set (0.00 sec)

mysql&gt; SELECT CAST(c AT TIME ZONE '+00:00' AS DATETIME) AS u FROM tz;
+---------------------+
| u                   |
+---------------------+
| 2020-07-28 13:22:41 |
| 2020-07-28 13:50:15 |
+---------------------+
2 rows in set (0.00 sec)

mysql&gt; SELECT CAST(c AT TIME ZONE 'UTC' AS DATETIME(2)) AS u FROM tz;
+------------------------+
| u                      |
+------------------------+
| 2020-07-28 13:22:41.00 |
| 2020-07-28 13:50:15.00 |
+------------------------+
2 rows in set (0.00 sec)

If you use 'UTC' as the time zone specifier with this form of CAST(),
and the server raises an error such as Unknown or incorrect time zone:
'UTC', you may need to install the MySQL time zone tables (see
https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html#time-zon
e-installation).

AT TIME ZONE does not support the ARRAY keyword, and is not supported
by the CONVERT() function.

URL: https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">243</field>
		<field name="name">CONVERT</field>
		<field name="help_category_id">16</field>
		<field name="description">Syntax:
CONVERT(expr USING transcoding_name)

CONVERT(expr,type)

CONVERT(expr USING transcoding_name) is standard SQL syntax. The
non-USING form of CONVERT() is ODBC syntax. Regardless of the syntax
used, the function returns NULL if expr is NULL.

CONVERT(expr USING transcoding_name) converts data between different
character sets. In MySQL, transcoding names are the same as the
corresponding character set names. For example, this statement converts
the string 'abc' in the default character set to the corresponding
string in the utf8mb4 character set:

SELECT CONVERT('abc' USING utf8mb4);

CONVERT(expr, type) syntax (without USING) takes an expression and a
type value specifying a result type, and produces a result value of the
specified type. This operation may also be expressed as CAST(expr AS
type), which is equivalent. For more information, see the description
of CAST().

URL: https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">244</field>
		<field name="name">EXTRACTVALUE</field>
		<field name="help_category_id">17</field>
		<field name="description">Syntax:
ExtractValue(xml_frag, xpath_expr)

ExtractValue() takes two string arguments, a fragment of XML markup
xml_frag and an XPath expression xpath_expr (also known as a locator);
it returns the text (CDATA) of the first text node which is a child of
the element or elements matched by the XPath expression.

Using this function is the equivalent of performing a match using the
xpath_expr after appending /text(). In other words,
ExtractValue('&lt;a&gt;&lt;b&gt;Sakila&lt;/b&gt;&lt;/a&gt;', '/a/b') and
ExtractValue('&lt;a&gt;&lt;b&gt;Sakila&lt;/b&gt;&lt;/a&gt;', '/a/b/text()') produce the same
result. If xml_frag or xpath_expr is NULL, the function returns NULL.

If multiple matches are found, the content of the first child text node
of each matching element is returned (in the order matched) as a
single, space-delimited string.

If no matching text node is found for the expression (including the
implicit /text())---for whatever reason, as long as xpath_expr is
valid, and xml_frag consists of elements which are properly nested and
closed---an empty string is returned. No distinction is made between a
match on an empty element and no match at all. This is by design.

If you need to determine whether no matching element was found in
xml_frag or such an element was found but contained no child text
nodes, you should test the result of an expression that uses the XPath
count() function. For example, both of these statements return an empty
string, as shown here:

mysql&gt; SELECT ExtractValue('&lt;a&gt;&lt;b/&gt;&lt;/a&gt;', '/a/b');
+-------------------------------------+
| ExtractValue('&lt;a&gt;&lt;b/&gt;&lt;/a&gt;', '/a/b') |
+-------------------------------------+
|                                     |
+-------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT ExtractValue('&lt;a&gt;&lt;c/&gt;&lt;/a&gt;', '/a/b');
+-------------------------------------+
| ExtractValue('&lt;a&gt;&lt;c/&gt;&lt;/a&gt;', '/a/b') |
+-------------------------------------+
|                                     |
+-------------------------------------+
1 row in set (0.00 sec)

However, you can determine whether there was actually a matching
element using the following:

mysql&gt; SELECT ExtractValue('&lt;a&gt;&lt;b/&gt;&lt;/a&gt;', 'count(/a/b)');
+-------------------------------------+
| ExtractValue('&lt;a&gt;&lt;b/&gt;&lt;/a&gt;', 'count(/a/b)') |
+-------------------------------------+
| 1                                   |
+-------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT ExtractValue('&lt;a&gt;&lt;c/&gt;&lt;/a&gt;', 'count(/a/b)');
+-------------------------------------+
| ExtractValue('&lt;a&gt;&lt;c/&gt;&lt;/a&gt;', 'count(/a/b)') |
+-------------------------------------+
| 0                                   |
+-------------------------------------+
1 row in set (0.01 sec)

*Important*:

ExtractValue() returns only CDATA, and does not return any tags that
might be contained within a matching tag, nor any of their content (see
the result returned as val1 in the following example).

URL: https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html

</field>
		<field name="example">mysql&gt; SELECT
    -&gt;   ExtractValue('&lt;a&gt;ccc&lt;b&gt;ddd&lt;/b&gt;&lt;/a&gt;', '/a') AS val1,
    -&gt;   ExtractValue('&lt;a&gt;ccc&lt;b&gt;ddd&lt;/b&gt;&lt;/a&gt;', '/a/b') AS val2,
    -&gt;   ExtractValue('&lt;a&gt;ccc&lt;b&gt;ddd&lt;/b&gt;&lt;/a&gt;', '//b') AS val3,
    -&gt;   ExtractValue('&lt;a&gt;ccc&lt;b&gt;ddd&lt;/b&gt;&lt;/a&gt;', '/b') AS val4,
    -&gt;   ExtractValue('&lt;a&gt;ccc&lt;b&gt;ddd&lt;/b&gt;&lt;b&gt;eee&lt;/b&gt;&lt;/a&gt;', '//b') AS val5;

+------+------+------+------+---------+
| val1 | val2 | val3 | val4 | val5    |
+------+------+------+------+---------+
| ccc  | ddd  | ddd  |      | ddd eee |
+------+------+------+------+---------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">245</field>
		<field name="name">UPDATEXML</field>
		<field name="help_category_id">17</field>
		<field name="description">Syntax:
UpdateXML(xml_target, xpath_expr, new_xml)

This function replaces a single portion of a given fragment of XML
markup xml_target with a new XML fragment new_xml, and then returns the
changed XML. The portion of xml_target that is replaced matches an
XPath expression xpath_expr supplied by the user.

If no expression matching xpath_expr is found, or if multiple matches
are found, the function returns the original xml_target XML fragment.
All three arguments should be strings. If any of the arguments to
UpdateXML() are NULL, the function returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html

</field>
		<field name="example">mysql&gt; SELECT
    -&gt;   UpdateXML('&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;', '/a', '&lt;e&gt;fff&lt;/e&gt;') AS val1,
    -&gt;   UpdateXML('&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;', '/b', '&lt;e&gt;fff&lt;/e&gt;') AS val2,
    -&gt;   UpdateXML('&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;', '//b', '&lt;e&gt;fff&lt;/e&gt;') AS val3,
    -&gt;   UpdateXML('&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;', '/a/d', '&lt;e&gt;fff&lt;/e&gt;') AS val4,
    -&gt;   UpdateXML('&lt;a&gt;&lt;d&gt;&lt;/d&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;', '/a/d', '&lt;e&gt;fff&lt;/e&gt;') AS val5
    -&gt; \G

*************************** 1. row ***************************
val1: &lt;e&gt;fff&lt;/e&gt;
val2: &lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;
val3: &lt;a&gt;&lt;e&gt;fff&lt;/e&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;
val4: &lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;e&gt;fff&lt;/e&gt;&lt;/a&gt;
val5: &lt;a&gt;&lt;d&gt;&lt;/d&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">246</field>
		<field name="name">|</field>
		<field name="help_category_id">18</field>
		<field name="description">Syntax:
|

Bitwise OR.

The result type depends on whether the arguments are evaluated as
binary strings or numbers:

o Binary-string evaluation occurs when the arguments have a binary
  string type, and at least one of them is not a hexadecimal literal,
  bit literal, or NULL literal. Numeric evaluation occurs otherwise,
  with argument conversion to unsigned 64-bit integers as necessary.

o Binary-string evaluation produces a binary string of the same length
  as the arguments. If the arguments have unequal lengths, an
  ER_INVALID_BITWISE_OPERANDS_SIZE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_invalid_bitwise_operands_size) error occurs. Numeric
  evaluation produces an unsigned 64-bit integer.

For more information, see the introductory discussion in this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html

</field>
		<field name="example">mysql&gt; SELECT 29 | 15;
        -&gt; 31
mysql&gt; SELECT _binary X'40404040' | X'01020304';
        -&gt; 'ABCD'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">247</field>
		<field name="name">&amp;</field>
		<field name="help_category_id">18</field>
		<field name="description">Syntax:
&amp;

Bitwise AND.

The result type depends on whether the arguments are evaluated as
binary strings or numbers:

o Binary-string evaluation occurs when the arguments have a binary
  string type, and at least one of them is not a hexadecimal literal,
  bit literal, or NULL literal. Numeric evaluation occurs otherwise,
  with argument conversion to unsigned 64-bit integers as necessary.

o Binary-string evaluation produces a binary string of the same length
  as the arguments. If the arguments have unequal lengths, an
  ER_INVALID_BITWISE_OPERANDS_SIZE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_invalid_bitwise_operands_size) error occurs. Numeric
  evaluation produces an unsigned 64-bit integer.

For more information, see the introductory discussion in this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html

</field>
		<field name="example">mysql&gt; SELECT 29 &amp; 15;
        -&gt; 13
mysql&gt; SELECT HEX(_binary X'FF' &amp; b'11110000');
        -&gt; 'F0'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">248</field>
		<field name="name">^</field>
		<field name="help_category_id">18</field>
		<field name="description">Syntax:
^

Bitwise XOR.

The result type depends on whether the arguments are evaluated as
binary strings or numbers:

o Binary-string evaluation occurs when the arguments have a binary
  string type, and at least one of them is not a hexadecimal literal,
  bit literal, or NULL literal. Numeric evaluation occurs otherwise,
  with argument conversion to unsigned 64-bit integers as necessary.

o Binary-string evaluation produces a binary string of the same length
  as the arguments. If the arguments have unequal lengths, an
  ER_INVALID_BITWISE_OPERANDS_SIZE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_invalid_bitwise_operands_size) error occurs. Numeric
  evaluation produces an unsigned 64-bit integer.

For more information, see the introductory discussion in this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html

</field>
		<field name="example">mysql&gt; SELECT 1 ^ 1;
        -&gt; 0
mysql&gt; SELECT 1 ^ 0;
        -&gt; 1
mysql&gt; SELECT 11 ^ 3;
        -&gt; 8
mysql&gt; SELECT HEX(_binary X'FEDC' ^ X'1111');
        -&gt; 'EFCD'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">249</field>
		<field name="name">&lt;&lt;</field>
		<field name="help_category_id">18</field>
		<field name="description">Syntax:
&lt;&lt;

Shifts a longlong (BIGINT) number or binary string to the left.

The result type depends on whether the bit argument is evaluated as a
binary string or number:

o Binary-string evaluation occurs when the bit argument has a binary
  string type, and is not a hexadecimal literal, bit literal, or NULL
  literal. Numeric evaluation occurs otherwise, with argument
  conversion to an unsigned 64-bit integer as necessary.

o Binary-string evaluation produces a binary string of the same length
  as the bit argument. Numeric evaluation produces an unsigned 64-bit
  integer.

Bits shifted off the end of the value are lost without warning,
regardless of the argument type. In particular, if the shift count is
greater or equal to the number of bits in the bit argument, all bits in
the result are 0.

For more information, see the introductory discussion in this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html

</field>
		<field name="example">mysql&gt; SELECT 1 &lt;&lt; 2;
        -&gt; 4
mysql&gt; SELECT HEX(_binary X'00FF00FF00FF' &lt;&lt; 8);
        -&gt; 'FF00FF00FF00'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">250</field>
		<field name="name">&gt;&gt;</field>
		<field name="help_category_id">18</field>
		<field name="description">Syntax:
&gt;&gt;

Shifts a longlong (BIGINT) number or binary string to the right.

The result type depends on whether the bit argument is evaluated as a
binary string or number:

o Binary-string evaluation occurs when the bit argument has a binary
  string type, and is not a hexadecimal literal, bit literal, or NULL
  literal. Numeric evaluation occurs otherwise, with argument
  conversion to an unsigned 64-bit integer as necessary.

o Binary-string evaluation produces a binary string of the same length
  as the bit argument. Numeric evaluation produces an unsigned 64-bit
  integer.

Bits shifted off the end of the value are lost without warning,
regardless of the argument type. In particular, if the shift count is
greater or equal to the number of bits in the bit argument, all bits in
the result are 0.

For more information, see the introductory discussion in this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html

</field>
		<field name="example">mysql&gt; SELECT 4 &gt;&gt; 2;
        -&gt; 1
mysql&gt; SELECT HEX(_binary X'00FF00FF00FF' &gt;&gt; 8);
        -&gt; '0000FF00FF00'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">251</field>
		<field name="name">~</field>
		<field name="help_category_id">18</field>
		<field name="description">Syntax:
~

Invert all bits.

The result type depends on whether the bit argument is evaluated as a
binary string or number:

o Binary-string evaluation occurs when the bit argument has a binary
  string type, and is not a hexadecimal literal, bit literal, or NULL
  literal. Numeric evaluation occurs otherwise, with argument
  conversion to an unsigned 64-bit integer as necessary.

o Binary-string evaluation produces a binary string of the same length
  as the bit argument. Numeric evaluation produces an unsigned 64-bit
  integer.

For more information, see the introductory discussion in this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html

</field>
		<field name="example">mysql&gt; SELECT 5 &amp; ~1;
        -&gt; 4
mysql&gt; SELECT HEX(~X'0000FFFF1111EEEE');
        -&gt; 'FFFF0000EEEE1111'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">252</field>
		<field name="name">BIT_COUNT</field>
		<field name="help_category_id">18</field>
		<field name="description">Syntax:
BIT_COUNT(N)

Returns the number of bits that are set in the argument N as an
unsigned 64-bit integer, or NULL if the argument is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html

</field>
		<field name="example">mysql&gt; SELECT BIT_COUNT(64), BIT_COUNT(BINARY 64);
        -&gt; 1, 7
mysql&gt; SELECT BIT_COUNT('64'), BIT_COUNT(_binary '64');
        -&gt; 1, 7
mysql&gt; SELECT BIT_COUNT(X'40'), BIT_COUNT(_binary X'40');
        -&gt; 1, 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">253</field>
		<field name="name">AES_DECRYPT</field>
		<field name="help_category_id">19</field>
		<field name="description">Syntax:
AES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info |
iterations])

This function decrypts data using the official AES (Advanced Encryption
Standard) algorithm. For more information, see the description of
AES_ENCRYPT().

Statements that use AES_DECRYPT() are unsafe for statement-based
replication.

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">254</field>
		<field name="name">AES_ENCRYPT</field>
		<field name="help_category_id">19</field>
		<field name="description">Syntax:
AES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info |
iterations])

AES_ENCRYPT() and AES_DECRYPT() implement encryption and decryption of
data using the official AES (Advanced Encryption Standard) algorithm,
previously known as &quot;Rijndael.&quot; The AES standard permits various key
lengths. By default these functions implement AES with a 128-bit key
length. Key lengths of 196 or 256 bits can be used, as described later.
The key length is a trade off between performance and security.

AES_ENCRYPT() encrypts the string str using the key string key_str, and
returns a binary string containing the encrypted output. AES_DECRYPT()
decrypts the encrypted string crypt_str using the key string key_str,
and returns the original (binary) string in hexadecimal format. (To
obtain the string as plaintext, cast the result to CHAR. Alternatively,
start the mysql client with --skip-binary-as-hex to cause all binary
values to be displayed as text.) If either function argument is NULL,
the function returns NULL. If AES_DECRYPT() detects invalid data or
incorrect padding, it returns NULL. However, it is possible for
AES_DECRYPT() to return a non-NULL value (possibly garbage) if the
input data or the key is invalid.

As of MySQL 8.0.30, these functions support the use of a key derivation
function (KDF) to create a cryptographically strong secret key from the
information passed in key_str. The derived key is used to encrypt and
decrypt the data, and it remains in the MySQL Server instance and is
not accessible to users. Using a KDF is highly recommended, as it
provides better security than specifying your own premade key or
deriving it by a simpler method as you use the function. The functions
support HKDF (available from OpenSSL 1.1.0), for which you can specify
an optional salt and context-specific information to include in the
keying material, and PBKDF2 (available from OpenSSL 1.0.2), for which
you can specify an optional salt and set the number of iterations used
to produce the key.

AES_ENCRYPT() and AES_DECRYPT() permit control of the block encryption
mode. The block_encryption_mode system variable controls the mode for
block-based encryption algorithms. Its default value is aes-128-ecb,
which signifies encryption using a key length of 128 bits and ECB mode.
For a description of the permitted values of this variable, see
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.
The optional init_vector argument is used to provide an initialization
vector for block encryption modes that require it.

Statements that use AES_ENCRYPT() or AES_DECRYPT() are unsafe for
statement-based replication.

If AES_ENCRYPT() is invoked from within the mysql client, binary
strings display using hexadecimal notation, depending on the value of
the --binary-as-hex. For more information about that option, see
https://dev.mysql.com/doc/refman/8.0/en/mysql.html.

The arguments for the AES_ENCRYPT() and AES_DECRYPT() functions are as
follows:

o str

  The string for AES_ENCRYPT() to encrypt using the key string key_str,
  or (from MySQL 8.0.30) the key derived from it by the specified KDF.
  The string can be any length. Padding is automatically added to str
  so it is a multiple of a block as required by block-based algorithms
  such as AES. This padding is automatically removed by the
  AES_DECRYPT() function.

o crypt_str

  The encrypted string for AES_DECRYPT() to decrypt using the key
  string key_str, or (from MySQL 8.0.30) the key derived from it by the
  specified KDF. The string can be any length. The length of crypt_str
  can be calculated from the length of the original string using this
  formula:

16 * (trunc(string_length / 16) + 1)

o key_str

  The encryption key, or the input keying material that is used as the
  basis for deriving a key using a key derivation function (KDF). For
  the same instance of data, use the same value of key_str for
  encryption with AES_ENCRYPT() and decryption with AES_DECRYPT().

  If you are using a KDF, which you can from MySQL 8.0.30, key_str can
  be any arbitrary information such as a password or passphrase. In the
  further arguments for the function, you specify the KDF name, then
  add further options to increase the security as appropriate for the
  KDF.

  When you use a KDF, the function creates a cryptographically strong
  secret key from the information passed in key_str and any salt or
  additional information that you provide in the other arguments. The
  derived key is used to encrypt and decrypt the data, and it remains
  in the MySQL Server instance and is not accessible to users. Using a
  KDF is highly recommended, as it provides better security than
  specifying your own premade key or deriving it by a simpler method as
  you use the function.

  If you are not using a KDF, for a key length of 128 bits, the most
  secure way to pass a key to the key_str argument is to create a truly
  random 128-bit value and pass it as a binary value. For example:

INSERT INTO t
VALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));

  A passphrase can be used to generate an AES key by hashing the
  passphrase. For example:

INSERT INTO t
VALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));

  If you exceed the maximum key length of 128 bits, a warning is
  returned. If you are not using a KDF, do not pass a password or
  passphrase directly to key_str, hash it first. Previous versions of
  this documentation suggested the former approach, but it is no longer
  recommended as the examples shown here are more secure.

o init_vector

  An initialization vector, for block encryption modes that require it.
  The block_encryption_mode system variable controls the mode. For the
  same instance of data, use the same value of init_vector for
  encryption with AES_ENCRYPT() and decryption with AES_DECRYPT().

  *Note*:

  If you are using a KDF, you must specify an initialization vector or
  a null string for this argument, in order to access the later
  arguments to define the KDF.

  For modes that require an initialization vector, it must be 16 bytes
  or longer (bytes in excess of 16 are ignored). An error occurs if
  init_vector is missing. For modes that do not require an
  initialization vector, it is ignored and a warning is generated if
  init_vector is specified, unless you are using a KDF.

  The default value for the block_encryption_mode system variable is
  aes-128-ecb, or ECB mode, which does not require an initialization
  vector. The alternative permitted block encryption modes CBC, CFB1,
  CFB8, CFB128, and OFB all require an initialization vector.

  A random string of bytes to use for the initialization vector can be
  produced by calling RANDOM_BYTES(16).

o kdf_name

  The name of the key derivation function (KDF) to create a key from
  the input keying material passed in key_str, and other arguments as
  appropriate for the KDF. This optional argument is available from
  MySQL 8.0.30.

  For the same instance of data, use the same value of kdf_name for
  encryption with AES_ENCRYPT() and decryption with AES_DECRYPT(). When
  you specify kdf_name, you must specify init_vector, using either a
  valid initialization vector, or a null string if the encryption mode
  does not require an initialization vector.

  The following values are supported:

  o hkdf

    HKDF, which is available from OpenSSL 1.1.0. HKDF extracts a
    pseudorandom key from the keying material then expands it into
    additional keys. With HKDF, you can specify an optional salt (salt)
    and context-specific information such as application details (info)
    to include in the keying material.

  o pbkdf2_hmac

    PBKDF2, which is available from OpenSSL 1.0.2. PBKDF2 applies a
    pseudorandom function to the keying material, and repeats this
    process a large number of times to produce the key. With PBKDF2,
    you can specify an optional salt (salt) to include in the keying
    material, and set the number of iterations used to produce the key
    (iterations).

  In this example, HKDF is specified as the key derivation function,
  and a salt and context information are provided. The argument for the
  initialization vector is included but is the empty string:

SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');

  In this example, PBKDF2 is specified as the key derivation function,
  a salt is provided, and the number of iterations is doubled from the
  recommended minimum:

SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');

o salt

  A salt to be passed to the key derivation function (KDF). This
  optional argument is available from MySQL 8.0.30. Both HKDF and
  PBKDF2 can use salts, and their use is recommended to help prevent
  attacks based on dictionaries of common passwords or rainbow tables.

  A salt consists of random data, which for security must be different
  for each encryption operation. A random string of bytes to use for
  the salt can be produced by calling RANDOM_BYTES(). This example
  produces a 64-bit salt:

SET @salt = RANDOM_BYTES(8);

  For the same instance of data, use the same value of salt for
  encryption with AES_ENCRYPT() and decryption with AES_DECRYPT(). The
  salt can safely be stored along with the encrypted data.

o info

  Context-specific information for HKDF to include in the keying
  material, such as information about the application. This optional
  argument is available from MySQL 8.0.30 when you specify hkdf as the
  KDF name. HKDF adds this information to the keying material specified
  in key_str and the salt specified in salt to produce the key.

  For the same instance of data, use the same value of info for
  encryption with AES_ENCRYPT() and decryption with AES_DECRYPT().

o iterations

  The iteration count for PBKDF2 to use when producing the key. This
  optional argument is available from MySQL 8.0.30 when you specify
  pbkdf2_hmac as the KDF name. A higher count gives greater resistance
  to brute-force attacks because it has a greater computational cost
  for the attacker, but the same is necessarily true for the key
  derivation process. The default if you do not specify this argument
  is 1000, which is the minimum recommended by the OpenSSL standard.

  For the same instance of data, use the same value of iterations for
  encryption with AES_ENCRYPT() and decryption with AES_DECRYPT().

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example">mysql&gt; SET block_encryption_mode = 'aes-256-cbc';
mysql&gt; SET @key_str = SHA2('My secret passphrase',512);
mysql&gt; SET @init_vector = RANDOM_BYTES(16);
mysql&gt; SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);
mysql&gt; SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);
+-------------------------------------------------------------+
| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |
+-------------------------------------------------------------+
| text                                                        |
+-------------------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">255</field>
		<field name="name">COMPRESS</field>
		<field name="help_category_id">19</field>
		<field name="description">Syntax:
COMPRESS(string_to_compress)

Compresses a string and returns the result as a binary string. This
function requires MySQL to have been compiled with a compression
library such as zlib. Otherwise, the return value is always NULL. The
return value is also NULL if string_to_compress is NULL. The compressed
string can be uncompressed with UNCOMPRESS().

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example">mysql&gt; SELECT LENGTH(COMPRESS(REPEAT('a',1000)));
        -&gt; 21
mysql&gt; SELECT LENGTH(COMPRESS(''));
        -&gt; 0
mysql&gt; SELECT LENGTH(COMPRESS('a'));
        -&gt; 13
mysql&gt; SELECT LENGTH(COMPRESS(REPEAT('a',16)));
        -&gt; 15
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">256</field>
		<field name="name">MD5</field>
		<field name="help_category_id">19</field>
		<field name="description">Syntax:
MD5(str)

Calculates an MD5 128-bit checksum for the string. The value is
returned as a string of 32 hexadecimal digits, or NULL if the argument
was NULL. The return value can, for example, be used as a hash key. See
the notes at the beginning of this section about storing hash values
efficiently.

The return value is a string in the connection character set.

If FIPS mode is enabled, MD5() returns NULL. See
https://dev.mysql.com/doc/refman/8.0/en/fips-mode.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example">mysql&gt; SELECT MD5('testing');
        -&gt; 'ae2b1fca515949e5d54fb22b8ed95575'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">257</field>
		<field name="name">RANDOM_BYTES</field>
		<field name="help_category_id">19</field>
		<field name="description">Syntax:
RANDOM_BYTES(len)

This function returns a binary string of len random bytes generated
using the random number generator of the SSL library. Permitted values
of len range from 1 to 1024. For values outside that range, an error
occurs. Returns NULL if len is NULL.

RANDOM_BYTES() can be used to provide the initialization vector for the
AES_DECRYPT() and AES_ENCRYPT() functions. For use in that context, len
must be at least 16. Larger values are permitted, but bytes in excess
of 16 are ignored.

RANDOM_BYTES() generates a random value, which makes its result
nondeterministic. Consequently, statements that use this function are
unsafe for statement-based replication.

If RANDOM_BYTES() is invoked from within the mysql client, binary
strings display using hexadecimal notation, depending on the value of
the --binary-as-hex. For more information about that option, see
https://dev.mysql.com/doc/refman/8.0/en/mysql.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">258</field>
		<field name="name">SHA1</field>
		<field name="help_category_id">19</field>
		<field name="description">Syntax:
SHA1(str), SHA(str)

Calculates an SHA-1 160-bit checksum for the string, as described in
RFC 3174 (Secure Hash Algorithm). The value is returned as a string of
40 hexadecimal digits, or NULL if the argument is NULL. One of the
possible uses for this function is as a hash key. See the notes at the
beginning of this section about storing hash values efficiently. SHA()
is synonymous with SHA1().

The return value is a string in the connection character set.

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example">mysql&gt; SELECT SHA1('abc');
        -&gt; 'a9993e364706816aba3e25717850c26c9cd0d89d'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">259</field>
		<field name="name">SHA2</field>
		<field name="help_category_id">19</field>
		<field name="description">Syntax:
SHA2(str, hash_length)

Calculates the SHA-2 family of hash functions (SHA-224, SHA-256,
SHA-384, and SHA-512). The first argument is the plaintext string to be
hashed. The second argument indicates the desired bit length of the
result, which must have a value of 224, 256, 384, 512, or 0 (which is
equivalent to 256). If either argument is NULL or the hash length is
not one of the permitted values, the return value is NULL. Otherwise,
the function result is a hash value containing the desired number of
bits. See the notes at the beginning of this section about storing hash
values efficiently.

The return value is a string in the connection character set.

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example">mysql&gt; SELECT SHA2('abc', 224);
        -&gt; '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">260</field>
		<field name="name">STATEMENT_DIGEST</field>
		<field name="help_category_id">19</field>
		<field name="description">STATEMENT_DIGEST(statement)

Given an SQL statement as a string, returns the statement digest hash
value as a string in the connection character set, or NULL if the
argument is NULL. The related STATEMENT_DIGEST_TEXT() function returns
the normalized statement digest. For information about statement
digesting, see
https://dev.mysql.com/doc/refman/8.0/en/performance-schema-statement-di
gests.html.

Both functions use the MySQL parser to parse the statement. If parsing
fails, an error occurs. The error message includes the parse error only
if the statement is provided as a literal string.

The max_digest_length system variable determines the maximum number of
bytes available to these functions for computing normalized statement
digests.

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example">mysql&gt; SET @stmt = 'SELECT * FROM mytable WHERE cola = 10 AND colb = 20';
mysql&gt; SELECT STATEMENT_DIGEST(@stmt);
+------------------------------------------------------------------+
| STATEMENT_DIGEST(@stmt)                                          |
+------------------------------------------------------------------+
| 3bb95eeade896657c4526e74ff2a2862039d0a0fe8a9e7155b5fe492cbd78387 |
+------------------------------------------------------------------+
mysql&gt; SELECT STATEMENT_DIGEST_TEXT(@stmt);
+----------------------------------------------------------+
| STATEMENT_DIGEST_TEXT(@stmt)                             |
+----------------------------------------------------------+
| SELECT * FROM `mytable` WHERE `cola` = ? AND `colb` = ?  |
+----------------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">261</field>
		<field name="name">STATEMENT_DIGEST_TEXT</field>
		<field name="help_category_id">19</field>
		<field name="description">STATEMENT_DIGEST_TEXT(statement)

Given an SQL statement as a string, returns the normalized statement
digest as a string in the connection character set, or NULL if the
argument is NULL. For additional discussion and examples, see the
description of the related STATEMENT_DIGEST() function.

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">262</field>
		<field name="name">UNCOMPRESS</field>
		<field name="help_category_id">19</field>
		<field name="description">Syntax:
UNCOMPRESS(string_to_uncompress)

Uncompresses a string compressed by the COMPRESS() function. If the
argument is not a compressed value, the result is NULL; if
string_to_uncompress is NULL, the result is also NULL. This function
requires MySQL to have been compiled with a compression library such as
zlib. Otherwise, the return value is always NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example">mysql&gt; SELECT UNCOMPRESS(COMPRESS('any string'));
        -&gt; 'any string'
mysql&gt; SELECT UNCOMPRESS('any string');
        -&gt; NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">263</field>
		<field name="name">UNCOMPRESSED_LENGTH</field>
		<field name="help_category_id">19</field>
		<field name="description">Syntax:
UNCOMPRESSED_LENGTH(compressed_string)

Returns the length that the compressed string had before being
compressed. Returns NULL if compressed_string is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example">mysql&gt; SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));
        -&gt; 30
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">264</field>
		<field name="name">VALIDATE_PASSWORD_STRENGTH</field>
		<field name="help_category_id">19</field>
		<field name="description">Syntax:
VALIDATE_PASSWORD_STRENGTH(str)

Given an argument representing a plaintext password, this function
returns an integer to indicate how strong the password is, or NULL if
the argument is NULL. The return value ranges from 0 (weak) to 100
(strong).

URL: https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">265</field>
		<field name="name">GET_LOCK</field>
		<field name="help_category_id">20</field>
		<field name="description">Syntax:
GET_LOCK(str,timeout)

Tries to obtain a lock with a name given by the string str, using a
timeout of timeout seconds. A negative timeout value means infinite
timeout. The lock is exclusive. While held by one session, other
sessions cannot obtain a lock of the same name.

Returns 1 if the lock was obtained successfully, 0 if the attempt timed
out (for example, because another client has previously locked the
name), or NULL if an error occurred (such as running out of memory or
the thread was killed with mysqladmin kill).

A lock obtained with GET_LOCK() is released explicitly by executing
RELEASE_LOCK() or implicitly when your session terminates (either
normally or abnormally). Locks obtained with GET_LOCK() are not
released when transactions commit or roll back.

GET_LOCK() is implemented using the metadata locking (MDL) subsystem.
Multiple simultaneous locks can be acquired and GET_LOCK() does not
release any existing locks. For example, suppose that you execute these
statements:

SELECT GET_LOCK('lock1',10);
SELECT GET_LOCK('lock2',10);
SELECT RELEASE_LOCK('lock2');
SELECT RELEASE_LOCK('lock1');

The second GET_LOCK() acquires a second lock and both RELEASE_LOCK()
calls return 1 (success).

It is even possible for a given session to acquire multiple locks for
the same name. Other sessions cannot acquire a lock with that name
until the acquiring session releases all its locks for the name.

Uniquely named locks acquired with GET_LOCK() appear in the Performance
Schema metadata_locks table. The OBJECT_TYPE column says USER LEVEL
LOCK and the OBJECT_NAME column indicates the lock name. In the case
that multiple locks are acquired for the same name, only the first lock
for the name registers a row in the metadata_locks table. Subsequent
locks for the name increment a counter in the lock but do not acquire
additional metadata locks. The metadata_locks row for the lock is
deleted when the last lock instance on the name is released.

The capability of acquiring multiple locks means there is the
possibility of deadlock among clients. When this happens, the server
chooses a caller and terminates its lock-acquisition request with an
ER_USER_LOCK_DEADLOCK
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_user_lock_deadlock) error. This error does not cause
transactions to roll back.

MySQL enforces a maximum length on lock names of 64 characters.

GET_LOCK() can be used to implement application locks or to simulate
record locks. Names are locked on a server-wide basis. If a name has
been locked within one session, GET_LOCK() blocks any request by
another session for a lock with the same name. This enables clients
that agree on a given lock name to use the name to perform cooperative
advisory locking. But be aware that it also enables a client that is
not among the set of cooperating clients to lock a name, either
inadvertently or deliberately, and thus prevent any of the cooperating
clients from locking that name. One way to reduce the likelihood of
this is to use lock names that are database-specific or
application-specific. For example, use lock names of the form
db_name.str or app_name.str.

URL: https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">266</field>
		<field name="name">IS_FREE_LOCK</field>
		<field name="help_category_id">20</field>
		<field name="description">Syntax:
IS_FREE_LOCK(str)

Checks whether the lock named str is free to use (that is, not locked).
Returns 1 if the lock is free (no one is using the lock), 0 if the lock
is in use, and NULL if an error occurs (such as an incorrect argument).

URL: https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">267</field>
		<field name="name">IS_USED_LOCK</field>
		<field name="help_category_id">20</field>
		<field name="description">Syntax:
IS_USED_LOCK(str)

Checks whether the lock named str is in use (that is, locked). If so,
it returns the connection identifier of the client session that holds
the lock. Otherwise, it returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">268</field>
		<field name="name">RELEASE_ALL_LOCKS</field>
		<field name="help_category_id">20</field>
		<field name="description">Syntax:
RELEASE_ALL_LOCKS()

Releases all named locks held by the current session and returns the
number of locks released (0 if there were none)

URL: https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">269</field>
		<field name="name">RELEASE_LOCK</field>
		<field name="help_category_id">20</field>
		<field name="description">Syntax:
RELEASE_LOCK(str)

Releases the lock named by the string str that was obtained with
GET_LOCK(). Returns 1 if the lock was released, 0 if the lock was not
established by this thread (in which case the lock is not released),
and NULL if the named lock did not exist. The lock does not exist if it
was never obtained by a call to GET_LOCK() or if it has previously been
released.

The DO statement is convenient to use with RELEASE_LOCK(). See [HELP
DO].

URL: https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">270</field>
		<field name="name">BENCHMARK</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
BENCHMARK(count,expr)

The BENCHMARK() function executes the expression expr repeatedly count
times. It may be used to time how quickly MySQL processes the
expression. The result value is 0, or NULL for inappropriate arguments
such as a NULL or negative repeat count.

The intended use is from within the mysql client, which reports query
execution times:

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));
+---------------------------------------------------+
| BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye')) |
+---------------------------------------------------+
|                                                 0 |
+---------------------------------------------------+
1 row in set (4.74 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">271</field>
		<field name="name">CHARSET</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
CHARSET(str)

Returns the character set of the string argument, or NULL if the
argument is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; SELECT CHARSET('abc');
        -&gt; 'utf8mb3'
mysql&gt; SELECT CHARSET(CONVERT('abc' USING latin1));
        -&gt; 'latin1'
mysql&gt; SELECT CHARSET(USER());
        -&gt; 'utf8mb3'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">272</field>
		<field name="name">COERCIBILITY</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
COERCIBILITY(str)

Returns the collation coercibility value of the string argument.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; SELECT COERCIBILITY('abc' COLLATE utf8mb4_swedish_ci);
        -&gt; 0
mysql&gt; SELECT COERCIBILITY(USER());
        -&gt; 3
mysql&gt; SELECT COERCIBILITY('abc');
        -&gt; 4
mysql&gt; SELECT COERCIBILITY(1000);
        -&gt; 5
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">273</field>
		<field name="name">COLLATION</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
COLLATION(str)

Returns the collation of the string argument.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; SELECT COLLATION('abc');
        -&gt; 'utf8mb4_0900_ai_ci'
mysql&gt; SELECT COLLATION(_utf8mb4'abc');
        -&gt; 'utf8mb4_0900_ai_ci'
mysql&gt; SELECT COLLATION(_latin1'abc');
        -&gt; 'latin1_swedish_ci'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">274</field>
		<field name="name">CONNECTION_ID</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
CONNECTION_ID()

Returns the connection ID (thread ID) for the connection. Every
connection has an ID that is unique among the set of currently
connected clients.

The value returned by CONNECTION_ID() is the same type of value as
displayed in the ID column of the Information Schema PROCESSLIST table,
the Id column of SHOW PROCESSLIST output, and the PROCESSLIST_ID column
of the Performance Schema threads table.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; SELECT CONNECTION_ID();
        -&gt; 23786
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">275</field>
		<field name="name">CURRENT_ROLE</field>
		<field name="help_category_id">21</field>
		<field name="description">CURRENT_ROLE()

Returns a utf8mb3 string containing the current active roles for the
current session, separated by commas, or NONE if there are none. The
value reflects the setting of the sql_quote_show_create system
variable.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">GRANT 'r1', 'r2' TO 'u1'@'localhost';
SET DEFAULT ROLE ALL TO 'u1'@'localhost';

mysql&gt; SELECT CURRENT_ROLE();
+-------------------+
| CURRENT_ROLE()    |
+-------------------+
| `r1`@`%`,`r2`@`%` |
+-------------------+
mysql&gt; SET ROLE 'r1'; SELECT CURRENT_ROLE();
+----------------+
| CURRENT_ROLE() |
+----------------+
| `r1`@`%`       |
+----------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">276</field>
		<field name="name">CURRENT_USER</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
CURRENT_USER, CURRENT_USER()

Returns the user name and host name combination for the MySQL account
that the server used to authenticate the current client. This account
determines your access privileges. The return value is a string in the
utf8mb3 character set.

The value of CURRENT_USER() can differ from the value of USER().

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; SELECT USER();
        -&gt; 'davida@localhost'
mysql&gt; SELECT * FROM mysql.user;
ERROR 1044: Access denied for user ''@'localhost' to
database 'mysql'
mysql&gt; SELECT CURRENT_USER();
        -&gt; '@localhost'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">277</field>
		<field name="name">DATABASE</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
DATABASE()

Returns the default (current) database name as a string in the utf8mb3
character set. If there is no default database, DATABASE() returns
NULL. Within a stored routine, the default database is the database
that the routine is associated with, which is not necessarily the same
as the database that is the default in the calling context.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; SELECT DATABASE();
        -&gt; 'test'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">278</field>
		<field name="name">FOUND_ROWS</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
FOUND_ROWS()

*Note*:

The SQL_CALC_FOUND_ROWS query modifier and accompanying FOUND_ROWS()
function are deprecated as of MySQL 8.0.17; expect them to be removed
in a future version of MySQL. As a replacement, considering executing
your query with LIMIT, and then a second query with COUNT(*) and
without LIMIT to determine whether there are additional rows. For
example, instead of these queries:

SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id &gt; 100 LIMIT 10;
SELECT FOUND_ROWS();

Use these queries instead:

SELECT * FROM tbl_name WHERE id &gt; 100 LIMIT 10;
SELECT COUNT(*) FROM tbl_name WHERE id &gt; 100;

COUNT(*) is subject to certain optimizations. SQL_CALC_FOUND_ROWS
causes some optimizations to be disabled.

A SELECT statement may include a LIMIT clause to restrict the number of
rows the server returns to the client. In some cases, it is desirable
to know how many rows the statement would have returned without the
LIMIT, but without running the statement again. To obtain this row
count, include an SQL_CALC_FOUND_ROWS option in the SELECT statement,
and then invoke FOUND_ROWS() afterward:

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name
    -&gt; WHERE id &gt; 100 LIMIT 10;
mysql&gt; SELECT FOUND_ROWS();
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">279</field>
		<field name="name">ICU_VERSION</field>
		<field name="help_category_id">21</field>
		<field name="description">ICU_VERSION()

The version of the International Components for Unicode (ICU) library
used to support regular expression operations (see
https://dev.mysql.com/doc/refman/8.0/en/regexp.html). This function is
primarily intended for use in test cases.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">280</field>
		<field name="name">LAST_INSERT_ID</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
LAST_INSERT_ID(), LAST_INSERT_ID(expr)

With no argument, LAST_INSERT_ID() returns a BIGINT UNSIGNED (64-bit)
value representing the first automatically generated value successfully
inserted for an AUTO_INCREMENT column as a result of the most recently
executed INSERT statement. The value of LAST_INSERT_ID() remains
unchanged if no rows are successfully inserted.

With an argument, LAST_INSERT_ID() returns an unsigned integer, or NULL
if the argument is NULL.

For example, after inserting a row that generates an AUTO_INCREMENT
value, you can get the value like this:

mysql&gt; SELECT LAST_INSERT_ID();
        -&gt; 195

The currently executing statement does not affect the value of
LAST_INSERT_ID(). Suppose that you generate an AUTO_INCREMENT value
with one statement, and then refer to LAST_INSERT_ID() in a
multiple-row INSERT statement that inserts rows into a table with its
own AUTO_INCREMENT column. The value of LAST_INSERT_ID() remains stable
in the second statement; its value for the second and later rows is not
affected by the earlier row insertions. (You should be aware that, if
you mix references to LAST_INSERT_ID() and LAST_INSERT_ID(expr), the
effect is undefined.)

If the previous statement returned an error, the value of
LAST_INSERT_ID() is undefined. For transactional tables, if the
statement is rolled back due to an error, the value of LAST_INSERT_ID()
is left undefined. For manual ROLLBACK, the value of LAST_INSERT_ID()
is not restored to that before the transaction; it remains as it was at
the point of the ROLLBACK.

Within the body of a stored routine (procedure or function) or a
trigger, the value of LAST_INSERT_ID() changes the same way as for
statements executed outside the body of these kinds of objects. The
effect of a stored routine or trigger upon the value of
LAST_INSERT_ID() that is seen by following statements depends on the
kind of routine:

o If a stored procedure executes statements that change the value of
  LAST_INSERT_ID(), the changed value is seen by statements that follow
  the procedure call.

o For stored functions and triggers that change the value, the value is
  restored when the function or trigger ends, so statements coming
  after it do not see a changed value.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">281</field>
		<field name="name">ROLES_GRAPHML</field>
		<field name="help_category_id">21</field>
		<field name="description">ROLES_GRAPHML()

Returns a utf8mb3 string containing a GraphML document representing
memory role subgraphs. The ROLE_ADMIN privilege (or the deprecated
SUPER privilege) is required to see content in the &lt;graphml&gt; element.
Otherwise, the result shows only an empty element:

mysql&gt; SELECT ROLES_GRAPHML();
+---------------------------------------------------+
| ROLES_GRAPHML()                                   |
+---------------------------------------------------+
| &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;graphml /&gt; |
+---------------------------------------------------+

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">282</field>
		<field name="name">ROW_COUNT</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
ROW_COUNT()

ROW_COUNT() returns a value as follows:

o DDL statements: 0. This applies to statements such as CREATE TABLE or
  DROP TABLE.

o DML statements other than SELECT: The number of affected rows. This
  applies to statements such as UPDATE, INSERT, or DELETE (as before),
  but now also to statements such as ALTER TABLE and LOAD DATA.

o SELECT: -1 if the statement returns a result set, or the number of
  rows &quot;affected&quot; if it does not. For example, for SELECT * FROM t1,
  ROW_COUNT() returns -1. For SELECT * FROM t1 INTO OUTFILE
  'file_name', ROW_COUNT() returns the number of rows written to the
  file.

o SIGNAL statements: 0.

For UPDATE statements, the affected-rows value by default is the number
of rows actually changed. If you specify the CLIENT_FOUND_ROWS flag to
mysql_real_connect()
(https://dev.mysql.com/doc/c-api/8.0/en/mysql-real-connect.html) when
connecting to mysqld, the affected-rows value is the number of rows
&quot;found&quot;; that is, matched by the WHERE clause.

For REPLACE statements, the affected-rows value is 2 if the new row
replaced an old row, because in this case, one row was inserted after
the duplicate was deleted.

For INSERT ... ON DUPLICATE KEY UPDATE statements, the affected-rows
value per row is 1 if the row is inserted as a new row, 2 if an
existing row is updated, and 0 if an existing row is set to its current
values. If you specify the CLIENT_FOUND_ROWS flag, the affected-rows
value is 1 (not 0) if an existing row is set to its current values.

The ROW_COUNT() value is similar to the value from the
mysql_affected_rows()
(https://dev.mysql.com/doc/c-api/8.0/en/mysql-affected-rows.html) C API
function and the row count that the mysql client displays following
statement execution.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; INSERT INTO t VALUES(1),(2),(3);
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql&gt; SELECT ROW_COUNT();
+-------------+
| ROW_COUNT() |
+-------------+
|           3 |
+-------------+
1 row in set (0.00 sec)

mysql&gt; DELETE FROM t WHERE i IN(1,2);
Query OK, 2 rows affected (0.00 sec)

mysql&gt; SELECT ROW_COUNT();
+-------------+
| ROW_COUNT() |
+-------------+
|           2 |
+-------------+
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">283</field>
		<field name="name">SCHEMA</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
SCHEMA()

This function is a synonym for DATABASE().

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">284</field>
		<field name="name">SESSION_USER</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
SESSION_USER()

SESSION_USER() is a synonym for USER().

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">285</field>
		<field name="name">SYSTEM_USER</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
SYSTEM_USER()

SYSTEM_USER() is a synonym for USER().

*Note*:

The SYSTEM_USER() function is distinct from the SYSTEM_USER privilege.
The former returns the current MySQL account name. The latter
distinguishes the system user and regular user account categories (see
https://dev.mysql.com/doc/refman/8.0/en/account-categories.html).

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">286</field>
		<field name="name">USER</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
USER()

Returns the current MySQL user name and host name as a string in the
utf8mb3 character set.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; SELECT USER();
        -&gt; 'davida@localhost'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">287</field>
		<field name="name">VERSION</field>
		<field name="help_category_id">21</field>
		<field name="description">Syntax:
VERSION()

Returns a string that indicates the MySQL server version. The string
uses the utf8mb3 character set. The value might have a suffix in
addition to the version number. See the description of the version
system variable in
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/information-functions.html

</field>
		<field name="example">mysql&gt; SELECT VERSION();
        -&gt; '8.0.35-standard'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">288</field>
		<field name="name">ST_GEOMCOLLFROMTEXT</field>
		<field name="help_category_id">23</field>
		<field name="description">ST_GeomCollFromText(wkt [, srid [, options]]),
ST_GeometryCollectionFromText(wkt [, srid [, options]]),
ST_GeomCollFromTxt(wkt [, srid [, options]])

Constructs a GeometryCollection value using its WKT representation and
SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html

</field>
		<field name="example">mysql&gt; SET @g = &quot;MULTILINESTRING((10 10, 11 11), (9 9, 10 10))&quot;;
mysql&gt; SELECT ST_AsText(ST_GeomCollFromText(@g));
+--------------------------------------------+
| ST_AsText(ST_GeomCollFromText(@g))         |
+--------------------------------------------+
| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |
+--------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">289</field>
		<field name="name">ST_GEOMFROMTEXT</field>
		<field name="help_category_id">23</field>
		<field name="description">ST_GeomFromText(wkt [, srid [, options]]), ST_GeometryFromText(wkt [,
srid [, options]])

Constructs a geometry value of any type using its WKT representation
and SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">290</field>
		<field name="name">ST_LINEFROMTEXT</field>
		<field name="help_category_id">23</field>
		<field name="description">ST_LineFromText(wkt [, srid [, options]]), ST_LineStringFromText(wkt [,
srid [, options]])

Constructs a LineString value using its WKT representation and SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">291</field>
		<field name="name">ST_MLINEFROMTEXT</field>
		<field name="help_category_id">23</field>
		<field name="description">ST_MLineFromText(wkt [, srid [, options]]),
ST_MultiLineStringFromText(wkt [, srid [, options]])

Constructs a MultiLineString value using its WKT representation and
SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">292</field>
		<field name="name">ST_MPOINTFROMTEXT</field>
		<field name="help_category_id">23</field>
		<field name="description">ST_MPointFromText(wkt [, srid [, options]]), ST_MultiPointFromText(wkt
[, srid [, options]])

Constructs a MultiPoint value using its WKT representation and SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">293</field>
		<field name="name">ST_MPOLYFROMTEXT</field>
		<field name="help_category_id">23</field>
		<field name="description">ST_MPolyFromText(wkt [, srid [, options]]), ST_MultiPolygonFromText(wkt
[, srid [, options]])

Constructs a MultiPolygon value using its WKT representation and SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">294</field>
		<field name="name">ST_POINTFROMTEXT</field>
		<field name="help_category_id">23</field>
		<field name="description">ST_PointFromText(wkt [, srid [, options]])

Constructs a Point value using its WKT representation and SRID.

ST_PointFromText() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">295</field>
		<field name="name">ST_POLYFROMTEXT</field>
		<field name="help_category_id">23</field>
		<field name="description">ST_PolyFromText(wkt [, srid [, options]]), ST_PolygonFromText(wkt [,
srid [, options]])

Constructs a Polygon value using its WKT representation and SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">296</field>
		<field name="name">ST_GEOMCOLLFROMWKB</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_GeomCollFromWKB(wkb [, srid [, options]]),
ST_GeometryCollectionFromWKB(wkb [, srid [, options]])

Constructs a GeometryCollection value using its WKB representation and
SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">297</field>
		<field name="name">ST_GEOMFROMWKB</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_GeomFromWKB(wkb [, srid [, options]]), ST_GeometryFromWKB(wkb [,
srid [, options]])

Constructs a geometry value of any type using its WKB representation
and SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">298</field>
		<field name="name">ST_LINEFROMWKB</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_LineFromWKB(wkb [, srid [, options]]), ST_LineStringFromWKB(wkb [,
srid [, options]])

Constructs a LineString value using its WKB representation and SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">299</field>
		<field name="name">ST_MLINEFROMWKB</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_MLineFromWKB(wkb [, srid [, options]]),
ST_MultiLineStringFromWKB(wkb [, srid [, options]])

Constructs a MultiLineString value using its WKB representation and
SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">300</field>
		<field name="name">ST_MPOINTFROMWKB</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_MPointFromWKB(wkb [, srid [, options]]), ST_MultiPointFromWKB(wkb [,
srid [, options]])

Constructs a MultiPoint value using its WKB representation and SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">301</field>
		<field name="name">ST_MPOLYFROMWKB</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_MPolyFromWKB(wkb [, srid [, options]]), ST_MultiPolygonFromWKB(wkb
[, srid [, options]])

Constructs a MultiPolygon value using its WKB representation and SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">302</field>
		<field name="name">ST_POINTFROMWKB</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_PointFromWKB(wkb [, srid [, options]])

Constructs a Point value using its WKB representation and SRID.

ST_PointFromWKB() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">303</field>
		<field name="name">ST_POLYFROMWKB</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_PolyFromWKB(wkb [, srid [, options]]), ST_PolygonFromWKB(wkb [, srid
[, options]])

Constructs a Polygon value using its WKB representation and SRID.

These functions handle their arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">304</field>
		<field name="name">GEOMCOLLECTION</field>
		<field name="help_category_id">25</field>
		<field name="description">GeomCollection(g [, g] ...)

Constructs a GeomCollection value from the geometry arguments.

GeomCollection() returns all the proper geometries contained in the
arguments even if a nonsupported geometry is present.

GeomCollection() with no arguments is permitted as a way to create an
empty geometry. Also, functions such as ST_GeomFromText() that accept
WKT geometry collection arguments understand both OpenGIS
'GEOMETRYCOLLECTION EMPTY' standard syntax and MySQL
'GEOMETRYCOLLECTION()' nonstandard syntax.

GeomCollection() and GeometryCollection() are synonymous, with
GeomCollection() the preferred function.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">305</field>
		<field name="name">GEOMETRYCOLLECTION</field>
		<field name="help_category_id">25</field>
		<field name="description">GeometryCollection(g [, g] ...)

Constructs a GeomCollection value from the geometry arguments.

GeometryCollection() returns all the proper geometries contained in the
arguments even if a nonsupported geometry is present.

GeometryCollection() with no arguments is permitted as a way to create
an empty geometry. Also, functions such as ST_GeomFromText() that
accept WKT geometry collection arguments understand both OpenGIS
'GEOMETRYCOLLECTION EMPTY' standard syntax and MySQL
'GEOMETRYCOLLECTION()' nonstandard syntax.

GeomCollection() and GeometryCollection() are synonymous, with
GeomCollection() the preferred function.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">306</field>
		<field name="name">LINESTRING</field>
		<field name="help_category_id">25</field>
		<field name="description">LineString(pt [, pt] ...)

Constructs a LineString value from a number of Point or WKB Point
arguments. If the number of arguments is less than two, the return
value is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">307</field>
		<field name="name">MULTILINESTRING</field>
		<field name="help_category_id">25</field>
		<field name="description">MultiLineString(ls [, ls] ...)

Constructs a MultiLineString value using LineString or WKB LineString
arguments.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">308</field>
		<field name="name">MULTIPOINT</field>
		<field name="help_category_id">25</field>
		<field name="description">MultiPoint(pt [, pt2] ...)

Constructs a MultiPoint value using Point or WKB Point arguments.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">309</field>
		<field name="name">MULTIPOLYGON</field>
		<field name="help_category_id">25</field>
		<field name="description">MultiPolygon(poly [, poly] ...)

Constructs a MultiPolygon value from a set of Polygon or WKB Polygon
arguments.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">310</field>
		<field name="name">POINT</field>
		<field name="help_category_id">25</field>
		<field name="description">Point(x, y)

Constructs a Point using its coordinates.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">311</field>
		<field name="name">POLYGON</field>
		<field name="help_category_id">25</field>
		<field name="description">Polygon(ls [, ls] ...)

Constructs a Polygon value from a number of LineString or WKB
LineString arguments. If any argument does not represent a LinearRing
(that is, not a closed and simple LineString), the return value is
NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">312</field>
		<field name="name">ST_ASBINARY</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_AsBinary(g [, options]), ST_AsWKB(g [, options])

Converts a value in internal geometry format to its WKB representation
and returns the binary result.

The function return value has geographic coordinates (latitude,
longitude) in the order specified by the spatial reference system that
applies to the geometry argument. An optional options argument may be
given to override the default axis order.

ST_AsBinary() and ST_AsWKB() handle their arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-format-conversion-functions.html

</field>
		<field name="example">mysql&gt; SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)', 4326);
mysql&gt; SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g)));
+-----------------------------------------+
| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g))) |
+-----------------------------------------+
| LINESTRING(5 0,10 5,15 10)              |
+-----------------------------------------+
mysql&gt; SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat')));
+----------------------------------------------------------------+
| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat'))) |
+----------------------------------------------------------------+
| LINESTRING(0 5,5 10,10 15)                                     |
+----------------------------------------------------------------+
mysql&gt; SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long')));
+----------------------------------------------------------------+
| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long'))) |
+----------------------------------------------------------------+
| LINESTRING(5 0,10 5,15 10)                                     |
+----------------------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-format-conversion-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">313</field>
		<field name="name">ST_ASTEXT</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_AsText(g [, options]), ST_AsWKT(g [, options])

Converts a value in internal geometry format to its WKT representation
and returns the string result.

The function return value has geographic coordinates (latitude,
longitude) in the order specified by the spatial reference system that
applies to the geometry argument. An optional options argument may be
given to override the default axis order.

ST_AsText() and ST_AsWKT() handle their arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-format-conversion-functions.html

</field>
		<field name="example">mysql&gt; SET @g = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_AsText(ST_GeomFromText(@g));
+--------------------------------+
| ST_AsText(ST_GeomFromText(@g)) |
+--------------------------------+
| LINESTRING(1 1,2 2,3 3)        |
+--------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-format-conversion-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">314</field>
		<field name="name">ST_SWAPXY</field>
		<field name="help_category_id">24</field>
		<field name="description">ST_SwapXY(g)

Accepts an argument in internal geometry format, swaps the X and Y
values of each coordinate pair within the geometry, and returns the
result.

ST_SwapXY() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-format-conversion-functions.html

</field>
		<field name="example">mysql&gt; SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)');
mysql&gt; SELECT ST_AsText(@g);
+----------------------------+
| ST_AsText(@g)              |
+----------------------------+
| LINESTRING(0 5,5 10,10 15) |
+----------------------------+
mysql&gt; SELECT ST_AsText(ST_SwapXY(@g));
+----------------------------+
| ST_AsText(ST_SwapXY(@g))   |
+----------------------------+
| LINESTRING(5 0,10 5,15 10) |
+----------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-format-conversion-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">315</field>
		<field name="name">ST_DIMENSION</field>
		<field name="help_category_id">26</field>
		<field name="description">ST_Dimension(g)

Returns the inherent dimension of the geometry value g. The dimension
can be −1, 0, 1, or 2. The meaning of these values is given in
https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html.

ST_Dimension() handles its arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html

</field>
		<field name="example">mysql&gt; SELECT ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)'));
+------------------------------------------------------+
| ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)')) |
+------------------------------------------------------+
|                                                    1 |
+------------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">316</field>
		<field name="name">ST_ENVELOPE</field>
		<field name="help_category_id">26</field>
		<field name="description">ST_Envelope(g)

Returns the minimum bounding rectangle (MBR) for the geometry value g.
The result is returned as a Polygon value that is defined by the corner
points of the bounding box:

POLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))

mysql&gt; SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)')));
+----------------------------------------------------------------+
| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)'))) |
+----------------------------------------------------------------+
| POLYGON((1 1,2 1,2 2,1 2,1 1))                                 |
+----------------------------------------------------------------+

If the argument is a point or a vertical or horizontal line segment,
ST_Envelope() returns the point or the line segment as its MBR rather
than returning an invalid polygon:

mysql&gt; SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)')));
+----------------------------------------------------------------+
| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)'))) |
+----------------------------------------------------------------+
| LINESTRING(1 1,1 2)                                            |
+----------------------------------------------------------------+

ST_Envelope() handles its arguments as described in the introduction to
this section, with this exception:

o If the geometry has an SRID value for a geographic spatial reference
  system (SRS), an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">317</field>
		<field name="name">ST_GEOMETRYTYPE</field>
		<field name="help_category_id">26</field>
		<field name="description">ST_GeometryType(g)

Returns a binary string indicating the name of the geometry type of
which the geometry instance g is a member. The name corresponds to one
of the instantiable Geometry subclasses.

ST_GeometryType() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html

</field>
		<field name="example">mysql&gt; SELECT ST_GeometryType(ST_GeomFromText('POINT(1 1)'));
+------------------------------------------------+
| ST_GeometryType(ST_GeomFromText('POINT(1 1)')) |
+------------------------------------------------+
| POINT                                          |
+------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">318</field>
		<field name="name">ST_ISEMPTY</field>
		<field name="help_category_id">26</field>
		<field name="description">ST_IsEmpty(g)

This function is a placeholder that returns 1 for an empty geometry
collection value or 0 otherwise.

The only valid empty geometry is represented in the form of an empty
geometry collection value. MySQL does not support GIS EMPTY values such
as POINT EMPTY.

ST_IsEmpty() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">319</field>
		<field name="name">ST_ISSIMPLE</field>
		<field name="help_category_id">26</field>
		<field name="description">ST_IsSimple(g)

Returns 1 if the geometry value g is simple according to the ISO SQL/MM
Part 3: Spatial standard. ST_IsSimple() returns 0 if the argument is
not simple.

The descriptions of the instantiable geometric classes given under
https://dev.mysql.com/doc/refman/8.0/en/opengis-geometry-model.html
include the specific conditions that cause class instances to be
classified as not simple.

ST_IsSimple() handles its arguments as described in the introduction to
this section, with this exception:

o If the geometry has a geographic SRS with a longitude or latitude
  that is out of range, an error occurs:

  o If a longitude value is not in the range (−180, 180], an
    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_longitude_out_of_range) error
    occurs (ER_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_longitude_out_of_range) prior to MySQL 8.0.12).

  o If a latitude value is not in the range [−90, 90], an
    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_latitude_out_of_range) error occurs
    (ER_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_latitude_out_of_range) prior to MySQL 8.0.12).

  Ranges shown are in degrees. The exact range limits deviate slightly
  due to floating-point arithmetic.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">320</field>
		<field name="name">ST_SRID</field>
		<field name="help_category_id">26</field>
		<field name="description">ST_SRID(g [, srid])

With a single argument representing a valid geometry object g,
ST_SRID() returns an integer indicating the ID of the spatial reference
system (SRS) associated with g.

With the optional second argument representing a valid SRID value,
ST_SRID() returns an object with the same type as its first argument
with an SRID value equal to the second argument. This only sets the
SRID value of the object; it does not perform any transformation of
coordinate values.

ST_SRID() handles its arguments as described in the introduction to
this section, with this exception:

o For the single-argument syntax, ST_SRID() returns the geometry SRID
  even if it refers to an undefined SRS. An ER_SRS_NOT_FOUND
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_srs_not_found) error does not occur.

ST_SRID(g, target_srid) and ST_Transform(g, target_srid) differ as
follows:

o ST_SRID() changes the geometry SRID value without transforming its
  coordinates.

o ST_Transform() transforms the geometry coordinates in addition to
  changing its SRID value.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html

</field>
		<field name="example">mysql&gt; SET @g = ST_GeomFromText('LineString(1 1,2 2)', 0);
mysql&gt; SELECT ST_SRID(@g);
+-------------+
| ST_SRID(@g) |
+-------------+
|           0 |
+-------------+
mysql&gt; SET @g = ST_SRID(@g, 4326);
mysql&gt; SELECT ST_SRID(@g);
+-------------+
| ST_SRID(@g) |
+-------------+
|        4326 |
+-------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">321</field>
		<field name="name">ST_LATITUDE</field>
		<field name="help_category_id">27</field>
		<field name="description">ST_Latitude(p [, new_latitude_val])

With a single argument representing a valid Point object p that has a
geographic spatial reference system (SRS), ST_Latitude() returns the
latitude value of p as a double-precision number.

With the optional second argument representing a valid latitude value,
ST_Latitude() returns a Point object like the first argument with its
latitude equal to the second argument.

ST_Latitude() handles its arguments as described in the introduction to
this section, with the addition that if the Point object is valid but
does not have a geographic SRS, an ER_SRS_NOT_GEOGRAPHIC
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_srs_not_geographic) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html

</field>
		<field name="example">mysql&gt; SET @pt = ST_GeomFromText('POINT(45 90)', 4326);
mysql&gt; SELECT ST_Latitude(@pt);
+------------------+
| ST_Latitude(@pt) |
+------------------+
|               45 |
+------------------+
mysql&gt; SELECT ST_AsText(ST_Latitude(@pt, 10));
+---------------------------------+
| ST_AsText(ST_Latitude(@pt, 10)) |
+---------------------------------+
| POINT(10 90)                    |
+---------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">322</field>
		<field name="name">ST_LONGITUDE</field>
		<field name="help_category_id">27</field>
		<field name="description">ST_Longitude(p [, new_longitude_val])

With a single argument representing a valid Point object p that has a
geographic spatial reference system (SRS), ST_Longitude() returns the
longitude value of p as a double-precision number.

With the optional second argument representing a valid longitude value,
ST_Longitude() returns a Point object like the first argument with its
longitude equal to the second argument.

ST_Longitude() handles its arguments as described in the introduction
to this section, with the addition that if the Point object is valid
but does not have a geographic SRS, an ER_SRS_NOT_GEOGRAPHIC
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_srs_not_geographic) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html

</field>
		<field name="example">mysql&gt; SET @pt = ST_GeomFromText('POINT(45 90)', 4326);
mysql&gt; SELECT ST_Longitude(@pt);
+-------------------+
| ST_Longitude(@pt) |
+-------------------+
|                90 |
+-------------------+
mysql&gt; SELECT ST_AsText(ST_Longitude(@pt, 10));
+----------------------------------+
| ST_AsText(ST_Longitude(@pt, 10)) |
+----------------------------------+
| POINT(45 10)                     |
+----------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">323</field>
		<field name="name">ST_X</field>
		<field name="help_category_id">27</field>
		<field name="description">ST_X(p [, new_x_val])

With a single argument representing a valid Point object p, ST_X()
returns the X-coordinate value of p as a double-precision number. As of
MySQL 8.0.12, the X coordinate is considered to refer to the axis that
appears first in the Point spatial reference system (SRS) definition.

With the optional second argument, ST_X() returns a Point object like
the first argument with its X coordinate equal to the second argument.
As of MySQL 8.0.12, if the Point object has a geographic SRS, the
second argument must be in the proper range for longitude or latitude
values.

ST_X() handles its arguments as described in the introduction to this
section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html

</field>
		<field name="example">mysql&gt; SELECT ST_X(Point(56.7, 53.34));
+--------------------------+
| ST_X(Point(56.7, 53.34)) |
+--------------------------+
|                     56.7 |
+--------------------------+
mysql&gt; SELECT ST_AsText(ST_X(Point(56.7, 53.34), 10.5));
+-------------------------------------------+
| ST_AsText(ST_X(Point(56.7, 53.34), 10.5)) |
+-------------------------------------------+
| POINT(10.5 53.34)                         |
+-------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">324</field>
		<field name="name">ST_Y</field>
		<field name="help_category_id">27</field>
		<field name="description">ST_Y(p [, new_y_val])

With a single argument representing a valid Point object p, ST_Y()
returns the Y-coordinate value of p as a double-precision number. As of
MySQL 8.0.12, the Y coordinate is considered to refer to the axis that
appears second in the Point spatial reference system (SRS) definition.

With the optional second argument, ST_Y() returns a Point object like
the first argument with its Y coordinate equal to the second argument.
As of MySQL 8.0.12, if the Point object has a geographic SRS, the
second argument must be in the proper range for longitude or latitude
values.

ST_Y() handles its arguments as described in the introduction to this
section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html

</field>
		<field name="example">mysql&gt; SELECT ST_Y(Point(56.7, 53.34));
+--------------------------+
| ST_Y(Point(56.7, 53.34)) |
+--------------------------+
|                    53.34 |
+--------------------------+
mysql&gt; SELECT ST_AsText(ST_Y(Point(56.7, 53.34), 10.5));
+-------------------------------------------+
| ST_AsText(ST_Y(Point(56.7, 53.34), 10.5)) |
+-------------------------------------------+
| POINT(56.7 10.5)                          |
+-------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">325</field>
		<field name="name">ST_ENDPOINT</field>
		<field name="help_category_id">28</field>
		<field name="description">ST_EndPoint(ls)

Returns the Point that is the endpoint of the LineString value ls.

ST_EndPoint() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html

</field>
		<field name="example">mysql&gt; SET @ls = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));
+----------------------------------------------+
| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |
+----------------------------------------------+
| POINT(3 3)                                   |
+----------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">326</field>
		<field name="name">ST_ISCLOSED</field>
		<field name="help_category_id">28</field>
		<field name="description">ST_IsClosed(ls)

For a LineString value ls, ST_IsClosed() returns 1 if ls is closed
(that is, its ST_StartPoint() and ST_EndPoint() values are the same).

For a MultiLineString value ls, ST_IsClosed() returns 1 if ls is closed
(that is, the ST_StartPoint() and ST_EndPoint() values are the same for
each LineString in ls).

ST_IsClosed() returns 0 if ls is not closed, and NULL if ls is NULL.

ST_IsClosed() handles its arguments as described in the introduction to
this section, with this exception:

o If the geometry has an SRID value for a geographic spatial reference
  system (SRS), an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html

</field>
		<field name="example">mysql&gt; SET @ls1 = 'LineString(1 1,2 2,3 3,2 2)';
mysql&gt; SET @ls2 = 'LineString(1 1,2 2,3 3,1 1)';

mysql&gt; SELECT ST_IsClosed(ST_GeomFromText(@ls1));
+------------------------------------+
| ST_IsClosed(ST_GeomFromText(@ls1)) |
+------------------------------------+
|                                  0 |
+------------------------------------+

mysql&gt; SELECT ST_IsClosed(ST_GeomFromText(@ls2));
+------------------------------------+
| ST_IsClosed(ST_GeomFromText(@ls2)) |
+------------------------------------+
|                                  1 |
+------------------------------------+

mysql&gt; SET @ls3 = 'MultiLineString((1 1,2 2,3 3),(4 4,5 5))';

mysql&gt; SELECT ST_IsClosed(ST_GeomFromText(@ls3));
+------------------------------------+
| ST_IsClosed(ST_GeomFromText(@ls3)) |
+------------------------------------+
|                                  0 |
+------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">327</field>
		<field name="name">ST_LENGTH</field>
		<field name="help_category_id">28</field>
		<field name="description">ST_Length(ls [, unit])

Returns a double-precision number indicating the length of the
LineString or MultiLineString value ls in its associated spatial
reference system. The length of a MultiLineString value is equal to the
sum of the lengths of its elements.

ST_Length() computes a result as follows:

o If the geometry is a valid LineString in a Cartesian SRS, the return
  value is the Cartesian length of the geometry.

o If the geometry is a valid MultiLineString in a Cartesian SRS, the
  return value is the sum of the Cartesian lengths of its elements.

o If the geometry is a valid LineString in a geographic SRS, the return
  value is the geodetic length of the geometry in that SRS, in meters.

o If the geometry is a valid MultiLineString in a geographic SRS, the
  return value is the sum of the geodetic lengths of its elements in
  that SRS, in meters.

ST_Length() handles its arguments as described in the introduction to
this section, with these exceptions:

o If the geometry is not a LineString or MultiLineString, the return
  value is NULL.

o If the geometry is geometrically invalid, either the result is an
  undefined length (that is, it can be any number), or an error occurs.

o If the length computation result is +inf, an ER_DATA_OUT_OF_RANGE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_data_out_of_range) error occurs.

o If the geometry has a geographic SRS with a longitude or latitude
  that is out of range, an error occurs:

  o If a longitude value is not in the range (−180, 180], an
    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_longitude_out_of_range) error
    occurs (ER_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_longitude_out_of_range) prior to MySQL 8.0.12).

  o If a latitude value is not in the range [−90, 90], an
    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_latitude_out_of_range) error occurs
    (ER_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_latitude_out_of_range) prior to MySQL 8.0.12).

  Ranges shown are in degrees. The exact range limits deviate slightly
  due to floating-point arithmetic.

As of MySQL 8.0.16, ST_Length() permits an optional unit argument that
specifies the linear unit for the returned length value. These rules
apply:

o If a unit is specified but not supported by MySQL, an
  ER_UNIT_NOT_FOUND
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_unit_not_found) error occurs.

o If a supported linear unit is specified and the SRID is 0, an
  ER_GEOMETRY_IN_UNKNOWN_LENGTH_UNIT
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_geometry_in_unknown_length_unit) error occurs.

o If a supported linear unit is specified and the SRID is not 0, the
  result is in that unit.

o If a unit is not specified, the result is in the unit of the SRS of
  the geometries, whether Cartesian or geographic. Currently, all MySQL
  SRSs are expressed in meters.

A unit is supported if it is found in the INFORMATION_SCHEMA
ST_UNITS_OF_MEASURE table. See
https://dev.mysql.com/doc/refman/8.0/en/information-schema-st-units-of-
measure-table.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html

</field>
		<field name="example">mysql&gt; SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)');
mysql&gt; SELECT ST_Length(@ls);
+--------------------+
| ST_Length(@ls)     |
+--------------------+
| 2.8284271247461903 |
+--------------------+

mysql&gt; SET @mls = ST_GeomFromText('MultiLineString((1 1,2 2,3 3),(4 4,5 5))');
mysql&gt; SELECT ST_Length(@mls);
+-------------------+
| ST_Length(@mls)   |
+-------------------+
| 4.242640687119286 |
+-------------------+

mysql&gt; SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)', 4326);
mysql&gt; SELECT ST_Length(@ls);
+-------------------+
| ST_Length(@ls)    |
+-------------------+
| 313701.9623204328 |
+-------------------+
mysql&gt; SELECT ST_Length(@ls, 'metre');
+-------------------------+
| ST_Length(@ls, 'metre') |
+-------------------------+
|       313701.9623204328 |
+-------------------------+
mysql&gt; SELECT ST_Length(@ls, 'foot');
+------------------------+
| ST_Length(@ls, 'foot') |
+------------------------+
|     1029205.9131247795 |
+------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">328</field>
		<field name="name">ST_NUMPOINTS</field>
		<field name="help_category_id">28</field>
		<field name="description">ST_NumPoints(ls)

Returns the number of Point objects in the LineString value ls.

ST_NumPoints() handles its arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html

</field>
		<field name="example">mysql&gt; SET @ls = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_NumPoints(ST_GeomFromText(@ls));
+------------------------------------+
| ST_NumPoints(ST_GeomFromText(@ls)) |
+------------------------------------+
|                                  3 |
+------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">329</field>
		<field name="name">ST_POINTN</field>
		<field name="help_category_id">28</field>
		<field name="description">ST_PointN(ls, N)

Returns the N-th Point in the Linestring value ls. Points are numbered
beginning with 1.

ST_PointN() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html

</field>
		<field name="example">mysql&gt; SET @ls = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));
+----------------------------------------------+
| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |
+----------------------------------------------+
| POINT(2 2)                                   |
+----------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">330</field>
		<field name="name">ST_STARTPOINT</field>
		<field name="help_category_id">28</field>
		<field name="description">ST_StartPoint(ls)

Returns the Point that is the start point of the LineString value ls.

ST_StartPoint() handles its arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html

</field>
		<field name="example">mysql&gt; SET @ls = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));
+------------------------------------------------+
| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |
+------------------------------------------------+
| POINT(1 1)                                     |
+------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">331</field>
		<field name="name">ST_AREA</field>
		<field name="help_category_id">29</field>
		<field name="description">ST_Area({poly|mpoly})

Returns a double-precision number indicating the area of the Polygon or
MultiPolygon argument, as measured in its spatial reference system.

As of MySQL 8.0.13, ST_Area() handles its arguments as described in the
introduction to this section, with these exceptions:

o If the geometry is geometrically invalid, either the result is an
  undefined area (that is, it can be any number), or an error occurs.

o If the geometry is valid but is not a Polygon or MultiPolygon object,
  an ER_UNEXPECTED_GEOMETRY_TYPE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_unexpected_geometry_type) error occurs.

o If the geometry is a valid Polygon in a Cartesian SRS, the result is
  the Cartesian area of the polygon.

o If the geometry is a valid MultiPolygon in a Cartesian SRS, the
  result is the sum of the Cartesian area of the polygons.

o If the geometry is a valid Polygon in a geographic SRS, the result is
  the geodetic area of the polygon in that SRS, in square meters.

o If the geometry is a valid MultiPolygon in a geographic SRS, the
  result is the sum of geodetic area of the polygons in that SRS, in
  square meters.

o If an area computation results in +inf, an ER_DATA_OUT_OF_RANGE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_data_out_of_range) error occurs.

o If the geometry has a geographic SRS with a longitude or latitude
  that is out of range, an error occurs:

  o If a longitude value is not in the range (−180, 180], an
    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_longitude_out_of_range) error
    occurs (ER_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_longitude_out_of_range) prior to MySQL 8.0.12).

  o If a latitude value is not in the range [−90, 90], an
    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_latitude_out_of_range) error occurs
    (ER_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_latitude_out_of_range) prior to MySQL 8.0.12).

  Ranges shown are in degrees. The exact range limits deviate slightly
  due to floating-point arithmetic.

Prior to MySQL 8.0.13, ST_Area() handles its arguments as described in
the introduction to this section, with these exceptions:

o For arguments of dimension 0 or 1, the result is 0.

o If a geometry is empty, the return value is 0 rather than NULL.

o For a geometry collection, the result is the sum of the area values
  of all components. If the geometry collection is empty, its area is
  returned as 0.

o If the geometry has an SRID value for a geographic spatial reference
  system (SRS), an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html

</field>
		<field name="example">mysql&gt; SET @poly =
       'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';
mysql&gt; SELECT ST_Area(ST_GeomFromText(@poly));
+---------------------------------+
| ST_Area(ST_GeomFromText(@poly)) |
+---------------------------------+
|                               4 |
+---------------------------------+

mysql&gt; SET @mpoly =
       'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))';
mysql&gt; SELECT ST_Area(ST_GeomFromText(@mpoly));
+----------------------------------+
| ST_Area(ST_GeomFromText(@mpoly)) |
+----------------------------------+
|                                8 |
+----------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">332</field>
		<field name="name">ST_CENTROID</field>
		<field name="help_category_id">29</field>
		<field name="description">ST_Centroid({poly|mpoly})

Returns the mathematical centroid for the Polygon or MultiPolygon
argument as a Point. The result is not guaranteed to be on the
MultiPolygon.

This function processes geometry collections by computing the centroid
point for components of highest dimension in the collection. Such
components are extracted and made into a single MultiPolygon,
MultiLineString, or MultiPoint for centroid computation.

ST_Centroid() handles its arguments as described in the introduction to
this section, with these exceptions:

o The return value is NULL for the additional condition that the
  argument is an empty geometry collection.

o If the geometry has an SRID value for a geographic spatial reference
  system (SRS), an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html

</field>
		<field name="example">mysql&gt; SET @poly =
       ST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7,5 5))');
mysql&gt; SELECT ST_GeometryType(@poly),ST_AsText(ST_Centroid(@poly));
+------------------------+--------------------------------------------+
| ST_GeometryType(@poly) | ST_AsText(ST_Centroid(@poly))              |
+------------------------+--------------------------------------------+
| POLYGON                | POINT(4.958333333333333 4.958333333333333) |
+------------------------+--------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">333</field>
		<field name="name">ST_EXTERIORRING</field>
		<field name="help_category_id">29</field>
		<field name="description">ST_ExteriorRing(poly)

Returns the exterior ring of the Polygon value poly as a LineString.

ST_ExteriorRing() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html

</field>
		<field name="example">mysql&gt; SET @poly =
       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';
mysql&gt; SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));
+----------------------------------------------------+
| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |
+----------------------------------------------------+
| LINESTRING(0 0,0 3,3 3,3 0,0 0)                    |
+----------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">334</field>
		<field name="name">ST_INTERIORRINGN</field>
		<field name="help_category_id">29</field>
		<field name="description">ST_InteriorRingN(poly, N)

Returns the N-th interior ring for the Polygon value poly as a
LineString. Rings are numbered beginning with 1.

ST_InteriorRingN() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html

</field>
		<field name="example">mysql&gt; SET @poly =
       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';
mysql&gt; SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));
+-------------------------------------------------------+
| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |
+-------------------------------------------------------+
| LINESTRING(1 1,1 2,2 2,2 1,1 1)                       |
+-------------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">335</field>
		<field name="name">ST_NUMINTERIORRINGS</field>
		<field name="help_category_id">29</field>
		<field name="description">ST_NumInteriorRing(poly), ST_NumInteriorRings(poly)

Returns the number of interior rings in the Polygon value poly.

ST_NumInteriorRing() and ST_NuminteriorRings() handle their arguments
as described in the introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html

</field>
		<field name="example">mysql&gt; SET @poly =
       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';
mysql&gt; SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));
+---------------------------------------------+
| ST_NumInteriorRings(ST_GeomFromText(@poly)) |
+---------------------------------------------+
|                                           1 |
+---------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">336</field>
		<field name="name">ST_GEOMETRYN</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_GeometryN(gc, N)

Returns the N-th geometry in the GeometryCollection value gc.
Geometries are numbered beginning with 1.

ST_GeometryN() handles its arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-geometrycollection-property-functions.html

</field>
		<field name="example">mysql&gt; SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';
mysql&gt; SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));
+-------------------------------------------------+
| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |
+-------------------------------------------------+
| POINT(1 1)                                      |
+-------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-geometrycollection-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">337</field>
		<field name="name">ST_NUMGEOMETRIES</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_NumGeometries(gc)

Returns the number of geometries in the GeometryCollection value gc.

ST_NumGeometries() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/gis-geometrycollection-property-functions.html

</field>
		<field name="example">mysql&gt; SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';
mysql&gt; SELECT ST_NumGeometries(ST_GeomFromText(@gc));
+----------------------------------------+
| ST_NumGeometries(ST_GeomFromText(@gc)) |
+----------------------------------------+
|                                      2 |
+----------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gis-geometrycollection-property-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">338</field>
		<field name="name">ST_BUFFER</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_Buffer(g, d [, strategy1 [, strategy2 [, strategy3]]])

Returns a geometry that represents all points whose distance from the
geometry value g is less than or equal to a distance of d. The result
is in the same SRS as the geometry argument.

If the geometry argument is empty, ST_Buffer() returns an empty
geometry.

If the distance is 0, ST_Buffer() returns the geometry argument
unchanged:

mysql&gt; SET @pt = ST_GeomFromText('POINT(0 0)');
mysql&gt; SELECT ST_AsText(ST_Buffer(@pt, 0));
+------------------------------+
| ST_AsText(ST_Buffer(@pt, 0)) |
+------------------------------+
| POINT(0 0)                   |
+------------------------------+

If the geometry argument is in a Cartesian SRS:

o ST_Buffer() supports negative distances for Polygon and MultiPolygon
  values, and for geometry collections containing Polygon or
  MultiPolygon values.

o If the result is reduced so much that it disappears, the result is an
  empty geometry.

o An ER_WRONG_ARGUMENTS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_wrong_arguments) error occurs for ST_Buffer() with a
  negative distance for Point, MultiPoint, LineString, and
  MultiLineString values, and for geometry collections not containing
  any Polygon or MultiPolygon values.

If the geometry argument is in a geographic SRS:

o Prior to MySQL 8.0.26, an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs.

o As of MySQL 8.0.26, Point geometries in a geographic SRS are
  permitted. For non-Point geometries, an
  ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error still
  occurs.

For MySQL versions that permit geographic Point geometries:

o If the distance is not negative and no strategies are specified, the
  function returns the geographic buffer of the Point in its SRS. The
  distance argument must be in the SRS distance unit (currently always
  meters).

o If the distance is negative or any strategy (except NULL) is
  specified, an ER_WRONG_ARGUMENTS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_wrong_arguments) error occurs.

ST_Buffer() permits up to three optional strategy arguments following
the distance argument. Strategies influence buffer computation. These
arguments are byte string values produced by the ST_Buffer_Strategy()
function, to be used for point, join, and end strategies:

o Point strategies apply to Point and MultiPoint geometries. If no
  point strategy is specified, the default is
  ST_Buffer_Strategy('point_circle', 32).

o Join strategies apply to LineString, MultiLineString, Polygon, and
  MultiPolygon geometries. If no join strategy is specified, the
  default is ST_Buffer_Strategy('join_round', 32).

o End strategies apply to LineString and MultiLineString geometries. If
  no end strategy is specified, the default is
  ST_Buffer_Strategy('end_round', 32).

Up to one strategy of each type may be specified, and they may be given
in any order.

If the buffer strategies are invalid, an ER_WRONG_ARGUMENTS
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_wrong_arguments) error occurs. Strategies are invalid
under any of these circumstances:

o Multiple strategies of a given type (point, join, or end) are
  specified.

o A value that is not a strategy (such as an arbitrary binary string or
  a number) is passed as a strategy.

o A Point strategy is passed and the geometry contains no Point or
  MultiPoint values.

o An end or join strategy is passed and the geometry contains no
  LineString, Polygon, MultiLinestring or MultiPolygon values.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example">mysql&gt; SET @pt = ST_GeomFromText('POINT(0 0)');
mysql&gt; SET @pt_strategy = ST_Buffer_Strategy('point_square');
mysql&gt; SELECT ST_AsText(ST_Buffer(@pt, 2, @pt_strategy));
+--------------------------------------------+
| ST_AsText(ST_Buffer(@pt, 2, @pt_strategy)) |
+--------------------------------------------+
| POLYGON((-2 -2,2 -2,2 2,-2 2,-2 -2))       |
+--------------------------------------------+

mysql&gt; SET @ls = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');
mysql&gt; SET @end_strategy = ST_Buffer_Strategy('end_flat');
mysql&gt; SET @join_strategy = ST_Buffer_Strategy('join_round', 10);
mysql&gt; SELECT ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))
+---------------------------------------------------------------+
| ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))   |
+---------------------------------------------------------------+
| POLYGON((5 5,5 10,0 10,-3.5355339059327373 8.535533905932738, |
| -5 5,-5 0,0 0,5 0,5 5))                                       |
+---------------------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">339</field>
		<field name="name">ST_BUFFER_STRATEGY</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_Buffer_Strategy(strategy [, points_per_circle])

This function returns a strategy byte string for use with ST_Buffer()
to influence buffer computation.

Information about strategies is available at Boost.org
(http://www.boost.org).

The first argument must be a string indicating a strategy option:

o For point strategies, permitted values are 'point_circle' and
  'point_square'.

o For join strategies, permitted values are 'join_round' and
  'join_miter'.

o For end strategies, permitted values are 'end_round' and 'end_flat'.

If the first argument is 'point_circle', 'join_round', 'join_miter', or
'end_round', the points_per_circle argument must be given as a positive
numeric value. The maximum points_per_circle value is the value of the
max_points_in_geometry system variable.

For examples, see the description of ST_Buffer().

ST_Buffer_Strategy() handles its arguments as described in the
introduction to this section, with these exceptions:

o If any argument is invalid, an ER_WRONG_ARGUMENTS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_wrong_arguments) error occurs.

o If the first argument is 'point_square' or 'end_flat', the
  points_per_circle argument must not be given or an ER_WRONG_ARGUMENTS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_wrong_arguments) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">340</field>
		<field name="name">ST_CONVEXHULL</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_ConvexHull(g)

Returns a geometry that represents the convex hull of the geometry
value g.

This function computes a geometry's convex hull by first checking
whether its vertex points are colinear. The function returns a linear
hull if so, a polygon hull otherwise. This function processes geometry
collections by extracting all vertex points of all components of the
collection, creating a MultiPoint value from them, and computing its
convex hull.

ST_ConvexHull() handles its arguments as described in the introduction
to this section, with this exception:

o The return value is NULL for the additional condition that the
  argument is an empty geometry collection.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example">mysql&gt; SET @g = 'MULTIPOINT(5 0,25 0,15 10,15 25)';
mysql&gt; SELECT ST_AsText(ST_ConvexHull(ST_GeomFromText(@g)));
+-----------------------------------------------+
| ST_AsText(ST_ConvexHull(ST_GeomFromText(@g))) |
+-----------------------------------------------+
| POLYGON((5 0,25 0,15 25,5 0))                 |
+-----------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">341</field>
		<field name="name">ST_DIFFERENCE</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_Difference(g1, g2)

Returns a geometry that represents the point set difference of the
geometry values g1 and g2. The result is in the same SRS as the
geometry arguments.

As of MySQL 8.0.26, ST_Difference() permits arguments in either a
Cartesian or a geographic SRS. Prior to MySQL 8.0.26, ST_Difference()
permits arguments in a Cartesian SRS only; for arguments in a
geographic SRS, an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_not_implemented_for_geographic_srs) error occurs.

ST_Difference() handles its arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example">mysql&gt; SET @g1 = Point(1,1), @g2 = Point(2,2);
mysql&gt; SELECT ST_AsText(ST_Difference(@g1, @g2));
+------------------------------------+
| ST_AsText(ST_Difference(@g1, @g2)) |
+------------------------------------+
| POINT(1 1)                         |
+------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">342</field>
		<field name="name">ST_INTERSECTION</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_Intersection(g1, g2)

Returns a geometry that represents the point set intersection of the
geometry values g1 and g2. The result is in the same SRS as the
geometry arguments.

As of MySQL 8.0.27, ST_Intersection() permits arguments in either a
Cartesian or a geographic SRS. Prior to MySQL 8.0.27, ST_Intersection()
permits arguments in a Cartesian SRS only; for arguments in a
geographic SRS, an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_not_implemented_for_geographic_srs) error occurs.

ST_Intersection() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example">mysql&gt; SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');
mysql&gt; SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');
mysql&gt; SELECT ST_AsText(ST_Intersection(@g1, @g2));
+--------------------------------------+
| ST_AsText(ST_Intersection(@g1, @g2)) |
+--------------------------------------+
| POINT(2 2)                           |
+--------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">343</field>
		<field name="name">ST_LINEINTERPOLATEPOINT</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_LineInterpolatePoint(ls, fractional_distance)

This function takes a LineString geometry and a fractional distance in
the range [0.0, 1.0] and returns the Point along the LineString at the
given fraction of the distance from its start point to its endpoint. It
can be used to answer questions such as which Point lies halfway along
the road described by the geometry argument.

The function is implemented for LineString geometries in all spatial
reference systems, both Cartesian and geographic.

If the fractional_distance argument is 1.0, the result may not be
exactly the last point of the LineString argument but a point close to
it due to numerical inaccuracies in approximate-value computations.

A related function, ST_LineInterpolatePoints(), takes similar arguments
but returns a MultiPoint consisting of Point values along the
LineString at each fraction of the distance from its start point to its
endpoint. For examples of both functions, see the
ST_LineInterpolatePoints() description.

ST_LineInterpolatePoint() handles its arguments as described in the
introduction to this section, with these exceptions:

o If the geometry argument is not a LineString, an
  ER_UNEXPECTED_GEOMETRY_TYPE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_unexpected_geometry_type) error occurs.

o If the fractional distance argument is outside the range [0.0, 1.0],
  an ER_DATA_OUT_OF_RANGE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_data_out_of_range) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">344</field>
		<field name="name">ST_LINEINTERPOLATEPOINTS</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_LineInterpolatePoints(ls, fractional_distance)

This function takes a LineString geometry and a fractional distance in
the range (0.0, 1.0] and returns the MultiPoint consisting of the
LineString start point, plus Point values along the LineString at each
fraction of the distance from its start point to its endpoint. It can
be used to answer questions such as which Point values lie every 10% of
the way along the road described by the geometry argument.

The function is implemented for LineString geometries in all spatial
reference systems, both Cartesian and geographic.

If the fractional_distance argument divides 1.0 with zero remainder the
result may not contain the last point of the LineString argument but a
point close to it due to numerical inaccuracies in approximate-value
computations.

A related function, ST_LineInterpolatePoint(), takes similar arguments
but returns the Point along the LineString at the given fraction of the
distance from its start point to its endpoint.

ST_LineInterpolatePoints() handles its arguments as described in the
introduction to this section, with these exceptions:

o If the geometry argument is not a LineString, an
  ER_UNEXPECTED_GEOMETRY_TYPE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_unexpected_geometry_type) error occurs.

o If the fractional distance argument is outside the range [0.0, 1.0],
  an ER_DATA_OUT_OF_RANGE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_data_out_of_range) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example">mysql&gt; SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');
mysql&gt; SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .5));
+----------------------------------------------+
| ST_AsText(ST_LineInterpolatePoint(@ls1, .5)) |
+----------------------------------------------+
| POINT(0 5)                                   |
+----------------------------------------------+
mysql&gt; SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .75));
+-----------------------------------------------+
| ST_AsText(ST_LineInterpolatePoint(@ls1, .75)) |
+-----------------------------------------------+
| POINT(2.5 5)                                  |
+-----------------------------------------------+
mysql&gt; SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, 1));
+---------------------------------------------+
| ST_AsText(ST_LineInterpolatePoint(@ls1, 1)) |
+---------------------------------------------+
| POINT(5 5)                                  |
+---------------------------------------------+
mysql&gt; SELECT ST_AsText(ST_LineInterpolatePoints(@ls1, .25));
+------------------------------------------------+
| ST_AsText(ST_LineInterpolatePoints(@ls1, .25)) |
+------------------------------------------------+
| MULTIPOINT((0 2.5),(0 5),(2.5 5),(5 5))        |
+------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">345</field>
		<field name="name">ST_POINTATDISTANCE</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_PointAtDistance(ls, distance)

This function takes a LineString geometry and a distance in the range
[0.0, ST_Length(ls)] measured in the unit of the spatial reference
system (SRS) of the LineString, and returns the Point along the
LineString at that distance from its start point. It can be used to
answer questions such as which Point value is 400 meters from the start
of the road described by the geometry argument.

The function is implemented for LineString geometries in all spatial
reference systems, both Cartesian and geographic.

ST_PointAtDistance() handles its arguments as described in the
introduction to this section, with these exceptions:

o If the geometry argument is not a LineString, an
  ER_UNEXPECTED_GEOMETRY_TYPE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_unexpected_geometry_type) error occurs.

o If the fractional distance argument is outside the range [0.0,
  ST_Length(ls)], an ER_DATA_OUT_OF_RANGE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_data_out_of_range) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">346</field>
		<field name="name">ST_SYMDIFFERENCE</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_SymDifference(g1, g2)

Returns a geometry that represents the point set symmetric difference
of the geometry values g1 and g2, which is defined as:

g1 symdifference g2 := (g1 union g2) difference (g1 intersection g2)

Or, in function call notation:

ST_SymDifference(g1, g2) = ST_Difference(ST_Union(g1, g2), ST_Intersection(g1, g2))

The result is in the same SRS as the geometry arguments.

As of MySQL 8.0.27, ST_SymDifference() permits arguments in either a
Cartesian or a geographic SRS. Prior to MySQL 8.0.27,
ST_SymDifference() permits arguments in a Cartesian SRS only; for
arguments in a geographic SRS, an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_not_implemented_for_geographic_srs) error occurs.

ST_SymDifference() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example">mysql&gt; SET @g1 = ST_GeomFromText('MULTIPOINT(5 0,15 10,15 25)');
mysql&gt; SET @g2 = ST_GeomFromText('MULTIPOINT(1 1,15 10,15 25)');
mysql&gt; SELECT ST_AsText(ST_SymDifference(@g1, @g2));
+---------------------------------------+
| ST_AsText(ST_SymDifference(@g1, @g2)) |
+---------------------------------------+
| MULTIPOINT((1 1),(5 0))               |
+---------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">347</field>
		<field name="name">ST_TRANSFORM</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_Transform(g, target_srid)

Transforms a geometry from one spatial reference system (SRS) to
another. The return value is a geometry of the same type as the input
geometry with all coordinates transformed to the target SRID,
target_srid. Prior to MySQL 8.0.30, transformation support was limited
to geographic SRSs (unless the SRID of the geometry argument was the
same as the target SRID value, in which case the return value was the
input geometry for any valid SRS), and this function did not support
Cartesian SRSs. Beginning with MySQL 8.0.30, support is provided for
the Popular Visualisation Pseudo Mercator (EPSG 1024) projection
method, used for WGS 84 Pseudo-Mercator (SRID 3857). In MySQL 8.0.32
and later, support is extended to all SRSs defined by EPSG except for
those listed here:

o EPSG 1042 Krovak Modified

o EPSG 1043 Krovak Modified (North Orientated)

o EPSG 9816 Tunisia Mining Grid

o EPSG 9826 Lambert Conic Conformal (West Orientated)

ST_Transform() handles its arguments as described in the introduction
to this section, with these exceptions:

o Geometry arguments that have an SRID value for a geographic SRS do
  not produce an error.

o If the geometry or target SRID argument has an SRID value that refers
  to an undefined spatial reference system (SRS), an ER_SRS_NOT_FOUND
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_srs_not_found) error occurs.

o If the geometry is in an SRS that ST_Transform() cannot transform
  from, an ER_TRANSFORM_SOURCE_SRS_NOT_SUPPORTED
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_transform_source_srs_not_supported) error occurs.

o If the target SRID is in an SRS that ST_Transform() cannot transform
  to, an ER_TRANSFORM_TARGET_SRS_NOT_SUPPORTED
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_transform_target_srs_not_supported) error occurs.

o If the geometry is in an SRS that is not WGS 84 and has no TOWGS84
  clause, an ER_TRANSFORM_SOURCE_SRS_MISSING_TOWGS84
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_transform_source_srs_missing_towgs84) error occurs.

o If the target SRID is in an SRS that is not WGS 84 and has no TOWGS84
  clause, an ER_TRANSFORM_TARGET_SRS_MISSING_TOWGS84
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_transform_target_srs_missing_towgs84) error occurs.

ST_SRID(g, target_srid) and ST_Transform(g, target_srid) differ as
follows:

o ST_SRID() changes the geometry SRID value without transforming its
  coordinates.

o ST_Transform() transforms the geometry coordinates in addition to
  changing its SRID value.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example">mysql&gt; SET @p = ST_GeomFromText('POINT(52.381389 13.064444)', 4326);
mysql&gt; SELECT ST_AsText(@p);
+----------------------------+
| ST_AsText(@p)              |
+----------------------------+
| POINT(52.381389 13.064444) |
+----------------------------+
mysql&gt; SET @p = ST_Transform(@p, 4230);
mysql&gt; SELECT ST_AsText(@p);
+---------------------------------------------+
| ST_AsText(@p)                               |
+---------------------------------------------+
| POINT(52.38208611407426 13.065520672345304) |
+---------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">348</field>
		<field name="name">ST_UNION</field>
		<field name="help_category_id">30</field>
		<field name="description">ST_Union(g1, g2)

Returns a geometry that represents the point set union of the geometry
values g1 and g2. The result is in the same SRS as the geometry
arguments.

As of MySQL 8.0.26, ST_Union() permits arguments in either a Cartesian
or a geographic SRS. Prior to MySQL 8.0.26, ST_Union() permits
arguments in a Cartesian SRS only; for arguments in a geographic SRS,
an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_not_implemented_for_geographic_srs) error occurs.

ST_Union() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html

</field>
		<field name="example">mysql&gt; SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');
mysql&gt; SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');
mysql&gt; SELECT ST_AsText(ST_Union(@g1, @g2));
+--------------------------------------+
| ST_AsText(ST_Union(@g1, @g2))        |
+--------------------------------------+
| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |
+--------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">349</field>
		<field name="name">ST_CONTAINS</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_Contains(g1, g2)

Returns 1 or 0 to indicate whether g1 completely contains g2. This
tests the opposite relationship as ST_Within().

ST_Contains() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">350</field>
		<field name="name">ST_CROSSES</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_Crosses(g1, g2)

Two geometries spatially cross if their spatial relation has the
following properties:

o Unless g1 and g2 are both of dimension 1: g1 crosses g2 if the
  interior of g2 has points in common with the interior of g1, but g2
  does not cover the entire interior of g1.

o If both g1 and g2 are of dimension 1: If the lines cross each other
  in a finite number of points (that is, no common line segments, only
  single points in common).

This function returns 1 or 0 to indicate whether g1 spatially crosses
g2.

ST_Crosses() handles its arguments as described in the introduction to
this section except that the return value is NULL for these additional
conditions:

o g1 is of dimension 2 (Polygon or MultiPolygon).

o g2 is of dimension 1 (Point or MultiPoint).

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">351</field>
		<field name="name">ST_DISJOINT</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_Disjoint(g1, g2)

Returns 1 or 0 to indicate whether g1 is spatially disjoint from (does
not intersect) g2.

ST_Disjoint() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">352</field>
		<field name="name">ST_DISTANCE</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_Distance(g1, g2 [, unit])

Returns the distance between g1 and g2, measured in the length unit of
the spatial reference system (SRS) of the geometry arguments, or in the
unit of the optional unit argument if that is specified.

This function processes geometry collections by returning the shortest
distance among all combinations of the components of the two geometry
arguments.

ST_Distance() handles its geometry arguments as described in the
introduction to this section, with these exceptions:

o ST_Distance() detects arguments in a geographic (ellipsoidal) spatial
  reference system and returns the geodetic distance on the ellipsoid.
  As of MySQL 8.0.18, ST_Distance() supports distance calculations for
  geographic SRS arguments of all geometry types. Prior to MySQL
  8.0.18, the only permitted geographic argument types are Point and
  Point, or Point and MultiPoint (in any argument order). If called
  with other geometry type argument combinations in a geographic SRS,
  an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs.

o If any argument is geometrically invalid, either the result is an
  undefined distance (that is, it can be any number), or an error
  occurs.

o If an intermediate or final result produces NaN or a negative number,
  an ER_GIS_INVALID_DATA
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_gis_invalid_data) error occurs.

As of MySQL 8.0.14, ST_Distance() permits an optional unit argument
that specifies the linear unit for the returned distance value.
ST_Distance() handles its unit argument as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example">mysql&gt; SET @g1 = ST_GeomFromText('POINT(1 1)');
mysql&gt; SET @g2 = ST_GeomFromText('POINT(2 2)');
mysql&gt; SELECT ST_Distance(@g1, @g2);
+-----------------------+
| ST_Distance(@g1, @g2) |
+-----------------------+
|    1.4142135623730951 |
+-----------------------+

mysql&gt; SET @g1 = ST_GeomFromText('POINT(1 1)', 4326);
mysql&gt; SET @g2 = ST_GeomFromText('POINT(2 2)', 4326);
mysql&gt; SELECT ST_Distance(@g1, @g2);
+-----------------------+
| ST_Distance(@g1, @g2) |
+-----------------------+
|     156874.3859490455 |
+-----------------------+
mysql&gt; SELECT ST_Distance(@g1, @g2, 'metre');
+--------------------------------+
| ST_Distance(@g1, @g2, 'metre') |
+--------------------------------+
|              156874.3859490455 |
+--------------------------------+
mysql&gt; SELECT ST_Distance(@g1, @g2, 'foot');
+-------------------------------+
| ST_Distance(@g1, @g2, 'foot') |
+-------------------------------+
|             514679.7439273146 |
+-------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">353</field>
		<field name="name">ST_EQUALS</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_Equals(g1, g2)

Returns 1 or 0 to indicate whether g1 is spatially equal to g2.

ST_Equals() handles its arguments as described in the introduction to
this section, except that it does not return NULL for empty geometry
arguments.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example">mysql&gt; SET @g1 = Point(1,1), @g2 = Point(2,2);
mysql&gt; SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);
+---------------------+---------------------+
| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |
+---------------------+---------------------+
|                   1 |                   0 |
+---------------------+---------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">354</field>
		<field name="name">ST_FRECHETDISTANCE</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_FrechetDistance(g1, g2 [, unit])

Returns the discrete Fréchet distance between two geometries,
reflecting how similar the geometries are. The result is a
double-precision number measured in the length unit of the spatial
reference system (SRS) of the geometry arguments, or in the length unit
of the unit argument if that argument is given.

This function implements the discrete Fréchet distance, which means it
is restricted to distances between the points of the geometries. For
example, given two LineString arguments, only the points explicitly
mentioned in the geometries are considered. Points on the line segments
between these points are not considered.

ST_FrechetDistance() handles its geometry arguments as described in the
introduction to this section, with these exceptions:

o The geometries may have a Cartesian or geographic SRS, but only
  LineString values are supported. If the arguments are in the same
  Cartesian or geographic SRS, but either is not a LineString, an
  ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_cartesian_srs) or
  ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs,
  depending on the SRS type.

ST_FrechetDistance() handles its optional unit argument as described in
the introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example">mysql&gt; SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');
mysql&gt; SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');
mysql&gt; SELECT ST_FrechetDistance(@ls1, @ls2);
+--------------------------------+
| ST_FrechetDistance(@ls1, @ls2) |
+--------------------------------+
|             2.8284271247461903 |
+--------------------------------+

mysql&gt; SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);
mysql&gt; SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);
mysql&gt; SELECT ST_FrechetDistance(@ls1, @ls2);
+--------------------------------+
| ST_FrechetDistance(@ls1, @ls2) |
+--------------------------------+
|              313421.1999416798 |
+--------------------------------+
mysql&gt; SELECT ST_FrechetDistance(@ls1, @ls2, 'foot');
+----------------------------------------+
| ST_FrechetDistance(@ls1, @ls2, 'foot') |
+----------------------------------------+
|                     1028284.7767115477 |
+----------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">355</field>
		<field name="name">ST_HAUSDORFFDISTANCE</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_HausdorffDistance(g1, g2 [, unit])

Returns the discrete Hausdorff distance between two geometries,
reflecting how similar the geometries are. The result is a
double-precision number measured in the length unit of the spatial
reference system (SRS) of the geometry arguments, or in the length unit
of the unit argument if that argument is given.

This function implements the discrete Hausdorff distance, which means
it is restricted to distances between the points of the geometries. For
example, given two LineString arguments, only the points explicitly
mentioned in the geometries are considered. Points on the line segments
between these points are not considered.

ST_HausdorffDistance() handles its geometry arguments as described in
the introduction to this section, with these exceptions:

o If the geometry arguments are in the same Cartesian or geographic
  SRS, but are not in a supported combination, an
  ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_cartesian_srs) or
  ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs,
  depending on the SRS type. These combinations are supported:

  o LineString and LineString

  o Point and MultiPoint

  o LineString and MultiLineString

  o MultiPoint and MultiPoint

  o MultiLineString and MultiLineString

ST_HausdorffDistance() handles its optional unit argument as described
in the introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example">mysql&gt; SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');
mysql&gt; SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');
mysql&gt; SELECT ST_HausdorffDistance(@ls1, @ls2);
+----------------------------------+
| ST_HausdorffDistance(@ls1, @ls2) |
+----------------------------------+
|                                1 |
+----------------------------------+

mysql&gt; SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);
mysql&gt; SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);
mysql&gt; SELECT ST_HausdorffDistance(@ls1, @ls2);
+----------------------------------+
| ST_HausdorffDistance(@ls1, @ls2) |
+----------------------------------+
|               111319.49079326246 |
+----------------------------------+
mysql&gt; SELECT ST_HausdorffDistance(@ls1, @ls2, 'foot');
+------------------------------------------+
| ST_HausdorffDistance(@ls1, @ls2, 'foot') |
+------------------------------------------+
|                        365221.4264870815 |
+------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">356</field>
		<field name="name">ST_INTERSECTS</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_Intersects(g1, g2)

Returns 1 or 0 to indicate whether g1 spatially intersects g2.

ST_Intersects() handles its arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">357</field>
		<field name="name">ST_OVERLAPS</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_Overlaps(g1, g2)

Two geometries spatially overlap if they intersect and their
intersection results in a geometry of the same dimension but not equal
to either of the given geometries.

This function returns 1 or 0 to indicate whether g1 spatially overlaps
g2.

ST_Overlaps() handles its arguments as described in the introduction to
this section except that the return value is NULL for the additional
condition that the dimensions of the two geometries are not equal.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">358</field>
		<field name="name">ST_TOUCHES</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_Touches(g1, g2)

Two geometries spatially touch if their interiors do not intersect, but
the boundary of one of the geometries intersects either the boundary or
the interior of the other.

This function returns 1 or 0 to indicate whether g1 spatially touches
g2.

ST_Touches() handles its arguments as described in the introduction to
this section except that the return value is NULL for the additional
condition that both geometries are of dimension 0 (Point or
MultiPoint).

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">359</field>
		<field name="name">ST_WITHIN</field>
		<field name="help_category_id">31</field>
		<field name="description">ST_Within(g1, g2)

Returns 1 or 0 to indicate whether g1 is spatially within g2. This
tests the opposite relationship as ST_Contains().

ST_Within() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html</field>
	</row>
	<row>
		<field name="help_topic_id">360</field>
		<field name="name">MBRCONTAINS</field>
		<field name="help_category_id">32</field>
		<field name="description">MBRContains(g1, g2)

Returns 1 or 0 to indicate whether the minimum bounding rectangle of g1
contains the minimum bounding rectangle of g2. This tests the opposite
relationship as MBRWithin().

MBRContains() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html

</field>
		<field name="example">mysql&gt; SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');
mysql&gt; SET @g2 = ST_GeomFromText('Point(1 1)');
mysql&gt; SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);
+----------------------+--------------------+
| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |
+----------------------+--------------------+
|                    1 |                  1 |
+----------------------+--------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html</field>
	</row>
	<row>
		<field name="help_topic_id">361</field>
		<field name="name">MBRCOVEREDBY</field>
		<field name="help_category_id">32</field>
		<field name="description">MBRCoveredBy(g1, g2)

Returns 1 or 0 to indicate whether the minimum bounding rectangle of g1
is covered by the minimum bounding rectangle of g2. This tests the
opposite relationship as MBRCovers().

MBRCoveredBy() handles its arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html

</field>
		<field name="example">mysql&gt; SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');
mysql&gt; SET @g2 = ST_GeomFromText('Point(1 1)');
mysql&gt; SELECT MBRCovers(@g1,@g2), MBRCoveredby(@g1,@g2);
+--------------------+-----------------------+
| MBRCovers(@g1,@g2) | MBRCoveredby(@g1,@g2) |
+--------------------+-----------------------+
|                  1 |                     0 |
+--------------------+-----------------------+
mysql&gt; SELECT MBRCovers(@g2,@g1), MBRCoveredby(@g2,@g1);
+--------------------+-----------------------+
| MBRCovers(@g2,@g1) | MBRCoveredby(@g2,@g1) |
+--------------------+-----------------------+
|                  0 |                     1 |
+--------------------+-----------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html</field>
	</row>
	<row>
		<field name="help_topic_id">362</field>
		<field name="name">MBRCOVERS</field>
		<field name="help_category_id">32</field>
		<field name="description">MBRCovers(g1, g2)

Returns 1 or 0 to indicate whether the minimum bounding rectangle of g1
covers the minimum bounding rectangle of g2. This tests the opposite
relationship as MBRCoveredBy(). See the description of MBRCoveredBy()
for examples.

MBRCovers() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html</field>
	</row>
	<row>
		<field name="help_topic_id">363</field>
		<field name="name">MBRDISJOINT</field>
		<field name="help_category_id">32</field>
		<field name="description">MBRDisjoint(g1, g2)

Returns 1 or 0 to indicate whether the minimum bounding rectangles of
the two geometries g1 and g2 are disjoint (do not intersect).

MBRDisjoint() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html</field>
	</row>
	<row>
		<field name="help_topic_id">364</field>
		<field name="name">MBREQUALS</field>
		<field name="help_category_id">32</field>
		<field name="description">MBREquals(g1, g2)

Returns 1 or 0 to indicate whether the minimum bounding rectangles of
the two geometries g1 and g2 are the same.

MBREquals() handles its arguments as described in the introduction to
this section, except that it does not return NULL for empty geometry
arguments.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html</field>
	</row>
	<row>
		<field name="help_topic_id">365</field>
		<field name="name">MBRINTERSECTS</field>
		<field name="help_category_id">32</field>
		<field name="description">MBRIntersects(g1, g2)

Returns 1 or 0 to indicate whether the minimum bounding rectangles of
the two geometries g1 and g2 intersect.

MBRIntersects() handles its arguments as described in the introduction
to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html</field>
	</row>
	<row>
		<field name="help_topic_id">366</field>
		<field name="name">MBROVERLAPS</field>
		<field name="help_category_id">32</field>
		<field name="description">MBROverlaps(g1, g2)

Two geometries spatially overlap if they intersect and their
intersection results in a geometry of the same dimension but not equal
to either of the given geometries.

This function returns 1 or 0 to indicate whether the minimum bounding
rectangles of the two geometries g1 and g2 overlap.

MBROverlaps() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html</field>
	</row>
	<row>
		<field name="help_topic_id">367</field>
		<field name="name">MBRTOUCHES</field>
		<field name="help_category_id">32</field>
		<field name="description">MBRTouches(g1, g2)

Two geometries spatially touch if their interiors do not intersect, but
the boundary of one of the geometries intersects either the boundary or
the interior of the other.

This function returns 1 or 0 to indicate whether the minimum bounding
rectangles of the two geometries g1 and g2 touch.

MBRTouches() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html</field>
	</row>
	<row>
		<field name="help_topic_id">368</field>
		<field name="name">MBRWITHIN</field>
		<field name="help_category_id">32</field>
		<field name="description">MBRWithin(g1, g2)

Returns 1 or 0 to indicate whether the minimum bounding rectangle of g1
is within the minimum bounding rectangle of g2. This tests the opposite
relationship as MBRContains().

MBRWithin() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html

</field>
		<field name="example">mysql&gt; SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');
mysql&gt; SET @g2 = ST_GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');
mysql&gt; SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);
+--------------------+--------------------+
| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |
+--------------------+--------------------+
|                  1 |                  0 |
+--------------------+--------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html</field>
	</row>
	<row>
		<field name="help_topic_id">369</field>
		<field name="name">ST_GEOHASH</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_GeoHash(longitude, latitude, max_length), ST_GeoHash(point,
max_length)

Returns a geohash string in the connection character set and collation.

For the first syntax, the longitude must be a number in the range
[−180, 180], and the latitude must be a number in the range [−90,
90]. For the second syntax, a POINT value is required, where the X and
Y coordinates are in the valid ranges for longitude and latitude,
respectively.

The resulting string is no longer than max_length characters, which has
an upper limit of 100. The string might be shorter than max_length
characters because the algorithm that creates the geohash value
continues until it has created a string that is either an exact
representation of the location or max_length characters, whichever
comes first.

ST_GeoHash() handles its arguments as described in the introduction to
this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html

</field>
		<field name="example">mysql&gt; SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);
+----------------------+-------------------------+
| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |
+----------------------+-------------------------+
| xbpbpbpbpb           | 000000000000000         |
+----------------------+-------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">370</field>
		<field name="name">ST_LATFROMGEOHASH</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_LatFromGeoHash(geohash_str)

Returns the latitude from a geohash string value, as a double-precision
number in the range [−90, 90].

The ST_LatFromGeoHash() decoding function reads no more than 433
characters from the geohash_str argument. That represents the upper
limit on information in the internal representation of coordinate
values. Characters past the 433rd are ignored, even if they are
otherwise illegal and produce an error.

ST_LatFromGeoHash() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html

</field>
		<field name="example">mysql&gt; SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));
+------------------------------------------+
| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |
+------------------------------------------+
|                                      -20 |
+------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">371</field>
		<field name="name">ST_LONGFROMGEOHASH</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_LongFromGeoHash(geohash_str)

Returns the longitude from a geohash string value, as a
double-precision number in the range [−180, 180].

The remarks in the description of ST_LatFromGeoHash() regarding the
maximum number of characters processed from the geohash_str argument
also apply to ST_LongFromGeoHash().

ST_LongFromGeoHash() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html

</field>
		<field name="example">mysql&gt; SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));
+-------------------------------------------+
| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |
+-------------------------------------------+
|                                        45 |
+-------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">372</field>
		<field name="name">ST_POINTFROMGEOHASH</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_PointFromGeoHash(geohash_str, srid)

Returns a POINT value containing the decoded geohash value, given a
geohash string value.

The X and Y coordinates of the point are the longitude in the range
[−180, 180] and the latitude in the range [−90, 90], respectively.

The srid argument is an 32-bit unsigned integer.

The remarks in the description of ST_LatFromGeoHash() regarding the
maximum number of characters processed from the geohash_str argument
also apply to ST_PointFromGeoHash().

ST_PointFromGeoHash() handles its arguments as described in the
introduction to this section.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html

</field>
		<field name="example">mysql&gt; SET @gh = ST_GeoHash(45,-20,10);
mysql&gt; SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));
+---------------------------------------+
| ST_AsText(ST_PointFromGeoHash(@gh,0)) |
+---------------------------------------+
| POINT(45 -20)                         |
+---------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">373</field>
		<field name="name">ST_ASGEOJSON</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_AsGeoJSON(g [, max_dec_digits [, options]])

Generates a GeoJSON object from the geometry g. The object string has
the connection character set and collation.

If any argument is NULL, the return value is NULL. If any non-NULL
argument is invalid, an error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-geojson-functions.html

</field>
		<field name="example">mysql&gt; SELECT ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2);
+-------------------------------------------------------------+
| ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2) |
+-------------------------------------------------------------+
| {&quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [11.11, 12.22]}            |
+-------------------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-geojson-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">374</field>
		<field name="name">ST_GEOMFROMGEOJSON</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_GeomFromGeoJSON(str [, options [, srid]])

Parses a string str representing a GeoJSON object and returns a
geometry.

If any argument is NULL, the return value is NULL. If any non-NULL
argument is invalid, an error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-geojson-functions.html

</field>
		<field name="example">mysql&gt; SET @json = '{ &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [102.0, 0.0]}';
mysql&gt; SELECT ST_AsText(ST_GeomFromGeoJSON(@json));
+--------------------------------------+
| ST_AsText(ST_GeomFromGeoJSON(@json)) |
+--------------------------------------+
| POINT(0 102)                         |
+--------------------------------------+
mysql&gt; SELECT ST_SRID(ST_GeomFromGeoJSON(@json));
+------------------------------------+
| ST_SRID(ST_GeomFromGeoJSON(@json)) |
+------------------------------------+
|                               4326 |
+------------------------------------+
mysql&gt; SELECT ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0));
+-------------------------------------------------+
| ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0)) |
+-------------------------------------------------+
| POINT(102 0)                                    |
+-------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-geojson-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">375</field>
		<field name="name">ST_COLLECT</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_Collect([DISTINCT] g) [over_clause]

Aggregates geometry values and returns a single geometry collection
value. With the DISTINCT option, returns the aggregation of the
distinct geometry arguments.

As with other aggregate functions, GROUP BY may be used to group
arguments into subsets. ST_Collect() returns an aggregate value for
each subset.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html. In
contrast to most aggregate functions that support windowing,
ST_Collect() permits use of over_clause together with DISTINCT.

ST_Collect() handles its arguments as follows:

o NULL arguments are ignored.

o If all arguments are NULL or the aggregate result is empty, the
  return value is NULL.

o If any geometry argument is not a syntactically well-formed geometry,
  an ER_GIS_INVALID_DATA
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_gis_invalid_data) error occurs.

o If any geometry argument is a syntactically well-formed geometry in
  an undefined spatial reference system (SRS), an ER_SRS_NOT_FOUND
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_srs_not_found) error occurs.

o If there are multiple geometry arguments and those arguments are in
  the same SRS, the return value is in that SRS. If those arguments are
  not in the same SRS, an ER_GIS_DIFFERENT_SRIDS_AGGREGATION
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_gis_different_srids_aggregation) error occurs.

o The result is the narrowest MultiXxx or GeometryCollection value
  possible, with the result type determined from the non-NULL geometry
  arguments as follows:

  o If all arguments are Point values, the result is a MultiPoint
    value.

  o If all arguments are LineString values, the result is a
    MultiLineString value.

  o If all arguments are Polygon values, the result is a MultiPolygon
    value.

  o Otherwise, the arguments are a mix of geometry types and the result
    is a GeometryCollection value.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-aggregate-functions.html

</field>
		<field name="example">CREATE TABLE product (
  year INTEGER,
  product VARCHAR(256),
  location Geometry
);

INSERT INTO product
(year,  product,     location) VALUES
(2000, &quot;Calculator&quot;, ST_GeomFromText('point(60 -24)',4326)),
(2000, &quot;Computer&quot;  , ST_GeomFromText('point(28 -77)',4326)),
(2000, &quot;Abacus&quot;    , ST_GeomFromText('point(28 -77)',4326)),
(2000, &quot;TV&quot;        , ST_GeomFromText('point(38  60)',4326)),
(2001, &quot;Calculator&quot;, ST_GeomFromText('point(60 -24)',4326)),
(2001, &quot;Computer&quot;  , ST_GeomFromText('point(28 -77)',4326));

mysql&gt; SELECT ST_AsText(ST_Collect(location)) AS result
       FROM product;
+------------------------------------------------------------------+
| result                                                           |
+------------------------------------------------------------------+
| MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60),(60 -24),(28 -77)) |
+------------------------------------------------------------------+

mysql&gt; SELECT ST_AsText(ST_Collect(DISTINCT location)) AS result
       FROM product;
+---------------------------------------+
| result                                |
+---------------------------------------+
| MULTIPOINT((60 -24),(28 -77),(38 60)) |
+---------------------------------------+

mysql&gt; SELECT year, ST_AsText(ST_Collect(location)) AS result
       FROM product GROUP BY year;
+------+------------------------------------------------+
| year | result                                         |
+------+------------------------------------------------+
| 2000 | MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60)) |
| 2001 | MULTIPOINT((60 -24),(28 -77))                  |
+------+------------------------------------------------+

mysql&gt; SELECT year, ST_AsText(ST_Collect(DISTINCT location)) AS result
       FROM product GROUP BY year;
+------+---------------------------------------+
| year | result                                |
+------+---------------------------------------+
| 2000 | MULTIPOINT((60 -24),(28 -77),(38 60)) |
| 2001 | MULTIPOINT((60 -24),(28 -77))         |
+------+---------------------------------------+

# selects nothing
mysql&gt; SELECT ST_Collect(location) AS result
       FROM product WHERE year = 1999;
+--------+
| result |
+--------+
| NULL   |
+--------+

mysql&gt; SELECT ST_AsText(ST_Collect(location)
         OVER (ORDER BY year, product ROWS BETWEEN 1 PRECEDING AND CURRENT ROW))
         AS result
       FROM product;
+-------------------------------+
| result                        |
+-------------------------------+
| MULTIPOINT((28 -77))          |
| MULTIPOINT((28 -77),(60 -24)) |
| MULTIPOINT((60 -24),(28 -77)) |
| MULTIPOINT((28 -77),(38 60))  |
| MULTIPOINT((38 60),(60 -24))  |
| MULTIPOINT((60 -24),(28 -77)) |
+-------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">376</field>
		<field name="name">ST_DISTANCE_SPHERE</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_Distance_Sphere(g1, g2 [, radius])

Returns the minimum spherical distance between Point or MultiPoint
arguments on a sphere, in meters. (For general-purpose distance
calculations, see the ST_Distance() function.) The optional radius
argument should be given in meters.

If both geometry parameters are valid Cartesian Point or MultiPoint
values in SRID 0, the return value is shortest distance between the two
geometries on a sphere with the provided radius. If omitted, the
default radius is 6,370,986 meters, Point X and Y coordinates are
interpreted as longitude and latitude, respectively, in degrees.

If both geometry parameters are valid Point or MultiPoint values in a
geographic spatial reference system (SRS), the return value is the
shortest distance between the two geometries on a sphere with the
provided radius. If omitted, the default radius is equal to the mean
radius, defined as (2a+b)/3, where a is the semi-major axis and b is
the semi-minor axis of the SRS.

ST_Distance_Sphere() handles its arguments as described in the
introduction to this section, with these exceptions:

o Supported geometry argument combinations are Point and Point, or
  Point and MultiPoint (in any argument order). If at least one of the
  geometries is neither Point nor MultiPoint, and its SRID is 0, an
  ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_cartesian_srs) error occurs. If at
  least one of the geometries is neither Point nor MultiPoint, and its
  SRID refers to a geographic SRS, an
  ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs. If
  any geometry refers to a projected SRS, an
  ER_NOT_IMPLEMENTED_FOR_PROJECTED_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_projected_srs) error occurs.

o If any argument has a longitude or latitude that is out of range, an
  error occurs:

  o If a longitude value is not in the range (−180, 180], an
    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_longitude_out_of_range) error
    occurs (ER_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_longitude_out_of_range) prior to MySQL 8.0.12).

  o If a latitude value is not in the range [−90, 90], an
    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_latitude_out_of_range) error occurs
    (ER_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_latitude_out_of_range) prior to MySQL 8.0.12).

  Ranges shown are in degrees. If an SRS uses another unit, the range
  uses the corresponding values in its unit. The exact range limits
  deviate slightly due to floating-point arithmetic.

o If the radius argument is present but not positive, an
  ER_NONPOSITIVE_RADIUS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_nonpositive_radius) error occurs.

o If the distance exceeds the range of a double-precision number, an
  ER_STD_OVERFLOW_ERROR
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_std_overflow_error) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html

</field>
		<field name="example">mysql&gt; SET @pt1 = ST_GeomFromText('POINT(0 0)');
mysql&gt; SET @pt2 = ST_GeomFromText('POINT(180 0)');
mysql&gt; SELECT ST_Distance_Sphere(@pt1, @pt2);
+--------------------------------+
| ST_Distance_Sphere(@pt1, @pt2) |
+--------------------------------+
|             20015042.813723423 |
+--------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">377</field>
		<field name="name">ST_ISVALID</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_IsValid(g)

Returns 1 if the argument is geometrically valid, 0 if the argument is
not geometrically valid. Geometry validity is defined by the OGC
specification.

The only valid empty geometry is represented in the form of an empty
geometry collection value. ST_IsValid() returns 1 in this case. MySQL
does not support GIS EMPTY values such as POINT EMPTY.

ST_IsValid() handles its arguments as described in the introduction to
this section, with this exception:

o If the geometry has a geographic SRS with a longitude or latitude
  that is out of range, an error occurs:

  o If a longitude value is not in the range (−180, 180], an
    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_longitude_out_of_range) error
    occurs (ER_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_longitude_out_of_range) prior to MySQL 8.0.12).

  o If a latitude value is not in the range [−90, 90], an
    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_latitude_out_of_range) error occurs
    (ER_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_latitude_out_of_range) prior to MySQL 8.0.12).

  Ranges shown are in degrees. If an SRS uses another unit, the range
  uses the corresponding values in its unit. The exact range limits
  deviate slightly due to floating-point arithmetic.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html

</field>
		<field name="example">mysql&gt; SET @ls1 = ST_GeomFromText('LINESTRING(0 0,-0.00 0,0.0 0)');
mysql&gt; SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');
mysql&gt; SELECT ST_IsValid(@ls1);
+------------------+
| ST_IsValid(@ls1) |
+------------------+
|                0 |
+------------------+
mysql&gt; SELECT ST_IsValid(@ls2);
+------------------+
| ST_IsValid(@ls2) |
+------------------+
|                1 |
+------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">378</field>
		<field name="name">ST_MAKEENVELOPE</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_MakeEnvelope(pt1, pt2)

Returns the rectangle that forms the envelope around two points, as a
Point, LineString, or Polygon.

Calculations are done using the Cartesian coordinate system rather than
on a sphere, spheroid, or on earth.

Given two points pt1 and pt2, ST_MakeEnvelope() creates the result
geometry on an abstract plane like this:

o If pt1 and pt2 are equal, the result is the point pt1.

o Otherwise, if (pt1, pt2) is a vertical or horizontal line segment,
  the result is the line segment (pt1, pt2).

o Otherwise, the result is a polygon using pt1 and pt2 as diagonal
  points.

The result geometry has an SRID of 0.

ST_MakeEnvelope() handles its arguments as described in the
introduction to this section, with these exceptions:

o If the arguments are not Point values, an ER_WRONG_ARGUMENTS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_wrong_arguments) error occurs.

o An ER_GIS_INVALID_DATA
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_gis_invalid_data) error occurs for the additional
  condition that any coordinate value of the two points is infinite or
  NaN.

o If any geometry has an SRID value for a geographic spatial reference
  system (SRS), an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html

</field>
		<field name="example">mysql&gt; SET @pt1 = ST_GeomFromText('POINT(0 0)');
mysql&gt; SET @pt2 = ST_GeomFromText('POINT(1 1)');
mysql&gt; SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));
+----------------------------------------+
| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |
+----------------------------------------+
| POLYGON((0 0,1 0,1 1,0 1,0 0))         |
+----------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">379</field>
		<field name="name">ST_SIMPLIFY</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_Simplify(g, max_distance)

Simplifies a geometry using the Douglas-Peucker algorithm and returns a
simplified value of the same type.

The geometry may be any geometry type, although the Douglas-Peucker
algorithm may not actually process every type. A geometry collection is
processed by giving its components one by one to the simplification
algorithm, and the returned geometries are put into a geometry
collection as result.

The max_distance argument is the distance (in units of the input
coordinates) of a vertex to other segments to be removed. Vertices
within this distance of the simplified linestring are removed.

According to Boost.Geometry, geometries might become invalid as a
result of the simplification process, and the process might create
self-intersections. To check the validity of the result, pass it to
ST_IsValid().

ST_Simplify() handles its arguments as described in the introduction to
this section, with this exception:

o If the max_distance argument is not positive, or is NaN, an
  ER_WRONG_ARGUMENTS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_wrong_arguments) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html

</field>
		<field name="example">mysql&gt; SET @g = ST_GeomFromText('LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)');
mysql&gt; SELECT ST_AsText(ST_Simplify(@g, 0.5));
+---------------------------------+
| ST_AsText(ST_Simplify(@g, 0.5)) |
+---------------------------------+
| LINESTRING(0 0,0 1,1 1,2 3,3 3) |
+---------------------------------+
mysql&gt; SELECT ST_AsText(ST_Simplify(@g, 1.0));
+---------------------------------+
| ST_AsText(ST_Simplify(@g, 1.0)) |
+---------------------------------+
| LINESTRING(0 0,3 3)             |
+---------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">380</field>
		<field name="name">ST_VALIDATE</field>
		<field name="help_category_id">32</field>
		<field name="description">ST_Validate(g)

Validates a geometry according to the OGC specification. A geometry can
be syntactically well-formed (WKB value plus SRID) but geometrically
invalid. For example, this polygon is geometrically invalid: POLYGON((0
0, 0 0, 0 0, 0 0, 0 0))

ST_Validate() returns the geometry if it is syntactically well-formed
and is geometrically valid, NULL if the argument is not syntactically
well-formed or is not geometrically valid or is NULL.

ST_Validate() can be used to filter out invalid geometry data, although
at a cost. For applications that require more precise results not
tainted by invalid data, this penalty may be worthwhile.

If the geometry argument is valid, it is returned as is, except that if
an input Polygon or MultiPolygon has clockwise rings, those rings are
reversed before checking for validity. If the geometry is valid, the
value with the reversed rings is returned.

The only valid empty geometry is represented in the form of an empty
geometry collection value. ST_Validate() returns it directly without
further checks in this case.

As of MySQL 8.0.13, ST_Validate() handles its arguments as described in
the introduction to this section, with these exceptions:

o If the geometry has a geographic SRS with a longitude or latitude
  that is out of range, an error occurs:

  o If a longitude value is not in the range (−180, 180], an
    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_longitude_out_of_range) error
    occurs (ER_LONGITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_longitude_out_of_range) prior to MySQL 8.0.12).

  o If a latitude value is not in the range [−90, 90], an
    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_geometry_param_latitude_out_of_range) error occurs
    (ER_LATITUDE_OUT_OF_RANGE
    (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-referen
    ce.html#error_er_latitude_out_of_range) prior to MySQL 8.0.12).

  Ranges shown are in degrees. The exact range limits deviate slightly
  due to floating-point arithmetic.

Prior to MySQL 8.0.13, ST_Validate() handles its arguments as described
in the introduction to this section, with these exceptions:

o If the geometry is not syntactically well-formed, the return value is
  NULL. An ER_GIS_INVALID_DATA
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_gis_invalid_data) error does not occur.

o If the geometry has an SRID value for a geographic spatial reference
  system (SRS), an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_implemented_for_geographic_srs) error occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html

</field>
		<field name="example">mysql&gt; SET @ls1 = ST_GeomFromText('LINESTRING(0 0)');
mysql&gt; SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');
mysql&gt; SELECT ST_AsText(ST_Validate(@ls1));
+------------------------------+
| ST_AsText(ST_Validate(@ls1)) |
+------------------------------+
| NULL                         |
+------------------------------+
mysql&gt; SELECT ST_AsText(ST_Validate(@ls2));
+------------------------------+
| ST_AsText(ST_Validate(@ls2)) |
+------------------------------+
| LINESTRING(0 0,1 1)          |
+------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">381</field>
		<field name="name">JSON_ARRAY</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_ARRAY([val[, val] ...])

Evaluates a (possibly empty) list of values and returns a JSON array
containing those values.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-creation-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_ARRAY(1, &quot;abc&quot;, NULL, TRUE, CURTIME());
+---------------------------------------------+
| JSON_ARRAY(1, &quot;abc&quot;, NULL, TRUE, CURTIME()) |
+---------------------------------------------+
| [1, &quot;abc&quot;, null, true, &quot;11:30:24.000000&quot;]   |
+---------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-creation-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">382</field>
		<field name="name">JSON_OBJECT</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_OBJECT([key, val[, key, val] ...])

Evaluates a (possibly empty) list of key-value pairs and returns a JSON
object containing those pairs. An error occurs if any key name is NULL
or the number of arguments is odd.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-creation-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_OBJECT('id', 87, 'name', 'carrot');
+-----------------------------------------+
| JSON_OBJECT('id', 87, 'name', 'carrot') |
+-----------------------------------------+
| {&quot;id&quot;: 87, &quot;name&quot;: &quot;carrot&quot;}            |
+-----------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-creation-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">383</field>
		<field name="name">JSON_QUOTE</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_QUOTE(string)

Quotes a string as a JSON value by wrapping it with double quote
characters and escaping interior quote and other characters, then
returning the result as a utf8mb4 string. Returns NULL if the argument
is NULL.

This function is typically used to produce a valid JSON string literal
for inclusion within a JSON document.

Certain special characters are escaped with backslashes per the escape
sequences shown in
https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html
#json-unquote-character-escape-sequences.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-creation-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_QUOTE('null'), JSON_QUOTE('&quot;null&quot;');
+--------------------+----------------------+
| JSON_QUOTE('null') | JSON_QUOTE('&quot;null&quot;') |
+--------------------+----------------------+
| &quot;null&quot;             | &quot;\&quot;null\&quot;&quot;           |
+--------------------+----------------------+
mysql&gt; SELECT JSON_QUOTE('[1, 2, 3]');
+-------------------------+
| JSON_QUOTE('[1, 2, 3]') |
+-------------------------+
| &quot;[1, 2, 3]&quot;             |
+-------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-creation-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">384</field>
		<field name="name">JSON_CONTAINS</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_CONTAINS(target, candidate[, path])

Indicates by returning 1 or 0 whether a given candidate JSON document
is contained within a target JSON document, or---if a path argument was
supplied---whether the candidate is found at a specific path within the
target. Returns NULL if any argument is NULL, or if the path argument
does not identify a section of the target document. An error occurs if
target or candidate is not a valid JSON document, or if the path
argument is not a valid path expression or contains a * or ** wildcard.

To check only whether any data exists at the path, use
JSON_CONTAINS_PATH() instead.

The following rules define containment:

o A candidate scalar is contained in a target scalar if and only if
  they are comparable and are equal. Two scalar values are comparable
  if they have the same JSON_TYPE() types, with the exception that
  values of types INTEGER and DECIMAL are also comparable to each
  other.

o A candidate array is contained in a target array if and only if every
  element in the candidate is contained in some element of the target.

o A candidate nonarray is contained in a target array if and only if
  the candidate is contained in some element of the target.

o A candidate object is contained in a target object if and only if for
  each key in the candidate there is a key with the same name in the
  target and the value associated with the candidate key is contained
  in the value associated with the target key.

Otherwise, the candidate value is not contained in the target document.

Starting with MySQL 8.0.17, queries using JSON_CONTAINS() on InnoDB
tables can be optimized using multi-valued indexes; see
https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-
multi-valued, for more information.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html

</field>
		<field name="example">mysql&gt; SET @j = '{&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: {&quot;d&quot;: 4}}';
mysql&gt; SET @j2 = '1';
mysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.a');
+-------------------------------+
| JSON_CONTAINS(@j, @j2, '$.a') |
+-------------------------------+
|                             1 |
+-------------------------------+
mysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.b');
+-------------------------------+
| JSON_CONTAINS(@j, @j2, '$.b') |
+-------------------------------+
|                             0 |
+-------------------------------+

mysql&gt; SET @j2 = '{&quot;d&quot;: 4}';
mysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.a');
+-------------------------------+
| JSON_CONTAINS(@j, @j2, '$.a') |
+-------------------------------+
|                             0 |
+-------------------------------+
mysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.c');
+-------------------------------+
| JSON_CONTAINS(@j, @j2, '$.c') |
+-------------------------------+
|                             1 |
+-------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">385</field>
		<field name="name">JSON_CONTAINS_PATH</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] ...)

Returns 0 or 1 to indicate whether a JSON document contains data at a
given path or paths. Returns NULL if any argument is NULL. An error
occurs if the json_doc argument is not a valid JSON document, any path
argument is not a valid path expression, or one_or_all is not 'one' or
'all'.

To check for a specific value at a path, use JSON_CONTAINS() instead.

The return value is 0 if no specified path exists within the document.
Otherwise, the return value depends on the one_or_all argument:

o 'one': 1 if at least one path exists within the document, 0
  otherwise.

o 'all': 1 if all paths exist within the document, 0 otherwise.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html

</field>
		<field name="example">mysql&gt; SET @j = '{&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: {&quot;d&quot;: 4}}';
mysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');
+---------------------------------------------+
| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |
+---------------------------------------------+
|                                           1 |
+---------------------------------------------+
mysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');
+---------------------------------------------+
| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |
+---------------------------------------------+
|                                           0 |
+---------------------------------------------+
mysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');
+----------------------------------------+
| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |
+----------------------------------------+
|                                      1 |
+----------------------------------------+
mysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');
+----------------------------------------+
| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |
+----------------------------------------+
|                                      0 |
+----------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">386</field>
		<field name="name">JSON_EXTRACT</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_EXTRACT(json_doc, path[, path] ...)

Returns data from a JSON document, selected from the parts of the
document matched by the path arguments. Returns NULL if any argument is
NULL or no paths locate a value in the document. An error occurs if the
json_doc argument is not a valid JSON document or any path argument is
not a valid path expression.

The return value consists of all values matched by the path arguments.
If it is possible that those arguments could return multiple values,
the matched values are autowrapped as an array, in the order
corresponding to the paths that produced them. Otherwise, the return
value is the single matched value.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');
+--------------------------------------------+
| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |
+--------------------------------------------+
| 20                                         |
+--------------------------------------------+
mysql&gt; SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');
+----------------------------------------------------+
| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |
+----------------------------------------------------+
| [20, 10]                                           |
+----------------------------------------------------+
mysql&gt; SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');
+-----------------------------------------------+
| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |
+-----------------------------------------------+
| [30, 40]                                      |
+-----------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">387</field>
		<field name="name">-&gt;</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
column-&gt;path

The -&gt; operator serves as an alias for the JSON_EXTRACT() function when
used with two arguments, a column identifier on the left and a JSON
path (a string literal) on the right that is evaluated against the JSON
document (the column value). You can use such expressions in place of
column references wherever they occur in SQL statements.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html

</field>
		<field name="example">mysql&gt; SELECT c, JSON_EXTRACT(c, &quot;$.id&quot;), g
     &gt; FROM jemp
     &gt; WHERE JSON_EXTRACT(c, &quot;$.id&quot;) &gt; 1
     &gt; ORDER BY JSON_EXTRACT(c, &quot;$.name&quot;);
+-------------------------------+-----------+------+
| c                             | c-&gt;&quot;$.id&quot; | g    |
+-------------------------------+-----------+------+
| {&quot;id&quot;: &quot;3&quot;, &quot;name&quot;: &quot;Barney&quot;} | &quot;3&quot;       |    3 |
| {&quot;id&quot;: &quot;4&quot;, &quot;name&quot;: &quot;Betty&quot;}  | &quot;4&quot;       |    4 |
| {&quot;id&quot;: &quot;2&quot;, &quot;name&quot;: &quot;Wilma&quot;}  | &quot;2&quot;       |    2 |
+-------------------------------+-----------+------+
3 rows in set (0.00 sec)

mysql&gt; SELECT c, c-&gt;&quot;$.id&quot;, g
     &gt; FROM jemp
     &gt; WHERE c-&gt;&quot;$.id&quot; &gt; 1
     &gt; ORDER BY c-&gt;&quot;$.name&quot;;
+-------------------------------+-----------+------+
| c                             | c-&gt;&quot;$.id&quot; | g    |
+-------------------------------+-----------+------+
| {&quot;id&quot;: &quot;3&quot;, &quot;name&quot;: &quot;Barney&quot;} | &quot;3&quot;       |    3 |
| {&quot;id&quot;: &quot;4&quot;, &quot;name&quot;: &quot;Betty&quot;}  | &quot;4&quot;       |    4 |
| {&quot;id&quot;: &quot;2&quot;, &quot;name&quot;: &quot;Wilma&quot;}  | &quot;2&quot;       |    2 |
+-------------------------------+-----------+------+
3 rows in set (0.00 sec)

mysql&gt; ALTER TABLE jemp ADD COLUMN n INT;
Query OK, 0 rows affected (0.68 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; UPDATE jemp SET n=1 WHERE c-&gt;&quot;$.id&quot; = &quot;4&quot;;
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; SELECT c, c-&gt;&quot;$.id&quot;, g, n
     &gt; FROM jemp
     &gt; WHERE JSON_EXTRACT(c, &quot;$.id&quot;) &gt; 1
     &gt; ORDER BY c-&gt;&quot;$.name&quot;;
+-------------------------------+-----------+------+------+
| c                             | c-&gt;&quot;$.id&quot; | g    | n    |
+-------------------------------+-----------+------+------+
| {&quot;id&quot;: &quot;3&quot;, &quot;name&quot;: &quot;Barney&quot;} | &quot;3&quot;       |    3 | NULL |
| {&quot;id&quot;: &quot;4&quot;, &quot;name&quot;: &quot;Betty&quot;}  | &quot;4&quot;       |    4 |    1 |
| {&quot;id&quot;: &quot;2&quot;, &quot;name&quot;: &quot;Wilma&quot;}  | &quot;2&quot;       |    2 | NULL |
+-------------------------------+-----------+------+------+
3 rows in set (0.00 sec)

mysql&gt; DELETE FROM jemp WHERE c-&gt;&quot;$.id&quot; = &quot;4&quot;;
Query OK, 1 row affected (0.04 sec)

mysql&gt; SELECT c, c-&gt;&quot;$.id&quot;, g, n
     &gt; FROM jemp
     &gt; WHERE JSON_EXTRACT(c, &quot;$.id&quot;) &gt; 1
     &gt; ORDER BY c-&gt;&quot;$.name&quot;;
+-------------------------------+-----------+------+------+
| c                             | c-&gt;&quot;$.id&quot; | g    | n    |
+-------------------------------+-----------+------+------+
| {&quot;id&quot;: &quot;3&quot;, &quot;name&quot;: &quot;Barney&quot;} | &quot;3&quot;       |    3 | NULL |
| {&quot;id&quot;: &quot;2&quot;, &quot;name&quot;: &quot;Wilma&quot;}  | &quot;2&quot;       |    2 | NULL |
+-------------------------------+-----------+------+------+
2 rows in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">388</field>
		<field name="name">-&gt;&gt;</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
column-&gt;&gt;path

This is an improved, unquoting extraction operator. Whereas the -&gt;
operator simply extracts a value, the -&gt;&gt; operator in addition unquotes
the extracted result. In other words, given a JSON column value column
and a path expression path (a string literal), the following three
expressions return the same value:

o JSON_UNQUOTE( JSON_EXTRACT(column, path) )

o JSON_UNQUOTE(column -&gt; path)

o column-&gt;&gt;path

The -&gt;&gt; operator can be used wherever JSON_UNQUOTE(JSON_EXTRACT())
would be allowed. This includes (but is not limited to) SELECT lists,
WHERE and HAVING clauses, and ORDER BY and GROUP BY clauses.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html

</field>
		<field name="example">mysql&gt; SELECT * FROM jemp WHERE g &gt; 2;
+-------------------------------+------+
| c                             | g    |
+-------------------------------+------+
| {&quot;id&quot;: &quot;3&quot;, &quot;name&quot;: &quot;Barney&quot;} |    3 |
| {&quot;id&quot;: &quot;4&quot;, &quot;name&quot;: &quot;Betty&quot;}  |    4 |
+-------------------------------+------+
2 rows in set (0.01 sec)

mysql&gt; SELECT c-&gt;'$.name' AS name
    -&gt;     FROM jemp WHERE g &gt; 2;
+----------+
| name     |
+----------+
| &quot;Barney&quot; |
| &quot;Betty&quot;  |
+----------+
2 rows in set (0.00 sec)

mysql&gt; SELECT JSON_UNQUOTE(c-&gt;'$.name') AS name
    -&gt;     FROM jemp WHERE g &gt; 2;
+--------+
| name   |
+--------+
| Barney |
| Betty  |
+--------+
2 rows in set (0.00 sec)

mysql&gt; SELECT c-&gt;&gt;'$.name' AS name
    -&gt;     FROM jemp WHERE g &gt; 2;
+--------+
| name   |
+--------+
| Barney |
| Betty  |
+--------+
2 rows in set (0.00 sec)

mysql&gt; CREATE TABLE tj10 (a JSON, b INT);
Query OK, 0 rows affected (0.26 sec)

mysql&gt; INSERT INTO tj10 VALUES
    -&gt;     ('[3,10,5,&quot;x&quot;,44]', 33),
    -&gt;     ('[3,10,5,17,[22,&quot;y&quot;,66]]', 0);
Query OK, 2 rows affected (0.04 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql&gt; SELECT a-&gt;&quot;$[3]&quot;, a-&gt;&quot;$[4][1]&quot; FROM tj10;
+-----------+--------------+
| a-&gt;&quot;$[3]&quot; | a-&gt;&quot;$[4][1]&quot; |
+-----------+--------------+
| &quot;x&quot;       | NULL         |
| 17        | &quot;y&quot;          |
+-----------+--------------+
2 rows in set (0.00 sec)

mysql&gt; SELECT a-&gt;&gt;&quot;$[3]&quot;, a-&gt;&gt;&quot;$[4][1]&quot; FROM tj10;
+------------+---------------+
| a-&gt;&gt;&quot;$[3]&quot; | a-&gt;&gt;&quot;$[4][1]&quot; |
+------------+---------------+
| x          | NULL          |
| 17         | y             |
+------------+---------------+
2 rows in set (0.00 sec)

mysql&gt; EXPLAIN SELECT c-&gt;&gt;'$.name' AS name
    -&gt;     FROM jemp WHERE g &gt; 2\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: jemp
   partitions: NULL
         type: range
possible_keys: i
          key: i
      key_len: 5
          ref: NULL
         rows: 2
     filtered: 100.00
        Extra: Using where
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Note
   Code: 1003
Message: /* select#1 */ select
json_unquote(json_extract(`jtest`.`jemp`.`c`,'$.name')) AS `name` from
`jtest`.`jemp` where (`jtest`.`jemp`.`g` &gt; 2)
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">389</field>
		<field name="name">JSON_KEYS</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_KEYS(json_doc[, path])

Returns the keys from the top-level value of a JSON object as a JSON
array, or, if a path argument is given, the top-level keys from the
selected path. Returns NULL if any argument is NULL, the json_doc
argument is not an object, or path, if given, does not locate an
object. An error occurs if the json_doc argument is not a valid JSON
document or the path argument is not a valid path expression or
contains a * or ** wildcard.

The result array is empty if the selected object is empty. If the
top-level value has nested subobjects, the return value does not
include keys from those subobjects.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_KEYS('{&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: 30}}');
+---------------------------------------+
| JSON_KEYS('{&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: 30}}') |
+---------------------------------------+
| [&quot;a&quot;, &quot;b&quot;]                            |
+---------------------------------------+
mysql&gt; SELECT JSON_KEYS('{&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: 30}}', '$.b');
+----------------------------------------------+
| JSON_KEYS('{&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: 30}}', '$.b') |
+----------------------------------------------+
| [&quot;c&quot;]                                        |
+----------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">390</field>
		<field name="name">JSON_OVERLAPS</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_OVERLAPS(json_doc1, json_doc2)

Compares two JSON documents. Returns true (1) if the two document have
any key-value pairs or array elements in common. If both arguments are
scalars, the function performs a simple equality test. If either
argument is NULL, the function returns NULL.

This function serves as counterpart to JSON_CONTAINS(), which requires
all elements of the array searched for to be present in the array
searched in. Thus, JSON_CONTAINS() performs an AND operation on search
keys, while JSON_OVERLAPS() performs an OR operation.

Queries on JSON columns of InnoDB tables using JSON_OVERLAPS() in the
WHERE clause can be optimized using multi-valued indexes.
https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-
multi-valued, provides detailed information and examples.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_OVERLAPS(&quot;[1,3,5,7]&quot;, &quot;[2,5,7]&quot;);
+---------------------------------------+
| JSON_OVERLAPS(&quot;[1,3,5,7]&quot;, &quot;[2,5,7]&quot;) |
+---------------------------------------+
|                                     1 |
+---------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_OVERLAPS(&quot;[1,3,5,7]&quot;, &quot;[2,6,7]&quot;);
+---------------------------------------+
| JSON_OVERLAPS(&quot;[1,3,5,7]&quot;, &quot;[2,6,7]&quot;) |
+---------------------------------------+
|                                     1 |
+---------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_OVERLAPS(&quot;[1,3,5,7]&quot;, &quot;[2,6,8]&quot;);
+---------------------------------------+
| JSON_OVERLAPS(&quot;[1,3,5,7]&quot;, &quot;[2,6,8]&quot;) |
+---------------------------------------+
|                                     0 |
+---------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');
+-----------------------------------------------------+
| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |
+-----------------------------------------------------+
|                                                   0 |
+-----------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_OVERLAPS('{&quot;a&quot;:1,&quot;b&quot;:10,&quot;d&quot;:10}', '{&quot;c&quot;:1,&quot;e&quot;:10,&quot;f&quot;:1,&quot;d&quot;:10}');
+-----------------------------------------------------------------------+
| JSON_OVERLAPS('{&quot;a&quot;:1,&quot;b&quot;:10,&quot;d&quot;:10}', '{&quot;c&quot;:1,&quot;e&quot;:10,&quot;f&quot;:1,&quot;d&quot;:10}') |
+-----------------------------------------------------------------------+
|                                                                     1 |
+-----------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_OVERLAPS('{&quot;a&quot;:1,&quot;b&quot;:10,&quot;d&quot;:10}', '{&quot;a&quot;:5,&quot;e&quot;:10,&quot;f&quot;:1,&quot;d&quot;:20}');
+-----------------------------------------------------------------------+
| JSON_OVERLAPS('{&quot;a&quot;:1,&quot;b&quot;:10,&quot;d&quot;:10}', '{&quot;a&quot;:5,&quot;e&quot;:10,&quot;f&quot;:1,&quot;d&quot;:20}') |
+-----------------------------------------------------------------------+
|                                                                     0 |
+-----------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_OVERLAPS('5', '5');
+-------------------------+
| JSON_OVERLAPS('5', '5') |
+-------------------------+
|                       1 |
+-------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_OVERLAPS('5', '6');
+-------------------------+
| JSON_OVERLAPS('5', '6') |
+-------------------------+
|                       0 |
+-------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_OVERLAPS('[4,5,6,7]', '6');
+---------------------------------+
| JSON_OVERLAPS('[4,5,6,7]', '6') |
+---------------------------------+
|                               1 |
+---------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_OVERLAPS('[4,5,&quot;6&quot;,7]', '6');
+-----------------------------------+
| JSON_OVERLAPS('[4,5,&quot;6&quot;,7]', '6') |
+-----------------------------------+
|                                 0 |
+-----------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_OVERLAPS('[4,5,6,7]', '&quot;6&quot;');
+-----------------------------------+
| JSON_OVERLAPS('[4,5,6,7]', '&quot;6&quot;') |
+-----------------------------------+
|                                 0 |
+-----------------------------------+
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">391</field>
		<field name="name">JSON_SEARCH</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_SEARCH(json_doc, one_or_all, search_str[, escape_char[, path]
...])

Returns the path to the given string within a JSON document. Returns
NULL if any of the json_doc, search_str, or path arguments are NULL; no
path exists within the document; or search_str is not found. An error
occurs if the json_doc argument is not a valid JSON document, any path
argument is not a valid path expression, one_or_all is not 'one' or
'all', or escape_char is not a constant expression.

The one_or_all argument affects the search as follows:

o 'one': The search terminates after the first match and returns one
  path string. It is undefined which match is considered first.

o 'all': The search returns all matching path strings such that no
  duplicate paths are included. If there are multiple strings, they are
  autowrapped as an array. The order of the array elements is
  undefined.

Within the search_str search string argument, the % and _ characters
work as for the LIKE operator: % matches any number of characters
(including zero characters), and _ matches exactly one character.

To specify a literal % or _ character in the search string, precede it
by the escape character. The default is \ if the escape_char argument
is missing or NULL. Otherwise, escape_char must be a constant that is
empty or one character.

For more information about matching and escape character behavior, see
the description of LIKE in
https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html
. For escape character handling, a difference from the LIKE behavior
is that the escape character for JSON_SEARCH() must evaluate to a
constant at compile time, not just at execution time. For example, if
JSON_SEARCH() is used in a prepared statement and the escape_char
argument is supplied using a ? parameter, the parameter value might be
constant at execution time, but is not at compile time.

search_str and path are always interpreted as utf8mb4 strings,
regardless of their actual encoding. This is a known issue which is
fixed in MySQL 8.0.24 ( Bug #32449181).

URL: https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html

</field>
		<field name="example">mysql&gt; SET @j = '[&quot;abc&quot;, [{&quot;k&quot;: &quot;10&quot;}, &quot;def&quot;], {&quot;x&quot;:&quot;abc&quot;}, {&quot;y&quot;:&quot;bcd&quot;}]';

mysql&gt; SELECT JSON_SEARCH(@j, 'one', 'abc');
+-------------------------------+
| JSON_SEARCH(@j, 'one', 'abc') |
+-------------------------------+
| &quot;$[0]&quot;                        |
+-------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', 'abc');
+-------------------------------+
| JSON_SEARCH(@j, 'all', 'abc') |
+-------------------------------+
| [&quot;$[0]&quot;, &quot;$[2].x&quot;]            |
+-------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', 'ghi');
+-------------------------------+
| JSON_SEARCH(@j, 'all', 'ghi') |
+-------------------------------+
| NULL                          |
+-------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10');
+------------------------------+
| JSON_SEARCH(@j, 'all', '10') |
+------------------------------+
| &quot;$[1][0].k&quot;                  |
+------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');
+-----------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$') |
+-----------------------------------------+
| &quot;$[1][0].k&quot;                             |
+-----------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');
+--------------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |
+--------------------------------------------+
| &quot;$[1][0].k&quot;                                |
+--------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');
+---------------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |
+---------------------------------------------+
| &quot;$[1][0].k&quot;                                 |
+---------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');
+-------------------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |
+-------------------------------------------------+
| &quot;$[1][0].k&quot;                                     |
+-------------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');
+--------------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |
+--------------------------------------------+
| &quot;$[1][0].k&quot;                                |
+--------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');
+-----------------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |
+-----------------------------------------------+
| &quot;$[1][0].k&quot;                                   |
+-----------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');
+---------------------------------------------+
| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |
+---------------------------------------------+
| &quot;$[2].x&quot;                                    |
+---------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%a%');
+-------------------------------+
| JSON_SEARCH(@j, 'all', '%a%') |
+-------------------------------+
| [&quot;$[0]&quot;, &quot;$[2].x&quot;]            |
+-------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%');
+-------------------------------+
| JSON_SEARCH(@j, 'all', '%b%') |
+-------------------------------+
| [&quot;$[0]&quot;, &quot;$[2].x&quot;, &quot;$[3].y&quot;]  |
+-------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');
+---------------------------------------------+
| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |
+---------------------------------------------+
| &quot;$[0]&quot;                                      |
+---------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');
+---------------------------------------------+
| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |
+---------------------------------------------+
| &quot;$[2].x&quot;                                    |
+---------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');
+---------------------------------------------+
| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |
+---------------------------------------------+
| NULL                                        |
+---------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');
+-------------------------------------------+
| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |
+-------------------------------------------+
| NULL                                      |
+-------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');
+-------------------------------------------+
| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |
+-------------------------------------------+
| &quot;$[3].y&quot;                                  |
+-------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">392</field>
		<field name="name">JSON_VALUE</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_VALUE(json_doc, path)

Extracts a value from a JSON document at the path given in the
specified document, and returns the extracted value, optionally
converting it to a desired type. The complete syntax is shown here:

JSON_VALUE(json_doc, path [RETURNING type] [on_empty] [on_error])

on_empty:
    {NULL | ERROR | DEFAULT value} ON EMPTY

on_error:
    {NULL | ERROR | DEFAULT value} ON ERROR

json_doc is a valid JSON document. If this is NULL, the function
returns NULL.

path is a JSON path pointing to a location in the document. This must
be a string literal value.

type is one of the following data types:

o FLOAT

o DOUBLE

o DECIMAL

o SIGNED

o UNSIGNED

o DATE

o TIME

o DATETIME

o YEAR (MySQL 8.0.22 and later)

  YEAR values of one or two digits are not supported.

o CHAR

o JSON

The types just listed are the same as the (non-array) types supported
by the CAST() function.

If not specified by a RETURNING clause, the JSON_VALUE() function's
return type is VARCHAR(512). When no character set is specified for the
return type, JSON_VALUE() uses utf8mb4 with the binary collation, which
is case-sensitive; if utf8mb4 is specified as the character set for the
result, the server uses the default collation for this character set,
which is not case-sensitive.

When the data at the specified path consists of or resolves to a JSON
null literal, the function returns SQL NULL.

on_empty, if specified, determines how JSON_VALUE() behaves when no
data is found at the path given; this clause takes one of the following
values:

o NULL ON EMPTY: The function returns NULL; this is the default ON
  EMPTY behavior.

o DEFAULT value ON EMPTY: the provided value is returned. The value's
  type must match that of the return type.

o ERROR ON EMPTY: The function throws an error.

If used, on_error takes one of the following values with the
corresponding outcome when an error occurs, as listed here:

o NULL ON ERROR: JSON_VALUE() returns NULL; this is the default
  behavior if no ON ERROR clause is used.

o DEFAULT value ON ERROR: This is the value returned; its value must
  match that of the return type.

o ERROR ON ERROR: An error is thrown.

ON EMPTY, if used, must precede any ON ERROR clause. Specifying them in
the wrong order results in a syntax error.

Error handling In general, errors are handled by JSON_VALUE() as
follows:

o All JSON input (document and path) is checked for validity. If any of
  it is not valid, an SQL error is thrown without triggering the ON
  ERROR clause.

o ON ERROR is triggered whenever any of the following events occur:

  o Attempting to extract an object or an array, such as that resulting
    from a path that resolves to multiple locations within the JSON
    document

  o Conversion errors, such as attempting to convert 'asdf' to an
    UNSIGNED value

  o Truncation of values

o A conversion error always triggers a warning even if NULL ON ERROR or
  DEFAULT ... ON ERROR is specified.

o The ON EMPTY clause is triggered when the source JSON document (expr)
  contains no data at the specified location (path).

URL: https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_VALUE('{&quot;fname&quot;: &quot;Joe&quot;, &quot;lname&quot;: &quot;Palmer&quot;}', '$.fname');
+--------------------------------------------------------------+
| JSON_VALUE('{&quot;fname&quot;: &quot;Joe&quot;, &quot;lname&quot;: &quot;Palmer&quot;}', '$.fname') |
+--------------------------------------------------------------+
| Joe                                                          |
+--------------------------------------------------------------+

mysql&gt; SELECT JSON_VALUE('{&quot;item&quot;: &quot;shoes&quot;, &quot;price&quot;: &quot;49.95&quot;}', '$.price'
    -&gt; RETURNING DECIMAL(4,2)) AS price;
+-------+
| price |
+-------+
| 49.95 |
+-------+

SELECT CAST(
    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )
    AS type
);

CREATE TABLE t1(
    j JSON,
    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )
);

mysql&gt; EXPLAIN SELECT * FROM t1
    -&gt;     WHERE JSON_VALUE(j, '$.id' RETURNING UNSIGNED) = 123\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: t1
   partitions: NULL
         type: ref
possible_keys: i1
          key: i1
      key_len: 9
          ref: const
         rows: 1
     filtered: 100.00
        Extra: NULL

CREATE TABLE t2 (
    j JSON,
    g INT GENERATED ALWAYS AS (j-&gt;&quot;$.id&quot;),
    INDEX i1 (g)
);

mysql&gt; EXPLAIN SELECT * FROM t2 WHERE g  = 123\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: t2
   partitions: NULL
         type: ref
possible_keys: i1
          key: i1
      key_len: 5
          ref: const
         rows: 1
     filtered: 100.00
        Extra: NULL
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">393</field>
		<field name="name">MEMBER OF</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
value MEMBER OF(json_array)

Returns true (1) if value is an element of json_array, otherwise
returns false (0). value must be a scalar or a JSON document; if it is
a scalar, the operator attempts to treat it as an element of a JSON
array. If value or json_array is NULL, the function returns NULL.

Queries using MEMBER OF() on JSON columns of InnoDB tables in the WHERE
clause can be optimized using multi-valued indexes. See
https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-
multi-valued, for detailed information and examples.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html

</field>
		<field name="example">mysql&gt; SELECT 17 MEMBER OF('[23, &quot;abc&quot;, 17, &quot;ab&quot;, 10]');
+-------------------------------------------+
| 17 MEMBER OF('[23, &quot;abc&quot;, 17, &quot;ab&quot;, 10]') |
+-------------------------------------------+
|                                         1 |
+-------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT 'ab' MEMBER OF('[23, &quot;abc&quot;, 17, &quot;ab&quot;, 10]');
+---------------------------------------------+
| 'ab' MEMBER OF('[23, &quot;abc&quot;, 17, &quot;ab&quot;, 10]') |
+---------------------------------------------+
|                                           1 |
+---------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT 7 MEMBER OF('[23, &quot;abc&quot;, 17, &quot;ab&quot;, 10]');
+------------------------------------------+
| 7 MEMBER OF('[23, &quot;abc&quot;, 17, &quot;ab&quot;, 10]') |
+------------------------------------------+
|                                        0 |
+------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT 'a' MEMBER OF('[23, &quot;abc&quot;, 17, &quot;ab&quot;, 10]');
+--------------------------------------------+
| 'a' MEMBER OF('[23, &quot;abc&quot;, 17, &quot;ab&quot;, 10]') |
+--------------------------------------------+
|                                          0 |
+--------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT
    -&gt; 17 MEMBER OF('[23, &quot;abc&quot;, &quot;17&quot;, &quot;ab&quot;, 10]'),
    -&gt; &quot;17&quot; MEMBER OF('[23, &quot;abc&quot;, 17, &quot;ab&quot;, 10]')\G
*************************** 1. row ***************************
17 MEMBER OF('[23, &quot;abc&quot;, &quot;17&quot;, &quot;ab&quot;, 10]'): 0
&quot;17&quot; MEMBER OF('[23, &quot;abc&quot;, 17, &quot;ab&quot;, 10]'): 0
1 row in set (0.00 sec)

mysql&gt; SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]');
+--------------------------------------------------+
| CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]') |
+--------------------------------------------------+
|                                                1 |
+--------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]');
+--------------------------------------------+
| JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]') |
+--------------------------------------------+
|                                          1 |
+--------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SET @a = CAST('{&quot;a&quot;:1}' AS JSON);
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SET @b = JSON_OBJECT(&quot;b&quot;, 2);
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SET @c = JSON_ARRAY(17, @b, &quot;abc&quot;, @a, 23);
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @a MEMBER OF(@c), @b MEMBER OF(@c);
+------------------+------------------+
| @a MEMBER OF(@c) | @b MEMBER OF(@c) |
+------------------+------------------+
|                1 |                1 |
+------------------+------------------+
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">394</field>
		<field name="name">JSON_ARRAY_APPEND</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_ARRAY_APPEND(json_doc, path, val[, path, val] ...)

Appends values to the end of the indicated arrays within a JSON
document and returns the result. Returns NULL if any argument is NULL.
An error occurs if the json_doc argument is not a valid JSON document
or any path argument is not a valid path expression or contains a * or
** wildcard.

The path-value pairs are evaluated left to right. The document produced
by evaluating one pair becomes the new value against which the next
pair is evaluated.

If a path selects a scalar or object value, that value is autowrapped
within an array and the new value is added to that array. Pairs for
which the path does not identify any value in the JSON document are
ignored.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html

</field>
		<field name="example">mysql&gt; SET @j = '[&quot;a&quot;, [&quot;b&quot;, &quot;c&quot;], &quot;d&quot;]';
mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);
+----------------------------------+
| JSON_ARRAY_APPEND(@j, '$[1]', 1) |
+----------------------------------+
| [&quot;a&quot;, [&quot;b&quot;, &quot;c&quot;, 1], &quot;d&quot;]        |
+----------------------------------+
mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);
+----------------------------------+
| JSON_ARRAY_APPEND(@j, '$[0]', 2) |
+----------------------------------+
| [[&quot;a&quot;, 2], [&quot;b&quot;, &quot;c&quot;], &quot;d&quot;]      |
+----------------------------------+
mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);
+-------------------------------------+
| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |
+-------------------------------------+
| [&quot;a&quot;, [[&quot;b&quot;, 3], &quot;c&quot;], &quot;d&quot;]         |
+-------------------------------------+

mysql&gt; SET @j = '{&quot;a&quot;: 1, &quot;b&quot;: [2, 3], &quot;c&quot;: 4}';
mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');
+------------------------------------+
| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |
+------------------------------------+
| {&quot;a&quot;: 1, &quot;b&quot;: [2, 3, &quot;x&quot;], &quot;c&quot;: 4} |
+------------------------------------+
mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');
+--------------------------------------+
| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |
+--------------------------------------+
| {&quot;a&quot;: 1, &quot;b&quot;: [2, 3], &quot;c&quot;: [4, &quot;y&quot;]} |
+--------------------------------------+

mysql&gt; SET @j = '{&quot;a&quot;: 1}';
mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$', 'z');
+---------------------------------+
| JSON_ARRAY_APPEND(@j, '$', 'z') |
+---------------------------------+
| [{&quot;a&quot;: 1}, &quot;z&quot;]                 |
+---------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">395</field>
		<field name="name">JSON_ARRAY_INSERT</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_ARRAY_INSERT(json_doc, path, val[, path, val] ...)

Updates a JSON document, inserting into an array within the document
and returning the modified document. Returns NULL if any argument is
NULL. An error occurs if the json_doc argument is not a valid JSON
document or any path argument is not a valid path expression or
contains a * or ** wildcard or does not end with an array element
identifier.

The path-value pairs are evaluated left to right. The document produced
by evaluating one pair becomes the new value against which the next
pair is evaluated.

Pairs for which the path does not identify any array in the JSON
document are ignored. If a path identifies an array element, the
corresponding value is inserted at that element position, shifting any
following values to the right. If a path identifies an array position
past the end of an array, the value is inserted at the end of the
array.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html

</field>
		<field name="example">mysql&gt; SET @j = '[&quot;a&quot;, {&quot;b&quot;: [1, 2]}, [3, 4]]';
mysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');
+------------------------------------+
| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |
+------------------------------------+
| [&quot;a&quot;, &quot;x&quot;, {&quot;b&quot;: [1, 2]}, [3, 4]]  |
+------------------------------------+
mysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');
+--------------------------------------+
| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |
+--------------------------------------+
| [&quot;a&quot;, {&quot;b&quot;: [1, 2]}, [3, 4], &quot;x&quot;]    |
+--------------------------------------+
mysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');
+-----------------------------------------+
| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |
+-----------------------------------------+
| [&quot;a&quot;, {&quot;b&quot;: [&quot;x&quot;, 1, 2]}, [3, 4]]       |
+-----------------------------------------+
mysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');
+---------------------------------------+
| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |
+---------------------------------------+
| [&quot;a&quot;, {&quot;b&quot;: [1, 2]}, [3, &quot;y&quot;, 4]]     |
+---------------------------------------+
mysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');
+----------------------------------------------------+
| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |
+----------------------------------------------------+
| [&quot;x&quot;, &quot;a&quot;, {&quot;b&quot;: [1, 2]}, [3, 4]]                  |
+----------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">396</field>
		<field name="name">JSON_INSERT</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_INSERT(json_doc, path, val[, path, val] ...)

Inserts data into a JSON document and returns the result. Returns NULL
if any argument is NULL. An error occurs if the json_doc argument is
not a valid JSON document or any path argument is not a valid path
expression or contains a * or ** wildcard.

The path-value pairs are evaluated left to right. The document produced
by evaluating one pair becomes the new value against which the next
pair is evaluated.

A path-value pair for an existing path in the document is ignored and
does not overwrite the existing document value. A path-value pair for a
nonexisting path in the document adds the value to the document if the
path identifies one of these types of values:

o A member not present in an existing object. The member is added to
  the object and associated with the new value.

o A position past the end of an existing array. The array is extended
  with the new value. If the existing value is not an array, it is
  autowrapped as an array, then extended with the new value.

Otherwise, a path-value pair for a nonexisting path in the document is
ignored and has no effect.

For a comparison of JSON_INSERT(), JSON_REPLACE(), and JSON_SET(), see
the discussion of JSON_SET().

URL: https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html

</field>
		<field name="example">mysql&gt; SET @j = '{ &quot;a&quot;: 1, &quot;b&quot;: [2, 3]}';
mysql&gt; SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');
+----------------------------------------------------+
| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |
+----------------------------------------------------+
| {&quot;a&quot;: 1, &quot;b&quot;: [2, 3], &quot;c&quot;: &quot;[true, false]&quot;}        |
+----------------------------------------------------+

mysql&gt; SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));
+------------------------------------------------------------------+
| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |
+------------------------------------------------------------------+
| {&quot;a&quot;: 1, &quot;b&quot;: [2, 3], &quot;c&quot;: [true, false]}                        |
+------------------------------------------------------------------+
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">397</field>
		<field name="name">JSON_MERGE</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_MERGE(json_doc, json_doc[, json_doc] ...)

Merges two or more JSON documents. Synonym for JSON_MERGE_PRESERVE();
deprecated in MySQL 8.0.3 and subject to removal in a future release.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_MERGE('[1, 2]', '[true, false]');
+---------------------------------------+
| JSON_MERGE('[1, 2]', '[true, false]') |
+---------------------------------------+
| [1, 2, true, false]                   |
+---------------------------------------+
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Warning
   Code: 1287
Message: 'JSON_MERGE' is deprecated and will be removed in a future release. \
 Please use JSON_MERGE_PRESERVE/JSON_MERGE_PATCH instead
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">398</field>
		<field name="name">JSON_MERGE_PATCH()</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_MERGE_PATCH(json_doc, json_doc[, json_doc] ...)

Performs an RFC 7396 (https://tools.ietf.org/html/rfc7396) compliant
merge of two or more JSON documents and returns the merged result,
without preserving members having duplicate keys. Raises an error if at
least one of the documents passed as arguments to this function is not
valid.

*Note*:

For an explanation and example of the differences between this function
and JSON_MERGE_PRESERVE(), see
https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html
#json-merge-patch-json-merge-preserve-compared.

JSON_MERGE_PATCH() performs a merge as follows:

1. If the first argument is not an object, the result of the merge is
   the same as if an empty object had been merged with the second
   argument.

2. If the second argument is not an object, the result of the merge is
   the second argument.

3. If both arguments are objects, the result of the merge is an object
   with the following members:

  o All members of the first object which do not have a corresponding
    member with the same key in the second object.

  o All members of the second object which do not have a corresponding
    key in the first object, and whose value is not the JSON null
    literal.

  o All members with a key that exists in both the first and the second
    object, and whose value in the second object is not the JSON null
    literal. The values of these members are the results of recursively
    merging the value in the first object with the value in the second
    object.

For additional information, see
https://dev.mysql.com/doc/refman/8.0/en/json.html#json-normalization.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');
+---------------------------------------------+
| JSON_MERGE_PATCH('[1, 2]', '[true, false]') |
+---------------------------------------------+
| [true, false]                               |
+---------------------------------------------+

mysql&gt; SELECT JSON_MERGE_PATCH('{&quot;name&quot;: &quot;x&quot;}', '{&quot;id&quot;: 47}');
+-------------------------------------------------+
| JSON_MERGE_PATCH('{&quot;name&quot;: &quot;x&quot;}', '{&quot;id&quot;: 47}') |
+-------------------------------------------------+
| {&quot;id&quot;: 47, &quot;name&quot;: &quot;x&quot;}                         |
+-------------------------------------------------+

mysql&gt; SELECT JSON_MERGE_PATCH('1', 'true');
+-------------------------------+
| JSON_MERGE_PATCH('1', 'true') |
+-------------------------------+
| true                          |
+-------------------------------+

mysql&gt; SELECT JSON_MERGE_PATCH('[1, 2]', '{&quot;id&quot;: 47}');
+------------------------------------------+
| JSON_MERGE_PATCH('[1, 2]', '{&quot;id&quot;: 47}') |
+------------------------------------------+
| {&quot;id&quot;: 47}                               |
+------------------------------------------+

mysql&gt; SELECT JSON_MERGE_PATCH('{ &quot;a&quot;: 1, &quot;b&quot;:2 }',
     &gt;     '{ &quot;a&quot;: 3, &quot;c&quot;:4 }');
+-----------------------------------------------------------+
| JSON_MERGE_PATCH('{ &quot;a&quot;: 1, &quot;b&quot;:2 }','{ &quot;a&quot;: 3, &quot;c&quot;:4 }') |
+-----------------------------------------------------------+
| {&quot;a&quot;: 3, &quot;b&quot;: 2, &quot;c&quot;: 4}                                  |
+-----------------------------------------------------------+

mysql&gt; SELECT JSON_MERGE_PATCH('{ &quot;a&quot;: 1, &quot;b&quot;:2 }','{ &quot;a&quot;: 3, &quot;c&quot;:4 }',
     &gt;     '{ &quot;a&quot;: 5, &quot;d&quot;:6 }');
+-------------------------------------------------------------------------------+
| JSON_MERGE_PATCH('{ &quot;a&quot;: 1, &quot;b&quot;:2 }','{ &quot;a&quot;: 3, &quot;c&quot;:4 }','{ &quot;a&quot;: 5, &quot;d&quot;:6 }') |
+-------------------------------------------------------------------------------+
| {&quot;a&quot;: 5, &quot;b&quot;: 2, &quot;c&quot;: 4, &quot;d&quot;: 6}                                              |
+-------------------------------------------------------------------------------+

mysql&gt; SELECT JSON_MERGE_PATCH('{&quot;a&quot;:1, &quot;b&quot;:2}', '{&quot;b&quot;:null}');
+--------------------------------------------------+
| JSON_MERGE_PATCH('{&quot;a&quot;:1, &quot;b&quot;:2}', '{&quot;b&quot;:null}') |
+--------------------------------------------------+
| {&quot;a&quot;: 1}                                         |
+--------------------------------------------------+

mysql&gt; SELECT JSON_MERGE_PATCH('{&quot;a&quot;:{&quot;x&quot;:1}}', '{&quot;a&quot;:{&quot;y&quot;:2}}');
+----------------------------------------------------+
| JSON_MERGE_PATCH('{&quot;a&quot;:{&quot;x&quot;:1}}', '{&quot;a&quot;:{&quot;y&quot;:2}}') |
+----------------------------------------------------+
| {&quot;a&quot;: {&quot;x&quot;: 1, &quot;y&quot;: 2}}                            |
+----------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">399</field>
		<field name="name">JSON_MERGE_PRESERVE()</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_MERGE_PRESERVE(json_doc, json_doc[, json_doc] ...)

Merges two or more JSON documents and returns the merged result.
Returns NULL if any argument is NULL. An error occurs if any argument
is not a valid JSON document.

Merging takes place according to the following rules. For additional
information, see
https://dev.mysql.com/doc/refman/8.0/en/json.html#json-normalization.

o Adjacent arrays are merged to a single array.

o Adjacent objects are merged to a single object.

o A scalar value is autowrapped as an array and merged as an array.

o An adjacent array and object are merged by autowrapping the object as
  an array and merging the two arrays.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_MERGE_PRESERVE('[1, 2]', '[true, false]');
+------------------------------------------------+
| JSON_MERGE_PRESERVE('[1, 2]', '[true, false]') |
+------------------------------------------------+
| [1, 2, true, false]                            |
+------------------------------------------------+

mysql&gt; SELECT JSON_MERGE_PRESERVE('{&quot;name&quot;: &quot;x&quot;}', '{&quot;id&quot;: 47}');
+----------------------------------------------------+
| JSON_MERGE_PRESERVE('{&quot;name&quot;: &quot;x&quot;}', '{&quot;id&quot;: 47}') |
+----------------------------------------------------+
| {&quot;id&quot;: 47, &quot;name&quot;: &quot;x&quot;}                            |
+----------------------------------------------------+

mysql&gt; SELECT JSON_MERGE_PRESERVE('1', 'true');
+----------------------------------+
| JSON_MERGE_PRESERVE('1', 'true') |
+----------------------------------+
| [1, true]                        |
+----------------------------------+

mysql&gt; SELECT JSON_MERGE_PRESERVE('[1, 2]', '{&quot;id&quot;: 47}');
+---------------------------------------------+
| JSON_MERGE_PRESERVE('[1, 2]', '{&quot;id&quot;: 47}') |
+---------------------------------------------+
| [1, 2, {&quot;id&quot;: 47}]                          |
+---------------------------------------------+

mysql&gt; SELECT JSON_MERGE_PRESERVE('{ &quot;a&quot;: 1, &quot;b&quot;: 2 }',
     &gt;    '{ &quot;a&quot;: 3, &quot;c&quot;: 4 }');
+--------------------------------------------------------------+
| JSON_MERGE_PRESERVE('{ &quot;a&quot;: 1, &quot;b&quot;: 2 }','{ &quot;a&quot;: 3, &quot;c&quot;:4 }') |
+--------------------------------------------------------------+
| {&quot;a&quot;: [1, 3], &quot;b&quot;: 2, &quot;c&quot;: 4}                                |
+--------------------------------------------------------------+

mysql&gt; SELECT JSON_MERGE_PRESERVE('{ &quot;a&quot;: 1, &quot;b&quot;: 2 }','{ &quot;a&quot;: 3, &quot;c&quot;: 4 }',
     &gt;    '{ &quot;a&quot;: 5, &quot;d&quot;: 6 }');
+----------------------------------------------------------------------------------+
| JSON_MERGE_PRESERVE('{ &quot;a&quot;: 1, &quot;b&quot;: 2 }','{ &quot;a&quot;: 3, &quot;c&quot;: 4 }','{ &quot;a&quot;: 5, &quot;d&quot;: 6 }') |
+----------------------------------------------------------------------------------+
| {&quot;a&quot;: [1, 3, 5], &quot;b&quot;: 2, &quot;c&quot;: 4, &quot;d&quot;: 6}                                         |
+----------------------------------------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">400</field>
		<field name="name">JSON_REMOVE</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_REMOVE(json_doc, path[, path] ...)

Removes data from a JSON document and returns the result. Returns NULL
if any argument is NULL. An error occurs if the json_doc argument is
not a valid JSON document or any path argument is not a valid path
expression or is $ or contains a * or ** wildcard.

The path arguments are evaluated left to right. The document produced
by evaluating one path becomes the new value against which the next
path is evaluated.

It is not an error if the element to be removed does not exist in the
document; in that case, the path does not affect the document.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html

</field>
		<field name="example">mysql&gt; SET @j = '[&quot;a&quot;, [&quot;b&quot;, &quot;c&quot;], &quot;d&quot;]';
mysql&gt; SELECT JSON_REMOVE(@j, '$[1]');
+-------------------------+
| JSON_REMOVE(@j, '$[1]') |
+-------------------------+
| [&quot;a&quot;, &quot;d&quot;]              |
+-------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">401</field>
		<field name="name">JSON_REPLACE</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_REPLACE(json_doc, path, val[, path, val] ...)

Replaces existing values in a JSON document and returns the result.
Returns NULL if any argument is NULL. An error occurs if the json_doc
argument is not a valid JSON document or any path argument is not a
valid path expression or contains a * or ** wildcard.

The path-value pairs are evaluated left to right. The document produced
by evaluating one pair becomes the new value against which the next
pair is evaluated.

A path-value pair for an existing path in the document overwrites the
existing document value with the new value. A path-value pair for a
nonexisting path in the document is ignored and has no effect.

In MySQL 8.0.4, the optimizer can perform a partial, in-place update of
a JSON column instead of removing the old document and writing the new
document in its entirety to the column. This optimization can be
performed for an update statement that uses the JSON_REPLACE() function
and meets the conditions outlined in
https://dev.mysql.com/doc/refman/8.0/en/json.html#json-partial-updates.

For a comparison of JSON_INSERT(), JSON_REPLACE(), and JSON_SET(), see
the discussion of JSON_SET().

URL: https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html

</field>
		<field name="example">mysql&gt; SET @j = '{ &quot;a&quot;: 1, &quot;b&quot;: [2, 3]}';
mysql&gt; SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');
+-----------------------------------------------------+
| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |
+-----------------------------------------------------+
| {&quot;a&quot;: 10, &quot;b&quot;: [2, 3]}                              |
+-----------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">402</field>
		<field name="name">JSON_SET</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_SET(json_doc, path, val[, path, val] ...)

Inserts or updates data in a JSON document and returns the result.
Returns NULL if json_doc or path is NULL, or if path, when given, does
not locate an object. Otherwise, an error occurs if the json_doc
argument is not a valid JSON document or any path argument is not a
valid path expression or contains a * or ** wildcard.

The path-value pairs are evaluated left to right. The document produced
by evaluating one pair becomes the new value against which the next
pair is evaluated.

A path-value pair for an existing path in the document overwrites the
existing document value with the new value. A path-value pair for a
nonexisting path in the document adds the value to the document if the
path identifies one of these types of values:

o A member not present in an existing object. The member is added to
  the object and associated with the new value.

o A position past the end of an existing array. The array is extended
  with the new value. If the existing value is not an array, it is
  autowrapped as an array, then extended with the new value.

Otherwise, a path-value pair for a nonexisting path in the document is
ignored and has no effect.

In MySQL 8.0.4, the optimizer can perform a partial, in-place update of
a JSON column instead of removing the old document and writing the new
document in its entirety to the column. This optimization can be
performed for an update statement that uses the JSON_SET() function and
meets the conditions outlined in
https://dev.mysql.com/doc/refman/8.0/en/json.html#json-partial-updates.

The JSON_SET(), JSON_INSERT(), and JSON_REPLACE() functions are
related:

o JSON_SET() replaces existing values and adds nonexisting values.

o JSON_INSERT() inserts values without replacing existing values.

o JSON_REPLACE() replaces only existing values.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html

</field>
		<field name="example">mysql&gt; SET @j = '{ &quot;a&quot;: 1, &quot;b&quot;: [2, 3]}';
mysql&gt; SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');
+-------------------------------------------------+
| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |
+-------------------------------------------------+
| {&quot;a&quot;: 10, &quot;b&quot;: [2, 3], &quot;c&quot;: &quot;[true, false]&quot;}    |
+-------------------------------------------------+
mysql&gt; SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');
+----------------------------------------------------+
| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |
+----------------------------------------------------+
| {&quot;a&quot;: 1, &quot;b&quot;: [2, 3], &quot;c&quot;: &quot;[true, false]&quot;}        |
+----------------------------------------------------+
mysql&gt; SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');
+-----------------------------------------------------+
| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |
+-----------------------------------------------------+
| {&quot;a&quot;: 10, &quot;b&quot;: [2, 3]}                              |
+-----------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">403</field>
		<field name="name">JSON_UNQUOTE</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_UNQUOTE(json_val)

Unquotes JSON value and returns the result as a utf8mb4 string. Returns
NULL if the argument is NULL. An error occurs if the value starts and
ends with double quotes but is not a valid JSON string literal.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html

</field>
		<field name="example">mysql&gt; SET @j = '&quot;abc&quot;';
mysql&gt; SELECT @j, JSON_UNQUOTE(@j);
+-------+------------------+
| @j    | JSON_UNQUOTE(@j) |
+-------+------------------+
| &quot;abc&quot; | abc              |
+-------+------------------+
mysql&gt; SET @j = '[1, 2, 3]';
mysql&gt; SELECT @j, JSON_UNQUOTE(@j);
+-----------+------------------+
| @j        | JSON_UNQUOTE(@j) |
+-----------+------------------+
| [1, 2, 3] | [1, 2, 3]        |
+-----------+------------------+

mysql&gt; SELECT @@sql_mode;
+------------+
| @@sql_mode |
+------------+
|            |
+------------+

mysql&gt; SELECT JSON_UNQUOTE('&quot;\\t\\u0032&quot;');
+------------------------------+
| JSON_UNQUOTE('&quot;\\t\\u0032&quot;') |
+------------------------------+
|       2                           |
+------------------------------+

mysql&gt; SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';
mysql&gt; SELECT JSON_UNQUOTE('&quot;\\t\\u0032&quot;');
+------------------------------+
| JSON_UNQUOTE('&quot;\\t\\u0032&quot;') |
+------------------------------+
| \t\u0032                     |
+------------------------------+

mysql&gt; SELECT JSON_UNQUOTE('&quot;\t\u0032&quot;');
+----------------------------+
| JSON_UNQUOTE('&quot;\t\u0032&quot;') |
+----------------------------+
|       2                         |
+----------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">404</field>
		<field name="name">JSON_DEPTH</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_DEPTH(json_doc)

Returns the maximum depth of a JSON document. Returns NULL if the
argument is NULL. An error occurs if the argument is not a valid JSON
document.

An empty array, empty object, or scalar value has depth 1. A nonempty
array containing only elements of depth 1 or nonempty object containing
only member values of depth 1 has depth 2. Otherwise, a JSON document
has depth greater than 2.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');
+------------------+------------------+--------------------+
| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |
+------------------+------------------+--------------------+
|                1 |                1 |                  1 |
+------------------+------------------+--------------------+
mysql&gt; SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');
+------------------------+------------------------+
| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |
+------------------------+------------------------+
|                      2 |                      2 |
+------------------------+------------------------+
mysql&gt; SELECT JSON_DEPTH('[10, {&quot;a&quot;: 20}]');
+-------------------------------+
| JSON_DEPTH('[10, {&quot;a&quot;: 20}]') |
+-------------------------------+
|                             3 |
+-------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">405</field>
		<field name="name">JSON_LENGTH</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_LENGTH(json_doc[, path])

Returns the length of a JSON document, or, if a path argument is given,
the length of the value within the document identified by the path.
Returns NULL if any argument is NULL or the path argument does not
identify a value in the document. An error occurs if the json_doc
argument is not a valid JSON document or the path argument is not a
valid path expression. Prior to MySQL 8.0.26, an error is also raised
if the path expression contains a * or ** wildcard.

The length of a document is determined as follows:

o The length of a scalar is 1.

o The length of an array is the number of array elements.

o The length of an object is the number of object members.

o The length does not count the length of nested arrays or objects.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_LENGTH('[1, 2, {&quot;a&quot;: 3}]');
+---------------------------------+
| JSON_LENGTH('[1, 2, {&quot;a&quot;: 3}]') |
+---------------------------------+
|                               3 |
+---------------------------------+
mysql&gt; SELECT JSON_LENGTH('{&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: 30}}');
+-----------------------------------------+
| JSON_LENGTH('{&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: 30}}') |
+-----------------------------------------+
|                                       2 |
+-----------------------------------------+
mysql&gt; SELECT JSON_LENGTH('{&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: 30}}', '$.b');
+------------------------------------------------+
| JSON_LENGTH('{&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: 30}}', '$.b') |
+------------------------------------------------+
|                                              1 |
+------------------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">406</field>
		<field name="name">JSON_TYPE</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_TYPE(json_val)

Returns a utf8mb4 string indicating the type of a JSON value. This can
be an object, an array, or a scalar type, as shown here:

mysql&gt; SET @j = '{&quot;a&quot;: [10, true]}';
mysql&gt; SELECT JSON_TYPE(@j);
+---------------+
| JSON_TYPE(@j) |
+---------------+
| OBJECT        |
+---------------+
mysql&gt; SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));
+------------------------------------+
| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |
+------------------------------------+
| ARRAY                              |
+------------------------------------+
mysql&gt; SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));
+---------------------------------------+
| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |
+---------------------------------------+
| INTEGER                               |
+---------------------------------------+
mysql&gt; SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));
+---------------------------------------+
| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |
+---------------------------------------+
| BOOLEAN                               |
+---------------------------------------+

JSON_TYPE() returns NULL if the argument is NULL:

mysql&gt; SELECT JSON_TYPE(NULL);
+-----------------+
| JSON_TYPE(NULL) |
+-----------------+
| NULL            |
+-----------------+

An error occurs if the argument is not a valid JSON value:

mysql&gt; SELECT JSON_TYPE(1);
ERROR 3146 (22032): Invalid data type for JSON data in argument 1
to function json_type; a JSON string or JSON type is required.

For a non-NULL, non-error result, the following list describes the
possible JSON_TYPE() return values:

o Purely JSON types:

  o OBJECT: JSON objects

  o ARRAY: JSON arrays

  o BOOLEAN: The JSON true and false literals

  o NULL: The JSON null literal

o Numeric types:

  o INTEGER: MySQL TINYINT, SMALLINT, MEDIUMINT and INT and BIGINT
    scalars

  o DOUBLE: MySQL DOUBLE FLOAT scalars

  o DECIMAL: MySQL DECIMAL and NUMERIC scalars

o Temporal types:

  o DATETIME: MySQL DATETIME and TIMESTAMP scalars

  o DATE: MySQL DATE scalars

  o TIME: MySQL TIME scalars

o String types:

  o STRING: MySQL utf8mb3 character type scalars: CHAR, VARCHAR, TEXT,
    ENUM, and SET

o Binary types:

  o BLOB: MySQL binary type scalars including BINARY, VARBINARY, BLOB,
    and BIT

o All other types:

  o OPAQUE (raw bits)

URL: https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">407</field>
		<field name="name">JSON_VALID</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_VALID(val)

Returns 0 or 1 to indicate whether a value is valid JSON. Returns NULL
if the argument is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_VALID('{&quot;a&quot;: 1}');
+------------------------+
| JSON_VALID('{&quot;a&quot;: 1}') |
+------------------------+
|                      1 |
+------------------------+
mysql&gt; SELECT JSON_VALID('hello'), JSON_VALID('&quot;hello&quot;');
+---------------------+-----------------------+
| JSON_VALID('hello') | JSON_VALID('&quot;hello&quot;') |
+---------------------+-----------------------+
|                   0 |                     1 |
+---------------------+-----------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">408</field>
		<field name="name">JSON_TABLE</field>
		<field name="help_category_id">32</field>
		<field name="description">Syntax:
JSON_TABLE(expr, path COLUMNS (column_list) [AS] alias)

Extracts data from a JSON document and returns it as a relational table
having the specified columns. The complete syntax for this function is
shown here:

JSON_TABLE(
    expr,
    path COLUMNS (column_list)
)   [AS] alias

column_list:
    column[, column][, ...]

column:
    name FOR ORDINALITY
    |  name type PATH string path [on_empty] [on_error]
    |  name type EXISTS PATH string path
    |  NESTED [PATH] path COLUMNS (column_list)

on_empty:
    {NULL | DEFAULT json_string | ERROR} ON EMPTY

on_error:
    {NULL | DEFAULT json_string | ERROR} ON ERROR

expr: This is an expression that returns JSON data. This can be a
constant ('{&quot;a&quot;:1}'), a column (t1.json_data, given table t1 specified
prior to JSON_TABLE() in the FROM clause), or a function call
(JSON_EXTRACT(t1.json_data,'$.post.comments')).

path: A JSON path expression, which is applied to the data source. We
refer to the JSON value matching the path as the row source; this is
used to generate a row of relational data. The COLUMNS clause evaluates
the row source, finds specific JSON values within the row source, and
returns those JSON values as SQL values in individual columns of a row
of relational data.

The alias is required. The usual rules for table aliases apply (see
https://dev.mysql.com/doc/refman/8.0/en/identifiers.html).

Beginning with MySQL 8.0.27, this function compares column names in
case-insensitive fashion.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-table-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-table-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">409</field>
		<field name="name">JSON_SCHEMA_VALID</field>
		<field name="help_category_id">32</field>
		<field name="description">JSON_SCHEMA_VALID(schema,document)

Validates a JSON document against a JSON schema. Both schema and
document are required. The schema must be a valid JSON object; the
document must be a valid JSON document. Provided that these conditions
are met: If the document validates against the schema, the function
returns true (1); otherwise, it returns false (0).

URL: https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html

</field>
		<field name="example">mysql&gt; SET @schema = '{
    '&gt;  &quot;id&quot;: &quot;http://json-schema.org/geo&quot;,
    '&gt; &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
    '&gt; &quot;description&quot;: &quot;A geographical coordinate&quot;,
    '&gt; &quot;type&quot;: &quot;object&quot;,
    '&gt; &quot;properties&quot;: {
    '&gt;   &quot;latitude&quot;: {
    '&gt;     &quot;type&quot;: &quot;number&quot;,
    '&gt;     &quot;minimum&quot;: -90,
    '&gt;     &quot;maximum&quot;: 90
    '&gt;   },
    '&gt;   &quot;longitude&quot;: {
    '&gt;     &quot;type&quot;: &quot;number&quot;,
    '&gt;     &quot;minimum&quot;: -180,
    '&gt;     &quot;maximum&quot;: 180
    '&gt;   }
    '&gt; },
    '&gt; &quot;required&quot;: [&quot;latitude&quot;, &quot;longitude&quot;]
    '&gt;}';
Query OK, 0 rows affected (0.01 sec)

mysql&gt; SET @document = '{
    '&gt; &quot;latitude&quot;: 63.444697,
    '&gt; &quot;longitude&quot;: 10.445118
    '&gt;}';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT JSON_SCHEMA_VALID(@schema, @document);
+---------------------------------------+
| JSON_SCHEMA_VALID(@schema, @document) |
+---------------------------------------+
|                                     1 |
+---------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SET @document = '{}';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT JSON_SCHEMA_VALID(@schema, @document);
+---------------------------------------+
| JSON_SCHEMA_VALID(@schema, @document) |
+---------------------------------------+
|                                     0 |
+---------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SET @schema = '{
    '&gt; &quot;id&quot;: &quot;http://json-schema.org/geo&quot;,
    '&gt; &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
    '&gt; &quot;description&quot;: &quot;A geographical coordinate&quot;,
    '&gt; &quot;type&quot;: &quot;object&quot;,
    '&gt; &quot;properties&quot;: {
    '&gt;   &quot;latitude&quot;: {
    '&gt;     &quot;type&quot;: &quot;number&quot;,
    '&gt;     &quot;minimum&quot;: -90,
    '&gt;     &quot;maximum&quot;: 90
    '&gt;   },
    '&gt;   &quot;longitude&quot;: {
    '&gt;     &quot;type&quot;: &quot;number&quot;,
    '&gt;     &quot;minimum&quot;: -180,
    '&gt;     &quot;maximum&quot;: 180
    '&gt;   }
    '&gt; }
    '&gt;}';
Query OK, 0 rows affected (0.00 sec)


mysql&gt; SELECT JSON_SCHEMA_VALID(@schema, @document);
+---------------------------------------+
| JSON_SCHEMA_VALID(@schema, @document) |
+---------------------------------------+
|                                     1 |
+---------------------------------------+
1 row in set (0.00 sec)

mysql&gt; CREATE TABLE geo (
    -&gt;     coordinate JSON,
    -&gt;     CHECK(
    -&gt;         JSON_SCHEMA_VALID(
    -&gt;             '{
    '&gt;                 &quot;type&quot;:&quot;object&quot;,
    '&gt;                 &quot;properties&quot;:{
    '&gt;                       &quot;latitude&quot;:{&quot;type&quot;:&quot;number&quot;, &quot;minimum&quot;:-90, &quot;maximum&quot;:90},
    '&gt;                       &quot;longitude&quot;:{&quot;type&quot;:&quot;number&quot;, &quot;minimum&quot;:-180, &quot;maximum&quot;:180}
    '&gt;                 },
    '&gt;                 &quot;required&quot;: [&quot;latitude&quot;, &quot;longitude&quot;]
    '&gt;             }',
    -&gt;             coordinate
    -&gt;         )
    -&gt;     )
    -&gt; );
Query OK, 0 rows affected (0.45 sec)

mysql&gt; SET @point1 = '{&quot;latitude&quot;:59, &quot;longitude&quot;:18}';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SET @point2 = '{&quot;latitude&quot;:91, &quot;longitude&quot;:0}';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SET @point3 = '{&quot;longitude&quot;:120}';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; INSERT INTO geo VALUES(@point1);
Query OK, 1 row affected (0.05 sec)

mysql&gt; INSERT INTO geo VALUES(@point2);
ERROR 3819 (HY000): Check constraint 'geo_chk_1' is violated.

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Error
   Code: 3934
Message: The JSON document location '#/latitude' failed requirement 'maximum' at
JSON Schema location '#/properties/latitude'.
*************************** 2. row ***************************
  Level: Error
   Code: 3819
Message: Check constraint 'geo_chk_1' is violated.
2 rows in set (0.00 sec)

mysql&gt; INSERT INTO geo VALUES(@point3);
ERROR 3819 (HY000): Check constraint 'geo_chk_1' is violated.
mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Error
   Code: 3934
Message: The JSON document location '#' failed requirement 'required' at JSON
Schema location '#'.
*************************** 2. row ***************************
  Level: Error
   Code: 3819
Message: Check constraint 'geo_chk_1' is violated.
2 rows in set (0.00 sec)

mysql&gt; SELECT JSON_SCHEMA_VALID('{&quot;type&quot;:&quot;string&quot;,&quot;pattern&quot;:&quot;(&quot;}', '&quot;abc&quot;');
+---------------------------------------------------------------+
| JSON_SCHEMA_VALID('{&quot;type&quot;:&quot;string&quot;,&quot;pattern&quot;:&quot;(&quot;}', '&quot;abc&quot;') |
+---------------------------------------------------------------+
|                                                             1 |
+---------------------------------------------------------------+
1 row in set (0.04 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">410</field>
		<field name="name">JSON_SCHEMA_VALIDATION_REPORT</field>
		<field name="help_category_id">32</field>
		<field name="description">JSON_SCHEMA_VALIDATION_REPORT(schema,document)

Validates a JSON document against a JSON schema. Both schema and
document are required. As with JSON_VALID_SCHEMA(), the schema must be
a valid JSON object, and the document must be a valid JSON document.
Provided that these conditions are met, the function returns a report,
as a JSON document, on the outcome of the validation. If the JSON
document is considered valid according to the JSON Schema, the function
returns a JSON object with one property valid having the value &quot;true&quot;.
If the JSON document fails validation, the function returns a JSON
object which includes the properties listed here:

o valid: Always &quot;false&quot; for a failed schema validation

o reason: A human-readable string containing the reason for the failure

o schema-location: A JSON pointer URI fragment identifier indicating
  where in the JSON schema the validation failed (see Note following
  this list)

o document-location: A JSON pointer URI fragment identifier indicating
  where in the JSON document the validation failed (see Note following
  this list)

o schema-failed-keyword: A string containing the name of the keyword or
  property in the JSON schema that was violated

*Note*:

JSON pointer URI fragment identifiers are defined in RFC 6901 -
JavaScript Object Notation (JSON) Pointer
(https://tools.ietf.org/html/rfc6901#page-5). (These are not the same
as the JSON path notation used by JSON_EXTRACT() and other MySQL JSON
functions.) In this notation, # represents the entire document, and
#/myprop represents the portion of the document included in the
top-level property named myprop. See the specification just cited and
the examples shown later in this section for more information.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html

</field>
		<field name="example">mysql&gt; SET @schema = '{
    '&gt;  &quot;id&quot;: &quot;http://json-schema.org/geo&quot;,
    '&gt; &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
    '&gt; &quot;description&quot;: &quot;A geographical coordinate&quot;,
    '&gt; &quot;type&quot;: &quot;object&quot;,
    '&gt; &quot;properties&quot;: {
    '&gt;   &quot;latitude&quot;: {
    '&gt;     &quot;type&quot;: &quot;number&quot;,
    '&gt;     &quot;minimum&quot;: -90,
    '&gt;     &quot;maximum&quot;: 90
    '&gt;   },
    '&gt;   &quot;longitude&quot;: {
    '&gt;     &quot;type&quot;: &quot;number&quot;,
    '&gt;     &quot;minimum&quot;: -180,
    '&gt;     &quot;maximum&quot;: 180
    '&gt;   }
    '&gt; },
    '&gt; &quot;required&quot;: [&quot;latitude&quot;, &quot;longitude&quot;]
    '&gt;}';
Query OK, 0 rows affected (0.01 sec)

mysql&gt; SET @document = '{
    '&gt; &quot;latitude&quot;: 63.444697,
    '&gt; &quot;longitude&quot;: 10.445118
    '&gt;}';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);
+---------------------------------------------------+
| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |
+---------------------------------------------------+
| {&quot;valid&quot;: true}                                   |
+---------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SET @document = '{
    '&gt; &quot;latitude&quot;: 63.444697,
    '&gt; &quot;longitude&quot;: 310.445118
    '&gt; }';

mysql&gt; SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\G
*************************** 1. row ***************************
JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {
  &quot;valid&quot;: false,
  &quot;reason&quot;: &quot;The JSON document location '#/longitude' failed requirement 'maximum' at JSON Schema location '#/properties/longitude'&quot;,
  &quot;schema-location&quot;: &quot;#/properties/longitude&quot;,
  &quot;document-location&quot;: &quot;#/longitude&quot;,
  &quot;schema-failed-keyword&quot;: &quot;maximum&quot;
}
1 row in set (0.00 sec)

mysql&gt; SET @document = '{}';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\G
*************************** 1. row ***************************
JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {
  &quot;valid&quot;: false,
  &quot;reason&quot;: &quot;The JSON document location '#' failed requirement 'required' at JSON Schema location '#'&quot;,
  &quot;schema-location&quot;: &quot;#&quot;,
  &quot;document-location&quot;: &quot;#&quot;,
  &quot;schema-failed-keyword&quot;: &quot;required&quot;
}
1 row in set (0.00 sec)

mysql&gt; SET @schema = '{
    '&gt; &quot;id&quot;: &quot;http://json-schema.org/geo&quot;,
    '&gt; &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
    '&gt; &quot;description&quot;: &quot;A geographical coordinate&quot;,
    '&gt; &quot;type&quot;: &quot;object&quot;,
    '&gt; &quot;properties&quot;: {
    '&gt;   &quot;latitude&quot;: {
    '&gt;     &quot;type&quot;: &quot;number&quot;,
    '&gt;     &quot;minimum&quot;: -90,
    '&gt;     &quot;maximum&quot;: 90
    '&gt;   },
    '&gt;   &quot;longitude&quot;: {
    '&gt;     &quot;type&quot;: &quot;number&quot;,
    '&gt;     &quot;minimum&quot;: -180,
    '&gt;     &quot;maximum&quot;: 180
    '&gt;   }
    '&gt; }
    '&gt;}';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);
+---------------------------------------------------+
| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |
+---------------------------------------------------+
| {&quot;valid&quot;: true}                                   |
+---------------------------------------------------+
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">411</field>
		<field name="name">JSON_PRETTY</field>
		<field name="help_category_id">32</field>
		<field name="description">JSON_PRETTY(json_val)

Provides pretty-printing of JSON values similar to that implemented in
PHP and by other languages and database systems. The value supplied
must be a JSON value or a valid string representation of a JSON value.
Extraneous whitespaces and newlines present in this value have no
effect on the output. For a NULL value, the function returns NULL. If
the value is not a JSON document, or if it cannot be parsed as one, the
function fails with an error.

Formatting of the output from this function adheres to the following
rules:

o Each array element or object member appears on a separate line,
  indented by one additional level as compared to its parent.

o Each level of indentation adds two leading spaces.

o A comma separating individual array elements or object members is
  printed before the newline that separates the two elements or
  members.

o The key and the value of an object member are separated by a colon
  followed by a space (': ').

o An empty object or array is printed on a single line. No space is
  printed between the opening and closing brace.

o Special characters in string scalars and key names are escaped
  employing the same rules used by the JSON_QUOTE() function.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html

</field>
		<field name="example">mysql&gt; SELECT JSON_PRETTY('123'); # scalar
+--------------------+
| JSON_PRETTY('123') |
+--------------------+
| 123                |
+--------------------+

mysql&gt; SELECT JSON_PRETTY(&quot;[1,3,5]&quot;); # array
+------------------------+
| JSON_PRETTY(&quot;[1,3,5]&quot;) |
+------------------------+
| [
  1,
  3,
  5
]      |
+------------------------+

mysql&gt; SELECT JSON_PRETTY('{&quot;a&quot;:&quot;10&quot;,&quot;b&quot;:&quot;15&quot;,&quot;x&quot;:&quot;25&quot;}'); # object
+---------------------------------------------+
| JSON_PRETTY('{&quot;a&quot;:&quot;10&quot;,&quot;b&quot;:&quot;15&quot;,&quot;x&quot;:&quot;25&quot;}') |
+---------------------------------------------+
| {
  &quot;a&quot;: &quot;10&quot;,
  &quot;b&quot;: &quot;15&quot;,
  &quot;x&quot;: &quot;25&quot;
}   |
+---------------------------------------------+

mysql&gt; SELECT JSON_PRETTY('[&quot;a&quot;,1,{&quot;key1&quot;:
    '&gt;    &quot;value1&quot;},&quot;5&quot;,     &quot;77&quot; ,
    '&gt;       {&quot;key2&quot;:[&quot;value3&quot;,&quot;valueX&quot;,
    '&gt; &quot;valueY&quot;]},&quot;j&quot;, &quot;2&quot;   ]')\G  # nested arrays and objects
*************************** 1. row ***************************
JSON_PRETTY('[&quot;a&quot;,1,{&quot;key1&quot;:
             &quot;value1&quot;},&quot;5&quot;,     &quot;77&quot; ,
                {&quot;key2&quot;:[&quot;value3&quot;,&quot;valuex&quot;,
          &quot;valuey&quot;]},&quot;j&quot;, &quot;2&quot;   ]'): [
  &quot;a&quot;,
  1,
  {
    &quot;key1&quot;: &quot;value1&quot;
  },
  &quot;5&quot;,
  &quot;77&quot;,
  {
    &quot;key2&quot;: [
      &quot;value3&quot;,
      &quot;valuex&quot;,
      &quot;valuey&quot;
    ]
  },
  &quot;j&quot;,
  &quot;2&quot;
]
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">412</field>
		<field name="name">JSON_STORAGE_FREE</field>
		<field name="help_category_id">32</field>
		<field name="description">JSON_STORAGE_FREE(json_val)

For a JSON column value, this function shows how much storage space was
freed in its binary representation after it was updated in place using
JSON_SET(), JSON_REPLACE(), or JSON_REMOVE(). The argument can also be
a valid JSON document or a string which can be parsed as one---either
as a literal value or as the value of a user variable---in which case
the function returns 0. It returns a positive, nonzero value if the
argument is a JSON column value which has been updated as described
previously, such that its binary representation takes up less space
than it did prior to the update. For a JSON column which has been
updated such that its binary representation is the same as or larger
than before, or if the update was not able to take advantage of a
partial update, it returns 0; it returns NULL if the argument is NULL.

If json_val is not NULL, and neither is a valid JSON document nor can
be successfully parsed as one, an error results.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html

</field>
		<field name="example">mysql&gt; CREATE TABLE jtable (jcol JSON);
Query OK, 0 rows affected (0.38 sec)

mysql&gt; INSERT INTO jtable VALUES
    -&gt;     ('{&quot;a&quot;: 10, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: &quot;[true, false]&quot;}');
Query OK, 1 row affected (0.04 sec)

mysql&gt; SELECT * FROM jtable;
+----------------------------------------------+
| jcol                                         |
+----------------------------------------------+
| {&quot;a&quot;: 10, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: &quot;[true, false]&quot;} |
+----------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; UPDATE jtable
    -&gt;     SET jcol = JSON_SET(jcol, &quot;$.a&quot;, 10, &quot;$.b&quot;, &quot;wxyz&quot;, &quot;$.c&quot;, 1);
Query OK, 1 row affected (0.03 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; SELECT * FROM jtable;
+--------------------------------+
| jcol                           |
+--------------------------------+
| {&quot;a&quot;: 10, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: 1} |
+--------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_STORAGE_FREE(jcol) FROM jtable;
+-------------------------+
| JSON_STORAGE_FREE(jcol) |
+-------------------------+
|                      14 |
+-------------------------+
1 row in set (0.00 sec)

mysql&gt; UPDATE jtable
    -&gt;     SET jcol = JSON_SET(jcol, &quot;$.a&quot;, 10, &quot;$.b&quot;, &quot;wx&quot;, &quot;$.c&quot;, 1);
Query OK, 1 row affected (0.03 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; SELECT JSON_STORAGE_FREE(jcol) FROM jtable;
+-------------------------+
| JSON_STORAGE_FREE(jcol) |
+-------------------------+
|                      16 |
+-------------------------+
1 row in set (0.00 sec)

mysql&gt; UPDATE jtable SET jcol = '{&quot;a&quot;: 10, &quot;b&quot;: 1}';
Query OK, 1 row affected (0.05 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; SELECT JSON_STORAGE_FREE(jcol) FROM jtable;
+-------------------------+
| JSON_STORAGE_FREE(jcol) |
+-------------------------+
|                       0 |
+-------------------------+
1 row in set (0.00 sec)

mysql&gt; SET @j = '{&quot;a&quot;: 10, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: &quot;[true, false]&quot;}';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SET @j = JSON_SET(@j, '$.a', 10, '$.b', 'wxyz', '$.c', '1');
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @j, JSON_STORAGE_FREE(@j) AS Free;
+----------------------------------+------+
| @j                               | Free |
+----------------------------------+------+
| {&quot;a&quot;: 10, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: &quot;1&quot;} |    0 |
+----------------------------------+------+
1 row in set (0.00 sec)

mysql&gt; SELECT JSON_STORAGE_FREE('{&quot;a&quot;: 10, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: &quot;1&quot;}') AS Free;
+------+
| Free |
+------+
|    0 |
+------+
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">413</field>
		<field name="name">JSON_STORAGE_SIZE</field>
		<field name="help_category_id">32</field>
		<field name="description">JSON_STORAGE_SIZE(json_val)

This function returns the number of bytes used to store the binary
representation of a JSON document. When the argument is a JSON column,
this is the space used to store the JSON document as it was inserted
into the column, prior to any partial updates that may have been
performed on it afterwards. json_val must be a valid JSON document or a
string which can be parsed as one. In the case where it is string, the
function returns the amount of storage space in the JSON binary
representation that is created by parsing the string as JSON and
converting it to binary. It returns NULL if the argument is NULL.

An error results when json_val is not NULL, and is not---or cannot be
successfully parsed as---a JSON document.

URL: https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html

</field>
		<field name="example">mysql&gt; CREATE TABLE jtable (jcol JSON);
Query OK, 0 rows affected (0.42 sec)

mysql&gt; INSERT INTO jtable VALUES
    -&gt;     ('{&quot;a&quot;: 1000, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: &quot;[1, 3, 5, 7]&quot;}');
Query OK, 1 row affected (0.04 sec)

mysql&gt; SELECT
    -&gt;     jcol,
    -&gt;     JSON_STORAGE_SIZE(jcol) AS Size,
    -&gt;     JSON_STORAGE_FREE(jcol) AS Free
    -&gt; FROM jtable;
+-----------------------------------------------+------+------+
| jcol                                          | Size | Free |
+-----------------------------------------------+------+------+
| {&quot;a&quot;: 1000, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: &quot;[1, 3, 5, 7]&quot;} |   47 |    0 |
+-----------------------------------------------+------+------+
1 row in set (0.00 sec)

mysql&gt; UPDATE jtable SET jcol = 
    -&gt;     JSON_SET(jcol, &quot;$.b&quot;, &quot;a&quot;);
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; SELECT
    -&gt;     jcol,
    -&gt;     JSON_STORAGE_SIZE(jcol) AS Size,
    -&gt;     JSON_STORAGE_FREE(jcol) AS Free
    -&gt; FROM jtable;
+--------------------------------------------+------+------+
| jcol                                       | Size | Free |
+--------------------------------------------+------+------+
| {&quot;a&quot;: 1000, &quot;b&quot;: &quot;a&quot;, &quot;c&quot;: &quot;[1, 3, 5, 7]&quot;} |   47 |    3 |
+--------------------------------------------+------+------+
1 row in set (0.00 sec)

mysql&gt; UPDATE jtable
mysql&gt;     SET jcol = '{&quot;a&quot;: 4.55, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: &quot;[true, false]&quot;}';
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; SELECT
    -&gt;     jcol,
    -&gt;     JSON_STORAGE_SIZE(jcol) AS Size,
    -&gt;     JSON_STORAGE_FREE(jcol) AS Free
    -&gt; FROM jtable;
+------------------------------------------------+------+------+
| jcol                                           | Size | Free |
+------------------------------------------------+------+------+
| {&quot;a&quot;: 4.55, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: &quot;[true, false]&quot;} |   56 |    0 |
+------------------------------------------------+------+------+
1 row in set (0.00 sec)

mysql&gt; SET @j = '[100, &quot;sakila&quot;, [1, 3, 5], 425.05]';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;
+------------------------------------+------+
| @j                                 | Size |
+------------------------------------+------+
| [100, &quot;sakila&quot;, [1, 3, 5], 425.05] |   45 |
+------------------------------------+------+
1 row in set (0.00 sec)

mysql&gt; SET @j = JSON_SET(@j, '$[1]', &quot;json&quot;);
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;
+----------------------------------+------+
| @j                               | Size |
+----------------------------------+------+
| [100, &quot;json&quot;, [1, 3, 5], 425.05] |   43 |
+----------------------------------+------+
1 row in set (0.00 sec)

mysql&gt; SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;
+---------------------------------------------+------+
| @j                                          | Size |
+---------------------------------------------+------+
| [100, &quot;json&quot;, [[10, 20, 30], 3, 5], 425.05] |   56 |
+---------------------------------------------+------+
1 row in set (0.00 sec)

mysql&gt; SELECT
    -&gt;     JSON_STORAGE_SIZE('[100, &quot;sakila&quot;, [1, 3, 5], 425.05]') AS A,
    -&gt;     JSON_STORAGE_SIZE('{&quot;a&quot;: 1000, &quot;b&quot;: &quot;a&quot;, &quot;c&quot;: &quot;[1, 3, 5, 7]&quot;}') AS B,
    -&gt;     JSON_STORAGE_SIZE('{&quot;a&quot;: 1000, &quot;b&quot;: &quot;wxyz&quot;, &quot;c&quot;: &quot;[1, 3, 5, 7]&quot;}') AS C,
    -&gt;     JSON_STORAGE_SIZE('[100, &quot;json&quot;, [[10, 20, 30], 3, 5], 425.05]') AS D;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 45 | 44 | 47 | 56 |
+----+----+----+----+
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">414</field>
		<field name="name">GTID_SUBSET</field>
		<field name="help_category_id">33</field>
		<field name="description">Syntax:
GTID_SUBSET(set1,set2)

Given two sets of global transaction identifiers set1 and set2, returns
true if all GTIDs in set1 are also in set2. Returns NULL if set1 or
set2 is NULL. Returns false otherwise.

URL: https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html

</field>
		<field name="example">mysql&gt; SELECT GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23',
    -&gt;     '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57')\G
*************************** 1. row ***************************
GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23',
    '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57'): 1
1 row in set (0.00 sec)

mysql&gt; SELECT GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23-25',
    -&gt;     '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57')\G
*************************** 1. row ***************************
GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23-25',
    '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57'): 1
1 row in set (0.00 sec)

mysql&gt; SELECT GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25',
    -&gt;     '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57')\G
*************************** 1. row ***************************
GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25',
    '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57'): 0
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">415</field>
		<field name="name">GTID_SUBTRACT</field>
		<field name="help_category_id">33</field>
		<field name="description">Syntax:
GTID_SUBTRACT(set1,set2)

Given two sets of global transaction identifiers set1 and set2, returns
only those GTIDs from set1 that are not in set2. Returns NULL if set1
or set2 is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html

</field>
		<field name="example">mysql&gt; SELECT GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
    -&gt;     '3E11FA47-71CA-11E1-9E33-C80AA9429562:21')\G
*************************** 1. row ***************************
GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
    '3E11FA47-71CA-11E1-9E33-C80AA9429562:21'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:22-57
1 row in set (0.00 sec)

mysql&gt; SELECT GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
    -&gt;     '3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25')\G
*************************** 1. row ***************************
GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
    '3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:26-57
1 row in set (0.00 sec)

mysql&gt; SELECT GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
    -&gt;     '3E11FA47-71CA-11E1-9E33-C80AA9429562:23-24')\G
*************************** 1. row ***************************
GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
    '3E11FA47-71CA-11E1-9E33-C80AA9429562:23-24'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:21-22:25-57
1 row in set (0.01 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">416</field>
		<field name="name">WAIT_FOR_EXECUTED_GTID_SET</field>
		<field name="help_category_id">33</field>
		<field name="description">Syntax:
WAIT_FOR_EXECUTED_GTID_SET(gtid_set[, timeout])

Wait until the server has applied all of the transactions whose global
transaction identifiers are contained in gtid_set; that is, until the
condition GTID_SUBSET(gtid_subset, @@GLOBAL.gtid_executed) holds. See
https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-concepts.html
for a definition of GTID sets.

If a timeout is specified, and timeout seconds elapse before all of the
transactions in the GTID set have been applied, the function stops
waiting. timeout is optional, and the default timeout is 0 seconds, in
which case the function always waits until all of the transactions in
the GTID set have been applied. timeout must be greater than or equal
to 0; when running in strict SQL mode, a negative timeout value is
immediately rejected with an error (ER_WRONG_ARGUMENTS
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_wrong_arguments)); otherwise the function returns NULL,
and raises a warning.

WAIT_FOR_EXECUTED_GTID_SET() monitors all the GTIDs that are applied on
the server, including transactions that arrive from all replication
channels and user clients. It does not take into account whether
replication channels have been started or stopped.

For more information, see
https://dev.mysql.com/doc/refman/8.0/en/replication-gtids.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html

</field>
		<field name="example">mysql&gt; SELECT WAIT_FOR_EXECUTED_GTID_SET('3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5');
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">417</field>
		<field name="name">WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS</field>
		<field name="help_category_id">33</field>
		<field name="description">Syntax:
WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(gtid_set[, timeout][,channel])

WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() is deprecated. Use
WAIT_FOR_EXECUTED_GTID_SET() instead, which works regardless of the
replication channel or user client through which the specified
transactions arrive on the server.

URL: https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">418</field>
		<field name="name">MASTER_POS_WAIT</field>
		<field name="help_category_id">33</field>
		<field name="description">Syntax:
MASTER_POS_WAIT(log_name,log_pos[,timeout][,channel])

This function is for control of source-replica synchronization. It
blocks until the replica has read and applied all updates up to the
specified position in the source's binary log. From MySQL 8.0.26,
MASTER_POS_WAIT() is deprecated and the alias SOURCE_POS_WAIT() should
be used instead. In releases before MySQL 8.0.26, use
MASTER_POS_WAIT().

The return value is the number of log events the replica had to wait
for to advance to the specified position. The function returns NULL if
the replication SQL thread is not started, the replica's source
information is not initialized, the arguments are incorrect, or an
error occurs. It returns -1 if the timeout has been exceeded. If the
replication SQL thread stops while MASTER_POS_WAIT() is waiting, the
function returns NULL. If the replica is past the specified position,
the function returns immediately.

If the binary log file position has been marked as invalid, the
function waits until a valid file position is known. The binary log
file position can be marked as invalid when the CHANGE REPLICATION
SOURCE TO option GTID_ONLY is set for the replication channel, and the
server is restarted or replication is stopped. The file position
becomes valid after a transaction is successfully applied past the
given file position. If the applier does not reach the stated position,
the function waits until the timeout. Use a SHOW REPLICA STATUS
statement to check if the binary log file position has been marked as
invalid.

On a multithreaded replica, the function waits until expiry of the
limit set by the replica_checkpoint_group, slave_checkpoint_group,
replica_checkpoint_period or slave_checkpoint_period system variable,
when the checkpoint operation is called to update the status of the
replica. Depending on the setting for the system variables, the
function might therefore return some time after the specified position
was reached.

If binary log transaction compression is in use and the transaction
payload at the specified position is compressed (as a
Transaction_payload_event), the function waits until the whole
transaction has been read and applied, and the positions have updated.

If a timeout value is specified, MASTER_POS_WAIT() stops waiting when
timeout seconds have elapsed. timeout must be greater than or equal to
0. (When the server is running in strict SQL mode, a negative timeout
value is immediately rejected with ER_WRONG_ARGUMENTS
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_wrong_arguments); otherwise the function returns NULL, and
raises a warning.)

The optional channel value enables you to name which replication
channel the function applies to. See
https://dev.mysql.com/doc/refman/8.0/en/replication-channels.html for
more information.

URL: https://dev.mysql.com/doc/refman/8.0/en/replication-functions-synchronization.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/replication-functions-synchronization.html</field>
	</row>
	<row>
		<field name="help_topic_id">419</field>
		<field name="name">SOURCE_POS_WAIT</field>
		<field name="help_category_id">33</field>
		<field name="description">Syntax:
SOURCE_POS_WAIT(log_name,log_pos[,timeout][,channel])

This function is for control of source-replica synchronization. It
blocks until the replica has read and applied all updates up to the
specified position in the source's binary log. From MySQL 8.0.26, use
SOURCE_POS_WAIT() in place of MASTER_POS_WAIT(), which is deprecated
from that release. In releases before MySQL 8.0.26, use
MASTER_POS_WAIT().

The return value is the number of log events the replica had to wait
for to advance to the specified position. The function returns NULL if
the replication SQL thread is not started, the replica's source
information is not initialized, the arguments are incorrect, or an
error occurs. It returns -1 if the timeout has been exceeded. If the
replication SQL thread stops while SOURCE_POS_WAIT() is waiting, the
function returns NULL. If the replica is past the specified position,
the function returns immediately.

If the binary log file position has been marked as invalid, the
function waits until a valid file position is known. The binary log
file position can be marked as invalid when the CHANGE REPLICATION
SOURCE TO option GTID_ONLY is set for the replication channel, and the
server is restarted or replication is stopped. The file position
becomes valid after a transaction is successfully applied past the
given file position. If the applier does not reach the stated position,
the function waits until the timeout. Use a SHOW REPLICA STATUS
statement to check if the binary log file position has been marked as
invalid.

On a multithreaded replica, the function waits until expiry of the
limit set by the replica_checkpoint_group or replica_checkpoint_period
system variable, when the checkpoint operation is called to update the
status of the replica. Depending on the setting for the system
variables, the function might therefore return some time after the
specified position was reached.

If binary log transaction compression is in use and the transaction
payload at the specified position is compressed (as a
Transaction_payload_event), the function waits until the whole
transaction has been read and applied, and the positions have updated.

If a timeout value is specified, SOURCE_POS_WAIT() stops waiting when
timeout seconds have elapsed. timeout must be greater than or equal to
0. (In strict SQL mode, a negative timeout value is immediately
rejected with ER_WRONG_ARGUMENTS
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_wrong_arguments); otherwise the function returns NULL, and
raises a warning.)

The optional channel value enables you to name which replication
channel the function applies to. See
https://dev.mysql.com/doc/refman/8.0/en/replication-channels.html for
more information.

URL: https://dev.mysql.com/doc/refman/8.0/en/replication-functions-synchronization.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/replication-functions-synchronization.html</field>
	</row>
	<row>
		<field name="help_topic_id">420</field>
		<field name="name">AVG</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
AVG([DISTINCT] expr) [over_clause]

Returns the average value of expr. The DISTINCT option can be used to
return the average of the distinct values of expr.

If there are no matching rows, AVG() returns NULL. The function also
returns NULL if expr is NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html; it
cannot be used with DISTINCT.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example">mysql&gt; SELECT student_name, AVG(test_score)
       FROM student
       GROUP BY student_name;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">421</field>
		<field name="name">BIT_AND</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
BIT_AND(expr) [over_clause]

Returns the bitwise AND of all bits in expr.

The result type depends on whether the function argument values are
evaluated as binary strings or numbers:

o Binary-string evaluation occurs when the argument values have a
  binary string type, and the argument is not a hexadecimal literal,
  bit literal, or NULL literal. Numeric evaluation occurs otherwise,
  with argument value conversion to unsigned 64-bit integers as
  necessary.

o Binary-string evaluation produces a binary string of the same length
  as the argument values. If argument values have unequal lengths, an
  ER_INVALID_BITWISE_OPERANDS_SIZE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_invalid_bitwise_operands_size) error occurs. If the
  argument size exceeds 511 bytes, an
  ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_invalid_bitwise_aggregate_operands_size) error occurs.
  Numeric evaluation produces an unsigned 64-bit integer.

If there are no matching rows, BIT_AND() returns a neutral value (all
bits set to 1) having the same length as the argument values.

NULL values do not affect the result unless all values are NULL. In
that case, the result is a neutral value having the same length as the
argument values.

For more information discussion about argument evaluation and result
types, see the introductory discussion in
https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html.

If BIT_AND() is invoked from within the mysql client, binary string
results display using hexadecimal notation, depending on the value of
the --binary-as-hex. For more information about that option, see
https://dev.mysql.com/doc/refman/8.0/en/mysql.html.

As of MySQL 8.0.12, this function executes as a window function if
over_clause is present. over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">422</field>
		<field name="name">BIT_OR</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
BIT_OR(expr) [over_clause]

Returns the bitwise OR of all bits in expr.

The result type depends on whether the function argument values are
evaluated as binary strings or numbers:

o Binary-string evaluation occurs when the argument values have a
  binary string type, and the argument is not a hexadecimal literal,
  bit literal, or NULL literal. Numeric evaluation occurs otherwise,
  with argument value conversion to unsigned 64-bit integers as
  necessary.

o Binary-string evaluation produces a binary string of the same length
  as the argument values. If argument values have unequal lengths, an
  ER_INVALID_BITWISE_OPERANDS_SIZE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_invalid_bitwise_operands_size) error occurs. If the
  argument size exceeds 511 bytes, an
  ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_invalid_bitwise_aggregate_operands_size) error occurs.
  Numeric evaluation produces an unsigned 64-bit integer.

If there are no matching rows, BIT_OR() returns a neutral value (all
bits set to 0) having the same length as the argument values.

NULL values do not affect the result unless all values are NULL. In
that case, the result is a neutral value having the same length as the
argument values.

For more information discussion about argument evaluation and result
types, see the introductory discussion in
https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html.

If BIT_OR() is invoked from within the mysql client, binary string
results display using hexadecimal notation, depending on the value of
the --binary-as-hex. For more information about that option, see
https://dev.mysql.com/doc/refman/8.0/en/mysql.html.

As of MySQL 8.0.12, this function executes as a window function if
over_clause is present. over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">423</field>
		<field name="name">BIT_XOR</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
BIT_XOR(expr) [over_clause]

Returns the bitwise XOR of all bits in expr.

The result type depends on whether the function argument values are
evaluated as binary strings or numbers:

o Binary-string evaluation occurs when the argument values have a
  binary string type, and the argument is not a hexadecimal literal,
  bit literal, or NULL literal. Numeric evaluation occurs otherwise,
  with argument value conversion to unsigned 64-bit integers as
  necessary.

o Binary-string evaluation produces a binary string of the same length
  as the argument values. If argument values have unequal lengths, an
  ER_INVALID_BITWISE_OPERANDS_SIZE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_invalid_bitwise_operands_size) error occurs. If the
  argument size exceeds 511 bytes, an
  ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_invalid_bitwise_aggregate_operands_size) error occurs.
  Numeric evaluation produces an unsigned 64-bit integer.

If there are no matching rows, BIT_XOR() returns a neutral value (all
bits set to 0) having the same length as the argument values.

NULL values do not affect the result unless all values are NULL. In
that case, the result is a neutral value having the same length as the
argument values.

For more information discussion about argument evaluation and result
types, see the introductory discussion in
https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html.

If BIT_XOR() is invoked from within the mysql client, binary string
results display using hexadecimal notation, depending on the value of
the --binary-as-hex. For more information about that option, see
https://dev.mysql.com/doc/refman/8.0/en/mysql.html.

As of MySQL 8.0.12, this function executes as a window function if
over_clause is present. over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">424</field>
		<field name="name">COUNT</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
COUNT(expr) [over_clause]

Returns a count of the number of non-NULL values of expr in the rows
retrieved by a SELECT statement. The result is a BIGINT value.

If there are no matching rows, COUNT() returns 0. COUNT(NULL) returns
0.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example">mysql&gt; SELECT student.student_name,COUNT(*)
       FROM student,course
       WHERE student.student_id=course.student_id
       GROUP BY student_name;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">425</field>
		<field name="name">COUNT DISTINCT</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
COUNT(DISTINCT expr,[expr...])

Returns a count of the number of rows with different non-NULL expr
values.

If there are no matching rows, COUNT(DISTINCT) returns 0.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example">mysql&gt; SELECT COUNT(DISTINCT results) FROM student;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">426</field>
		<field name="name">GROUP_CONCAT</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
GROUP_CONCAT(expr)

This function returns a string result with the concatenated non-NULL
values from a group. It returns NULL if there are no non-NULL values.
The full syntax is as follows:

GROUP_CONCAT([DISTINCT] expr [,expr ...]
             [ORDER BY {unsigned_integer | col_name | expr}
                 [ASC | DESC] [,col_name ...]]
             [SEPARATOR str_val])

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example">mysql&gt; SELECT student_name,
         GROUP_CONCAT(test_score)
       FROM student
       GROUP BY student_name;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">427</field>
		<field name="name">JSON_ARRAYAGG</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
JSON_ARRAYAGG(col_or_expr) [over_clause]

Aggregates a result set as a single JSON array whose elements consist
of the rows. The order of elements in this array is undefined. The
function acts on a column or an expression that evaluates to a single
value. Returns NULL if the result contains no rows, or in the event of
an error. If col_or_expr is NULL, the function returns an array of JSON
[null] elements.

As of MySQL 8.0.14, this function executes as a window function if
over_clause is present. over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example">mysql&gt; SELECT o_id, attribute, value FROM t3;
+------+-----------+-------+
| o_id | attribute | value |
+------+-----------+-------+
|    2 | color     | red   |
|    2 | fabric    | silk  |
|    3 | color     | green |
|    3 | shape     | square|
+------+-----------+-------+
4 rows in set (0.00 sec)

mysql&gt; SELECT o_id, JSON_ARRAYAGG(attribute) AS attributes
    -&gt; FROM t3 GROUP BY o_id;
+------+---------------------+
| o_id | attributes          |
+------+---------------------+
|    2 | [&quot;color&quot;, &quot;fabric&quot;] |
|    3 | [&quot;color&quot;, &quot;shape&quot;]  |
+------+---------------------+
2 rows in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">428</field>
		<field name="name">JSON_OBJECTAGG</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
JSON_OBJECTAGG(key, value) [over_clause]

Takes two column names or expressions as arguments, the first of these
being used as a key and the second as a value, and returns a JSON
object containing key-value pairs. Returns NULL if the result contains
no rows, or in the event of an error. An error occurs if any key name
is NULL or the number of arguments is not equal to 2.

As of MySQL 8.0.14, this function executes as a window function if
over_clause is present. over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example">mysql&gt; SELECT o_id, attribute, value FROM t3;
+------+-----------+-------+
| o_id | attribute | value |
+------+-----------+-------+
|    2 | color     | red   |
|    2 | fabric    | silk  |
|    3 | color     | green |
|    3 | shape     | square|
+------+-----------+-------+
4 rows in set (0.00 sec)

mysql&gt; SELECT o_id, JSON_OBJECTAGG(attribute, value)
    -&gt; FROM t3 GROUP BY o_id;
+------+---------------------------------------+
| o_id | JSON_OBJECTAGG(attribute, value)      |
+------+---------------------------------------+
|    2 | {&quot;color&quot;: &quot;red&quot;, &quot;fabric&quot;: &quot;silk&quot;}    |
|    3 | {&quot;color&quot;: &quot;green&quot;, &quot;shape&quot;: &quot;square&quot;} |
+------+---------------------------------------+
2 rows in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">429</field>
		<field name="name">MAX</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
MAX([DISTINCT] expr) [over_clause]

Returns the maximum value of expr. MAX() may take a string argument; in
such cases, it returns the maximum string value. See
https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html. The
DISTINCT keyword can be used to find the maximum of the distinct values
of expr, however, this produces the same result as omitting DISTINCT.

If there are no matching rows, or if expr is NULL, MAX() returns NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html; it
cannot be used with DISTINCT.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example">mysql&gt; SELECT student_name, MIN(test_score), MAX(test_score)
       FROM student
       GROUP BY student_name;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">430</field>
		<field name="name">MIN</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
MIN([DISTINCT] expr) [over_clause]

Returns the minimum value of expr. MIN() may take a string argument; in
such cases, it returns the minimum string value. See
https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html. The
DISTINCT keyword can be used to find the minimum of the distinct values
of expr, however, this produces the same result as omitting DISTINCT.

If there are no matching rows, or if expr is NULL, MIN() returns NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html; it
cannot be used with DISTINCT.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example">mysql&gt; SELECT student_name, MIN(test_score), MAX(test_score)
       FROM student
       GROUP BY student_name;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">431</field>
		<field name="name">STD</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
STD(expr) [over_clause]

Returns the population standard deviation of expr. STD() is a synonym
for the standard SQL function STDDEV_POP(), provided as a MySQL
extension.

If there are no matching rows, or if expr is NULL, STD() returns NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">432</field>
		<field name="name">STDDEV</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
STDDEV(expr) [over_clause]

Returns the population standard deviation of expr. STDDEV() is a
synonym for the standard SQL function STDDEV_POP(), provided for
compatibility with Oracle.

If there are no matching rows, or if expr is NULL, STDDEV() returns
NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">433</field>
		<field name="name">STDDEV_POP</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
STDDEV_POP(expr) [over_clause]

Returns the population standard deviation of expr (the square root of
VAR_POP()). You can also use STD() or STDDEV(), which are equivalent
but not standard SQL.

If there are no matching rows, or if expr is NULL, STDDEV_POP() returns
NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">434</field>
		<field name="name">STDDEV_SAMP</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
STDDEV_SAMP(expr) [over_clause]

Returns the sample standard deviation of expr (the square root of
VAR_SAMP().

If there are no matching rows, or if expr is NULL, STDDEV_SAMP()
returns NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">435</field>
		<field name="name">SUM</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
SUM([DISTINCT] expr) [over_clause]

Returns the sum of expr. If the return set has no rows, SUM() returns
NULL. The DISTINCT keyword can be used to sum only the distinct values
of expr.

If there are no matching rows, or if expr is NULL, SUM() returns NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html; it
cannot be used with DISTINCT.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">436</field>
		<field name="name">VAR_POP</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
VAR_POP(expr) [over_clause]

Returns the population standard variance of expr. It considers rows as
the whole population, not as a sample, so it has the number of rows as
the denominator. You can also use VARIANCE(), which is equivalent but
is not standard SQL.

If there are no matching rows, or if expr is NULL, VAR_POP() returns
NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">437</field>
		<field name="name">VAR_SAMP</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
VAR_SAMP(expr) [over_clause]

Returns the sample variance of expr. That is, the denominator is the
number of rows minus one.

If there are no matching rows, or if expr is NULL, VAR_SAMP() returns
NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">438</field>
		<field name="name">VARIANCE</field>
		<field name="help_category_id">34</field>
		<field name="description">Syntax:
VARIANCE(expr) [over_clause]

Returns the population standard variance of expr. VARIANCE() is a
synonym for the standard SQL function VAR_POP(), provided as a MySQL
extension.

If there are no matching rows, or if expr is NULL, VARIANCE() returns
NULL.

This function executes as a window function if over_clause is present.
over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">439</field>
		<field name="name">CUME_DIST</field>
		<field name="help_category_id">36</field>
		<field name="description">CUME_DIST() over_clause

Returns the cumulative distribution of a value within a group of
values; that is, the percentage of partition values less than or equal
to the value in the current row. This represents the number of rows
preceding or peer with the current row in the window ordering of the
window partition divided by the total number of rows in the window
partition. Return values range from 0 to 1.

This function should be used with ORDER BY to sort partition rows into
the desired order. Without ORDER BY, all rows are peers and have value
N/N = 1, where N is the partition size.

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example">mysql&gt; SELECT
         val,
         ROW_NUMBER()   OVER w AS 'row_number',
         CUME_DIST()    OVER w AS 'cume_dist',
         PERCENT_RANK() OVER w AS 'percent_rank'
       FROM numbers
       WINDOW w AS (ORDER BY val);
+------+------------+--------------------+--------------+
| val  | row_number | cume_dist          | percent_rank |
+------+------------+--------------------+--------------+
|    1 |          1 | 0.2222222222222222 |            0 |
|    1 |          2 | 0.2222222222222222 |            0 |
|    2 |          3 | 0.3333333333333333 |         0.25 |
|    3 |          4 | 0.6666666666666666 |        0.375 |
|    3 |          5 | 0.6666666666666666 |        0.375 |
|    3 |          6 | 0.6666666666666666 |        0.375 |
|    4 |          7 | 0.8888888888888888 |         0.75 |
|    4 |          8 | 0.8888888888888888 |         0.75 |
|    5 |          9 |                  1 |            1 |
+------+------------+--------------------+--------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">440</field>
		<field name="name">DENSE_RANK</field>
		<field name="help_category_id">36</field>
		<field name="description">DENSE_RANK() over_clause

Returns the rank of the current row within its partition, without gaps.
Peers are considered ties and receive the same rank. This function
assigns consecutive ranks to peer groups; the result is that groups of
size greater than one do not produce noncontiguous rank numbers. For an
example, see the RANK() function description.

This function should be used with ORDER BY to sort partition rows into
the desired order. Without ORDER BY, all rows are peers.

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">441</field>
		<field name="name">FIRST_VALUE</field>
		<field name="help_category_id">36</field>
		<field name="description">FIRST_VALUE(expr) [null_treatment] over_clause

Returns the value of expr from the first row of the window frame.

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.
null_treatment is as described in the section introduction.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example">mysql&gt; SELECT
         time, subject, val,
         FIRST_VALUE(val)  OVER w AS 'first',
         LAST_VALUE(val)   OVER w AS 'last',
         NTH_VALUE(val, 2) OVER w AS 'second',
         NTH_VALUE(val, 4) OVER w AS 'fourth'
       FROM observations
       WINDOW w AS (PARTITION BY subject ORDER BY time
                    ROWS UNBOUNDED PRECEDING);
+----------+---------+------+-------+------+--------+--------+
| time     | subject | val  | first | last | second | fourth |
+----------+---------+------+-------+------+--------+--------+
| 07:00:00 | st113   |   10 |    10 |   10 |   NULL |   NULL |
| 07:15:00 | st113   |    9 |    10 |    9 |      9 |   NULL |
| 07:30:00 | st113   |   25 |    10 |   25 |      9 |   NULL |
| 07:45:00 | st113   |   20 |    10 |   20 |      9 |     20 |
| 07:00:00 | xh458   |    0 |     0 |    0 |   NULL |   NULL |
| 07:15:00 | xh458   |   10 |     0 |   10 |     10 |   NULL |
| 07:30:00 | xh458   |    5 |     0 |    5 |     10 |   NULL |
| 07:45:00 | xh458   |   30 |     0 |   30 |     10 |     30 |
| 08:00:00 | xh458   |   25 |     0 |   25 |     10 |     30 |
+----------+---------+------+-------+------+--------+--------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">442</field>
		<field name="name">LAG</field>
		<field name="help_category_id">36</field>
		<field name="description">LAG(expr [, N[, default]]) [null_treatment] over_clause

Returns the value of expr from the row that lags (precedes) the current
row by N rows within its partition. If there is no such row, the return
value is default. For example, if N is 3, the return value is default
for the first three rows. If N or default are missing, the defaults are
1 and NULL, respectively.

N must be a literal nonnegative integer. If N is 0, expr is evaluated
for the current row.

Beginning with MySQL 8.0.22, N cannot be NULL. In addition, it must now
be an integer in the range 0 to 263, inclusive, in any of the following
forms:

o an unsigned integer constant literal

o a positional parameter marker (?)

o a user-defined variable

o a local variable in a stored routine

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.
null_treatment is as described in the section introduction.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example">mysql&gt; SELECT
         t, val,
         LAG(val)        OVER w AS 'lag',
         LEAD(val)       OVER w AS 'lead',
         val - LAG(val)  OVER w AS 'lag diff',
         val - LEAD(val) OVER w AS 'lead diff'
       FROM series
       WINDOW w AS (ORDER BY t);
+----------+------+------+------+----------+-----------+
| t        | val  | lag  | lead | lag diff | lead diff |
+----------+------+------+------+----------+-----------+
| 12:00:00 |  100 | NULL |  125 |     NULL |       -25 |
| 13:00:00 |  125 |  100 |  132 |       25 |        -7 |
| 14:00:00 |  132 |  125 |  145 |        7 |       -13 |
| 15:00:00 |  145 |  132 |  140 |       13 |         5 |
| 16:00:00 |  140 |  145 |  150 |       -5 |       -10 |
| 17:00:00 |  150 |  140 |  200 |       10 |       -50 |
| 18:00:00 |  200 |  150 | NULL |       50 |      NULL |
+----------+------+------+------+----------+-----------+

mysql&gt; SELECT n FROM fib ORDER BY n;
+------+
| n    |
+------+
|    1 |
|    1 |
|    2 |
|    3 |
|    5 |
|    8 |
+------+

mysql&gt; SELECT
         n,
         LAG(n, 1, 0)      OVER w AS 'lag',
         LEAD(n, 1, 0)     OVER w AS 'lead',
         n + LAG(n, 1, 0)  OVER w AS 'next_n',
         n + LEAD(n, 1, 0) OVER w AS 'next_next_n'
       FROM fib
       WINDOW w AS (ORDER BY n);
+------+------+------+--------+-------------+
| n    | lag  | lead | next_n | next_next_n |
+------+------+------+--------+-------------+
|    1 |    0 |    1 |      1 |           2 |
|    1 |    1 |    2 |      2 |           3 |
|    2 |    1 |    3 |      3 |           5 |
|    3 |    2 |    5 |      5 |           8 |
|    5 |    3 |    8 |      8 |          13 |
|    8 |    5 |    0 |     13 |           8 |
+------+------+------+--------+-------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">443</field>
		<field name="name">LAST_VALUE</field>
		<field name="help_category_id">36</field>
		<field name="description">LAST_VALUE(expr) [null_treatment] over_clause

Returns the value of expr from the last row of the window frame.

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.
null_treatment is as described in the section introduction.

For an example, see the FIRST_VALUE() function description.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">444</field>
		<field name="name">LEAD</field>
		<field name="help_category_id">36</field>
		<field name="description">LEAD(expr [, N[, default]]) [null_treatment] over_clause

Returns the value of expr from the row that leads (follows) the current
row by N rows within its partition. If there is no such row, the return
value is default. For example, if N is 3, the return value is default
for the last three rows. If N or default are missing, the defaults are
1 and NULL, respectively.

N must be a literal nonnegative integer. If N is 0, expr is evaluated
for the current row.

Beginning with MySQL 8.0.22, N cannot be NULL. In addition, it must now
be an integer in the range 0 to 263, inclusive, in any of the following
forms:

o an unsigned integer constant literal

o a positional parameter marker (?)

o a user-defined variable

o a local variable in a stored routine

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.
null_treatment is as described in the section introduction.

For an example, see the LAG() function description.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">445</field>
		<field name="name">NTH_VALUE</field>
		<field name="help_category_id">36</field>
		<field name="description">NTH_VALUE(expr, N) [from_first_last] [null_treatment] over_clause

Returns the value of expr from the N-th row of the window frame. If
there is no such row, the return value is NULL.

N must be a literal positive integer.

from_first_last is part of the SQL standard, but the MySQL
implementation permits only FROM FIRST (which is also the default).
This means that calculations begin at the first row of the window. FROM
LAST is parsed, but produces an error. To obtain the same effect as
FROM LAST (begin calculations at the last row of the window), use ORDER
BY to sort in reverse order.

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.
null_treatment is as described in the section introduction.

For an example, see the FIRST_VALUE() function description.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">446</field>
		<field name="name">NTILE</field>
		<field name="help_category_id">36</field>
		<field name="description">NTILE(N) over_clause

Divides a partition into N groups (buckets), assigns each row in the
partition its bucket number, and returns the bucket number of the
current row within its partition. For example, if N is 4, NTILE()
divides rows into four buckets. If N is 100, NTILE() divides rows into
100 buckets.

N must be a literal positive integer. Bucket number return values range
from 1 to N.

Beginning with MySQL 8.0.22, N cannot be NULL, and must be an integer
in the range 0 to 263, inclusive, in any of the following forms:

o an unsigned integer constant literal

o a positional parameter marker (?)

o a user-defined variable

o a local variable in a stored routine

This function should be used with ORDER BY to sort partition rows into
the desired order.

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example">mysql&gt; SELECT
         val,
         ROW_NUMBER() OVER w AS 'row_number',
         NTILE(2)     OVER w AS 'ntile2',
         NTILE(4)     OVER w AS 'ntile4'
       FROM numbers
       WINDOW w AS (ORDER BY val);
+------+------------+--------+--------+
| val  | row_number | ntile2 | ntile4 |
+------+------------+--------+--------+
|    1 |          1 |      1 |      1 |
|    1 |          2 |      1 |      1 |
|    2 |          3 |      1 |      1 |
|    3 |          4 |      1 |      2 |
|    3 |          5 |      1 |      2 |
|    3 |          6 |      2 |      3 |
|    4 |          7 |      2 |      3 |
|    4 |          8 |      2 |      4 |
|    5 |          9 |      2 |      4 |
+------+------------+--------+--------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">447</field>
		<field name="name">PERCENT_RANK</field>
		<field name="help_category_id">36</field>
		<field name="description">PERCENT_RANK() over_clause

Returns the percentage of partition values less than the value in the
current row, excluding the highest value. Return values range from 0 to
1 and represent the row relative rank, calculated as the result of this
formula, where rank is the row rank and rows is the number of partition
rows:

(rank - 1) / (rows - 1)

This function should be used with ORDER BY to sort partition rows into
the desired order. Without ORDER BY, all rows are peers.

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

For an example, see the CUME_DIST() function description.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">448</field>
		<field name="name">RANK</field>
		<field name="help_category_id">36</field>
		<field name="description">RANK() over_clause

Returns the rank of the current row within its partition, with gaps.
Peers are considered ties and receive the same rank. This function does
not assign consecutive ranks to peer groups if groups of size greater
than one exist; the result is noncontiguous rank numbers.

This function should be used with ORDER BY to sort partition rows into
the desired order. Without ORDER BY, all rows are peers.

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example">mysql&gt; SELECT
         val,
         ROW_NUMBER() OVER w AS 'row_number',
         RANK()       OVER w AS 'rank',
         DENSE_RANK() OVER w AS 'dense_rank'
       FROM numbers
       WINDOW w AS (ORDER BY val);
+------+------------+------+------------+
| val  | row_number | rank | dense_rank |
+------+------------+------+------------+
|    1 |          1 |    1 |          1 |
|    1 |          2 |    1 |          1 |
|    2 |          3 |    3 |          2 |
|    3 |          4 |    4 |          3 |
|    3 |          5 |    4 |          3 |
|    3 |          6 |    4 |          3 |
|    4 |          7 |    7 |          4 |
|    4 |          8 |    7 |          4 |
|    5 |          9 |    9 |          5 |
+------+------------+------+------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">449</field>
		<field name="name">ROW_NUMBER</field>
		<field name="help_category_id">36</field>
		<field name="description">ROW_NUMBER() over_clause

Returns the number of the current row within its partition. Rows
numbers range from 1 to the number of partition rows.

ORDER BY affects the order in which rows are numbered. Without ORDER
BY, row numbering is nondeterministic.

ROW_NUMBER() assigns peers different row numbers. To assign peers the
same value, use RANK() or DENSE_RANK(). For an example, see the RANK()
function description.

over_clause is as described in
https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html</field>
	</row>
	<row>
		<field name="help_topic_id">450</field>
		<field name="name">FORMAT_BYTES</field>
		<field name="help_category_id">37</field>
		<field name="description">FORMAT_BYTES(count)

Given a numeric byte count, converts it to human-readable format and
returns a string consisting of a value and a units indicator. The
string contains the number of bytes rounded to 2 decimal places and a
minimum of 3 significant digits. Numbers less than 1024 bytes are
represented as whole numbers and are not rounded. Returns NULL if count
is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/performance-schema-functions.html

</field>
		<field name="example">mysql&gt; SELECT FORMAT_BYTES(512), FORMAT_BYTES(18446644073709551615);
+-------------------+------------------------------------+
| FORMAT_BYTES(512) | FORMAT_BYTES(18446644073709551615) |
+-------------------+------------------------------------+
|  512 bytes        | 16.00 EiB                          |
+-------------------+------------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/performance-schema-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">451</field>
		<field name="name">FORMAT_PICO_TIME</field>
		<field name="help_category_id">37</field>
		<field name="description">FORMAT_PICO_TIME(time_val)

Given a numeric Performance Schema latency or wait time in picoseconds,
converts it to human-readable format and returns a string consisting of
a value and a units indicator. The string contains the decimal time
rounded to 2 decimal places and a minimum of 3 significant digits.
Times under 1 nanosecond are represented as whole numbers and are not
rounded.

If time_val is NULL, this function returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/performance-schema-functions.html

</field>
		<field name="example">mysql&gt; SELECT FORMAT_PICO_TIME(3501), FORMAT_PICO_TIME(188732396662000);
+------------------------+-----------------------------------+
| FORMAT_PICO_TIME(3501) | FORMAT_PICO_TIME(188732396662000) |
+------------------------+-----------------------------------+
| 3.50 ns                | 3.15 min                          |
+------------------------+-----------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/performance-schema-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">452</field>
		<field name="name">PS_CURRENT_THREAD_ID</field>
		<field name="help_category_id">37</field>
		<field name="description">PS_CURRENT_THREAD_ID()

Returns a BIGINT UNSIGNED value representing the Performance Schema
thread ID assigned to the current connection.

The thread ID return value is a value of the type given in the
THREAD_ID column of Performance Schema tables.

Performance Schema configuration affects PS_CURRENT_THREAD_ID() the
same way as for PS_THREAD_ID(). For details, see the description of
that function.

URL: https://dev.mysql.com/doc/refman/8.0/en/performance-schema-functions.html

</field>
		<field name="example">mysql&gt; SELECT PS_CURRENT_THREAD_ID();
+------------------------+
| PS_CURRENT_THREAD_ID() |
+------------------------+
|                     52 |
+------------------------+
mysql&gt; SELECT PS_THREAD_ID(CONNECTION_ID());
+-------------------------------+
| PS_THREAD_ID(CONNECTION_ID()) |
+-------------------------------+
|                            52 |
+-------------------------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/performance-schema-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">453</field>
		<field name="name">PS_THREAD_ID</field>
		<field name="help_category_id">37</field>
		<field name="description">PS_THREAD_ID(connection_id)

Given a connection ID, returns a BIGINT UNSIGNED value representing the
Performance Schema thread ID assigned to the connection ID, or NULL if
no thread ID exists for the connection ID. The latter can occur for
threads that are not instrumented, or if connection_id is NULL.

The connection ID argument is a value of the type given in the
PROCESSLIST_ID column of the Performance Schema threads table or the Id
column of SHOW PROCESSLIST output.

The thread ID return value is a value of the type given in the
THREAD_ID column of Performance Schema tables.

Performance Schema configuration affects PS_THREAD_ID() operation as
follows. (These remarks also apply to PS_CURRENT_THREAD_ID().)

o Disabling the thread_instrumentation consumer disables statistics
  from being collected and aggregated at the thread level, but has no
  effect on PS_THREAD_ID().

o If performance_schema_max_thread_instances is not 0, the Performance
  Schema allocates memory for thread statistics and assigns an internal
  ID to each thread for which instance memory is available. If there
  are threads for which instance memory is not available,
  PS_THREAD_ID() returns NULL; in this case,
  Performance_schema_thread_instances_lost is nonzero.

o If performance_schema_max_thread_instances is 0, the Performance
  Schema allocates no thread memory and PS_THREAD_ID() returns NULL.

o If the Performance Schema itself is disabled, PS_THREAD_ID() produces
  an error.

URL: https://dev.mysql.com/doc/refman/8.0/en/performance-schema-functions.html

</field>
		<field name="example">mysql&gt; SELECT PS_THREAD_ID(6);
+-----------------+
| PS_THREAD_ID(6) |
+-----------------+
|              45 |
+-----------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/performance-schema-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">454</field>
		<field name="name">CAN_ACCESS_COLUMN</field>
		<field name="help_category_id">38</field>
		<field name="description">CAN_ACCESS_COLUMN(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">455</field>
		<field name="name">CAN_ACCESS_DATABASE</field>
		<field name="help_category_id">38</field>
		<field name="description">CAN_ACCESS_DATABASE(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">456</field>
		<field name="name">CAN_ACCESS_TABLE</field>
		<field name="help_category_id">38</field>
		<field name="description">CAN_ACCESS_TABLE(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">457</field>
		<field name="name">CAN_ACCESS_USER</field>
		<field name="help_category_id">38</field>
		<field name="description">CAN_ACCESS_USER(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">458</field>
		<field name="name">CAN_ACCESS_VIEW</field>
		<field name="help_category_id">38</field>
		<field name="description">CAN_ACCESS_VIEW(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">459</field>
		<field name="name">GET_DD_COLUMN_PRIVILEGES</field>
		<field name="help_category_id">38</field>
		<field name="description">GET_DD_COLUMN_PRIVILEGES(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">460</field>
		<field name="name">GET_DD_CREATE_OPTIONS</field>
		<field name="help_category_id">38</field>
		<field name="description">GET_DD_CREATE_OPTIONS(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">461</field>
		<field name="name">GET_DD_INDEX_SUB_PART_LENGTH</field>
		<field name="help_category_id">38</field>
		<field name="description">GET_DD_INDEX_SUB_PART_LENGTH(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">462</field>
		<field name="name">INTERNAL_AUTO_INCREMENT</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_AUTO_INCREMENT(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">463</field>
		<field name="name">INTERNAL_AVG_ROW_LENGTH</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_AVG_ROW_LENGTH(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">464</field>
		<field name="name">INTERNAL_CHECK_TIME</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_CHECK_TIME(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">465</field>
		<field name="name">INTERNAL_CHECKSUM</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_CHECKSUM(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">466</field>
		<field name="name">INTERNAL_DATA_FREE</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_DATA_FREE(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">467</field>
		<field name="name">INTERNAL_DATA_LENGTH</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_DATA_LENGTH(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">468</field>
		<field name="name">INTERNAL_DD_CHAR_LENGTH</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_DD_CHAR_LENGTH(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">469</field>
		<field name="name">INTERNAL_GET_COMMENT_OR_ERROR</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_GET_COMMENT_OR_ERROR(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">470</field>
		<field name="name">INTERNAL_GET_ENABLED_ROLE_JSON</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_GET_ENABLED_ROLE_JSON(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">471</field>
		<field name="name">INTERNAL_GET_HOSTNAME</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_GET_HOSTNAME(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">472</field>
		<field name="name">INTERNAL_GET_USERNAME</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_GET_USERNAME(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">473</field>
		<field name="name">INTERNAL_GET_VIEW_WARNING_OR_ERROR</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_GET_VIEW_WARNING_OR_ERROR(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">474</field>
		<field name="name">INTERNAL_INDEX_COLUMN_CARDINALITY</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_INDEX_COLUMN_CARDINALITY(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">475</field>
		<field name="name">INTERNAL_INDEX_LENGTH</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_INDEX_LENGTH(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">476</field>
		<field name="name">INTERNAL_IS_ENABLED_ROLE</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_IS_ENABLED_ROLE(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">477</field>
		<field name="name">INTERNAL_IS_MANDATORY_ROLE</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_IS_MANDATORY_ROLE(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">478</field>
		<field name="name">INTERNAL_KEYS_DISABLED</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_KEYS_DISABLED(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">479</field>
		<field name="name">INTERNAL_MAX_DATA_LENGTH</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_MAX_DATA_LENGTH(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">480</field>
		<field name="name">INTERNAL_TABLE_ROWS</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_TABLE_ROWS(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">481</field>
		<field name="name">INTERNAL_UPDATE_TIME</field>
		<field name="help_category_id">38</field>
		<field name="description">INTERNAL_UPDATE_TIME(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">482</field>
		<field name="name">IS_VISIBLE_DD_OBJECT</field>
		<field name="help_category_id">38</field>
		<field name="description">IS_VISIBLE_DD_OBJECT(ARGS)

URL: https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">483</field>
		<field name="name">ANY_VALUE</field>
		<field name="help_category_id">39</field>
		<field name="description">ANY_VALUE(arg)

This function is useful for GROUP BY queries when the
ONLY_FULL_GROUP_BY SQL mode is enabled, for cases when MySQL rejects a
query that you know is valid for reasons that MySQL cannot determine.
The function return value and type are the same as the return value and
type of its argument, but the function result is not checked for the
ONLY_FULL_GROUP_BY SQL mode.

For example, if name is a nonindexed column, the following query fails
with ONLY_FULL_GROUP_BY enabled:

mysql&gt; SELECT name, address, MAX(age) FROM t GROUP BY name;
ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP
BY clause and contains nonaggregated column 'mydb.t.address' which
is not functionally dependent on columns in GROUP BY clause; this
is incompatible with sql_mode=only_full_group_by

The failure occurs because address is a nonaggregated column that is
neither named among GROUP BY columns nor functionally dependent on
them. As a result, the address value for rows within each name group is
nondeterministic. There are multiple ways to cause MySQL to accept the
query:

o Alter the table to make name a primary key or a unique NOT NULL
  column. This enables MySQL to determine that address is functionally
  dependent on name; that is, address is uniquely determined by name.
  (This technique is inapplicable if NULL must be permitted as a valid
  name value.)

o Use ANY_VALUE() to refer to address:

SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;

  In this case, MySQL ignores the nondeterminism of address values
  within each name group and accepts the query. This may be useful if
  you simply do not care which value of a nonaggregated column is
  chosen for each group. ANY_VALUE() is not an aggregate function,
  unlike functions such as SUM() or COUNT(). It simply acts to suppress
  the test for nondeterminism.

o Disable ONLY_FULL_GROUP_BY. This is equivalent to using ANY_VALUE()
  with ONLY_FULL_GROUP_BY enabled, as described in the previous item.

ANY_VALUE() is also useful if functional dependence exists between
columns but MySQL cannot determine it. The following query is valid
because age is functionally dependent on the grouping column age-1, but
MySQL cannot tell that and rejects the query with ONLY_FULL_GROUP_BY
enabled:

SELECT age FROM t GROUP BY age-1;

To cause MySQL to accept the query, use ANY_VALUE():

SELECT ANY_VALUE(age) FROM t GROUP BY age-1;

ANY_VALUE() can be used for queries that refer to aggregate functions
in the absence of a GROUP BY clause:

mysql&gt; SELECT name, MAX(age) FROM t;
ERROR 1140 (42000): In aggregated query without GROUP BY, expression
#1 of SELECT list contains nonaggregated column 'mydb.t.name'; this
is incompatible with sql_mode=only_full_group_by

Without GROUP BY, there is a single group and it is nondeterministic
which name value to choose for the group. ANY_VALUE() tells MySQL to
accept the query:

SELECT ANY_VALUE(name), MAX(age) FROM t;

It may be that, due to some property of a given data set, you know that
a selected nonaggregated column is effectively functionally dependent
on a GROUP BY column. For example, an application may enforce
uniqueness of one column with respect to another. In this case, using
ANY_VALUE() for the effectively functionally dependent column may make
sense.

For additional discussion, see
https://dev.mysql.com/doc/refman/8.0/en/group-by-handling.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">484</field>
		<field name="name">BIN_TO_UUID</field>
		<field name="help_category_id">39</field>
		<field name="description">BIN_TO_UUID(binary_uuid), BIN_TO_UUID(binary_uuid, swap_flag)

BIN_TO_UUID() is the inverse of UUID_TO_BIN(). It converts a binary
UUID to a string UUID and returns the result. The binary value should
be a UUID as a VARBINARY(16) value. The return value is a string of
five hexadecimal numbers separated by dashes. (For details about this
format, see the UUID() function description.) If the UUID argument is
NULL, the return value is NULL. If any argument is invalid, an error
occurs.

BIN_TO_UUID() takes one or two arguments:

o The one-argument form takes a binary UUID value. The UUID value is
  assumed not to have its time-low and time-high parts swapped. The
  string result is in the same order as the binary argument.

o The two-argument form takes a binary UUID value and a swap-flag
  value:

  o If swap_flag is 0, the two-argument form is equivalent to the
    one-argument form. The string result is in the same order as the
    binary argument.

  o If swap_flag is 1, the UUID value is assumed to have its time-low
    and time-high parts swapped. These parts are swapped back to their
    original position in the result value.

For usage examples and information about time-part swapping, see the
UUID_TO_BIN() function description.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">485</field>
		<field name="name">DEFAULT</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
DEFAULT(col_name)

Returns the default value for a table column. An error results if the
column has no default value.

The use of DEFAULT(col_name) to specify the default value for a named
column is permitted only for columns that have a literal default value,
not for columns that have an expression default value.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; UPDATE t SET i = DEFAULT(i)+1 WHERE id &lt; 100;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">486</field>
		<field name="name">GROUPING</field>
		<field name="help_category_id">39</field>
		<field name="description">GROUPING(expr [, expr] ...)

For GROUP BY queries that include a WITH ROLLUP modifier, the ROLLUP
operation produces super-aggregate output rows where NULL represents
the set of all values. The GROUPING() function enables you to
distinguish NULL values for super-aggregate rows from NULL values in
regular grouped rows.

GROUPING() is permitted in the select list, HAVING clause, and (as of
MySQL 8.0.12) ORDER BY clause.

Each argument to GROUPING() must be an expression that exactly matches
an expression in the GROUP BY clause. The expression cannot be a
positional specifier. For each expression, GROUPING() produces 1 if the
expression value in the current row is a NULL representing a
super-aggregate value. Otherwise, GROUPING() produces 0, indicating
that the expression value is a NULL for a regular result row or is not
NULL.

Suppose that table t1 contains these rows, where NULL indicates
something like &quot;other&quot; or &quot;unknown&quot;:

mysql&gt; SELECT * FROM t1;
+------+-------+----------+
| name | size  | quantity |
+------+-------+----------+
| ball | small |       10 |
| ball | large |       20 |
| ball | NULL  |        5 |
| hoop | small |       15 |
| hoop | large |        5 |
| hoop | NULL  |        3 |
+------+-------+----------+

A summary of the table without WITH ROLLUP looks like this:

mysql&gt; SELECT name, size, SUM(quantity) AS quantity
       FROM t1
       GROUP BY name, size;
+------+-------+----------+
| name | size  | quantity |
+------+-------+----------+
| ball | small |       10 |
| ball | large |       20 |
| ball | NULL  |        5 |
| hoop | small |       15 |
| hoop | large |        5 |
| hoop | NULL  |        3 |
+------+-------+----------+

The result contains NULL values, but those do not represent
super-aggregate rows because the query does not include WITH ROLLUP.

Adding WITH ROLLUP produces super-aggregate summary rows containing
additional NULL values. However, without comparing this result to the
previous one, it is not easy to see which NULL values occur in
super-aggregate rows and which occur in regular grouped rows:

mysql&gt; SELECT name, size, SUM(quantity) AS quantity
       FROM t1
       GROUP BY name, size WITH ROLLUP;
+------+-------+----------+
| name | size  | quantity |
+------+-------+----------+
| ball | NULL  |        5 |
| ball | large |       20 |
| ball | small |       10 |
| ball | NULL  |       35 |
| hoop | NULL  |        3 |
| hoop | large |        5 |
| hoop | small |       15 |
| hoop | NULL  |       23 |
| NULL | NULL  |       58 |
+------+-------+----------+

To distinguish NULL values in super-aggregate rows from those in
regular grouped rows, use GROUPING(), which returns 1 only for
super-aggregate NULL values:

mysql&gt; SELECT
         name, size, SUM(quantity) AS quantity,
         GROUPING(name) AS grp_name,
         GROUPING(size) AS grp_size
       FROM t1
       GROUP BY name, size WITH ROLLUP;
+------+-------+----------+----------+----------+
| name | size  | quantity | grp_name | grp_size |
+------+-------+----------+----------+----------+
| ball | NULL  |        5 |        0 |        0 |
| ball | large |       20 |        0 |        0 |
| ball | small |       10 |        0 |        0 |
| ball | NULL  |       35 |        0 |        1 |
| hoop | NULL  |        3 |        0 |        0 |
| hoop | large |        5 |        0 |        0 |
| hoop | small |       15 |        0 |        0 |
| hoop | NULL  |       23 |        0 |        1 |
| NULL | NULL  |       58 |        1 |        1 |
+------+-------+----------+----------+----------+

Common uses for GROUPING():

o Substitute a label for super-aggregate NULL values:

mysql&gt; SELECT
         IF(GROUPING(name) = 1, 'All items', name) AS name,
         IF(GROUPING(size) = 1, 'All sizes', size) AS size,
         SUM(quantity) AS quantity
       FROM t1
       GROUP BY name, size WITH ROLLUP;
+-----------+-----------+----------+
| name      | size      | quantity |
+-----------+-----------+----------+
| ball      | NULL      |        5 |
| ball      | large     |       20 |
| ball      | small     |       10 |
| ball      | All sizes |       35 |
| hoop      | NULL      |        3 |
| hoop      | large     |        5 |
| hoop      | small     |       15 |
| hoop      | All sizes |       23 |
| All items | All sizes |       58 |
+-----------+-----------+----------+

o Return only super-aggregate lines by filtering out the regular
  grouped lines:

mysql&gt; SELECT name, size, SUM(quantity) AS quantity
       FROM t1
       GROUP BY name, size WITH ROLLUP
       HAVING GROUPING(name) = 1 OR GROUPING(size) = 1;
+------+------+----------+
| name | size | quantity |
+------+------+----------+
| ball | NULL |       35 |
| hoop | NULL |       23 |
| NULL | NULL |       58 |
+------+------+----------+

GROUPING() permits multiple expression arguments. In this case, the
GROUPING() return value represents a bitmask combined from the results
for each expression, where the lowest-order bit corresponds to the
result for the rightmost expression. For example, with three expression
arguments, GROUPING(expr1, expr2, expr3) is evaluated like this:

  result for GROUPING(expr3)
+ result for GROUPING(expr2) &lt;&lt; 1
+ result for GROUPING(expr1) &lt;&lt; 2

The following query shows how GROUPING() results for single arguments
combine for a multiple-argument call to produce a bitmask value:

mysql&gt; SELECT
         name, size, SUM(quantity) AS quantity,
         GROUPING(name) AS grp_name,
         GROUPING(size) AS grp_size,
       GROUPING(name, size) AS grp_all
       FROM t1
       GROUP BY name, size WITH ROLLUP;
+------+-------+----------+----------+----------+---------+
| name | size  | quantity | grp_name | grp_size | grp_all |
+------+-------+----------+----------+----------+---------+
| ball | NULL  |        5 |        0 |        0 |       0 |
| ball | large |       20 |        0 |        0 |       0 |
| ball | small |       10 |        0 |        0 |       0 |
| ball | NULL  |       35 |        0 |        1 |       1 |
| hoop | NULL  |        3 |        0 |        0 |       0 |
| hoop | large |        5 |        0 |        0 |       0 |
| hoop | small |       15 |        0 |        0 |       0 |
| hoop | NULL  |       23 |        0 |        1 |       1 |
| NULL | NULL  |       58 |        1 |        1 |       3 |
+------+-------+----------+----------+----------+---------+

With multiple expression arguments, the GROUPING() return value is
nonzero if any expression represents a super-aggregate value.
Multiple-argument GROUPING() syntax thus provides a simpler way to
write the earlier query that returned only super-aggregate rows, by
using a single multiple-argument GROUPING() call rather than multiple
single-argument calls:

mysql&gt; SELECT name, size, SUM(quantity) AS quantity
       FROM t1
       GROUP BY name, size WITH ROLLUP
       HAVING GROUPING(name, size) &lt;&gt; 0;
+------+------+----------+
| name | size | quantity |
+------+------+----------+
| ball | NULL |       35 |
| hoop | NULL |       23 |
| NULL | NULL |       58 |
+------+------+----------+

Use of GROUPING() is subject to these limitations:

o Do not use subquery GROUP BY expressions as GROUPING() arguments
  because matching might fail. For example, matching fails for this
  query:

mysql&gt; SELECT GROUPING((SELECT MAX(name) FROM t1))
       FROM t1
       GROUP BY (SELECT MAX(name) FROM t1) WITH ROLLUP;
ERROR 3580 (HY000): Argument #1 of GROUPING function is not in GROUP BY

o GROUP BY literal expressions should not be used within a HAVING
  clause as GROUPING() arguments. Due to differences between when the
  optimizer evaluates GROUP BY and HAVING, matching may succeed but
  GROUPING() evaluation does not produce the expected result. Consider
  this query:

SELECT a AS f1, 'w' AS f2
FROM t
GROUP BY f1, f2 WITH ROLLUP
HAVING GROUPING(f2) = 1;

  GROUPING() is evaluated earlier for the literal constant expression
  than for the HAVING clause as a whole and returns 0. To check whether
  a query such as this is affected, use EXPLAIN and look for Impossible
  having in the Extra column.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">487</field>
		<field name="name">INET_ATON</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
INET_ATON(expr)

Given the dotted-quad representation of an IPv4 network address as a
string, returns an integer that represents the numeric value of the
address in network byte order (big endian). INET_ATON() returns NULL if
it does not understand its argument, or if expr is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT INET_ATON('10.0.5.9');
        -&gt; 167773449
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">488</field>
		<field name="name">INET_NTOA</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
INET_NTOA(expr)

Given a numeric IPv4 network address in network byte order, returns the
dotted-quad string representation of the address as a string in the
connection character set. INET_NTOA() returns NULL if it does not
understand its argument.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT INET_NTOA(167773449);
        -&gt; '10.0.5.9'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">489</field>
		<field name="name">INET6_ATON</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
INET6_ATON(expr)

Given an IPv6 or IPv4 network address as a string, returns a binary
string that represents the numeric value of the address in network byte
order (big endian). Because numeric-format IPv6 addresses require more
bytes than the largest integer type, the representation returned by
this function has the VARBINARY data type: VARBINARY(16) for IPv6
addresses and VARBINARY(4) for IPv4 addresses. If the argument is not a
valid address, or if it is NULL, INET6_ATON() returns NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT HEX(INET6_ATON('fdfe::5a55:caff:fefa:9089'));
        -&gt; 'FDFE0000000000005A55CAFFFEFA9089'
mysql&gt; SELECT HEX(INET6_ATON('10.0.5.9'));
        -&gt; '0A000509'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">490</field>
		<field name="name">INET6_NTOA</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
INET6_NTOA(expr)

Given an IPv6 or IPv4 network address represented in numeric form as a
binary string, returns the string representation of the address as a
string in the connection character set. If the argument is not a valid
address, or if it is NULL, INET6_NTOA() returns NULL.

INET6_NTOA() has these properties:

o It does not use operating system functions to perform conversions,
  thus the output string is platform independent.

o The return string has a maximum length of 39 (4 x 8 + 7). Given this
  statement:

CREATE TABLE t AS SELECT INET6_NTOA(expr) AS c1;

  The resulting table would have this definition:

CREATE TABLE t (c1 VARCHAR(39) CHARACTER SET utf8mb3 DEFAULT NULL);

o The return string uses lowercase letters for IPv6 addresses.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT INET6_NTOA(INET6_ATON('fdfe::5a55:caff:fefa:9089'));
        -&gt; 'fdfe::5a55:caff:fefa:9089'
mysql&gt; SELECT INET6_NTOA(INET6_ATON('10.0.5.9'));
        -&gt; '10.0.5.9'

mysql&gt; SELECT INET6_NTOA(UNHEX('FDFE0000000000005A55CAFFFEFA9089'));
        -&gt; 'fdfe::5a55:caff:fefa:9089'
mysql&gt; SELECT INET6_NTOA(UNHEX('0A000509'));
        -&gt; '10.0.5.9'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">491</field>
		<field name="name">IS_IPV4</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
IS_IPV4(expr)

Returns 1 if the argument is a valid IPv4 address specified as a
string, 0 otherwise. Returns NULL if expr is NULL.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT IS_IPV4('10.0.5.9'), IS_IPV4('10.0.5.256');
        -&gt; 1, 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">492</field>
		<field name="name">IS_IPV4_COMPAT</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
IS_IPV4_COMPAT(expr)

This function takes an IPv6 address represented in numeric form as a
binary string, as returned by INET6_ATON(). It returns 1 if the
argument is a valid IPv4-compatible IPv6 address, 0 otherwise (unless
expr is NULL, in which case the function returns NULL). IPv4-compatible
addresses have the form ::ipv4_address.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT IS_IPV4_COMPAT(INET6_ATON('::10.0.5.9'));
        -&gt; 1
mysql&gt; SELECT IS_IPV4_COMPAT(INET6_ATON('::ffff:10.0.5.9'));
        -&gt; 0
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">493</field>
		<field name="name">IS_IPV4_MAPPED</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
IS_IPV4_MAPPED(expr)

This function takes an IPv6 address represented in numeric form as a
binary string, as returned by INET6_ATON(). It returns 1 if the
argument is a valid IPv4-mapped IPv6 address, 0 otherwise, unless expr
is NULL, in which case the function returns NULL. IPv4-mapped addresses
have the form ::ffff:ipv4_address.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT IS_IPV4_MAPPED(INET6_ATON('::10.0.5.9'));
        -&gt; 0
mysql&gt; SELECT IS_IPV4_MAPPED(INET6_ATON('::ffff:10.0.5.9'));
        -&gt; 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">494</field>
		<field name="name">IS_IPV6</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
IS_IPV6(expr)

Returns 1 if the argument is a valid IPv6 address specified as a
string, 0 otherwise, unless expr is NULL, in which case the function
returns NULL. This function does not consider IPv4 addresses to be
valid IPv6 addresses.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT IS_IPV6('10.0.5.9'), IS_IPV6('::1');
        -&gt; 0, 1
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">495</field>
		<field name="name">IS_UUID</field>
		<field name="help_category_id">39</field>
		<field name="description">IS_UUID(string_uuid)

Returns 1 if the argument is a valid string-format UUID, 0 if the
argument is not a valid UUID, and NULL if the argument is NULL.

&quot;Valid&quot; means that the value is in a format that can be parsed. That
is, it has the correct length and contains only the permitted
characters (hexadecimal digits in any lettercase and, optionally,
dashes and curly braces). This format is most common:

aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee

These other formats are also permitted:

aaaaaaaabbbbccccddddeeeeeeeeeeee
{aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee}

For the meanings of fields within the value, see the UUID() function
description.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db');
+-------------------------------------------------+
| IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db') |
+-------------------------------------------------+
|                                               1 |
+-------------------------------------------------+
mysql&gt; SELECT IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB');
+-------------------------------------------------+
| IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB') |
+-------------------------------------------------+
|                                               1 |
+-------------------------------------------------+
mysql&gt; SELECT IS_UUID('6ccd780cbaba102695645b8c656024db');
+---------------------------------------------+
| IS_UUID('6ccd780cbaba102695645b8c656024db') |
+---------------------------------------------+
|                                           1 |
+---------------------------------------------+
mysql&gt; SELECT IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}');
+---------------------------------------------------+
| IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}') |
+---------------------------------------------------+
|                                                 1 |
+---------------------------------------------------+
mysql&gt; SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c6560');
+---------------------------------------------+
| IS_UUID('6ccd780c-baba-1026-9564-5b8c6560') |
+---------------------------------------------+
|                                           0 |
+---------------------------------------------+
mysql&gt; SELECT IS_UUID(RAND());
+-----------------+
| IS_UUID(RAND()) |
+-----------------+
|               0 |
+-----------------+
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">496</field>
		<field name="name">NAME_CONST</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
NAME_CONST(name,value)

Returns the given value. When used to produce a result set column,
NAME_CONST() causes the column to have the given name. The arguments
should be constants.

mysql&gt; SELECT NAME_CONST('myname', 14);
+--------+
| myname |
+--------+
|     14 |
+--------+

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">497</field>
		<field name="name">SLEEP</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
SLEEP(duration)

Sleeps (pauses) for the number of seconds given by the duration
argument, then returns 0. The duration may have a fractional part. If
the argument is NULL or negative, SLEEP() produces a warning, or an
error in strict SQL mode.

When sleep returns normally (without interruption), it returns 0:

mysql&gt; SELECT SLEEP(1000);
+-------------+
| SLEEP(1000) |
+-------------+
|           0 |
+-------------+

When SLEEP() is the only thing invoked by a query that is interrupted,
it returns 1 and the query itself returns no error. This is true
whether the query is killed or times out:

o This statement is interrupted using KILL QUERY from another session:

mysql&gt; SELECT SLEEP(1000);
+-------------+
| SLEEP(1000) |
+-------------+
|           1 |
+-------------+

o This statement is interrupted by timing out:

mysql&gt; SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1000);
+-------------+
| SLEEP(1000) |
+-------------+
|           1 |
+-------------+

When SLEEP() is only part of a query that is interrupted, the query
returns an error:

o This statement is interrupted using KILL QUERY from another session:

mysql&gt; SELECT 1 FROM t1 WHERE SLEEP(1000);
ERROR 1317 (70100): Query execution was interrupted

o This statement is interrupted by timing out:

mysql&gt; SELECT /*+ MAX_EXECUTION_TIME(1000) */ 1 FROM t1 WHERE SLEEP(1000);
ERROR 3024 (HY000): Query execution was interrupted, maximum statement
execution time exceeded

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">498</field>
		<field name="name">UUID</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
UUID()

Returns a Universal Unique Identifier (UUID) generated according to RFC
4122, &quot;A Universally Unique IDentifier (UUID) URN Namespace&quot;
(http://www.ietf.org/rfc/rfc4122.txt).

A UUID is designed as a number that is globally unique in space and
time. Two calls to UUID() are expected to generate two different
values, even if these calls are performed on two separate devices not
connected to each other.

*Warning*:

Although UUID() values are intended to be unique, they are not
necessarily unguessable or unpredictable. If unpredictability is
required, UUID values should be generated some other way.

UUID() returns a value that conforms to UUID version 1 as described in
RFC 4122. The value is a 128-bit number represented as a utf8mb3 string
of five hexadecimal numbers in aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee
format:

o The first three numbers are generated from the low, middle, and high
  parts of a timestamp. The high part also includes the UUID version
  number.

o The fourth number preserves temporal uniqueness in case the timestamp
  value loses monotonicity (for example, due to daylight saving time).

o The fifth number is an IEEE 802 node number that provides spatial
  uniqueness. A random number is substituted if the latter is not
  available (for example, because the host device has no Ethernet card,
  or it is unknown how to find the hardware address of an interface on
  the host operating system). In this case, spatial uniqueness cannot
  be guaranteed. Nevertheless, a collision should have very low
  probability.

  The MAC address of an interface is taken into account only on
  FreeBSD, Linux, and Windows. On other operating systems, MySQL uses a
  randomly generated 48-bit number.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT UUID();
        -&gt; '6ccd780c-baba-1026-9564-5b8c656024db'
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">499</field>
		<field name="name">UUID_SHORT</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
UUID_SHORT()

Returns a &quot;short&quot; universal identifier as a 64-bit unsigned integer.
Values returned by UUID_SHORT() differ from the string-format 128-bit
identifiers returned by the UUID() function and have different
uniqueness properties. The value of UUID_SHORT() is guaranteed to be
unique if the following conditions hold:

o The server_id value of the current server is between 0 and 255 and is
  unique among your set of source and replica servers

o You do not set back the system time for your server host between
  mysqld restarts

o You invoke UUID_SHORT() on average fewer than 16 million times per
  second between mysqld restarts

The UUID_SHORT() return value is constructed this way:

  (server_id &amp; 255) &lt;&lt; 56
+ (server_startup_time_in_seconds &lt;&lt; 24)
+ incremented_variable++;

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; SELECT UUID_SHORT();
        -&gt; 92395783831158784
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">500</field>
		<field name="name">UUID_TO_BIN</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
UUID_TO_BIN(string_uuid), UUID_TO_BIN(string_uuid, swap_flag)

Converts a string UUID to a binary UUID and returns the result. (The
IS_UUID() function description lists the permitted string UUID
formats.) The return binary UUID is a VARBINARY(16) value. If the UUID
argument is NULL, the return value is NULL. If any argument is invalid,
an error occurs.

UUID_TO_BIN() takes one or two arguments:

o The one-argument form takes a string UUID value. The binary result is
  in the same order as the string argument.

o The two-argument form takes a string UUID value and a flag value:

  o If swap_flag is 0, the two-argument form is equivalent to the
    one-argument form. The binary result is in the same order as the
    string argument.

  o If swap_flag is 1, the format of the return value differs: The
    time-low and time-high parts (the first and third groups of
    hexadecimal digits, respectively) are swapped. This moves the more
    rapidly varying part to the right and can improve indexing
    efficiency if the result is stored in an indexed column.

Time-part swapping assumes the use of UUID version 1 values, such as
are generated by the UUID() function. For UUID values produced by other
means that do not follow version 1 format, time-part swapping provides
no benefit. For details about version 1 format, see the UUID() function
description.

Suppose that you have the following string UUID value:

mysql&gt; SET @uuid = '6ccd780c-baba-1026-9564-5b8c656024db';

To convert the string UUID to binary with or without time-part
swapping, use UUID_TO_BIN():

mysql&gt; SELECT HEX(UUID_TO_BIN(@uuid));
+----------------------------------+
| HEX(UUID_TO_BIN(@uuid))          |
+----------------------------------+
| 6CCD780CBABA102695645B8C656024DB |
+----------------------------------+
mysql&gt; SELECT HEX(UUID_TO_BIN(@uuid, 0));
+----------------------------------+
| HEX(UUID_TO_BIN(@uuid, 0))       |
+----------------------------------+
| 6CCD780CBABA102695645B8C656024DB |
+----------------------------------+
mysql&gt; SELECT HEX(UUID_TO_BIN(@uuid, 1));
+----------------------------------+
| HEX(UUID_TO_BIN(@uuid, 1))       |
+----------------------------------+
| 1026BABA6CCD780C95645B8C656024DB |
+----------------------------------+

To convert a binary UUID returned by UUID_TO_BIN() to a string UUID,
use BIN_TO_UUID(). If you produce a binary UUID by calling
UUID_TO_BIN() with a second argument of 1 to swap time parts, you
should also pass a second argument of 1 to BIN_TO_UUID() to unswap the
time parts when converting the binary UUID back to a string UUID:

mysql&gt; SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));
+--------------------------------------+
| BIN_TO_UUID(UUID_TO_BIN(@uuid))      |
+--------------------------------------+
| 6ccd780c-baba-1026-9564-5b8c656024db |
+--------------------------------------+
mysql&gt; SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);
+--------------------------------------+
| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |
+--------------------------------------+
| 6ccd780c-baba-1026-9564-5b8c656024db |
+--------------------------------------+
mysql&gt; SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);
+--------------------------------------+
| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |
+--------------------------------------+
| 6ccd780c-baba-1026-9564-5b8c656024db |
+--------------------------------------+

If the use of time-part swapping is not the same for the conversion in
both directions, the original UUID is not recovered properly:

mysql&gt; SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);
+--------------------------------------+
| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |
+--------------------------------------+
| baba1026-780c-6ccd-9564-5b8c656024db |
+--------------------------------------+
mysql&gt; SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);
+--------------------------------------+
| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |
+--------------------------------------+
| 1026baba-6ccd-780c-9564-5b8c656024db |
+--------------------------------------+

If UUID_TO_BIN() is invoked from within the mysql client, binary
strings display using hexadecimal notation, depending on the value of
the --binary-as-hex. For more information about that option, see
https://dev.mysql.com/doc/refman/8.0/en/mysql.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">501</field>
		<field name="name">VALUES</field>
		<field name="help_category_id">39</field>
		<field name="description">Syntax:
VALUES(col_name)

In an INSERT ... ON DUPLICATE KEY UPDATE statement, you can use the
VALUES(col_name) function in the UPDATE clause to refer to column
values from the INSERT portion of the statement. In other words,
VALUES(col_name) in the UPDATE clause refers to the value of col_name
that would be inserted, had no duplicate-key conflict occurred. This
function is especially useful in multiple-row inserts. The VALUES()
function is meaningful only in the ON DUPLICATE KEY UPDATE clause of
INSERT statements and returns NULL otherwise. See
https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html

</field>
		<field name="example">mysql&gt; INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)
    -&gt; ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html</field>
	</row>
	<row>
		<field name="help_topic_id">502</field>
		<field name="name">ALTER DATABASE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER {DATABASE | SCHEMA} [db_name]
    alter_option ...

alter_option: {
    [DEFAULT] CHARACTER SET [=] charset_name
  | [DEFAULT] COLLATE [=] collation_name
  | [DEFAULT] ENCRYPTION [=] {'Y' | 'N'}
  | READ ONLY [=] {DEFAULT | 0 | 1}
}

ALTER DATABASE enables you to change the overall characteristics of a
database. These characteristics are stored in the data dictionary. This
statement requires the ALTER privilege on the database. ALTER SCHEMA is
a synonym for ALTER DATABASE.

If the database name is omitted, the statement applies to the default
database. In that case, an error occurs if there is no default
database.

For any alter_option omitted from the statement, the database retains
its current option value, with the exception that changing the
character set may change the collation and vice versa.

o https://dev.mysql.com/doc/refman/8.0/en/alter-database.html#alter-dat
  abase-charset

o https://dev.mysql.com/doc/refman/8.0/en/alter-database.html#alter-dat
  abase-encryption

o https://dev.mysql.com/doc/refman/8.0/en/alter-database.html#alter-dat
  abase-read-only

Character Set and Collation Options

The CHARACTER SET option changes the default database character set.
The COLLATE option changes the default database collation. For
information about character set and collation names, see
https://dev.mysql.com/doc/refman/8.0/en/charset.html.

To see the available character sets and collations, use the SHOW
CHARACTER SET and SHOW COLLATION statements, respectively. See [HELP
SHOW CHARACTER SET], and [HELP SHOW COLLATION].

A stored routine that uses the database defaults when the routine is
created includes those defaults as part of its definition. (In a stored
routine, variables with character data types use the database defaults
if the character set or collation are not specified explicitly. See
[HELP CREATE PROCEDURE].) If you change the default character set or
collation for a database, any stored routines that are to use the new
defaults must be dropped and recreated.

Encryption Option

The ENCRYPTION option, introduced in MySQL 8.0.16, defines the default
database encryption, which is inherited by tables created in the
database. The permitted values are 'Y' (encryption enabled) and 'N'
(encryption disabled).

The mysql system schema cannot be set to default encryption. The
existing tables within it are part of the general mysql tablespace,
which may be encrypted. The information_schema contains only views. It
is not possible to create any tables within it. There is nothing on the
disk to encrypt. All tables in the performance_schema use the
PERFORMANCE_SCHEMA engine, which is purely in-memory. It is not
possible to create any other tables in it. There is nothing on the disk
to encrypt.

Only newly created tables inherit the default database encryption. For
existing tables associated with the database, their encryption remains
unchanged. If the table_encryption_privilege_check system variable is
enabled, the TABLE_ENCRYPTION_ADMIN privilege is required to specify a
default encryption setting that differs from the value of the
default_table_encryption system variable. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#inn
odb-schema-tablespace-encryption-default.

Read Only Option

The READ ONLY option, introduced in MySQL 8.0.22, controls whether to
permit modification of the database and objects within it. The
permitted values are DEFAULT or 0 (not read only) and 1 (read only).
This option is useful for database migration because a database for
which READ ONLY is enabled can be migrated to another MySQL instance
without concern that the database might be changed during the
operation.

With NDB Cluster, making a database read only on one mysqld server is
synchronized to other mysqld servers in the same cluster, so that the
database becomes read only on all mysqld servers.

The READ ONLY option, if enabled, is displayed in the
INFORMATION_SCHEMA SCHEMATA_EXTENSIONS table. See
https://dev.mysql.com/doc/refman/8.0/en/information-schema-schemata-ext
ensions-table.html.

The READ ONLY option cannot be enabled for these system schemas: mysql,
information_schema, performance_schema.

In ALTER DATABASE statements, the READ ONLY option interacts with other
instances of itself and with other options as follows:

o An error occurs if multiple instances of READ ONLY conflict (for
  example, READ ONLY = 1 READ ONLY = 0).

o An ALTER DATABASE statement that contains only (nonconflicting) READ
  ONLY options is permitted even for a read-only database.

o A mix of (nonconflicting) READ ONLY options with other options is
  permitted if the read-only state of the database either before or
  after the statement permits modifications. If the read-only state
  both before and after prohibits changes, an error occurs.

  This statement succeeds whether or not the database is read only:

ALTER DATABASE mydb READ ONLY = 0 DEFAULT COLLATE utf8mb4_bin;

  This statement succeeds if the database is not read only, but fails
  if it is already read only:

ALTER DATABASE mydb READ ONLY = 1 DEFAULT COLLATE utf8mb4_bin;

Enabling READ ONLY affects all users of the database, with these
exceptions that are not subject to read-only checks:

o Statements executed by the server as part of server initialization,
  restart, upgrade, or replication.

o Statements in a file named at server startup by the init_file system
  variable.

o TEMPORARY tables; it is possible to create, alter, drop, and write to
  TEMPORARY tables in a read-only database.

o NDB Cluster non-SQL inserts and updates.

Other than for the excepted operations just listed, enabling READ ONLY
prohibits write operations to the database and its objects, including
their definitions, data, and metadata. The following list details
affected SQL statements and operations:

o The database itself:

  o CREATE DATABASE

  o ALTER DATABASE (except to change the READ ONLY option)

  o DROP DATABASE

o Views:

  o CREATE VIEW

  o ALTER VIEW

  o DROP VIEW

  o Selecting from views that invoke functions with side effects.

  o Updating updatable views.

  o Statements that create or drop objects in a writable database are
    rejected if they affect metadata of a view in a read-only database
    (for example, by making the view valid or invalid).

o Stored routines:

  o CREATE PROCEDURE

  o DROP PROCEDURE

  o CALL (of procedures with side effects)

  o CREATE FUNCTION

  o DROP FUNCTION

  o SELECT (of functions with side effects)

  o For procedures and functions, read-only checks follow prelocking
    behavior. For CALL statements, read-only checks are done on a
    per-statement basis, so if some conditionally executed statement
    writing to a read-only database does not actually execute, the call
    still succeeds. On the other hand, for a function called within a
    SELECT, execution of the function body happens in prelocked mode.
    As long as a some statement within the function writes to a
    read-only database, execution of the function fails with an error
    regardless of whether the statement actually executes.

o Triggers:

  o CREATE TRIGGER

  o DROP TRIGGER

  o Trigger invocation.

o Events:

  o CREATE EVENT

  o ALTER EVENT

  o DROP EVENT

  o Event execution:

    o Executing an event in the database fails because that would
      change the last-execution timestamp, which is event metadata
      stored in the data dictionary. Failure of event execution also
      has the effect of causing the event scheduler to stop.

    o If an event writes to an object in a read-only database,
      execution of the event fails with an error, but the event
      scheduler is not stopped.

o Tables:

  o CREATE TABLE

  o ALTER TABLE

  o CREATE INDEX

  o DROP INDEX

  o RENAME TABLE

  o TRUNCATE TABLE

  o DROP TABLE

  o DELETE

  o INSERT

  o IMPORT TABLE

  o LOAD DATA

  o LOAD XML

  o REPLACE

  o UPDATE

  o For cascading foreign keys where the child table is in a read-only
    database, updates and deletes on the parent are rejected even if
    the child table is not directly affected.

  o For a MERGE table such as CREATE TABLE s1.t(i int) ENGINE MERGE
    UNION (s2.t, s3.t), INSERT_METHOD=..., the following behavior
    applies:

    o Inserting into the MERGE table (INSERT into s1.t) fails if at
      least one of s1, s2, s3 is read only, regardless of insert
      method. The insert is refused even if it would actually end up in
      a writable table.

    o Dropping the MERGE table (DROP TABLE s1.t) succeeds as long as s1
      is not read only. It is permitted to drop a MERGE table that
      refers to a read-only database.

An ALTER DATABASE statement blocks until all concurrent transactions
that have already accessed an object in the database being altered have
committed. Conversely, a write transaction accessing an object in a
database being altered in a concurrent ALTER DATABASE blocks until the
ALTER DATABASE has committed.

If the Clone plugin is used to clone a local or remote data directory,
the databases in the clone retain the read-only state they had in the
source data directory. The read-only state does not affect the cloning
process itself. If it is not desirable to have the same database
read-only state in the clone, the option must be changed explicitly for
the clone after the cloning process has finished, using ALTER DATABASE
operations on the clone.

When cloning from a donor to a recipient, if the recipient has a user
database that is read only, cloning fails with an error message.
Cloning may be retried after making the database writable.

READ ONLY is permitted for ALTER DATABASE, but not for CREATE DATABASE.
However, for a read-only database, the statement produced by SHOW
CREATE DATABASE does include READ ONLY=1 within a comment to indicate
its read-only status:

mysql&gt; ALTER DATABASE mydb READ ONLY = 1;
mysql&gt; SHOW CREATE DATABASE mydb\G
*************************** 1. row ***************************
       Database: mydb
Create Database: CREATE DATABASE `mydb`
                 /*!40100 DEFAULT CHARACTER SET utf8mb4
                          COLLATE utf8mb4_0900_ai_ci */
                 /*!80016 DEFAULT ENCRYPTION='N' */
                 /* READ ONLY = 1 */

If the server executes a CREATE DATABASE statement containing such a
comment, the server ignores the comment and the READ ONLY option is not
processed. This has implications for mysqldump and mysqlpump, which use
SHOW CREATE DATABASE to produce CREATE DATABASE statements in dump
output:

o In a dump file, the CREATE DATABASE statement for a read-only
  database contains the commented READ ONLY option.

o The dump file can be restored as usual, but because the server
  ignores the commented READ ONLY option, the restored database is not
  read only. If the database is to be read only after being restored,
  you must execute ALTER DATABASE manually to make it so.

Suppose that mydb is read only and you dump it as follows:

$&gt; mysqldump --databases mydb &gt; mydb.sql

A restore operation later must be followed by ALTER DATABASE if mydb
should still be read only:

$&gt; mysql
mysql&gt; SOURCE mydb.sql;
mysql&gt; ALTER DATABASE mydb READ ONLY = 1;

MySQL Enterprise Backup is not subject to this issue. It backs up and
restores a read-only database like any other, but enables the READ ONLY
option at restore time if it was enabled at backup time.

ALTER DATABASE is written to the binary log, so a change to the READ
ONLY option on a replication source server also affects replicas. To
prevent this from happening, binary logging must be disabled prior to
execution of the ALTER DATABASE statement. For example, to prepare for
migrating a database without affecting replicas, perform these
operations:

1. Within a single session, disable binary logging and enable READ ONLY
   for the database:

mysql&gt; SET sql_log_bin = OFF;
mysql&gt; ALTER DATABASE mydb READ ONLY = 1;

2. Dump the database, for example, with mysqldump or mysqlpump:

$&gt; mysqldump --databases mydb &gt; mydb.sql

3. Within a single session, disable binary logging and disable READ
   ONLY for the database:

mysql&gt; SET sql_log_bin = OFF;
mysql&gt; ALTER DATABASE mydb READ ONLY = 0;

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-database.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-database.html</field>
	</row>
	<row>
		<field name="help_topic_id">503</field>
		<field name="name">ALTER SCHEMA</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER {DATABASE | SCHEMA} [db_name]
    alter_option ...

alter_option: {
    [DEFAULT] CHARACTER SET [=] charset_name
  | [DEFAULT] COLLATE [=] collation_name
  | [DEFAULT] ENCRYPTION [=] {'Y' | 'N'}
  | READ ONLY [=] {DEFAULT | 0 | 1}
}

ALTER DATABASE enables you to change the overall characteristics of a
database. These characteristics are stored in the data dictionary. This
statement requires the ALTER privilege on the database. ALTER SCHEMA is
a synonym for ALTER DATABASE.

If the database name is omitted, the statement applies to the default
database. In that case, an error occurs if there is no default
database.

For any alter_option omitted from the statement, the database retains
its current option value, with the exception that changing the
character set may change the collation and vice versa.

o https://dev.mysql.com/doc/refman/8.0/en/alter-database.html#alter-dat
  abase-charset

o https://dev.mysql.com/doc/refman/8.0/en/alter-database.html#alter-dat
  abase-encryption

o https://dev.mysql.com/doc/refman/8.0/en/alter-database.html#alter-dat
  abase-read-only

Character Set and Collation Options

The CHARACTER SET option changes the default database character set.
The COLLATE option changes the default database collation. For
information about character set and collation names, see
https://dev.mysql.com/doc/refman/8.0/en/charset.html.

To see the available character sets and collations, use the SHOW
CHARACTER SET and SHOW COLLATION statements, respectively. See [HELP
SHOW CHARACTER SET], and [HELP SHOW COLLATION].

A stored routine that uses the database defaults when the routine is
created includes those defaults as part of its definition. (In a stored
routine, variables with character data types use the database defaults
if the character set or collation are not specified explicitly. See
[HELP CREATE PROCEDURE].) If you change the default character set or
collation for a database, any stored routines that are to use the new
defaults must be dropped and recreated.

Encryption Option

The ENCRYPTION option, introduced in MySQL 8.0.16, defines the default
database encryption, which is inherited by tables created in the
database. The permitted values are 'Y' (encryption enabled) and 'N'
(encryption disabled).

The mysql system schema cannot be set to default encryption. The
existing tables within it are part of the general mysql tablespace,
which may be encrypted. The information_schema contains only views. It
is not possible to create any tables within it. There is nothing on the
disk to encrypt. All tables in the performance_schema use the
PERFORMANCE_SCHEMA engine, which is purely in-memory. It is not
possible to create any other tables in it. There is nothing on the disk
to encrypt.

Only newly created tables inherit the default database encryption. For
existing tables associated with the database, their encryption remains
unchanged. If the table_encryption_privilege_check system variable is
enabled, the TABLE_ENCRYPTION_ADMIN privilege is required to specify a
default encryption setting that differs from the value of the
default_table_encryption system variable. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#inn
odb-schema-tablespace-encryption-default.

Read Only Option

The READ ONLY option, introduced in MySQL 8.0.22, controls whether to
permit modification of the database and objects within it. The
permitted values are DEFAULT or 0 (not read only) and 1 (read only).
This option is useful for database migration because a database for
which READ ONLY is enabled can be migrated to another MySQL instance
without concern that the database might be changed during the
operation.

With NDB Cluster, making a database read only on one mysqld server is
synchronized to other mysqld servers in the same cluster, so that the
database becomes read only on all mysqld servers.

The READ ONLY option, if enabled, is displayed in the
INFORMATION_SCHEMA SCHEMATA_EXTENSIONS table. See
https://dev.mysql.com/doc/refman/8.0/en/information-schema-schemata-ext
ensions-table.html.

The READ ONLY option cannot be enabled for these system schemas: mysql,
information_schema, performance_schema.

In ALTER DATABASE statements, the READ ONLY option interacts with other
instances of itself and with other options as follows:

o An error occurs if multiple instances of READ ONLY conflict (for
  example, READ ONLY = 1 READ ONLY = 0).

o An ALTER DATABASE statement that contains only (nonconflicting) READ
  ONLY options is permitted even for a read-only database.

o A mix of (nonconflicting) READ ONLY options with other options is
  permitted if the read-only state of the database either before or
  after the statement permits modifications. If the read-only state
  both before and after prohibits changes, an error occurs.

  This statement succeeds whether or not the database is read only:

ALTER DATABASE mydb READ ONLY = 0 DEFAULT COLLATE utf8mb4_bin;

  This statement succeeds if the database is not read only, but fails
  if it is already read only:

ALTER DATABASE mydb READ ONLY = 1 DEFAULT COLLATE utf8mb4_bin;

Enabling READ ONLY affects all users of the database, with these
exceptions that are not subject to read-only checks:

o Statements executed by the server as part of server initialization,
  restart, upgrade, or replication.

o Statements in a file named at server startup by the init_file system
  variable.

o TEMPORARY tables; it is possible to create, alter, drop, and write to
  TEMPORARY tables in a read-only database.

o NDB Cluster non-SQL inserts and updates.

Other than for the excepted operations just listed, enabling READ ONLY
prohibits write operations to the database and its objects, including
their definitions, data, and metadata. The following list details
affected SQL statements and operations:

o The database itself:

  o CREATE DATABASE

  o ALTER DATABASE (except to change the READ ONLY option)

  o DROP DATABASE

o Views:

  o CREATE VIEW

  o ALTER VIEW

  o DROP VIEW

  o Selecting from views that invoke functions with side effects.

  o Updating updatable views.

  o Statements that create or drop objects in a writable database are
    rejected if they affect metadata of a view in a read-only database
    (for example, by making the view valid or invalid).

o Stored routines:

  o CREATE PROCEDURE

  o DROP PROCEDURE

  o CALL (of procedures with side effects)

  o CREATE FUNCTION

  o DROP FUNCTION

  o SELECT (of functions with side effects)

  o For procedures and functions, read-only checks follow prelocking
    behavior. For CALL statements, read-only checks are done on a
    per-statement basis, so if some conditionally executed statement
    writing to a read-only database does not actually execute, the call
    still succeeds. On the other hand, for a function called within a
    SELECT, execution of the function body happens in prelocked mode.
    As long as a some statement within the function writes to a
    read-only database, execution of the function fails with an error
    regardless of whether the statement actually executes.

o Triggers:

  o CREATE TRIGGER

  o DROP TRIGGER

  o Trigger invocation.

o Events:

  o CREATE EVENT

  o ALTER EVENT

  o DROP EVENT

  o Event execution:

    o Executing an event in the database fails because that would
      change the last-execution timestamp, which is event metadata
      stored in the data dictionary. Failure of event execution also
      has the effect of causing the event scheduler to stop.

    o If an event writes to an object in a read-only database,
      execution of the event fails with an error, but the event
      scheduler is not stopped.

o Tables:

  o CREATE TABLE

  o ALTER TABLE

  o CREATE INDEX

  o DROP INDEX

  o RENAME TABLE

  o TRUNCATE TABLE

  o DROP TABLE

  o DELETE

  o INSERT

  o IMPORT TABLE

  o LOAD DATA

  o LOAD XML

  o REPLACE

  o UPDATE

  o For cascading foreign keys where the child table is in a read-only
    database, updates and deletes on the parent are rejected even if
    the child table is not directly affected.

  o For a MERGE table such as CREATE TABLE s1.t(i int) ENGINE MERGE
    UNION (s2.t, s3.t), INSERT_METHOD=..., the following behavior
    applies:

    o Inserting into the MERGE table (INSERT into s1.t) fails if at
      least one of s1, s2, s3 is read only, regardless of insert
      method. The insert is refused even if it would actually end up in
      a writable table.

    o Dropping the MERGE table (DROP TABLE s1.t) succeeds as long as s1
      is not read only. It is permitted to drop a MERGE table that
      refers to a read-only database.

An ALTER DATABASE statement blocks until all concurrent transactions
that have already accessed an object in the database being altered have
committed. Conversely, a write transaction accessing an object in a
database being altered in a concurrent ALTER DATABASE blocks until the
ALTER DATABASE has committed.

If the Clone plugin is used to clone a local or remote data directory,
the databases in the clone retain the read-only state they had in the
source data directory. The read-only state does not affect the cloning
process itself. If it is not desirable to have the same database
read-only state in the clone, the option must be changed explicitly for
the clone after the cloning process has finished, using ALTER DATABASE
operations on the clone.

When cloning from a donor to a recipient, if the recipient has a user
database that is read only, cloning fails with an error message.
Cloning may be retried after making the database writable.

READ ONLY is permitted for ALTER DATABASE, but not for CREATE DATABASE.
However, for a read-only database, the statement produced by SHOW
CREATE DATABASE does include READ ONLY=1 within a comment to indicate
its read-only status:

mysql&gt; ALTER DATABASE mydb READ ONLY = 1;
mysql&gt; SHOW CREATE DATABASE mydb\G
*************************** 1. row ***************************
       Database: mydb
Create Database: CREATE DATABASE `mydb`
                 /*!40100 DEFAULT CHARACTER SET utf8mb4
                          COLLATE utf8mb4_0900_ai_ci */
                 /*!80016 DEFAULT ENCRYPTION='N' */
                 /* READ ONLY = 1 */

If the server executes a CREATE DATABASE statement containing such a
comment, the server ignores the comment and the READ ONLY option is not
processed. This has implications for mysqldump and mysqlpump, which use
SHOW CREATE DATABASE to produce CREATE DATABASE statements in dump
output:

o In a dump file, the CREATE DATABASE statement for a read-only
  database contains the commented READ ONLY option.

o The dump file can be restored as usual, but because the server
  ignores the commented READ ONLY option, the restored database is not
  read only. If the database is to be read only after being restored,
  you must execute ALTER DATABASE manually to make it so.

Suppose that mydb is read only and you dump it as follows:

$&gt; mysqldump --databases mydb &gt; mydb.sql

A restore operation later must be followed by ALTER DATABASE if mydb
should still be read only:

$&gt; mysql
mysql&gt; SOURCE mydb.sql;
mysql&gt; ALTER DATABASE mydb READ ONLY = 1;

MySQL Enterprise Backup is not subject to this issue. It backs up and
restores a read-only database like any other, but enables the READ ONLY
option at restore time if it was enabled at backup time.

ALTER DATABASE is written to the binary log, so a change to the READ
ONLY option on a replication source server also affects replicas. To
prevent this from happening, binary logging must be disabled prior to
execution of the ALTER DATABASE statement. For example, to prepare for
migrating a database without affecting replicas, perform these
operations:

1. Within a single session, disable binary logging and enable READ ONLY
   for the database:

mysql&gt; SET sql_log_bin = OFF;
mysql&gt; ALTER DATABASE mydb READ ONLY = 1;

2. Dump the database, for example, with mysqldump or mysqlpump:

$&gt; mysqldump --databases mydb &gt; mydb.sql

3. Within a single session, disable binary logging and disable READ
   ONLY for the database:

mysql&gt; SET sql_log_bin = OFF;
mysql&gt; ALTER DATABASE mydb READ ONLY = 0;

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-database.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-database.html</field>
	</row>
	<row>
		<field name="help_topic_id">504</field>
		<field name="name">ALTER EVENT</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER
    [DEFINER = user]
    EVENT event_name
    [ON SCHEDULE schedule]
    [ON COMPLETION [NOT] PRESERVE]
    [RENAME TO new_event_name]
    [ENABLE | DISABLE | DISABLE ON SLAVE]
    [COMMENT 'string']
    [DO event_body]

The ALTER EVENT statement changes one or more of the characteristics of
an existing event without the need to drop and recreate it. The syntax
for each of the DEFINER, ON SCHEDULE, ON COMPLETION, COMMENT, ENABLE /
DISABLE, and DO clauses is exactly the same as when used with CREATE
EVENT. (See [HELP CREATE EVENT].)

Any user can alter an event defined on a database for which that user
has the EVENT privilege. When a user executes a successful ALTER EVENT
statement, that user becomes the definer for the affected event.

ALTER EVENT works only with an existing event:

mysql&gt; ALTER EVENT no_such_event 
     &gt;     ON SCHEDULE 
     &gt;       EVERY '2:3' DAY_HOUR;
ERROR 1517 (HY000): Unknown event 'no_such_event'

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-event.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-event.html</field>
	</row>
	<row>
		<field name="help_topic_id">505</field>
		<field name="name">ALTER FUNCTION</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER FUNCTION func_name [characteristic ...]

characteristic: {
    COMMENT 'string'
  | LANGUAGE SQL
  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
  | SQL SECURITY { DEFINER | INVOKER }
}

This statement can be used to change the characteristics of a stored
function. More than one change may be specified in an ALTER FUNCTION
statement. However, you cannot change the parameters or body of a
stored function using this statement; to make such changes, you must
drop and re-create the function using DROP FUNCTION and CREATE
FUNCTION.

You must have the ALTER ROUTINE privilege for the function. (That
privilege is granted automatically to the function creator.) If binary
logging is enabled, the ALTER FUNCTION statement might also require the
SUPER privilege, as described in
https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-function.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-function.html</field>
	</row>
	<row>
		<field name="help_topic_id">506</field>
		<field name="name">ALTER INSTANCE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER INSTANCE instance_action

instance_action: {
  | {ENABLE|DISABLE} INNODB REDO_LOG
  | ROTATE INNODB MASTER KEY
  | ROTATE BINLOG MASTER KEY
  | RELOAD TLS
      [FOR CHANNEL {mysql_main | mysql_admin}]
      [NO ROLLBACK ON ERROR]
  | RELOAD KEYRING
}

ALTER INSTANCE defines actions applicable to a MySQL server instance.
The statement supports these actions:

o ALTER INSTANCE {ENABLE | DISABLE} INNODB REDO_LOG

  This action enables or disables InnoDB redo logging. Redo logging is
  enabled by default. This feature is intended only for loading data
  into a new MySQL instance. The statement is not written to the binary
  log. This action was introduced in MySQL 8.0.21.

  *Warning*:

  Do not disable redo logging on a production system. While it is
  permitted to shut down and restart the server while redo logging is
  disabled, an unexpected server stoppage while redo logging is
  disabled can cause data loss and instance corruption.

  An ALTER INSTANCE [ENABLE|DISABLE] INNODB REDO_LOG operation requires
  an exclusive backup lock, which prevents other ALTER INSTANCE
  operations from executing concurrently. Other ALTER INSTANCE
  operations must wait for the lock to be released before executing.

  For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/innodb-redo-log.html#innodb-d
  isable-redo-logging.

o ALTER INSTANCE ROTATE INNODB MASTER KEY

  This action rotates the master encryption key used for InnoDB
  tablespace encryption. Key rotation requires the ENCRYPTION_KEY_ADMIN
  or SUPER privilege. To perform this action, a keyring plugin must be
  installed and configured. For instructions, see
  https://dev.mysql.com/doc/refman/8.0/en/keyring.html.

  ALTER INSTANCE ROTATE INNODB MASTER KEY supports concurrent DML.
  However, it cannot be run concurrently with CREATE TABLE ...
  ENCRYPTION or ALTER TABLE ... ENCRYPTION operations, and locks are
  taken to prevent conflicts that could arise from concurrent execution
  of these statements. If one of the conflicting statements is running,
  it must complete before another can proceed.

  ALTER INSTANCE ROTATE INNODB MASTER KEY statements are written to the
  binary log so that they can be executed on replicated servers.

  For additional ALTER INSTANCE ROTATE INNODB MASTER KEY usage
  information, see
  https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html.

o ALTER INSTANCE ROTATE BINLOG MASTER KEY

  This action rotates the binary log master key used for binary log
  encryption. Key rotation for the binary log master key requires the
  BINLOG_ENCRYPTION_ADMIN or SUPER privilege. The statement cannot be
  used if the binlog_encryption system variable is set to OFF. To
  perform this action, a keyring plugin must be installed and
  configured. For instructions, see
  https://dev.mysql.com/doc/refman/8.0/en/keyring.html.

  ALTER INSTANCE ROTATE BINLOG MASTER KEY actions are not written to
  the binary log and are not executed on replicas. Binary log master
  key rotation can therefore be carried out in replication environments
  including a mix of MySQL versions. To schedule regular rotation of
  the binary log master key on all applicable source and replica
  servers, you can enable the MySQL Event Scheduler on each server and
  issue the ALTER INSTANCE ROTATE BINLOG MASTER KEY statement using a
  CREATE EVENT statement. If you rotate the binary log master key
  because you suspect that the current or any of the previous binary
  log master keys might have been compromised, issue the statement on
  every applicable source and replica server, which enables you to
  verify immediate compliance.

  For additional ALTER INSTANCE ROTATE BINLOG MASTER KEY usage
  information, including what to do if the process does not complete
  correctly or is interrupted by an unexpected server halt, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-binlog-encryption
  .html.

o ALTER INSTANCE RELOAD TLS

  This action reconfigures a TLS context from the current values of the
  system variables that define the context. It also updates the status
  variables that reflect the active context values. This action
  requires the CONNECTION_ADMIN privilege. For additional information
  about reconfiguring the TLS context, including which system and
  status variables are context-related, see
  https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.h
  tml#using-encrypted-connections-server-side-runtime-configuration.

  By default, the statement reloads the TLS context for the main
  connection interface. If the FOR CHANNEL clause (available as of
  MySQL 8.0.21) is given, the statement reloads the TLS context for the
  named channel: mysql_main for the main connection interface,
  mysql_admin for the administrative connection interface. For
  information about the different interfaces, see
  https://dev.mysql.com/doc/refman/8.0/en/connection-interfaces.html.
  The updated TLS context properties are exposed in the Performance
  Schema tls_channel_status table. See
  https://dev.mysql.com/doc/refman/8.0/en/performance-schema-tls-channe
  l-status-table.html.

  Updating the TLS context for the main interface may also affect the
  administrative interface because unless some nondefault TLS value is
  configured for that interface, it uses the same TLS context as the
  main interface.

  *Note*:

  When you reload the TLS context, OpenSSL reloads the file containing
  the CRL (certificate revocation list) as part of the process. If the
  CRL file is large, the server allocates a large chunk of memory (ten
  times the file size), which is doubled while the new instance is
  being loaded and the old one has not yet been released. The process
  resident memory is not immediately reduced after a large allocation
  is freed, so if you issue the ALTER INSTANCE RELOAD TLS statement
  repeatedly with a large CRL file, the process resident memory usage
  may grow as a result of this.

  By default, the RELOAD TLS action rolls back with an error and has no
  effect if the configuration values do not permit creation of the new
  TLS context. The previous context values continue to be used for new
  connections. If the optional NO ROLLBACK ON ERROR clause is given and
  the new context cannot be created, rollback does not occur. Instead,
  a warning is generated and encryption is disabled for new connections
  on the interface to which the statement applies.

  ALTER INSTANCE RELOAD TLS statements are not written to the binary
  log (and thus are not replicated). TLS configuration is local and
  depends on local files not necessarily present on all servers
  involved.

o ALTER INSTANCE RELOAD KEYRING

  If a keyring component is installed, this action tells the component
  to re-read its configuration file and reinitialize any keyring
  in-memory data. If you modify the component configuration at runtime,
  the new configuration does not take effect until you perform this
  action. Keyring reloading requires the ENCRYPTION_KEY_ADMIN
  privilege. This action was added in MySQL 8.0.24.

  This action enables reconfiguring only the currently installed
  keyring component. It does not enable changing which component is
  installed. For example, if you change the configuration for the
  installed keyring component, ALTER INSTANCE RELOAD KEYRING causes the
  new configuration to take effect. On the other hand, if you change
  the keyring component named in the server manifest file, ALTER
  INSTANCE RELOAD KEYRING has no effect and the current component
  remains installed.

  ALTER INSTANCE RELOAD KEYRING statements are not written to the
  binary log (and thus are not replicated).

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-instance.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-instance.html</field>
	</row>
	<row>
		<field name="help_topic_id">507</field>
		<field name="name">ALTER LOGFILE GROUP</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER LOGFILE GROUP logfile_group
    ADD UNDOFILE 'file_name'
    [INITIAL_SIZE [=] size]
    [WAIT]
    ENGINE [=] engine_name

This statement adds an UNDO file named 'file_name' to an existing log
file group logfile_group. An ALTER LOGFILE GROUP statement has one and
only one ADD UNDOFILE clause. No DROP UNDOFILE clause is currently
supported.

*Note*:

All NDB Cluster Disk Data objects share the same namespace. This means
that each Disk Data object must be uniquely named (and not merely each
Disk Data object of a given type). For example, you cannot have a
tablespace and an undo log file with the same name, or an undo log file
and a data file with the same name.

The optional INITIAL_SIZE parameter sets the UNDO file's initial size
in bytes; if not specified, the initial size defaults to 134217728 (128
MB). You may optionally follow size with a one-letter abbreviation for
an order of magnitude, similar to those used in my.cnf. Generally, this
is one of the letters M (megabytes) or G (gigabytes). (Bug #13116514,
Bug #16104705, Bug #62858)

On 32-bit systems, the maximum supported value for INITIAL_SIZE is
4294967296 (4 GB). (Bug #29186)

The minimum allowed value for INITIAL_SIZE is 1048576 (1 MB). (Bug
#29574)

*Note*:

WAIT is parsed but otherwise ignored. This keyword currently has no
effect, and is intended for future expansion.

The ENGINE parameter (required) determines the storage engine which is
used by this log file group, with engine_name being the name of the
storage engine. Currently, the only accepted values for engine_name are
&quot;NDBCLUSTER&quot; and &quot;NDB&quot;. The two values are equivalent.

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-logfile-group.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-logfile-group.html</field>
	</row>
	<row>
		<field name="help_topic_id">508</field>
		<field name="name">ALTER PROCEDURE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER PROCEDURE proc_name [characteristic ...]

characteristic: {
    COMMENT 'string'
  | LANGUAGE SQL
  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
  | SQL SECURITY { DEFINER | INVOKER }
}

This statement can be used to change the characteristics of a stored
procedure. More than one change may be specified in an ALTER PROCEDURE
statement. However, you cannot change the parameters or body of a
stored procedure using this statement; to make such changes, you must
drop and re-create the procedure using DROP PROCEDURE and CREATE
PROCEDURE.

You must have the ALTER ROUTINE privilege for the procedure. By
default, that privilege is granted automatically to the procedure
creator. This behavior can be changed by disabling the
automatic_sp_privileges system variable. See
https://dev.mysql.com/doc/refman/8.0/en/stored-routines-privileges.html
.

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-procedure.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-procedure.html</field>
	</row>
	<row>
		<field name="help_topic_id">509</field>
		<field name="name">ALTER SERVER</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER SERVER  server_name
    OPTIONS (option [, option] ...)

Alters the server information for server_name, adjusting any of the
options permitted in the CREATE SERVER statement. The corresponding
fields in the mysql.servers table are updated accordingly. This
statement requires the SUPER privilege.

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-server.html

</field>
		<field name="example">ALTER SERVER s OPTIONS (USER 'sally');
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-server.html</field>
	</row>
	<row>
		<field name="help_topic_id">510</field>
		<field name="name">ALTER TABLE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER TABLE tbl_name
    [alter_option [, alter_option] ...]
    [partition_options]

alter_option: {
    table_options
  | ADD [COLUMN] col_name column_definition
        [FIRST | AFTER col_name]
  | ADD [COLUMN] (col_name column_definition,...)
  | ADD {INDEX | KEY} [index_name]
        [index_type] (key_part,...) [index_option] ...
  | ADD {FULLTEXT | SPATIAL} [INDEX | KEY] [index_name]
        (key_part,...) [index_option] ...
  | ADD [CONSTRAINT [symbol]] PRIMARY KEY
        [index_type] (key_part,...)
        [index_option] ...
  | ADD [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY]
        [index_name] [index_type] (key_part,...)
        [index_option] ...
  | ADD [CONSTRAINT [symbol]] FOREIGN KEY
        [index_name] (col_name,...)
        reference_definition
  | ADD [CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED]
  | DROP {CHECK | CONSTRAINT} symbol
  | ALTER {CHECK | CONSTRAINT} symbol [NOT] ENFORCED
  | ALGORITHM [=] {DEFAULT | INSTANT | INPLACE | COPY}
  | ALTER [COLUMN] col_name {
        SET DEFAULT {literal | (expr)}
      | SET {VISIBLE | INVISIBLE}
      | DROP DEFAULT
    }
  | ALTER INDEX index_name {VISIBLE | INVISIBLE}
  | CHANGE [COLUMN] old_col_name new_col_name column_definition
        [FIRST | AFTER col_name]
  | [DEFAULT] CHARACTER SET [=] charset_name [COLLATE [=] collation_name]
  | CONVERT TO CHARACTER SET charset_name [COLLATE collation_name]
  | {DISABLE | ENABLE} KEYS
  | {DISCARD | IMPORT} TABLESPACE
  | DROP [COLUMN] col_name
  | DROP {INDEX | KEY} index_name
  | DROP PRIMARY KEY
  | DROP FOREIGN KEY fk_symbol
  | FORCE
  | LOCK [=] {DEFAULT | NONE | SHARED | EXCLUSIVE}
  | MODIFY [COLUMN] col_name column_definition
        [FIRST | AFTER col_name]
  | ORDER BY col_name [, col_name] ...
  | RENAME COLUMN old_col_name TO new_col_name
  | RENAME {INDEX | KEY} old_index_name TO new_index_name
  | RENAME [TO | AS] new_tbl_name
  | {WITHOUT | WITH} VALIDATION
}

partition_options:
    partition_option [partition_option] ...

partition_option: {
    ADD PARTITION (partition_definition)
  | DROP PARTITION partition_names
  | DISCARD PARTITION {partition_names | ALL} TABLESPACE
  | IMPORT PARTITION {partition_names | ALL} TABLESPACE
  | TRUNCATE PARTITION {partition_names | ALL}
  | COALESCE PARTITION number
  | REORGANIZE PARTITION partition_names INTO (partition_definitions)
  | EXCHANGE PARTITION partition_name WITH TABLE tbl_name [{WITH | WITHOUT} VALIDATION]
  | ANALYZE PARTITION {partition_names | ALL}
  | CHECK PARTITION {partition_names | ALL}
  | OPTIMIZE PARTITION {partition_names | ALL}
  | REBUILD PARTITION {partition_names | ALL}
  | REPAIR PARTITION {partition_names | ALL}
  | REMOVE PARTITIONING
}

key_part: {col_name [(length)] | (expr)} [ASC | DESC]

index_type:
    USING {BTREE | HASH}

index_option: {
    KEY_BLOCK_SIZE [=] value
  | index_type
  | WITH PARSER parser_name
  | COMMENT 'string'
  | {VISIBLE | INVISIBLE}
}

table_options:
    table_option [[,] table_option] ...

table_option: {
    AUTOEXTEND_SIZE [=] value
  | AUTO_INCREMENT [=] value
  | AVG_ROW_LENGTH [=] value
  | [DEFAULT] CHARACTER SET [=] charset_name
  | CHECKSUM [=] {0 | 1}
  | [DEFAULT] COLLATE [=] collation_name
  | COMMENT [=] 'string'
  | COMPRESSION [=] {'ZLIB' | 'LZ4' | 'NONE'}
  | CONNECTION [=] 'connect_string'
  | {DATA | INDEX} DIRECTORY [=] 'absolute path to directory'
  | DELAY_KEY_WRITE [=] {0 | 1}
  | ENCRYPTION [=] {'Y' | 'N'}
  | ENGINE [=] engine_name
  | ENGINE_ATTRIBUTE [=] 'string'
  | INSERT_METHOD [=] { NO | FIRST | LAST }
  | KEY_BLOCK_SIZE [=] value
  | MAX_ROWS [=] value
  | MIN_ROWS [=] value
  | PACK_KEYS [=] {0 | 1 | DEFAULT}
  | PASSWORD [=] 'string'
  | ROW_FORMAT [=] {DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT}
  | SECONDARY_ENGINE_ATTRIBUTE [=] 'string'
  | STATS_AUTO_RECALC [=] {DEFAULT | 0 | 1}
  | STATS_PERSISTENT [=] {DEFAULT | 0 | 1}
  | STATS_SAMPLE_PAGES [=] value
  | TABLESPACE tablespace_name [STORAGE {DISK | MEMORY}]
  | UNION [=] (tbl_name[,tbl_name]...)
}

partition_options:
    (see CREATE TABLE options)

ALTER TABLE changes the structure of a table. For example, you can add
or delete columns, create or destroy indexes, change the type of
existing columns, or rename columns or the table itself. You can also
change characteristics such as the storage engine used for the table or
the table comment.

o To use ALTER TABLE, you need ALTER, CREATE, and INSERT privileges for
  the table. Renaming a table requires ALTER and DROP on the old table,
  ALTER, CREATE, and INSERT on the new table.

o Following the table name, specify the alterations to be made. If none
  are given, ALTER TABLE does nothing.

o The syntax for many of the permissible alterations is similar to
  clauses of the CREATE TABLE statement. column_definition clauses use
  the same syntax for ADD and CHANGE as for CREATE TABLE. For more
  information, see [HELP CREATE TABLE].

o The word COLUMN is optional and can be omitted, except for RENAME
  COLUMN (to distinguish a column-renaming operation from the RENAME
  table-renaming operation).

o Multiple ADD, ALTER, DROP, and CHANGE clauses are permitted in a
  single ALTER TABLE statement, separated by commas. This is a MySQL
  extension to standard SQL, which permits only one of each clause per
  ALTER TABLE statement. For example, to drop multiple columns in a
  single statement, do this:

ALTER TABLE t2 DROP COLUMN c, DROP COLUMN d;

o If a storage engine does not support an attempted ALTER TABLE
  operation, a warning may result. Such warnings can be displayed with
  SHOW WARNINGS. See [HELP SHOW WARNINGS]. For information on
  troubleshooting ALTER TABLE, see
  https://dev.mysql.com/doc/refman/8.0/en/alter-table-problems.html.

o For information about generated columns, see
  https://dev.mysql.com/doc/refman/8.0/en/alter-table-generated-columns
  .html.

o For usage examples, see
  https://dev.mysql.com/doc/refman/8.0/en/alter-table-examples.html.

o InnoDB in MySQL 8.0.17 and later supports addition of multi-valued
  indexes on JSON columns using a key_part specification can take the
  form (CAST json_path AS type ARRAY). See
  https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-inde
  x-multi-valued, for detailed information regarding multi-valued index
  creation and usage of, as well as restrictions and limitations on
  multi-valued indexes.

o With the mysql_info()
  (https://dev.mysql.com/doc/c-api/8.0/en/mysql-info.html) C API
  function, you can find out how many rows were copied by ALTER TABLE.
  See mysql_info()
  (https://dev.mysql.com/doc/c-api/8.0/en/mysql-info.html).

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">511</field>
		<field name="name">ALTER TABLESPACE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER [UNDO] TABLESPACE tablespace_name
  NDB only:
    {ADD | DROP} DATAFILE 'file_name'
    [INITIAL_SIZE [=] size]
    [WAIT]
  InnoDB and NDB:
    [RENAME TO tablespace_name]
  InnoDB only:
    [AUTOEXTEND_SIZE [=] 'value']
    [SET {ACTIVE | INACTIVE}]
    [ENCRYPTION [=] {'Y' | 'N'}]
  InnoDB and NDB:
    [ENGINE [=] engine_name]
  Reserved for future use:
    [ENGINE_ATTRIBUTE [=] 'string']

This statement is used with NDB and InnoDB tablespaces. It can be used
to add a new data file to, or to drop a data file from an NDB
tablespace. It can also be used to rename an NDB Cluster Disk Data
tablespace, rename an InnoDB general tablespace, encrypt an InnoDB
general tablespace, or mark an InnoDB undo tablespace as active or
inactive.

The UNDO keyword, introduced in MySQL 8.0.14, is used with the SET
{ACTIVE | INACTIVE} clause to mark an InnoDB undo tablespace as active
or inactive. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/innodb-undo-tablespaces.html.

The ADD DATAFILE variant enables you to specify an initial size for an
NDB Disk Data tablespace using an INITIAL_SIZE clause, where size is
measured in bytes; the default value is 134217728 (128 MB). You may
optionally follow size with a one-letter abbreviation for an order of
magnitude, similar to those used in my.cnf. Generally, this is one of
the letters M (megabytes) or G (gigabytes).

On 32-bit systems, the maximum supported value for INITIAL_SIZE is
4294967296 (4 GB). (Bug #29186)

INITIAL_SIZE is rounded, explicitly, as for CREATE TABLESPACE.

Once a data file has been created, its size cannot be changed; however,
you can add more data files to an NDB tablespace using additional ALTER
TABLESPACE ... ADD DATAFILE statements.

When ALTER TABLESPACE ... ADD DATAFILE is used with ENGINE = NDB, a
data file is created on each Cluster data node, but only one row is
generated in the Information Schema FILES table. See the description of
this table, as well as
https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-disk-data-objects
.html, for more information. ADD DATAFILE is not supported with InnoDB
tablespaces.

Using DROP DATAFILE with ALTER TABLESPACE drops the data file
'file_name' from an NDB tablespace. You cannot drop a data file from a
tablespace which is in use by any table; in other words, the data file
must be empty (no extents used). See
https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-disk-data-objects
.html. In addition, any data file to be dropped must previously have
been added to the tablespace with CREATE TABLESPACE or ALTER
TABLESPACE. DROP DATAFILE is not supported with InnoDB tablespaces.

WAIT is parsed but otherwise ignored. It is intended for future
expansion.

The ENGINE clause, which specifies the storage engine used by the
tablespace, is deprecated; expect it to be removed in a future release.
The tablespace storage engine is known by the data dictionary, making
the ENGINE clause obsolete. If the storage engine is specified, it must
match the tablespace storage engine defined in the data dictionary. The
only values for engine_name compatible with NDB tablespaces are NDB and
NDBCLUSTER.

RENAME TO operations are implicitly performed in autocommit mode,
regardless of the autocommit setting.

A RENAME TO operation cannot be performed while LOCK TABLES or FLUSH
TABLES WITH READ LOCK is in effect for tables that reside in the
tablespace.

Exclusive metadata locks are taken on tables that reside in a general
tablespace while the tablespace is renamed, which prevents concurrent
DDL. Concurrent DML is supported.

The CREATE TABLESPACE privilege is required to rename an InnoDB general
tablespace.

The AUTOEXTEND_SIZE option defines the amount by which InnoDB extends
the size of a tablespace when it becomes full. Introduced in MySQL
8.0.23. The setting must be a multiple of 4MB. The default setting is
0, which causes the tablespace to be extended according to the implicit
default behavior. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/innodb-tablespace-autoextend-si
ze.html.

The ENCRYPTION clause enables or disables page-level data encryption
for an InnoDB general tablespace or the mysql system tablespace.
Encryption support for general tablespaces was introduced in MySQL
8.0.13. Encryption support for the mysql system tablespace was
introduced in MySQL 8.0.16.

A keyring plugin must be installed and configured before encryption can
be enabled.

As of MySQL 8.0.16, if the table_encryption_privilege_check variable is
enabled, the TABLE_ENCRYPTION_ADMIN privilege is required to alter a
general tablespace with an ENCRYPTION clause setting that differs from
the default_table_encryption setting.

Enabling encryption for a general tablespace fails if any table in the
tablespace belongs to a schema defined with DEFAULT ENCRYPTION='N'.
Similarly, disabling encryption fails if any table in the general
tablespace belongs to a schema defined with DEFAULT ENCRYPTION='Y'. The
DEFAULT ENCRYPTION schema option was introduced in MySQL 8.0.16.

If an ALTER TABLESPACE statement executed on a general tablespace does
not include an ENCRYPTION clause, the tablespace retains its current
encryption status, regardless of the default_table_encryption setting.

When a general tablespace or the mysql system tablespace is encrypted,
all tables residing in the tablespace are encrypted. Likewise, a table
created in an encrypted tablespace is encrypted.

The INPLACE algorithm is used when altering the ENCRYPTION attribute of
a general tablespace or the mysql system tablespace. The INPLACE
algorithm permits concurrent DML on tables that reside in the
tablespace. Concurrent DDL is blocked.

For more information, see
https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html.

The ENGINE_ATTRIBUTE option (available as of MySQL 8.0.21) is used to
specify tablespace attributes for primary storage engines. The option
is reserved for future use.

Permitted values are a string literal containing a valid JSON document
or an empty string (''). Invalid JSON is rejected.

ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{&quot;key&quot;:&quot;value&quot;}';

ENGINE_ATTRIBUTE values can be repeated without error. In this case,
the last specified value is used.

ENGINE_ATTRIBUTE values are not checked by the server, nor are they
cleared when the table's storage engine is changed.

It is not permitted to alter an individual element of a JSON attribute
value. You can only add or replace an attribute.

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-tablespace.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-tablespace.html</field>
	</row>
	<row>
		<field name="help_topic_id">512</field>
		<field name="name">ALTER VIEW</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
ALTER
    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]
    [DEFINER = user]
    [SQL SECURITY { DEFINER | INVOKER }]
    VIEW view_name [(column_list)]
    AS select_statement
    [WITH [CASCADED | LOCAL] CHECK OPTION]

This statement changes the definition of a view, which must exist. The
syntax is similar to that for CREATE VIEW see [HELP CREATE VIEW]). This
statement requires the CREATE VIEW and DROP privileges for the view,
and some privilege for each column referred to in the SELECT statement.
ALTER VIEW is permitted only to the definer or users with the
SET_USER_ID privilege (or the deprecated SUPER privilege).

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-view.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-view.html</field>
	</row>
	<row>
		<field name="help_topic_id">513</field>
		<field name="name">CREATE DATABASE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name
    [create_option] ...

create_option: [DEFAULT] {
    CHARACTER SET [=] charset_name
  | COLLATE [=] collation_name
  | ENCRYPTION [=] {'Y' | 'N'}
}

CREATE DATABASE creates a database with the given name. To use this
statement, you need the CREATE privilege for the database. CREATE
SCHEMA is a synonym for CREATE DATABASE.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-database.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-database.html</field>
	</row>
	<row>
		<field name="help_topic_id">514</field>
		<field name="name">CREATE SCHEMA</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name
    [create_option] ...

create_option: [DEFAULT] {
    CHARACTER SET [=] charset_name
  | COLLATE [=] collation_name
  | ENCRYPTION [=] {'Y' | 'N'}
}

CREATE DATABASE creates a database with the given name. To use this
statement, you need the CREATE privilege for the database. CREATE
SCHEMA is a synonym for CREATE DATABASE.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-database.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-database.html</field>
	</row>
	<row>
		<field name="help_topic_id">515</field>
		<field name="name">CREATE EVENT</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE
    [DEFINER = user]
    EVENT
    [IF NOT EXISTS]
    event_name
    ON SCHEDULE schedule
    [ON COMPLETION [NOT] PRESERVE]
    [ENABLE | DISABLE | DISABLE ON SLAVE]
    [COMMENT 'string']
    DO event_body;

schedule: {
    AT timestamp [+ INTERVAL interval] ...
  | EVERY interval
    [STARTS timestamp [+ INTERVAL interval] ...]
    [ENDS timestamp [+ INTERVAL interval] ...]
}

interval:
    quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |
              WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |
              DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}

This statement creates and schedules a new event. The event does not
run unless the Event Scheduler is enabled. For information about
checking Event Scheduler status and enabling it if necessary, see
https://dev.mysql.com/doc/refman/8.0/en/events-configuration.html.

CREATE EVENT requires the EVENT privilege for the schema in which the
event is to be created. If the DEFINER clause is present, the
privileges required depend on the user value, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/stored-objects-security.html.

The minimum requirements for a valid CREATE EVENT statement are as
follows:

o The keywords CREATE EVENT plus an event name, which uniquely
  identifies the event in a database schema.

o An ON SCHEDULE clause, which determines when and how often the event
  executes.

o A DO clause, which contains the SQL statement to be executed by an
  event.

This is an example of a minimal CREATE EVENT statement:

CREATE EVENT myevent
    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR
    DO
      UPDATE myschema.mytable SET mycol = mycol + 1;

The previous statement creates an event named myevent. This event
executes once---one hour following its creation---by running an SQL
statement that increments the value of the myschema.mytable table's
mycol column by 1.

The event_name must be a valid MySQL identifier with a maximum length
of 64 characters. Event names are not case-sensitive, so you cannot
have two events named myevent and MyEvent in the same schema. In
general, the rules governing event names are the same as those for
names of stored routines. See
https://dev.mysql.com/doc/refman/8.0/en/identifiers.html.

An event is associated with a schema. If no schema is indicated as part
of event_name, the default (current) schema is assumed. To create an
event in a specific schema, qualify the event name with a schema using
schema_name.event_name syntax.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-event.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-event.html</field>
	</row>
	<row>
		<field name="help_topic_id">516</field>
		<field name="name">CREATE INDEX</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name
    [index_type]
    ON tbl_name (key_part,...)
    [index_option]
    [algorithm_option | lock_option] ...

key_part: {col_name [(length)] | (expr)} [ASC | DESC]

index_option: {
    KEY_BLOCK_SIZE [=] value
  | index_type
  | WITH PARSER parser_name
  | COMMENT 'string'
  | {VISIBLE | INVISIBLE}
  | ENGINE_ATTRIBUTE [=] 'string'
  | SECONDARY_ENGINE_ATTRIBUTE [=] 'string'
}

index_type:
    USING {BTREE | HASH}

algorithm_option:
    ALGORITHM [=] {DEFAULT | INPLACE | COPY}

lock_option:
    LOCK [=] {DEFAULT | NONE | SHARED | EXCLUSIVE}

Normally, you create all indexes on a table at the time the table
itself is created with CREATE TABLE. See [HELP CREATE TABLE]. This
guideline is especially important for InnoDB tables, where the primary
key determines the physical layout of rows in the data file. CREATE
INDEX enables you to add indexes to existing tables.

CREATE INDEX is mapped to an ALTER TABLE statement to create indexes.
See [HELP ALTER TABLE]. CREATE INDEX cannot be used to create a PRIMARY
KEY; use ALTER TABLE instead. For more information about indexes, see
https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-index.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-index.html</field>
	</row>
	<row>
		<field name="help_topic_id">517</field>
		<field name="name">CREATE LOGFILE GROUP</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE LOGFILE GROUP logfile_group
    ADD UNDOFILE 'undo_file'
    [INITIAL_SIZE [=] initial_size]
    [UNDO_BUFFER_SIZE [=] undo_buffer_size]
    [REDO_BUFFER_SIZE [=] redo_buffer_size]
    [NODEGROUP [=] nodegroup_id]
    [WAIT]
    [COMMENT [=] 'string']
    ENGINE [=] engine_name

This statement creates a new log file group named logfile_group having
a single UNDO file named 'undo_file'. A CREATE LOGFILE GROUP statement
has one and only one ADD UNDOFILE clause. For rules covering the naming
of log file groups, see
https://dev.mysql.com/doc/refman/8.0/en/identifiers.html.

*Note*:

All NDB Cluster Disk Data objects share the same namespace. This means
that each Disk Data object must be uniquely named (and not merely each
Disk Data object of a given type). For example, you cannot have a
tablespace and a log file group with the same name, or a tablespace and
a data file with the same name.

There can be only one log file group per NDB Cluster instance at any
given time.

The optional INITIAL_SIZE parameter sets the UNDO file's initial size;
if not specified, it defaults to 128M (128 megabytes). The optional
UNDO_BUFFER_SIZE parameter sets the size used by the UNDO buffer for
the log file group; The default value for UNDO_BUFFER_SIZE is 8M (eight
megabytes); this value cannot exceed the amount of system memory
available. Both of these parameters are specified in bytes. You may
optionally follow either or both of these with a one-letter
abbreviation for an order of magnitude, similar to those used in
my.cnf. Generally, this is one of the letters M (for megabytes) or G
(for gigabytes).

Memory used for UNDO_BUFFER_SIZE comes from the global pool whose size
is determined by the value of the SharedGlobalMemory data node
configuration parameter. This includes any default value implied for
this option by the setting of the InitialLogFileGroup data node
configuration parameter.

The maximum permitted for UNDO_BUFFER_SIZE is 629145600 (600 MB).

On 32-bit systems, the maximum supported value for INITIAL_SIZE is
4294967296 (4 GB). (Bug #29186)

The minimum allowed value for INITIAL_SIZE is 1048576 (1 MB).

The ENGINE option determines the storage engine to be used by this log
file group, with engine_name being the name of the storage engine. In
MySQL 8.0, this must be NDB (or NDBCLUSTER). If ENGINE is not set,
MySQL tries to use the engine specified by the default_storage_engine
server system variable (formerly storage_engine). In any case, if the
engine is not specified as NDB or NDBCLUSTER, the CREATE LOGFILE GROUP
statement appears to succeed but actually fails to create the log file
group, as shown here:

mysql&gt; CREATE LOGFILE GROUP lg1
    -&gt;     ADD UNDOFILE 'undo.dat' INITIAL_SIZE = 10M;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS;
+-------+------+------------------------------------------------------------------------------------------------+
| Level | Code | Message                                                                                        |
+-------+------+------------------------------------------------------------------------------------------------+
| Error | 1478 | Table storage engine 'InnoDB' does not support the create option 'TABLESPACE or LOGFILE GROUP' |
+-------+------+------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; DROP LOGFILE GROUP lg1 ENGINE = NDB;
ERROR 1529 (HY000): Failed to drop LOGFILE GROUP

mysql&gt; CREATE LOGFILE GROUP lg1
    -&gt;     ADD UNDOFILE 'undo.dat' INITIAL_SIZE = 10M
    -&gt;     ENGINE = NDB;
Query OK, 0 rows affected (2.97 sec)

The fact that the CREATE LOGFILE GROUP statement does not actually
return an error when a non-NDB storage engine is named, but rather
appears to succeed, is a known issue which we hope to address in a
future release of NDB Cluster.

REDO_BUFFER_SIZE, NODEGROUP, WAIT, and COMMENT are parsed but ignored,
and so have no effect in MySQL 8.0. These options are intended for
future expansion.

When used with ENGINE [=] NDB, a log file group and associated UNDO log
file are created on each Cluster data node. You can verify that the
UNDO files were created and obtain information about them by querying
the Information Schema FILES table. For example:

mysql&gt; SELECT LOGFILE_GROUP_NAME, LOGFILE_GROUP_NUMBER, EXTRA
    -&gt; FROM INFORMATION_SCHEMA.FILES
    -&gt; WHERE FILE_NAME = 'undo_10.dat';
+--------------------+----------------------+----------------+
| LOGFILE_GROUP_NAME | LOGFILE_GROUP_NUMBER | EXTRA          |
+--------------------+----------------------+----------------+
| lg_3               |                   11 | CLUSTER_NODE=3 |
| lg_3               |                   11 | CLUSTER_NODE=4 |
+--------------------+----------------------+----------------+
2 rows in set (0.06 sec)

CREATE LOGFILE GROUP is useful only with Disk Data storage for NDB
Cluster. See
https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-disk-data.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-logfile-group.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-logfile-group.html</field>
	</row>
	<row>
		<field name="help_topic_id">518</field>
		<field name="name">CREATE PROCEDURE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE
    [DEFINER = user]
    PROCEDURE [IF NOT EXISTS] sp_name ([proc_parameter[,...]])
    [characteristic ...] routine_body

CREATE
    [DEFINER = user]
    FUNCTION [IF NOT EXISTS] sp_name ([func_parameter[,...]])
    RETURNS type
    [characteristic ...] routine_body

proc_parameter:
    [ IN | OUT | INOUT ] param_name type

func_parameter:
    param_name type

type:
    Any valid MySQL data type

characteristic: {
    COMMENT 'string'
  | LANGUAGE SQL
  | [NOT] DETERMINISTIC
  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
  | SQL SECURITY { DEFINER | INVOKER }
}

routine_body:
    Valid SQL routine statement

These statements are used to create a stored routine (a stored
procedure or function). That is, the specified routine becomes known to
the server. By default, a stored routine is associated with the default
database. To associate the routine explicitly with a given database,
specify the name as db_name.sp_name when you create it.

The CREATE FUNCTION statement is also used in MySQL to support loadable
functions. See [HELP CREATE FUNCTION loadable function]. A loadable
function can be regarded as an external stored function. Stored
functions share their namespace with loadable functions. See
https://dev.mysql.com/doc/refman/8.0/en/function-resolution.html, for
the rules describing how the server interprets references to different
kinds of functions.

To invoke a stored procedure, use the CALL statement (see [HELP CALL]).
To invoke a stored function, refer to it in an expression. The function
returns a value during expression evaluation.

CREATE PROCEDURE and CREATE FUNCTION require the CREATE ROUTINE
privilege. If the DEFINER clause is present, the privileges required
depend on the user value, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/stored-objects-security.html.
If binary logging is enabled, CREATE FUNCTION might require the SUPER
privilege, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html.

By default, MySQL automatically grants the ALTER ROUTINE and EXECUTE
privileges to the routine creator. This behavior can be changed by
disabling the automatic_sp_privileges system variable. See
https://dev.mysql.com/doc/refman/8.0/en/stored-routines-privileges.html
.

The DEFINER and SQL SECURITY clauses specify the security context to be
used when checking access privileges at routine execution time, as
described later in this section.

If the routine name is the same as the name of a built-in SQL function,
a syntax error occurs unless you use a space between the name and the
following parenthesis when defining the routine or invoking it later.
For this reason, avoid using the names of existing SQL functions for
your own stored routines.

The IGNORE_SPACE SQL mode applies to built-in functions, not to stored
routines. It is always permissible to have spaces after a stored
routine name, regardless of whether IGNORE_SPACE is enabled.

IF NOT EXISTS prevents an error from occurring if there already exists
a routine with the same name. This option is supported with both CREATE
FUNCTION and CREATE PROCEDURE beginning with MySQL 8.0.29.

If a built-in function with the same name already exists, attempting to
create a stored function with CREATE FUNCTION ... IF NOT EXISTS
succeeds with a warning indicating that it has the same name as a
native function; this is no different than when performing the same
CREATE FUNCTION statement without specifying IF NOT EXISTS.

If a loadable function with the same name already exists, attempting to
create a stored function using IF NOT EXISTS succeeds with a warning.
This is the same as without specifying IF NOT EXISTS.

See
https://dev.mysql.com/doc/refman/8.0/en/function-resolution.html#functi
on-name-resolution, for more information.

The parameter list enclosed within parentheses must always be present.
If there are no parameters, an empty parameter list of () should be
used. Parameter names are not case-sensitive.

Each parameter is an IN parameter by default. To specify otherwise for
a parameter, use the keyword OUT or INOUT before the parameter name.

*Note*:

Specifying a parameter as IN, OUT, or INOUT is valid only for a
PROCEDURE. For a FUNCTION, parameters are always regarded as IN
parameters.

An IN parameter passes a value into a procedure. The procedure might
modify the value, but the modification is not visible to the caller
when the procedure returns. An OUT parameter passes a value from the
procedure back to the caller. Its initial value is NULL within the
procedure, and its value is visible to the caller when the procedure
returns. An INOUT parameter is initialized by the caller, can be
modified by the procedure, and any change made by the procedure is
visible to the caller when the procedure returns.

For each OUT or INOUT parameter, pass a user-defined variable in the
CALL statement that invokes the procedure so that you can obtain its
value when the procedure returns. If you are calling the procedure from
within another stored procedure or function, you can also pass a
routine parameter or local routine variable as an OUT or INOUT
parameter. If you are calling the procedure from within a trigger, you
can also pass NEW.col_name as an OUT or INOUT parameter.

For information about the effect of unhandled conditions on procedure
parameters, see
https://dev.mysql.com/doc/refman/8.0/en/conditions-and-parameters.html.

Routine parameters cannot be referenced in statements prepared within
the routine; see
https://dev.mysql.com/doc/refman/8.0/en/stored-program-restrictions.html
.

The following example shows a simple stored procedure that, given a
country code, counts the number of cities for that country that appear
in the city table of the world database. The country code is passed
using an IN parameter, and the city count is returned using an OUT
parameter:

mysql&gt; delimiter //

mysql&gt; CREATE PROCEDURE citycount (IN country CHAR(3), OUT cities INT)
       BEGIN
         SELECT COUNT(*) INTO cities FROM world.city
         WHERE CountryCode = country;
       END//
Query OK, 0 rows affected (0.01 sec)

mysql&gt; delimiter ;

mysql&gt; CALL citycount('JPN', @cities); -- cities in Japan
Query OK, 1 row affected (0.00 sec)

mysql&gt; SELECT @cities;
+---------+
| @cities |
+---------+
|     248 |
+---------+
1 row in set (0.00 sec)

mysql&gt; CALL citycount('FRA', @cities); -- cities in France
Query OK, 1 row affected (0.00 sec)

mysql&gt; SELECT @cities;
+---------+
| @cities |
+---------+
|      40 |
+---------+
1 row in set (0.00 sec)

The example uses the mysql client delimiter command to change the
statement delimiter from ; to // while the procedure is being defined.
This enables the ; delimiter used in the procedure body to be passed
through to the server rather than being interpreted by mysql itself.
See
https://dev.mysql.com/doc/refman/8.0/en/stored-programs-defining.html.

The RETURNS clause may be specified only for a FUNCTION, for which it
is mandatory. It indicates the return type of the function, and the
function body must contain a RETURN value statement. If the RETURN
statement returns a value of a different type, the value is coerced to
the proper type. For example, if a function specifies an ENUM or SET
value in the RETURNS clause, but the RETURN statement returns an
integer, the value returned from the function is the string for the
corresponding ENUM member of set of SET members.

The following example function takes a parameter, performs an operation
using an SQL function, and returns the result. In this case, it is
unnecessary to use delimiter because the function definition contains
no internal ; statement delimiters:

mysql&gt; CREATE FUNCTION hello (s CHAR(20))
mysql&gt; RETURNS CHAR(50) DETERMINISTIC
       RETURN CONCAT('Hello, ',s,'!');
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT hello('world');
+----------------+
| hello('world') |
+----------------+
| Hello, world!  |
+----------------+
1 row in set (0.00 sec)

Parameter types and function return types can be declared to use any
valid data type. The COLLATE attribute can be used if preceded by a
CHARACTER SET specification.

The routine_body consists of a valid SQL routine statement. This can be
a simple statement such as SELECT or INSERT, or a compound statement
written using BEGIN and END. Compound statements can contain
declarations, loops, and other control structure statements. The syntax
for these statements is described in
https://dev.mysql.com/doc/refman/8.0/en/sql-compound-statements.html.
In practice, stored functions tend to use compound statements, unless
the body consists of a single RETURN statement.

MySQL permits routines to contain DDL statements, such as CREATE and
DROP. MySQL also permits stored procedures (but not stored functions)
to contain SQL transaction statements such as COMMIT. Stored functions
may not contain statements that perform explicit or implicit commit or
rollback. Support for these statements is not required by the SQL
standard, which states that each DBMS vendor may decide whether to
permit them.

Statements that return a result set can be used within a stored
procedure but not within a stored function. This prohibition includes
SELECT statements that do not have an INTO var_list clause and other
statements such as SHOW, EXPLAIN, and CHECK TABLE. For statements that
can be determined at function definition time to return a result set, a
Not allowed to return a result set from a function error occurs
(ER_SP_NO_RETSET
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_sp_no_retset)). For statements that can be determined only
at runtime to return a result set, a PROCEDURE %s can't return a result
set in the given context error occurs (ER_SP_BADSELECT
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_sp_badselect)).

USE statements within stored routines are not permitted. When a routine
is invoked, an implicit USE db_name is performed (and undone when the
routine terminates). The causes the routine to have the given default
database while it executes. References to objects in databases other
than the routine default database should be qualified with the
appropriate database name.

For additional information about statements that are not permitted in
stored routines, see
https://dev.mysql.com/doc/refman/8.0/en/stored-program-restrictions.html
.

For information about invoking stored procedures from within programs
written in a language that has a MySQL interface, see [HELP CALL].

MySQL stores the sql_mode system variable setting in effect when a
routine is created or altered, and always executes the routine with
this setting in force, regardless of the current server SQL mode when
the routine begins executing.

The switch from the SQL mode of the invoker to that of the routine
occurs after evaluation of arguments and assignment of the resulting
values to routine parameters. If you define a routine in strict SQL
mode but invoke it in nonstrict mode, assignment of arguments to
routine parameters does not take place in strict mode. If you require
that expressions passed to a routine be assigned in strict SQL mode,
you should invoke the routine with strict mode in effect.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html</field>
	</row>
	<row>
		<field name="help_topic_id">519</field>
		<field name="name">CREATE FUNCTION</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE
    [DEFINER = user]
    PROCEDURE [IF NOT EXISTS] sp_name ([proc_parameter[,...]])
    [characteristic ...] routine_body

CREATE
    [DEFINER = user]
    FUNCTION [IF NOT EXISTS] sp_name ([func_parameter[,...]])
    RETURNS type
    [characteristic ...] routine_body

proc_parameter:
    [ IN | OUT | INOUT ] param_name type

func_parameter:
    param_name type

type:
    Any valid MySQL data type

characteristic: {
    COMMENT 'string'
  | LANGUAGE SQL
  | [NOT] DETERMINISTIC
  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
  | SQL SECURITY { DEFINER | INVOKER }
}

routine_body:
    Valid SQL routine statement

These statements are used to create a stored routine (a stored
procedure or function). That is, the specified routine becomes known to
the server. By default, a stored routine is associated with the default
database. To associate the routine explicitly with a given database,
specify the name as db_name.sp_name when you create it.

The CREATE FUNCTION statement is also used in MySQL to support loadable
functions. See [HELP CREATE FUNCTION loadable function]. A loadable
function can be regarded as an external stored function. Stored
functions share their namespace with loadable functions. See
https://dev.mysql.com/doc/refman/8.0/en/function-resolution.html, for
the rules describing how the server interprets references to different
kinds of functions.

To invoke a stored procedure, use the CALL statement (see [HELP CALL]).
To invoke a stored function, refer to it in an expression. The function
returns a value during expression evaluation.

CREATE PROCEDURE and CREATE FUNCTION require the CREATE ROUTINE
privilege. If the DEFINER clause is present, the privileges required
depend on the user value, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/stored-objects-security.html.
If binary logging is enabled, CREATE FUNCTION might require the SUPER
privilege, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html.

By default, MySQL automatically grants the ALTER ROUTINE and EXECUTE
privileges to the routine creator. This behavior can be changed by
disabling the automatic_sp_privileges system variable. See
https://dev.mysql.com/doc/refman/8.0/en/stored-routines-privileges.html
.

The DEFINER and SQL SECURITY clauses specify the security context to be
used when checking access privileges at routine execution time, as
described later in this section.

If the routine name is the same as the name of a built-in SQL function,
a syntax error occurs unless you use a space between the name and the
following parenthesis when defining the routine or invoking it later.
For this reason, avoid using the names of existing SQL functions for
your own stored routines.

The IGNORE_SPACE SQL mode applies to built-in functions, not to stored
routines. It is always permissible to have spaces after a stored
routine name, regardless of whether IGNORE_SPACE is enabled.

IF NOT EXISTS prevents an error from occurring if there already exists
a routine with the same name. This option is supported with both CREATE
FUNCTION and CREATE PROCEDURE beginning with MySQL 8.0.29.

If a built-in function with the same name already exists, attempting to
create a stored function with CREATE FUNCTION ... IF NOT EXISTS
succeeds with a warning indicating that it has the same name as a
native function; this is no different than when performing the same
CREATE FUNCTION statement without specifying IF NOT EXISTS.

If a loadable function with the same name already exists, attempting to
create a stored function using IF NOT EXISTS succeeds with a warning.
This is the same as without specifying IF NOT EXISTS.

See
https://dev.mysql.com/doc/refman/8.0/en/function-resolution.html#functi
on-name-resolution, for more information.

The parameter list enclosed within parentheses must always be present.
If there are no parameters, an empty parameter list of () should be
used. Parameter names are not case-sensitive.

Each parameter is an IN parameter by default. To specify otherwise for
a parameter, use the keyword OUT or INOUT before the parameter name.

*Note*:

Specifying a parameter as IN, OUT, or INOUT is valid only for a
PROCEDURE. For a FUNCTION, parameters are always regarded as IN
parameters.

An IN parameter passes a value into a procedure. The procedure might
modify the value, but the modification is not visible to the caller
when the procedure returns. An OUT parameter passes a value from the
procedure back to the caller. Its initial value is NULL within the
procedure, and its value is visible to the caller when the procedure
returns. An INOUT parameter is initialized by the caller, can be
modified by the procedure, and any change made by the procedure is
visible to the caller when the procedure returns.

For each OUT or INOUT parameter, pass a user-defined variable in the
CALL statement that invokes the procedure so that you can obtain its
value when the procedure returns. If you are calling the procedure from
within another stored procedure or function, you can also pass a
routine parameter or local routine variable as an OUT or INOUT
parameter. If you are calling the procedure from within a trigger, you
can also pass NEW.col_name as an OUT or INOUT parameter.

For information about the effect of unhandled conditions on procedure
parameters, see
https://dev.mysql.com/doc/refman/8.0/en/conditions-and-parameters.html.

Routine parameters cannot be referenced in statements prepared within
the routine; see
https://dev.mysql.com/doc/refman/8.0/en/stored-program-restrictions.html
.

The following example shows a simple stored procedure that, given a
country code, counts the number of cities for that country that appear
in the city table of the world database. The country code is passed
using an IN parameter, and the city count is returned using an OUT
parameter:

mysql&gt; delimiter //

mysql&gt; CREATE PROCEDURE citycount (IN country CHAR(3), OUT cities INT)
       BEGIN
         SELECT COUNT(*) INTO cities FROM world.city
         WHERE CountryCode = country;
       END//
Query OK, 0 rows affected (0.01 sec)

mysql&gt; delimiter ;

mysql&gt; CALL citycount('JPN', @cities); -- cities in Japan
Query OK, 1 row affected (0.00 sec)

mysql&gt; SELECT @cities;
+---------+
| @cities |
+---------+
|     248 |
+---------+
1 row in set (0.00 sec)

mysql&gt; CALL citycount('FRA', @cities); -- cities in France
Query OK, 1 row affected (0.00 sec)

mysql&gt; SELECT @cities;
+---------+
| @cities |
+---------+
|      40 |
+---------+
1 row in set (0.00 sec)

The example uses the mysql client delimiter command to change the
statement delimiter from ; to // while the procedure is being defined.
This enables the ; delimiter used in the procedure body to be passed
through to the server rather than being interpreted by mysql itself.
See
https://dev.mysql.com/doc/refman/8.0/en/stored-programs-defining.html.

The RETURNS clause may be specified only for a FUNCTION, for which it
is mandatory. It indicates the return type of the function, and the
function body must contain a RETURN value statement. If the RETURN
statement returns a value of a different type, the value is coerced to
the proper type. For example, if a function specifies an ENUM or SET
value in the RETURNS clause, but the RETURN statement returns an
integer, the value returned from the function is the string for the
corresponding ENUM member of set of SET members.

The following example function takes a parameter, performs an operation
using an SQL function, and returns the result. In this case, it is
unnecessary to use delimiter because the function definition contains
no internal ; statement delimiters:

mysql&gt; CREATE FUNCTION hello (s CHAR(20))
mysql&gt; RETURNS CHAR(50) DETERMINISTIC
       RETURN CONCAT('Hello, ',s,'!');
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT hello('world');
+----------------+
| hello('world') |
+----------------+
| Hello, world!  |
+----------------+
1 row in set (0.00 sec)

Parameter types and function return types can be declared to use any
valid data type. The COLLATE attribute can be used if preceded by a
CHARACTER SET specification.

The routine_body consists of a valid SQL routine statement. This can be
a simple statement such as SELECT or INSERT, or a compound statement
written using BEGIN and END. Compound statements can contain
declarations, loops, and other control structure statements. The syntax
for these statements is described in
https://dev.mysql.com/doc/refman/8.0/en/sql-compound-statements.html.
In practice, stored functions tend to use compound statements, unless
the body consists of a single RETURN statement.

MySQL permits routines to contain DDL statements, such as CREATE and
DROP. MySQL also permits stored procedures (but not stored functions)
to contain SQL transaction statements such as COMMIT. Stored functions
may not contain statements that perform explicit or implicit commit or
rollback. Support for these statements is not required by the SQL
standard, which states that each DBMS vendor may decide whether to
permit them.

Statements that return a result set can be used within a stored
procedure but not within a stored function. This prohibition includes
SELECT statements that do not have an INTO var_list clause and other
statements such as SHOW, EXPLAIN, and CHECK TABLE. For statements that
can be determined at function definition time to return a result set, a
Not allowed to return a result set from a function error occurs
(ER_SP_NO_RETSET
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_sp_no_retset)). For statements that can be determined only
at runtime to return a result set, a PROCEDURE %s can't return a result
set in the given context error occurs (ER_SP_BADSELECT
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_sp_badselect)).

USE statements within stored routines are not permitted. When a routine
is invoked, an implicit USE db_name is performed (and undone when the
routine terminates). The causes the routine to have the given default
database while it executes. References to objects in databases other
than the routine default database should be qualified with the
appropriate database name.

For additional information about statements that are not permitted in
stored routines, see
https://dev.mysql.com/doc/refman/8.0/en/stored-program-restrictions.html
.

For information about invoking stored procedures from within programs
written in a language that has a MySQL interface, see [HELP CALL].

MySQL stores the sql_mode system variable setting in effect when a
routine is created or altered, and always executes the routine with
this setting in force, regardless of the current server SQL mode when
the routine begins executing.

The switch from the SQL mode of the invoker to that of the routine
occurs after evaluation of arguments and assignment of the resulting
values to routine parameters. If you define a routine in strict SQL
mode but invoke it in nonstrict mode, assignment of arguments to
routine parameters does not take place in strict mode. If you require
that expressions passed to a routine be assigned in strict SQL mode,
you should invoke the routine with strict mode in effect.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html</field>
	</row>
	<row>
		<field name="help_topic_id">520</field>
		<field name="name">CREATE SERVER</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE SERVER server_name
    FOREIGN DATA WRAPPER wrapper_name
    OPTIONS (option [, option] ...)

option: {
    HOST character-literal
  | DATABASE character-literal
  | USER character-literal
  | PASSWORD character-literal
  | SOCKET character-literal
  | OWNER character-literal
  | PORT numeric-literal
}

This statement creates the definition of a server for use with the
FEDERATED storage engine. The CREATE SERVER statement creates a new row
in the servers table in the mysql database. This statement requires the
SUPER privilege.

The server_name should be a unique reference to the server. Server
definitions are global within the scope of the server, it is not
possible to qualify the server definition to a specific database.
server_name has a maximum length of 64 characters (names longer than 64
characters are silently truncated), and is case-insensitive. You may
specify the name as a quoted string.

The wrapper_name is an identifier and may be quoted with single
quotation marks.

For each option you must specify either a character literal or numeric
literal. Character literals are UTF-8, support a maximum length of 64
characters and default to a blank (empty) string. String literals are
silently truncated to 64 characters. Numeric literals must be a number
between 0 and 9999, default value is 0.

*Note*:

The OWNER option is currently not applied, and has no effect on the
ownership or operation of the server connection that is created.

The CREATE SERVER statement creates an entry in the mysql.servers table
that can later be used with the CREATE TABLE statement when creating a
FEDERATED table. The options that you specify are used to populate the
columns in the mysql.servers table. The table columns are Server_name,
Host, Db, Username, Password, Port and Socket.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-server.html

</field>
		<field name="example">CREATE SERVER s
FOREIGN DATA WRAPPER mysql
OPTIONS (USER 'Remote', HOST '198.51.100.106', DATABASE 'test');
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-server.html</field>
	</row>
	<row>
		<field name="help_topic_id">521</field>
		<field name="name">CREATE SPATIAL REFERENCE SYSTEM</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE OR REPLACE SPATIAL REFERENCE SYSTEM
    srid srs_attribute ...

CREATE SPATIAL REFERENCE SYSTEM
    [IF NOT EXISTS]
    srid srs_attribute ...

srs_attribute: {
    NAME 'srs_name'
  | DEFINITION 'definition'
  | ORGANIZATION 'org_name' IDENTIFIED BY org_id
  | DESCRIPTION 'description'
}

srid, org_id: 32-bit unsigned integer

This statement creates a spatial reference system (SRS) definition and
stores it in the data dictionary. It requires the SUPER privilege. The
resulting data dictionary entry can be inspected using the
INFORMATION_SCHEMA ST_SPATIAL_REFERENCE_SYSTEMS table.

SRID values must be unique, so if neither OR REPLACE nor IF NOT EXISTS
is specified, an error occurs if an SRS definition with the given srid
value already exists.

With CREATE OR REPLACE syntax, any existing SRS definition with the
same SRID value is replaced, unless the SRID value is used by some
column in an existing table. In that case, an error occurs. For
example:

mysql&gt; CREATE OR REPLACE SPATIAL REFERENCE SYSTEM 4326 ...;
ERROR 3716 (SR005): Can't modify SRID 4326. There is at
least one column depending on it.

To identify which column or columns use the SRID, use this query,
replacing 4326 with the SRID of the definition you are trying to
create:

SELECT * FROM INFORMATION_SCHEMA.ST_GEOMETRY_COLUMNS WHERE SRS_ID=4326;

With CREATE ... IF NOT EXISTS syntax, any existing SRS definition with
the same SRID value causes the new definition to be ignored and a
warning occurs.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-spatial-reference-system.html

</field>
		<field name="example">CREATE SPATIAL REFERENCE SYSTEM 4120
NAME 'Greek'
ORGANIZATION 'EPSG' IDENTIFIED BY 4120
DEFINITION
  'GEOGCS[&quot;Greek&quot;,DATUM[&quot;Greek&quot;,SPHEROID[&quot;Bessel 1841&quot;,
  6377397.155,299.1528128,AUTHORITY[&quot;EPSG&quot;,&quot;7004&quot;]],
  AUTHORITY[&quot;EPSG&quot;,&quot;6120&quot;]],PRIMEM[&quot;Greenwich&quot;,0,
  AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],UNIT[&quot;degree&quot;,0.017453292519943278,
  AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],AXIS[&quot;Lat&quot;,NORTH],AXIS[&quot;Lon&quot;,EAST],
  AUTHORITY[&quot;EPSG&quot;,&quot;4120&quot;]]';
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-spatial-reference-system.html</field>
	</row>
	<row>
		<field name="help_topic_id">522</field>
		<field name="name">CREATE TABLE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
    (create_definition,...)
    [table_options]
    [partition_options]

CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
    [(create_definition,...)]
    [table_options]
    [partition_options]
    [IGNORE | REPLACE]
    [AS] query_expression

CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
    { LIKE old_tbl_name | (LIKE old_tbl_name) }

create_definition: {
    col_name column_definition
  | {INDEX | KEY} [index_name] [index_type] (key_part,...)
      [index_option] ...
  | {FULLTEXT | SPATIAL} [INDEX | KEY] [index_name] (key_part,...)
      [index_option] ...
  | [CONSTRAINT [symbol]] PRIMARY KEY
      [index_type] (key_part,...)
      [index_option] ...
  | [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY]
      [index_name] [index_type] (key_part,...)
      [index_option] ...
  | [CONSTRAINT [symbol]] FOREIGN KEY
      [index_name] (col_name,...)
      reference_definition
  | check_constraint_definition
}

column_definition: {
    data_type [NOT NULL | NULL] [DEFAULT {literal | (expr)} ]
      [VISIBLE | INVISIBLE]
      [AUTO_INCREMENT] [UNIQUE [KEY]] [[PRIMARY] KEY]
      [COMMENT 'string']
      [COLLATE collation_name]
      [COLUMN_FORMAT {FIXED | DYNAMIC | DEFAULT}]
      [ENGINE_ATTRIBUTE [=] 'string']
      [SECONDARY_ENGINE_ATTRIBUTE [=] 'string']
      [STORAGE {DISK | MEMORY}]
      [reference_definition]
      [check_constraint_definition]
  | data_type
      [COLLATE collation_name]
      [GENERATED ALWAYS] AS (expr)
      [VIRTUAL | STORED] [NOT NULL | NULL]
      [VISIBLE | INVISIBLE]
      [UNIQUE [KEY]] [[PRIMARY] KEY]
      [COMMENT 'string']
      [reference_definition]
      [check_constraint_definition]
}

data_type:
    (see https://dev.mysql.com/doc/refman/8.0/en/data-types.html)

key_part: {col_name [(length)] | (expr)} [ASC | DESC]

index_type:
    USING {BTREE | HASH}

index_option: {
    KEY_BLOCK_SIZE [=] value
  | index_type
  | WITH PARSER parser_name
  | COMMENT 'string'
  | {VISIBLE | INVISIBLE}
  |ENGINE_ATTRIBUTE [=] 'string'
  |SECONDARY_ENGINE_ATTRIBUTE [=] 'string'
}

check_constraint_definition:
    [CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED]

reference_definition:
    REFERENCES tbl_name (key_part,...)
      [MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]
      [ON DELETE reference_option]
      [ON UPDATE reference_option]

reference_option:
    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT

table_options:
    table_option [[,] table_option] ...

table_option: {
    AUTOEXTEND_SIZE [=] value
  | AUTO_INCREMENT [=] value
  | AVG_ROW_LENGTH [=] value
  | [DEFAULT] CHARACTER SET [=] charset_name
  | CHECKSUM [=] {0 | 1}
  | [DEFAULT] COLLATE [=] collation_name
  | COMMENT [=] 'string'
  | COMPRESSION [=] {'ZLIB' | 'LZ4' | 'NONE'}
  | CONNECTION [=] 'connect_string'
  | {DATA | INDEX} DIRECTORY [=] 'absolute path to directory'
  | DELAY_KEY_WRITE [=] {0 | 1}
  | ENCRYPTION [=] {'Y' | 'N'}
  | ENGINE [=] engine_name
  | ENGINE_ATTRIBUTE [=] 'string'
  | INSERT_METHOD [=] { NO | FIRST | LAST }
  | KEY_BLOCK_SIZE [=] value
  | MAX_ROWS [=] value
  | MIN_ROWS [=] value
  | PACK_KEYS [=] {0 | 1 | DEFAULT}
  | PASSWORD [=] 'string'
  | ROW_FORMAT [=] {DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT}
  | START TRANSACTION 
  | SECONDARY_ENGINE_ATTRIBUTE [=] 'string'
  | STATS_AUTO_RECALC [=] {DEFAULT | 0 | 1}
  | STATS_PERSISTENT [=] {DEFAULT | 0 | 1}
  | STATS_SAMPLE_PAGES [=] value
  | tablespace_option
  | UNION [=] (tbl_name[,tbl_name]...)
}

partition_options:
    PARTITION BY
        { [LINEAR] HASH(expr)
        | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list)
        | RANGE{(expr) | COLUMNS(column_list)}
        | LIST{(expr) | COLUMNS(column_list)} }
    [PARTITIONS num]
    [SUBPARTITION BY
        { [LINEAR] HASH(expr)
        | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list) }
      [SUBPARTITIONS num]
    ]
    [(partition_definition [, partition_definition] ...)]

partition_definition:
    PARTITION partition_name
        [VALUES
            {LESS THAN {(expr | value_list) | MAXVALUE}
            |
            IN (value_list)}]
        [[STORAGE] ENGINE [=] engine_name]
        [COMMENT [=] 'string' ]
        [DATA DIRECTORY [=] 'data_dir']
        [INDEX DIRECTORY [=] 'index_dir']
        [MAX_ROWS [=] max_number_of_rows]
        [MIN_ROWS [=] min_number_of_rows]
        [TABLESPACE [=] tablespace_name]
        [(subpartition_definition [, subpartition_definition] ...)]

subpartition_definition:
    SUBPARTITION logical_name
        [[STORAGE] ENGINE [=] engine_name]
        [COMMENT [=] 'string' ]
        [DATA DIRECTORY [=] 'data_dir']
        [INDEX DIRECTORY [=] 'index_dir']
        [MAX_ROWS [=] max_number_of_rows]
        [MIN_ROWS [=] min_number_of_rows]
        [TABLESPACE [=] tablespace_name]

tablespace_option:
    TABLESPACE tablespace_name [STORAGE DISK]
  | [TABLESPACE tablespace_name] STORAGE MEMORY

query_expression:
    SELECT ...   (Some valid select or union statement)

CREATE TABLE creates a table with the given name. You must have the
CREATE privilege for the table.

By default, tables are created in the default database, using the
InnoDB storage engine. An error occurs if the table exists, if there is
no default database, or if the database does not exist.

MySQL has no limit on the number of tables. The underlying file system
may have a limit on the number of files that represent tables.
Individual storage engines may impose engine-specific constraints.
InnoDB permits up to 4 billion tables.

For information about the physical representation of a table, see
https://dev.mysql.com/doc/refman/8.0/en/create-table-files.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">523</field>
		<field name="name">FOREIGN KEY</field>
		<field name="help_category_id">40</field>
		<field name="description">MySQL supports foreign keys, which permit cross-referencing related
data across tables, and foreign key constraints, which help keep the
related data consistent.

A foreign key relationship involves a parent table that holds the
initial column values, and a child table with column values that
reference the parent column values. A foreign key constraint is defined
on the child table.

The essential syntax for a defining a foreign key constraint in a
CREATE TABLE or ALTER TABLE statement includes the following:

[CONSTRAINT [symbol]] FOREIGN KEY
    [index_name] (col_name, ...)
    REFERENCES tbl_name (col_name,...)
    [ON DELETE reference_option]
    [ON UPDATE reference_option]

reference_option:
    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT

URL: https://dev.mysql.com/doc/refman/8.0/en/create-table-foreign-keys.html

</field>
		<field name="example">CREATE TABLE product (
    category INT NOT NULL, id INT NOT NULL,
    price DECIMAL,
    PRIMARY KEY(category, id)
)   ENGINE=INNODB;

CREATE TABLE customer (
    id INT NOT NULL,
    PRIMARY KEY (id)
)   ENGINE=INNODB;

CREATE TABLE product_order (
    no INT NOT NULL AUTO_INCREMENT,
    product_category INT NOT NULL,
    product_id INT NOT NULL,
    customer_id INT NOT NULL,

    PRIMARY KEY(no),
    INDEX (product_category, product_id),
    INDEX (customer_id),

    FOREIGN KEY (product_category, product_id)
      REFERENCES product(category, id)
      ON UPDATE CASCADE ON DELETE RESTRICT,

    FOREIGN KEY (customer_id)
      REFERENCES customer(id)
)   ENGINE=INNODB;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-table-foreign-keys.html</field>
	</row>
	<row>
		<field name="help_topic_id">524</field>
		<field name="name">CREATE TABLESPACE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE [UNDO] TABLESPACE tablespace_name

  InnoDB and NDB:
    [ADD DATAFILE 'file_name']
    [AUTOEXTEND_SIZE [=] value]

  InnoDB only:
    [FILE_BLOCK_SIZE = value]
    [ENCRYPTION [=] {'Y' | 'N'}]

  NDB only:
    USE LOGFILE GROUP logfile_group
    [EXTENT_SIZE [=] extent_size]
    [INITIAL_SIZE [=] initial_size]
    [MAX_SIZE [=] max_size]
    [NODEGROUP [=] nodegroup_id]
    [WAIT]
    [COMMENT [=] 'string']

  InnoDB and NDB:
    [ENGINE [=] engine_name]

  Reserved for future use:
    [ENGINE_ATTRIBUTE [=] 'string']

This statement is used to create a tablespace. The precise syntax and
semantics depend on the storage engine used. In standard MySQL
releases, this is always an InnoDB tablespace. MySQL NDB Cluster also
supports tablespaces using the NDB storage engine.

o https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html#create
  -tablespace-innodb

o https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html#create
  -tablespace-ndb

o https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html#create
  -tablespace-options

o https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html#create
  -tablespace-notes

o https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html#create
  -tablespace-innodb-examples

o https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html#create
  -tablespace-ndb-examples

Considerations for InnoDB

CREATE TABLESPACE syntax is used to create general tablespaces or undo
tablespaces. The UNDO keyword, introduced in MySQL 8.0.14, must be
specified to create an undo tablespace.

A general tablespace is a shared tablespace. It can hold multiple
tables, and supports all table row formats. General tablespaces can be
created in a location relative to or independent of the data directory.

After creating an InnoDB general tablespace, use CREATE TABLE tbl_name
... TABLESPACE [=] tablespace_name or ALTER TABLE tbl_name TABLESPACE
[=] tablespace_name to add tables to the tablespace. For more
information, see
https://dev.mysql.com/doc/refman/8.0/en/general-tablespaces.html.

Undo tablespaces contain undo logs. Undo tablespaces can be created in
a chosen location by specifying a fully qualified data file path. For
more information, see
https://dev.mysql.com/doc/refman/8.0/en/innodb-undo-tablespaces.html.

Considerations for NDB Cluster

This statement is used to create a tablespace, which can contain one or
more data files, providing storage space for NDB Cluster Disk Data
tables (see
https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-disk-data.html).
One data file is created and added to the tablespace using this
statement. Additional data files may be added to the tablespace by
using the ALTER TABLESPACE statement (see [HELP ALTER TABLESPACE]).

*Note*:

All NDB Cluster Disk Data objects share the same namespace. This means
that each Disk Data object must be uniquely named (and not merely each
Disk Data object of a given type). For example, you cannot have a
tablespace and a log file group with the same name, or a tablespace and
a data file with the same name.

A log file group of one or more UNDO log files must be assigned to the
tablespace to be created with the USE LOGFILE GROUP clause.
logfile_group must be an existing log file group created with CREATE
LOGFILE GROUP (see [HELP CREATE LOGFILE GROUP]). Multiple tablespaces
may use the same log file group for UNDO logging.

When setting EXTENT_SIZE or INITIAL_SIZE, you may optionally follow the
number with a one-letter abbreviation for an order of magnitude,
similar to those used in my.cnf. Generally, this is one of the letters
M (for megabytes) or G (for gigabytes).

INITIAL_SIZE and EXTENT_SIZE are subject to rounding as follows:

o EXTENT_SIZE is rounded up to the nearest whole multiple of 32K.

o INITIAL_SIZE is rounded down to the nearest whole multiple of 32K;
  this result is rounded up to the nearest whole multiple of
  EXTENT_SIZE (after any rounding).

*Note*:

NDB reserves 4% of a tablespace for data node restart operations. This
reserved space cannot be used for data storage.

The rounding just described is done explicitly, and a warning is issued
by the MySQL Server when any such rounding is performed. The rounded
values are also used by the NDB kernel for calculating
INFORMATION_SCHEMA.FILES column values and other purposes. However, to
avoid an unexpected result, we suggest that you always use whole
multiples of 32K in specifying these options.

When CREATE TABLESPACE is used with ENGINE [=] NDB, a tablespace and
associated data file are created on each Cluster data node. You can
verify that the data files were created and obtain information about
them by querying the Information Schema FILES table. (See the example
later in this section.)

(See
https://dev.mysql.com/doc/refman/8.0/en/information-schema-files-table.
html.)

Options

o ADD DATAFILE: Defines the name of a tablespace data file. This option
  is always required when creating an NDB tablespace; for InnoDB in
  MySQL 8.0.14 and later, it is required only when creating an undo
  tablespace. The file_name, including any specified path, must be
  quoted with single or double quotation marks. File names (not
  counting the file extension) and directory names must be at least one
  byte in length. Zero length file names and directory names are not
  supported.

  Because there are considerable differences in how InnoDB and NDB
  treat data files, the two storage engines are covered separately in
  the discussion that follows.

  InnoDB data files An InnoDB tablespace supports only a single data
  file, whose name must include a .ibd extension.

  To place an InnoDB general tablespace data file in a location outside
  of the data directory, include a fully qualified path or a path
  relative to the data directory. Only a fully qualified path is
  permitted for undo tablespaces. If you do not specify a path, a
  general tablespace is created in the data directory. An undo
  tablespace created without specifying a path is created in the
  directory defined by the innodb_undo_directory variable. If the
  innodb_undo_directory variable is undefined, undo tablespaces are
  created in the data directory.

  To avoid conflicts with implicitly created file-per-table
  tablespaces, creating an InnoDB general tablespace in a subdirectory
  under the data directory is not supported. When creating a general
  tablespace or undo tablespace outside of the data directory, the
  directory must exist and must be known to InnoDB prior to creating
  the tablespace. To make a directory known to InnoDB, add it to the
  innodb_directories value or to one of the variables whose values are
  appended to the innodb_directories value. innodb_directories is a
  read-only variable. Configuring it requires restarting the server.

  If the ADD DATAFILE clause is not specified when creating an InnoDB
  tablespace, a tablespace data file with a unique file name is created
  implicitly. The unique file name is a 128 bit UUID formatted into
  five groups of hexadecimal numbers separated by dashes
  (aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee). A file extension is added if
  required by the storage engine. An .ibd file extension is added for
  InnoDB general tablespace data files. In a replication environment,
  the data file name created on the replication source server is not
  the same as the data file name created on the replica.

  As of MySQL 8.0.17, the ADD DATAFILE clause does not permit circular
  directory references when creating an InnoDB tablespace. For example,
  the circular directory reference (/../) in the following statement is
  not permitted:

CREATE TABLESPACE ts1 ADD DATAFILE ts1.ibd 'any_directory/../ts1.ibd';

  An exception to this restriction exists on Linux, where a circular
  directory reference is permitted if the preceding directory is a
  symbolic link. For example, the data file path in the example above
  is permitted if any_directory is a symbolic link. (It is still
  permitted for data file paths to begin with '../'.)

  NDB data files An NDB tablespace supports multiple data files which
  can have any legal file names; more data files can be added to an NDB
  Cluster tablespace following its creation by using an ALTER
  TABLESPACE statement.

  An NDB tablespace data file is created by default in the data node
  file system directory---that is, the directory named ndb_nodeid_fs/TS
  under the data node's data directory (DataDir), where nodeid is the
  data node's NodeId. To place the data file in a location other than
  the default, include an absolute directory path or a path relative to
  the default location. If the directory specified does not exist, NDB
  attempts to create it; the system user account under which the data
  node process is running must have the appropriate permissions to do
  so.

  *Note*:

  When determining the path used for a data file, NDB does not expand
  the ~ (tilde) character.

  When multiple data nodes are run on the same physical host, the
  following considerations apply:

  o You cannot specify an absolute path when creating a data file.

  o It is not possible to create tablespace data files outside the data
    node file system directory, unless each data node has a separate
    data directory.

  o If each data node has its own data directory, data files can be
    created anywhere within this directory.

  o If each data node has its own data directory, it may also be
    possible to create a data file outside the node's data directory
    using a relative path, as long as this path resolves to a unique
    location on the host file system for each data node running on that
    host.

o FILE_BLOCK_SIZE: This option---which is specific to InnoDB general
  tablespaces, and is ignored by NDB---defines the block size for the
  tablespace data file. Values can be specified in bytes or kilobytes.
  For example, an 8 kilobyte file block size can be specified as 8192
  or 8K. If you do not specify this option, FILE_BLOCK_SIZE defaults to
  the innodb_page_size value. FILE_BLOCK_SIZE is required when you
  intend to use the tablespace for storing compressed InnoDB tables
  (ROW_FORMAT=COMPRESSED). In this case, you must define the tablespace
  FILE_BLOCK_SIZE when creating the tablespace.

  If FILE_BLOCK_SIZE is equal the innodb_page_size value, the
  tablespace can contain only tables having an uncompressed row format
  (COMPACT, REDUNDANT, and DYNAMIC). Tables with a COMPRESSED row
  format have a different physical page size than uncompressed tables.
  Therefore, compressed tables cannot coexist in the same tablespace as
  uncompressed tables.

  For a general tablespace to contain compressed tables,
  FILE_BLOCK_SIZE must be specified, and the FILE_BLOCK_SIZE value must
  be a valid compressed page size in relation to the innodb_page_size
  value. Also, the physical page size of the compressed table
  (KEY_BLOCK_SIZE) must be equal to FILE_BLOCK_SIZE/1024. For example,
  if innodb_page_size=16K, and FILE_BLOCK_SIZE=8K, the KEY_BLOCK_SIZE
  of the table must be 8. For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/general-tablespaces.html.

o USE LOGFILE GROUP: Required for NDB, this is the name of a log file
  group previously created using CREATE LOGFILE GROUP. Not supported
  for InnoDB, where it fails with an error.

o EXTENT_SIZE: This option is specific to NDB, and is not supported by
  InnoDB, where it fails with an error. EXTENT_SIZE sets the size, in
  bytes, of the extents used by any files belonging to the tablespace.
  The default value is 1M. The minimum size is 32K, and theoretical
  maximum is 2G, although the practical maximum size depends on a
  number of factors. In most cases, changing the extent size does not
  have any measurable effect on performance, and the default value is
  recommended for all but the most unusual situations.

  An extent is a unit of disk space allocation. One extent is filled
  with as much data as that extent can contain before another extent is
  used. In theory, up to 65,535 (64K) extents may used per data file;
  however, the recommended maximum is 32,768 (32K). The recommended
  maximum size for a single data file is 32G---that is, 32K extents x 1
  MB per extent. In addition, once an extent is allocated to a given
  partition, it cannot be used to store data from a different
  partition; an extent cannot store data from more than one partition.
  This means, for example that a tablespace having a single datafile
  whose INITIAL_SIZE (described in the following item) is 256 MB and
  whose EXTENT_SIZE is 128M has just two extents, and so can be used to
  store data from at most two different disk data table partitions.

  You can see how many extents remain free in a given data file by
  querying the Information Schema FILES table, and so derive an
  estimate for how much space remains free in the file. For further
  discussion and examples, see
  https://dev.mysql.com/doc/refman/8.0/en/information-schema-files-tabl
  e.html.

o INITIAL_SIZE: This option is specific to NDB, and is not supported by
  InnoDB, where it fails with an error.

  The INITIAL_SIZE parameter sets the total size in bytes of the data
  file that was specific using ADD DATATFILE. Once this file has been
  created, its size cannot be changed; however, you can add more data
  files to the tablespace using ALTER TABLESPACE ... ADD DATAFILE.

  INITIAL_SIZE is optional; its default value is 134217728 (128 MB).

  On 32-bit systems, the maximum supported value for INITIAL_SIZE is
  4294967296 (4 GB).

o AUTOEXTEND_SIZE: Ignored by MySQL prior to MySQL 8.0.23; From MySQL
  8.0.23, defines the amount by which InnoDB extends the size of the
  tablespace when it becomes full. The setting must be a multiple of
  4MB. The default setting is 0, which causes the tablespace to be
  extended according to the implicit default behavior. For more
  information, see
  https://dev.mysql.com/doc/refman/8.0/en/innodb-tablespace-autoextend-
  size.html.

  Has no effect in any release of MySQL NDB Cluster 8.0, regardless of
  the storage engine used.

o MAX_SIZE: Currently ignored by MySQL; reserved for possible future
  use. Has no effect in any release of MySQL 8.0 or MySQL NDB Cluster
  8.0, regardless of the storage engine used.

o NODEGROUP: Currently ignored by MySQL; reserved for possible future
  use. Has no effect in any release of MySQL 8.0 or MySQL NDB Cluster
  8.0, regardless of the storage engine used.

o WAIT: Currently ignored by MySQL; reserved for possible future use.
  Has no effect in any release of MySQL 8.0 or MySQL NDB Cluster 8.0,
  regardless of the storage engine used.

o COMMENT: Currently ignored by MySQL; reserved for possible future
  use. Has no effect in any release of MySQL 8.0 or MySQL NDB Cluster
  8.0, regardless of the storage engine used.

o The ENCRYPTION clause enables or disables page-level data encryption
  for an InnoDB general tablespace. Encryption support for general
  tablespaces was introduced in MySQL 8.0.13.

  As of MySQL 8.0.16, if the ENCRYPTION clause is not specified, the
  default_table_encryption setting controls whether encryption is
  enabled. The ENCRYPTION clause overrides the default_table_encryption
  setting. However, if the table_encryption_privilege_check variable is
  enabled, the TABLE_ENCRYPTION_ADMIN privilege is required to use an
  ENCRYPTION clause setting that differs from the
  default_table_encryption setting.

  A keyring plugin must be installed and configured before an
  encryption-enabled tablespace can be created.

  When a general tablespace is encrypted, all tables residing in the
  tablespace are encrypted. Likewise, a table created in an encrypted
  tablespace is encrypted.

  For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html

o ENGINE: Defines the storage engine which uses the tablespace, where
  engine_name is the name of the storage engine. Currently, only the
  InnoDB storage engine is supported by standard MySQL 8.0 releases.
  MySQL NDB Cluster supports both NDB and InnoDB tablespaces. The value
  of the default_storage_engine system variable is used for ENGINE if
  the option is not specified.

o The ENGINE_ATTRIBUTE option (available as of MySQL 8.0.21) is used to
  specify tablespace attributes for primary storage engines. The option
  is reserved for future use.

  Permitted values are a string literal containing a valid JSON
  document or an empty string (''). Invalid JSON is rejected.

CREATE TABLESPACE ts1 ENGINE_ATTRIBUTE='{&quot;key&quot;:&quot;value&quot;}';

  ENGINE_ATTRIBUTE values can be repeated without error. In this case,
  the last specified value is used.

  ENGINE_ATTRIBUTE values are not checked by the server, nor are they
  cleared when the table's storage engine is changed.

Notes

o For the rules covering the naming of MySQL tablespaces, see
  https://dev.mysql.com/doc/refman/8.0/en/identifiers.html. In addition
  to these rules, the slash character (&quot;/&quot;) is not permitted, nor can
  you use names beginning with innodb_, as this prefix is reserved for
  system use.

o Creation of temporary general tablespaces is not supported.

o General tablespaces do not support temporary tables.

o The TABLESPACE option may be used with CREATE TABLE or ALTER TABLE to
  assign an InnoDB table partition or subpartition to a file-per-table
  tablespace. All partitions must belong to the same storage engine.
  Assigning table partitions to shared InnoDB tablespaces is not
  supported. Shared tablespaces include the InnoDB system tablespace
  and general tablespaces.

o General tablespaces support the addition of tables of any row format
  using CREATE TABLE ... TABLESPACE. innodb_file_per_table does not
  need to be enabled.

o innodb_strict_mode is not applicable to general tablespaces.
  Tablespace management rules are strictly enforced independently of
  innodb_strict_mode. If CREATE TABLESPACE parameters are incorrect or
  incompatible, the operation fails regardless of the
  innodb_strict_mode setting. When a table is added to a general
  tablespace using CREATE TABLE ... TABLESPACE or ALTER TABLE ...
  TABLESPACE, innodb_strict_mode is ignored but the statement is
  evaluated as if innodb_strict_mode is enabled.

o Use DROP TABLESPACE to remove a tablespace. All tables must be
  dropped from a tablespace using DROP TABLE prior to dropping the
  tablespace. Before dropping an NDB Cluster tablespace you must also
  remove all its data files using one or more ALTER TABLESPACE ... DROP
  DATATFILE statements. See
  https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-disk-data-objec
  ts.html.

o All parts of an InnoDB table added to an InnoDB general tablespace
  reside in the general tablespace, including indexes and BLOB pages.

  For an NDB table assigned to a tablespace, only those columns which
  are not indexed are stored on disk, and actually use the tablespace
  data files. Indexes and indexed columns for all NDB tables are always
  kept in memory.

o Similar to the system tablespace, truncating or dropping tables
  stored in a general tablespace creates free space internally in the
  general tablespace .ibd data file which can only be used for new
  InnoDB data. Space is not released back to the operating system as it
  is for file-per-table tablespaces.

o A general tablespace is not associated with any database or schema.

o ALTER TABLE ... DISCARD TABLESPACE and ALTER TABLE ...IMPORT
  TABLESPACE are not supported for tables that belong to a general
  tablespace.

o The server uses tablespace-level metadata locking for DDL that
  references general tablespaces. By comparison, the server uses
  table-level metadata locking for DDL that references file-per-table
  tablespaces.

o A generated or existing tablespace cannot be changed to a general
  tablespace.

o There is no conflict between general tablespace names and
  file-per-table tablespace names. The &quot;/&quot; character, which is present
  in file-per-table tablespace names, is not permitted in general
  tablespace names.

o mysqldump and mysqlpump do not dump InnoDB CREATE TABLESPACE
  statements.

InnoDB Examples

This example demonstrates creating a general tablespace and adding
three uncompressed tables of different row formats.

mysql&gt; CREATE TABLESPACE `ts1` ADD DATAFILE 'ts1.ibd' ENGINE=INNODB;

mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=REDUNDANT;

mysql&gt; CREATE TABLE t2 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=COMPACT;

mysql&gt; CREATE TABLE t3 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=DYNAMIC;

This example demonstrates creating a general tablespace and adding a
compressed table. The example assumes a default innodb_page_size value
of 16K. The FILE_BLOCK_SIZE of 8192 requires that the compressed table
have a KEY_BLOCK_SIZE of 8.

mysql&gt; CREATE TABLESPACE `ts2` ADD DATAFILE 'ts2.ibd' FILE_BLOCK_SIZE = 8192 Engine=InnoDB;

mysql&gt; CREATE TABLE t4 (c1 INT PRIMARY KEY) TABLESPACE ts2 ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;

This example demonstrates creating a general tablespace without
specifying the ADD DATAFILE clause, which is optional as of MySQL
8.0.14.

mysql&gt; CREATE TABLESPACE `ts3` ENGINE=INNODB;

This example demonstrates creating an undo tablespace.

mysql&gt; CREATE UNDO TABLESPACE undo_003 ADD DATAFILE 'undo_003.ibu';

NDB Example

Suppose that you wish to create an NDB Cluster Disk Data tablespace
named myts using a datafile named mydata-1.dat. An NDB tablespace
always requires the use of a log file group consisting of one or more
undo log files. For this example, we first create a log file group
named mylg that contains one undo long file named myundo-1.dat, using
the CREATE LOGFILE GROUP statement shown here:

mysql&gt; CREATE LOGFILE GROUP myg1
    -&gt;     ADD UNDOFILE 'myundo-1.dat'
    -&gt;     ENGINE=NDB;
Query OK, 0 rows affected (3.29 sec)

Now you can create the tablespace previously described using the
following statement:

mysql&gt; CREATE TABLESPACE myts
    -&gt;     ADD DATAFILE 'mydata-1.dat'
    -&gt;     USE LOGFILE GROUP mylg
    -&gt;     ENGINE=NDB;
Query OK, 0 rows affected (2.98 sec)

You can now create a Disk Data table using a CREATE TABLE statement
with the TABLESPACE and STORAGE DISK options, similar to what is shown
here:

mysql&gt; CREATE TABLE mytable (
    -&gt;     id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -&gt;     lname VARCHAR(50) NOT NULL,
    -&gt;     fname VARCHAR(50) NOT NULL,
    -&gt;     dob DATE NOT NULL,
    -&gt;     joined DATE NOT NULL,
    -&gt;     INDEX(last_name, first_name)
    -&gt; )
    -&gt;     TABLESPACE myts STORAGE DISK
    -&gt;     ENGINE=NDB;
Query OK, 0 rows affected (1.41 sec)

It is important to note that only the dob and joined columns from
mytable are actually stored on disk, due to the fact that the id,
lname, and fname columns are all indexed.

As mentioned previously, when CREATE TABLESPACE is used with ENGINE [=]
NDB, a tablespace and associated data file are created on each NDB
Cluster data node. You can verify that the data files were created and
obtain information about them by querying the Information Schema FILES
table, as shown here:

mysql&gt; SELECT FILE_NAME, FILE_TYPE, LOGFILE_GROUP_NAME, STATUS, EXTRA
    -&gt;     FROM INFORMATION_SCHEMA.FILES
    -&gt;     WHERE TABLESPACE_NAME = 'myts';

+--------------+------------+--------------------+--------+----------------+
| file_name    | file_type  | logfile_group_name | status | extra          |
+--------------+------------+--------------------+--------+----------------+
| mydata-1.dat | DATAFILE   | mylg               | NORMAL | CLUSTER_NODE=5 |
| mydata-1.dat | DATAFILE   | mylg               | NORMAL | CLUSTER_NODE=6 |
| NULL         | TABLESPACE | mylg               | NORMAL | NULL           |
+--------------+------------+--------------------+--------+----------------+
3 rows in set (0.01 sec)

For additional information and examples, see
https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-disk-data-objects
.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html</field>
	</row>
	<row>
		<field name="help_topic_id">525</field>
		<field name="name">CREATE TRIGGER</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE
    [DEFINER = user]
    TRIGGER [IF NOT EXISTS] trigger_name
    trigger_time trigger_event
    ON tbl_name FOR EACH ROW
    [trigger_order]
    trigger_body

trigger_time: { BEFORE | AFTER }

trigger_event: { INSERT | UPDATE | DELETE }

trigger_order: { FOLLOWS | PRECEDES } other_trigger_name

This statement creates a new trigger. A trigger is a named database
object that is associated with a table, and that activates when a
particular event occurs for the table. The trigger becomes associated
with the table named tbl_name, which must refer to a permanent table.
You cannot associate a trigger with a TEMPORARY table or a view.

Trigger names exist in the schema namespace, meaning that all triggers
must have unique names within a schema. Triggers in different schemas
can have the same name.

IF NOT EXISTS prevents an error from occurring if a trigger having the
same name, on the same table, exists in the same schema. This option is
supported with CREATE TRIGGER beginning with MySQL 8.0.29.

This section describes CREATE TRIGGER syntax. For additional
discussion, see
https://dev.mysql.com/doc/refman/8.0/en/trigger-syntax.html.

CREATE TRIGGER requires the TRIGGER privilege for the table associated
with the trigger. If the DEFINER clause is present, the privileges
required depend on the user value, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/stored-objects-security.html.
If binary logging is enabled, CREATE TRIGGER might require the SUPER
privilege, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html.

The DEFINER clause determines the security context to be used when
checking access privileges at trigger activation time, as described
later in this section.

trigger_time is the trigger action time. It can be BEFORE or AFTER to
indicate that the trigger activates before or after each row to be
modified.

Basic column value checks occur prior to trigger activation, so you
cannot use BEFORE triggers to convert values inappropriate for the
column type to valid values.

trigger_event indicates the kind of operation that activates the
trigger. These trigger_event values are permitted:

o INSERT: The trigger activates whenever a new row is inserted into the
  table (for example, through INSERT, LOAD DATA, and REPLACE
  statements).

o UPDATE: The trigger activates whenever a row is modified (for
  example, through UPDATE statements).

o DELETE: The trigger activates whenever a row is deleted from the
  table (for example, through DELETE and REPLACE statements). DROP
  TABLE and TRUNCATE TABLE statements on the table do not activate this
  trigger, because they do not use DELETE. Dropping a partition does
  not activate DELETE triggers, either.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-trigger.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-trigger.html</field>
	</row>
	<row>
		<field name="help_topic_id">526</field>
		<field name="name">CREATE VIEW</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
CREATE
    [OR REPLACE]
    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]
    [DEFINER = user]
    [SQL SECURITY { DEFINER | INVOKER }]
    VIEW view_name [(column_list)]
    AS select_statement
    [WITH [CASCADED | LOCAL] CHECK OPTION]

The CREATE VIEW statement creates a new view, or replaces an existing
view if the OR REPLACE clause is given. If the view does not exist,
CREATE OR REPLACE VIEW is the same as CREATE VIEW. If the view does
exist, CREATE OR REPLACE VIEW replaces it.

For information about restrictions on view use, see
https://dev.mysql.com/doc/refman/8.0/en/view-restrictions.html.

The select_statement is a SELECT statement that provides the definition
of the view. (Selecting from the view selects, in effect, using the
SELECT statement.) The select_statement can select from base tables or
from other views. Beginning with MySQL 8.0.19, the SELECT statement can
use a VALUES statement as its source, or can be replaced with a TABLE
statement, as with CREATE TABLE ... SELECT.

The view definition is &quot;frozen&quot; at creation time and is not affected by
subsequent changes to the definitions of the underlying tables. For
example, if a view is defined as SELECT * on a table, new columns added
to the table later do not become part of the view, and columns dropped
from the table result in an error when selecting from the view.

The ALGORITHM clause affects how MySQL processes the view. The DEFINER
and SQL SECURITY clauses specify the security context to be used when
checking access privileges at view invocation time. The WITH CHECK
OPTION clause can be given to constrain inserts or updates to rows in
tables referenced by the view. These clauses are described later in
this section.

The CREATE VIEW statement requires the CREATE VIEW privilege for the
view, and some privilege for each column selected by the SELECT
statement. For columns used elsewhere in the SELECT statement, you must
have the SELECT privilege. If the OR REPLACE clause is present, you
must also have the DROP privilege for the view. If the DEFINER clause
is present, the privileges required depend on the user value, as
discussed in
https://dev.mysql.com/doc/refman/8.0/en/stored-objects-security.html.

When a view is referenced, privilege checking occurs as described later
in this section.

A view belongs to a database. By default, a new view is created in the
default database. To create the view explicitly in a given database,
use db_name.view_name syntax to qualify the view name with the database
name:

CREATE VIEW test.v AS SELECT * FROM t;

Unqualified table or view names in the SELECT statement are also
interpreted with respect to the default database. A view can refer to
tables or views in other databases by qualifying the table or view name
with the appropriate database name.

Within a database, base tables and views share the same namespace, so a
base table and a view cannot have the same name.

Columns retrieved by the SELECT statement can be simple references to
table columns, or expressions that use functions, constant values,
operators, and so forth.

A view must have unique column names with no duplicates, just like a
base table. By default, the names of the columns retrieved by the
SELECT statement are used for the view column names. To define explicit
names for the view columns, specify the optional column_list clause as
a list of comma-separated identifiers. The number of names in
column_list must be the same as the number of columns retrieved by the
SELECT statement.

A view can be created from many kinds of SELECT statements. It can
refer to base tables or other views. It can use joins, UNION, and
subqueries. The SELECT need not even refer to any tables:

CREATE VIEW v_today (today) AS SELECT CURRENT_DATE;

The following example defines a view that selects two columns from
another table as well as an expression calculated from those columns:

mysql&gt; CREATE TABLE t (qty INT, price INT);
mysql&gt; INSERT INTO t VALUES(3, 50);
mysql&gt; CREATE VIEW v AS SELECT qty, price, qty*price AS value FROM t;
mysql&gt; SELECT * FROM v;
+------+-------+-------+
| qty  | price | value |
+------+-------+-------+
|    3 |    50 |   150 |
+------+-------+-------+

A view definition is subject to the following restrictions:

o The SELECT statement cannot refer to system variables or user-defined
  variables.

o Within a stored program, the SELECT statement cannot refer to program
  parameters or local variables.

o The SELECT statement cannot refer to prepared statement parameters.

o Any table or view referred to in the definition must exist. If, after
  the view has been created, a table or view that the definition refers
  to is dropped, use of the view results in an error. To check a view
  definition for problems of this kind, use the CHECK TABLE statement.

o The definition cannot refer to a TEMPORARY table, and you cannot
  create a TEMPORARY view.

o You cannot associate a trigger with a view.

o Aliases for column names in the SELECT statement are checked against
  the maximum column length of 64 characters (not the maximum alias
  length of 256 characters).

ORDER BY is permitted in a view definition, but it is ignored if you
select from a view using a statement that has its own ORDER BY.

For other options or clauses in the definition, they are added to the
options or clauses of the statement that references the view, but the
effect is undefined. For example, if a view definition includes a LIMIT
clause, and you select from the view using a statement that has its own
LIMIT clause, it is undefined which limit applies. This same principle
applies to options such as ALL, DISTINCT, or SQL_SMALL_RESULT that
follow the SELECT keyword, and to clauses such as INTO, FOR UPDATE, FOR
SHARE, LOCK IN SHARE MODE, and PROCEDURE.

The results obtained from a view may be affected if you change the
query processing environment by changing system variables:

mysql&gt; CREATE VIEW v (mycol) AS SELECT 'abc';
Query OK, 0 rows affected (0.01 sec)

mysql&gt; SET sql_mode = '';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT &quot;mycol&quot; FROM v;
+-------+
| mycol |
+-------+
| mycol |
+-------+
1 row in set (0.01 sec)

mysql&gt; SET sql_mode = 'ANSI_QUOTES';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT &quot;mycol&quot; FROM v;
+-------+
| mycol |
+-------+
| abc   |
+-------+
1 row in set (0.00 sec)

The DEFINER and SQL SECURITY clauses determine which MySQL account to
use when checking access privileges for the view when a statement is
executed that references the view. The valid SQL SECURITY
characteristic values are DEFINER (the default) and INVOKER. These
indicate that the required privileges must be held by the user who
defined or invoked the view, respectively.

If the DEFINER clause is present, the user value should be a MySQL
account specified as 'user_name'@'host_name', CURRENT_USER, or
CURRENT_USER(). The permitted user values depend on the privileges you
hold, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/stored-objects-security.html.
Also see that section for additional information about view security.

If the DEFINER clause is omitted, the default definer is the user who
executes the CREATE VIEW statement. This is the same as specifying
DEFINER = CURRENT_USER explicitly.

Within a view definition, the CURRENT_USER function returns the view's
DEFINER value by default. For views defined with the SQL SECURITY
INVOKER characteristic, CURRENT_USER returns the account for the view's
invoker. For information about user auditing within views, see
https://dev.mysql.com/doc/refman/8.0/en/account-activity-auditing.html.

Within a stored routine that is defined with the SQL SECURITY DEFINER
characteristic, CURRENT_USER returns the routine's DEFINER value. This
also affects a view defined within such a routine, if the view
definition contains a DEFINER value of CURRENT_USER.

MySQL checks view privileges like this:

o At view definition time, the view creator must have the privileges
  needed to use the top-level objects accessed by the view. For
  example, if the view definition refers to table columns, the creator
  must have some privilege for each column in the select list of the
  definition, and the SELECT privilege for each column used elsewhere
  in the definition. If the definition refers to a stored function,
  only the privileges needed to invoke the function can be checked. The
  privileges required at function invocation time can be checked only
  as it executes: For different invocations, different execution paths
  within the function might be taken.

o The user who references a view must have appropriate privileges to
  access it (SELECT to select from it, INSERT to insert into it, and so
  forth.)

o When a view has been referenced, privileges for objects accessed by
  the view are checked against the privileges held by the view DEFINER
  account or invoker, depending on whether the SQL SECURITY
  characteristic is DEFINER or INVOKER, respectively.

o If reference to a view causes execution of a stored function,
  privilege checking for statements executed within the function depend
  on whether the function SQL SECURITY characteristic is DEFINER or
  INVOKER. If the security characteristic is DEFINER, the function runs
  with the privileges of the DEFINER account. If the characteristic is
  INVOKER, the function runs with the privileges determined by the
  view's SQL SECURITY characteristic.

Example: A view might depend on a stored function, and that function
might invoke other stored routines. For example, the following view
invokes a stored function f():

CREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);

Suppose that f() contains a statement such as this:

IF name IS NULL then
  CALL p1();
ELSE
  CALL p2();
END IF;

The privileges required for executing statements within f() need to be
checked when f() executes. This might mean that privileges are needed
for p1() or p2(), depending on the execution path within f(). Those
privileges must be checked at runtime, and the user who must possess
the privileges is determined by the SQL SECURITY values of the view v
and the function f().

The DEFINER and SQL SECURITY clauses for views are extensions to
standard SQL. In standard SQL, views are handled using the rules for
SQL SECURITY DEFINER. The standard says that the definer of the view,
which is the same as the owner of the view's schema, gets applicable
privileges on the view (for example, SELECT) and may grant them. MySQL
has no concept of a schema &quot;owner&quot;, so MySQL adds a clause to identify
the definer. The DEFINER clause is an extension where the intent is to
have what the standard has; that is, a permanent record of who defined
the view. This is why the default DEFINER value is the account of the
view creator.

The optional ALGORITHM clause is a MySQL extension to standard SQL. It
affects how MySQL processes the view. ALGORITHM takes three values:
MERGE, TEMPTABLE, or UNDEFINED. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/view-algorithms.html, as well
as
https://dev.mysql.com/doc/refman/8.0/en/derived-table-optimization.html
.

Some views are updatable. That is, you can use them in statements such
as UPDATE, DELETE, or INSERT to update the contents of the underlying
table. For a view to be updatable, there must be a one-to-one
relationship between the rows in the view and the rows in the
underlying table. There are also certain other constructs that make a
view nonupdatable.

A generated column in a view is considered updatable because it is
possible to assign to it. However, if such a column is updated
explicitly, the only permitted value is DEFAULT. For information about
generated columns, see
https://dev.mysql.com/doc/refman/8.0/en/create-table-generated-columns.
html.

The WITH CHECK OPTION clause can be given for an updatable view to
prevent inserts or updates to rows except those for which the WHERE
clause in the select_statement is true.

In a WITH CHECK OPTION clause for an updatable view, the LOCAL and
CASCADED keywords determine the scope of check testing when the view is
defined in terms of another view. The LOCAL keyword restricts the CHECK
OPTION only to the view being defined. CASCADED causes the checks for
underlying views to be evaluated as well. When neither keyword is
given, the default is CASCADED.

For more information about updatable views and the WITH CHECK OPTION
clause, see
https://dev.mysql.com/doc/refman/8.0/en/view-updatability.html, and
https://dev.mysql.com/doc/refman/8.0/en/view-check-option.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-view.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-view.html</field>
	</row>
	<row>
		<field name="help_topic_id">527</field>
		<field name="name">DROP DATABASE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP {DATABASE | SCHEMA} [IF EXISTS] db_name

DROP DATABASE drops all tables in the database and deletes the
database. Be very careful with this statement! To use DROP DATABASE,
you need the DROP privilege on the database. DROP SCHEMA is a synonym
for DROP DATABASE.

*Important*:

When a database is dropped, privileges granted specifically for the
database are not automatically dropped. They must be dropped manually.
See [HELP GRANT].

IF EXISTS is used to prevent an error from occurring if the database
does not exist.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-database.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-database.html</field>
	</row>
	<row>
		<field name="help_topic_id">528</field>
		<field name="name">DROP SCHEMA</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP {DATABASE | SCHEMA} [IF EXISTS] db_name

DROP DATABASE drops all tables in the database and deletes the
database. Be very careful with this statement! To use DROP DATABASE,
you need the DROP privilege on the database. DROP SCHEMA is a synonym
for DROP DATABASE.

*Important*:

When a database is dropped, privileges granted specifically for the
database are not automatically dropped. They must be dropped manually.
See [HELP GRANT].

IF EXISTS is used to prevent an error from occurring if the database
does not exist.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-database.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-database.html</field>
	</row>
	<row>
		<field name="help_topic_id">529</field>
		<field name="name">DROP EVENT</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP EVENT [IF EXISTS] event_name

This statement drops the event named event_name. The event immediately
ceases being active, and is deleted completely from the server.

If the event does not exist, the error ERROR 1517 (HY000): Unknown
event 'event_name' results. You can override this and cause the
statement to generate a warning for nonexistent events instead using IF
EXISTS.

This statement requires the EVENT privilege for the schema to which the
event to be dropped belongs.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-event.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-event.html</field>
	</row>
	<row>
		<field name="help_topic_id">530</field>
		<field name="name">DROP INDEX</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP INDEX index_name ON tbl_name
    [algorithm_option | lock_option] ...

algorithm_option:
    ALGORITHM [=] {DEFAULT | INPLACE | COPY}

lock_option:
    LOCK [=] {DEFAULT | NONE | SHARED | EXCLUSIVE}

DROP INDEX drops the index named index_name from the table tbl_name.
This statement is mapped to an ALTER TABLE statement to drop the index.
See [HELP ALTER TABLE].

To drop a primary key, the index name is always PRIMARY, which must be
specified as a quoted identifier because PRIMARY is a reserved word:

DROP INDEX `PRIMARY` ON t;

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-index.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-index.html</field>
	</row>
	<row>
		<field name="help_topic_id">531</field>
		<field name="name">DROP PROCEDURE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP {PROCEDURE | FUNCTION} [IF EXISTS] sp_name

These statements are used to drop a stored routine (a stored procedure
or function). That is, the specified routine is removed from the
server. (DROP FUNCTION is also used to drop loadable functions; see
[HELP DROP FUNCTION loadable function].)

To drop a stored routine, you must have the ALTER ROUTINE privilege for
it. (If the automatic_sp_privileges system variable is enabled, that
privilege and EXECUTE are granted automatically to the routine creator
when the routine is created and dropped from the creator when the
routine is dropped. See
https://dev.mysql.com/doc/refman/8.0/en/stored-routines-privileges.html
.)

In addition, if the definer of the routine has the SYSTEM_USER
privilege, the user dropping it must also have this privilege. This is
enforced in MySQL 8.0.16 and later.

The IF EXISTS clause is a MySQL extension. It prevents an error from
occurring if the procedure or function does not exist. A warning is
produced that can be viewed with SHOW WARNINGS.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-procedure.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-procedure.html</field>
	</row>
	<row>
		<field name="help_topic_id">532</field>
		<field name="name">DROP FUNCTION</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP {PROCEDURE | FUNCTION} [IF EXISTS] sp_name

These statements are used to drop a stored routine (a stored procedure
or function). That is, the specified routine is removed from the
server. (DROP FUNCTION is also used to drop loadable functions; see
[HELP DROP FUNCTION loadable function].)

To drop a stored routine, you must have the ALTER ROUTINE privilege for
it. (If the automatic_sp_privileges system variable is enabled, that
privilege and EXECUTE are granted automatically to the routine creator
when the routine is created and dropped from the creator when the
routine is dropped. See
https://dev.mysql.com/doc/refman/8.0/en/stored-routines-privileges.html
.)

In addition, if the definer of the routine has the SYSTEM_USER
privilege, the user dropping it must also have this privilege. This is
enforced in MySQL 8.0.16 and later.

The IF EXISTS clause is a MySQL extension. It prevents an error from
occurring if the procedure or function does not exist. A warning is
produced that can be viewed with SHOW WARNINGS.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-procedure.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-procedure.html</field>
	</row>
	<row>
		<field name="help_topic_id">533</field>
		<field name="name">DROP SERVER</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP SERVER [ IF EXISTS ] server_name

Drops the server definition for the server named server_name. The
corresponding row in the mysql.servers table is deleted. This statement
requires the SUPER privilege.

Dropping a server for a table does not affect any FEDERATED tables that
used this connection information when they were created. See [HELP
CREATE SERVER].

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-server.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-server.html</field>
	</row>
	<row>
		<field name="help_topic_id">534</field>
		<field name="name">DROP SPATIAL REFERENCE SYSTEM</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP SPATIAL REFERENCE SYSTEM
    [IF EXISTS]
    srid

srid: 32-bit unsigned integer

This statement removes a spatial reference system (SRS) definition from
the data dictionary. It requires the SUPER privilege.

Example:

DROP SPATIAL REFERENCE SYSTEM 4120;

If no SRS definition with the SRID value exists, an error occurs unless
IF EXISTS is specified. In that case, a warning occurs rather than an
error.

If the SRID value is used by some column in an existing table, an error
occurs. For example:

mysql&gt; DROP SPATIAL REFERENCE SYSTEM 4326;
ERROR 3716 (SR005): Can't modify SRID 4326. There is at
least one column depending on it.

To identify which column or columns use the SRID, use this query:

SELECT * FROM INFORMATION_SCHEMA.ST_GEOMETRY_COLUMNS WHERE SRS_ID=4326;

SRID values must be in the range of 32-bit unsigned integers, with
these restrictions:

o SRID 0 is a valid SRID but cannot be used with DROP SPATIAL REFERENCE
  SYSTEM.

o If the value is in a reserved SRID range, a warning occurs. Reserved
  ranges are [0, 32767] (reserved by EPSG), [60,000,000, 69,999,999]
  (reserved by EPSG), and [2,000,000,000, 2,147,483,647] (reserved by
  MySQL). EPSG stands for the European Petroleum Survey Group
  (http://epsg.org).

o Users should not drop SRSs with SRIDs in the reserved ranges. If
  system-installed SRSs are dropped, the SRS definitions may be
  recreated for MySQL upgrades.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-spatial-reference-system.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-spatial-reference-system.html</field>
	</row>
	<row>
		<field name="help_topic_id">535</field>
		<field name="name">DROP TABLE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP [TEMPORARY] TABLE [IF EXISTS]
    tbl_name [, tbl_name] ...
    [RESTRICT | CASCADE]

DROP TABLE removes one or more tables. You must have the DROP privilege
for each table.

Be careful with this statement! For each table, it removes the table
definition and all table data. If the table is partitioned, the
statement removes the table definition, all its partitions, all data
stored in those partitions, and all partition definitions associated
with the dropped table.

Dropping a table also drops any triggers for the table.

DROP TABLE causes an implicit commit, except when used with the
TEMPORARY keyword. See
https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html.

*Important*:

When a table is dropped, privileges granted specifically for the table
are not automatically dropped. They must be dropped manually. See [HELP
GRANT].

If any tables named in the argument list do not exist, DROP TABLE
behavior depends on whether the IF EXISTS clause is given:

o Without IF EXISTS, the statement fails with an error indicating which
  nonexisting tables it was unable to drop, and no changes are made.

o With IF EXISTS, no error occurs for nonexisting tables. The statement
  drops all named tables that do exist, and generates a NOTE diagnostic
  for each nonexistent table. These notes can be displayed with SHOW
  WARNINGS. See [HELP SHOW WARNINGS].

IF EXISTS can also be useful for dropping tables in unusual
circumstances under which there is an entry in the data dictionary but
no table managed by the storage engine. (For example, if an abnormal
server exit occurs after removal of the table from the storage engine
but before removal of the data dictionary entry.)

The TEMPORARY keyword has the following effects:

o The statement drops only TEMPORARY tables.

o The statement does not cause an implicit commit.

o No access rights are checked. A TEMPORARY table is visible only with
  the session that created it, so no check is necessary.

Including the TEMPORARY keyword is a good way to prevent accidentally
dropping non-TEMPORARY tables.

The RESTRICT and CASCADE keywords do nothing. They are permitted to
make porting easier from other database systems.

DROP TABLE is not supported with all innodb_force_recovery settings.
See
https://dev.mysql.com/doc/refman/8.0/en/forcing-innodb-recovery.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">536</field>
		<field name="name">DROP TABLESPACE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP [UNDO] TABLESPACE tablespace_name
    [ENGINE [=] engine_name]

This statement drops a tablespace that was previously created using
CREATE TABLESPACE. It is supported by the NDB and InnoDB storage
engines.

The UNDO keyword, introduced in MySQL 8.0.14, must be specified to drop
an undo tablespace. Only undo tablespaces created using CREATE UNDO
TABLESPACE syntax can be dropped. An undo tablespace must be in an
empty state before it can be dropped. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/innodb-undo-tablespaces.html.

ENGINE sets the storage engine that uses the tablespace, where
engine_name is the name of the storage engine. Currently, the values
InnoDB and NDB are supported. If not set, the value of
default_storage_engine is used. If it is not the same as the storage
engine used to create the tablespace, the DROP TABLESPACE statement
fails.

tablespace_name is a case-sensitive identifier in MySQL.

For an InnoDB general tablespace, all tables must be dropped from the
tablespace prior to a DROP TABLESPACE operation. If the tablespace is
not empty, DROP TABLESPACE returns an error.

An NDB tablespace to be dropped must not contain any data files; in
other words, before you can drop an NDB tablespace, you must first drop
each of its data files using ALTER TABLESPACE ... DROP DATAFILE.

Notes

o A general InnoDB tablespace is not deleted automatically when the
  last table in the tablespace is dropped. The tablespace must be
  dropped explicitly using DROP TABLESPACE tablespace_name.

o A DROP DATABASE operation can drop tables that belong to a general
  tablespace but it cannot drop the tablespace, even if the operation
  drops all tables that belong to the tablespace. The tablespace must
  be dropped explicitly using DROP TABLESPACE tablespace_name.

o Similar to the system tablespace, truncating or dropping tables
  stored in a general tablespace creates free space internally in the
  general tablespace .ibd data file which can only be used for new
  InnoDB data. Space is not released back to the operating system as it
  is for file-per-table tablespaces.

InnoDB Examples

This example demonstrates how to drop an InnoDB general tablespace. The
general tablespace ts1 is created with a single table. Before dropping
the tablespace, the table must be dropped.

mysql&gt; CREATE TABLESPACE `ts1` ADD DATAFILE 'ts1.ibd' Engine=InnoDB;

mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts1 Engine=InnoDB;

mysql&gt; DROP TABLE t1;

mysql&gt; DROP TABLESPACE ts1;

This example demonstrates dropping an undo tablespace. An undo
tablespace must be in an empty state before it can be dropped. For more
information, see
https://dev.mysql.com/doc/refman/8.0/en/innodb-undo-tablespaces.html.

mysql&gt; DROP UNDO TABLESPACE undo_003;

NDB Example

This example shows how to drop an NDB tablespace myts having a data
file named mydata-1.dat after first creating the tablespace, and
assumes the existence of a log file group named mylg (see [HELP CREATE
LOGFILE GROUP]).

mysql&gt; CREATE TABLESPACE myts
    -&gt;     ADD DATAFILE 'mydata-1.dat'
    -&gt;     USE LOGFILE GROUP mylg
    -&gt;     ENGINE=NDB;

You must remove all data files from the tablespace using ALTER
TABLESPACE, as shown here, before it can be dropped:

mysql&gt; ALTER TABLESPACE myts
    -&gt;     DROP DATAFILE 'mydata-1.dat'
    -&gt;     ENGINE=NDB;

mysql&gt; DROP TABLESPACE myts;

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-tablespace.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-tablespace.html</field>
	</row>
	<row>
		<field name="help_topic_id">537</field>
		<field name="name">DROP TRIGGER</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP TRIGGER [IF EXISTS] [schema_name.]trigger_name

This statement drops a trigger. The schema (database) name is optional.
If the schema is omitted, the trigger is dropped from the default
schema. DROP TRIGGER requires the TRIGGER privilege for the table
associated with the trigger.

Use IF EXISTS to prevent an error from occurring for a trigger that
does not exist. A NOTE is generated for a nonexistent trigger when
using IF EXISTS. See [HELP SHOW WARNINGS].

Triggers for a table are also dropped if you drop the table.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-trigger.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-trigger.html</field>
	</row>
	<row>
		<field name="help_topic_id">538</field>
		<field name="name">DROP VIEW</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
DROP VIEW [IF EXISTS]
    view_name [, view_name] ...
    [RESTRICT | CASCADE]

DROP VIEW removes one or more views. You must have the DROP privilege
for each view.

If any views named in the argument list do not exist, the statement
fails with an error indicating by name which nonexisting views it was
unable to drop, and no changes are made.

*Note*:

In MySQL 5.7 and earlier, DROP VIEW returns an error if any views named
in the argument list do not exist, but also drops all views in the list
that do exist. Due to the change in behavior in MySQL 8.0, a partially
completed DROP VIEW operation on a MySQL 5.7 replication source server
fails when replicated on a MySQL 8.0 replica. To avoid this failure
scenario, use IF EXISTS syntax in DROP VIEW statements to prevent an
error from occurring for views that do not exist. For more information,
see https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html.

The IF EXISTS clause prevents an error from occurring for views that
don't exist. When this clause is given, a NOTE is generated for each
nonexistent view. See [HELP SHOW WARNINGS].

RESTRICT and CASCADE, if given, are parsed and ignored.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-view.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-view.html</field>
	</row>
	<row>
		<field name="help_topic_id">539</field>
		<field name="name">RENAME TABLE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
RENAME TABLE
    tbl_name TO new_tbl_name
    [, tbl_name2 TO new_tbl_name2] ...

RENAME TABLE renames one or more tables. You must have ALTER and DROP
privileges for the original table, and CREATE and INSERT privileges for
the new table.

For example, to rename a table named old_table to new_table, use this
statement:

RENAME TABLE old_table TO new_table;

That statement is equivalent to the following ALTER TABLE statement:

ALTER TABLE old_table RENAME new_table;

RENAME TABLE, unlike ALTER TABLE, can rename multiple tables within a
single statement:

RENAME TABLE old_table1 TO new_table1,
             old_table2 TO new_table2,
             old_table3 TO new_table3;

Renaming operations are performed left to right. Thus, to swap two
table names, do this (assuming that a table with the intermediary name
tmp_table does not already exist):

RENAME TABLE old_table TO tmp_table,
             new_table TO old_table,
             tmp_table TO new_table;

Metadata locks on tables are acquired in name order, which in some
cases can make a difference in operation outcome when multiple
transactions execute concurrently. See
https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html.

As of MySQL 8.0.13, you can rename tables locked with a LOCK TABLES
statement, provided that they are locked with a WRITE lock or are the
product of renaming WRITE-locked tables from earlier steps in a
multiple-table rename operation. For example, this is permitted:

LOCK TABLE old_table1 WRITE;
RENAME TABLE old_table1 TO new_table1,
             new_table1 TO new_table2;

This is not permitted:

LOCK TABLE old_table1 READ;
RENAME TABLE old_table1 TO new_table1,
             new_table1 TO new_table2;

Prior to MySQL 8.0.13, to execute RENAME TABLE, there must be no tables
locked with LOCK TABLES.

With the transaction table locking conditions satisfied, the rename
operation is done atomically; no other session can access any of the
tables while the rename is in progress.

If any errors occur during a RENAME TABLE, the statement fails and no
changes are made.

You can use RENAME TABLE to move a table from one database to another:

RENAME TABLE current_db.tbl_name TO other_db.tbl_name;

Using this method to move all tables from one database to a different
one in effect renames the database (an operation for which MySQL has no
single statement), except that the original database continues to
exist, albeit with no tables.

Like RENAME TABLE, ALTER TABLE ... RENAME can also be used to move a
table to a different database. Regardless of the statement used, if the
rename operation would move the table to a database located on a
different file system, the success of the outcome is platform specific
and depends on the underlying operating system calls used to move table
files.

If a table has triggers, attempts to rename the table into a different
database fail with a Trigger in wrong schema (ER_TRG_IN_WRONG_SCHEMA
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_trg_in_wrong_schema)) error.

An unencrypted table can be moved to an encryption-enabled database and
vice versa. However, if the table_encryption_privilege_check variable
is enabled, the TABLE_ENCRYPTION_ADMIN privilege is required if the
table encryption setting differs from the default database encryption.

To rename TEMPORARY tables, RENAME TABLE does not work. Use ALTER TABLE
instead.

RENAME TABLE works for views, except that views cannot be renamed into
a different database.

Any privileges granted specifically for a renamed table or view are not
migrated to the new name. They must be changed manually.

RENAME TABLE tbl_name TO new_tbl_name changes internally generated
foreign key constraint names and user-defined foreign key constraint
names that begin with the string &quot;tbl_name_ibfk_&quot; to reflect the new
table name. InnoDB interprets foreign key constraint names that begin
with the string &quot;tbl_name_ibfk_&quot; as internally generated names.

Foreign key constraint names that point to the renamed table are
automatically updated unless there is a conflict, in which case the
statement fails with an error. A conflict occurs if the renamed
constraint name already exists. In such cases, you must drop and
re-create the foreign keys for them to function properly.

RENAME TABLE tbl_name TO new_tbl_name changes internally generated and
user-defined CHECK constraint names that begin with the string
&quot;tbl_name_chk_&quot; to reflect the new table name. MySQL interprets CHECK
constraint names that begin with the string &quot;tbl_name_chk_&quot; as
internally generated names. Example:

mysql&gt; SHOW CREATE TABLE t1\G
*************************** 1. row ***************************
       Table: t1
Create Table: CREATE TABLE `t1` (
  `i1` int(11) DEFAULT NULL,
  `i2` int(11) DEFAULT NULL,
  CONSTRAINT `t1_chk_1` CHECK ((`i1` &gt; 0)),
  CONSTRAINT `t1_chk_2` CHECK ((`i2` &lt; 0))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
1 row in set (0.02 sec)

mysql&gt; RENAME TABLE t1 TO t3;
Query OK, 0 rows affected (0.03 sec)

mysql&gt; SHOW CREATE TABLE t3\G
*************************** 1. row ***************************
       Table: t3
Create Table: CREATE TABLE `t3` (
  `i1` int(11) DEFAULT NULL,
  `i2` int(11) DEFAULT NULL,
  CONSTRAINT `t3_chk_1` CHECK ((`i1` &gt; 0)),
  CONSTRAINT `t3_chk_2` CHECK ((`i2` &lt; 0))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
1 row in set (0.01 sec)

URL: https://dev.mysql.com/doc/refman/8.0/en/rename-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/rename-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">540</field>
		<field name="name">TRUNCATE TABLE</field>
		<field name="help_category_id">40</field>
		<field name="description">Syntax:
TRUNCATE [TABLE] tbl_name

TRUNCATE TABLE empties a table completely. It requires the DROP
privilege. Logically, TRUNCATE TABLE is similar to a DELETE statement
that deletes all rows, or a sequence of DROP TABLE and CREATE TABLE
statements.

To achieve high performance, TRUNCATE TABLE bypasses the DML method of
deleting data. Thus, it does not cause ON DELETE triggers to fire, it
cannot be performed for InnoDB tables with parent-child foreign key
relationships, and it cannot be rolled back like a DML operation.
However, TRUNCATE TABLE operations on tables that use an atomic
DDL-supported storage engine are either fully committed or rolled back
if the server halts during their operation. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html.

Although TRUNCATE TABLE is similar to DELETE, it is classified as a DDL
statement rather than a DML statement. It differs from DELETE in the
following ways:

o Truncate operations drop and re-create the table, which is much
  faster than deleting rows one by one, particularly for large tables.

o Truncate operations cause an implicit commit, and so cannot be rolled
  back. See
  https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html.

o Truncation operations cannot be performed if the session holds an
  active table lock.

o TRUNCATE TABLE fails for an InnoDB table or NDB table if there are
  any FOREIGN KEY constraints from other tables that reference the
  table. Foreign key constraints between columns of the same table are
  permitted.

o Truncation operations do not return a meaningful value for the number
  of deleted rows. The usual result is &quot;0 rows affected,&quot; which should
  be interpreted as &quot;no information.&quot;

o As long as the table definition is valid, the table can be re-created
  as an empty table with TRUNCATE TABLE, even if the data or index
  files have become corrupted.

o Any AUTO_INCREMENT value is reset to its start value. This is true
  even for MyISAM and InnoDB, which normally do not reuse sequence
  values.

o When used with partitioned tables, TRUNCATE TABLE preserves the
  partitioning; that is, the data and index files are dropped and
  re-created, while the partition definitions are unaffected.

o The TRUNCATE TABLE statement does not invoke ON DELETE triggers.

o Truncating a corrupted InnoDB table is supported.

TRUNCATE TABLE is treated for purposes of binary logging and
replication as DDL rather than DML, and is always logged as a
statement.

URL: https://dev.mysql.com/doc/refman/8.0/en/truncate-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/truncate-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">541</field>
		<field name="name">CALL</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
CALL sp_name([parameter[,...]])
CALL sp_name[()]

The CALL statement invokes a stored procedure that was defined
previously with CREATE PROCEDURE.

Stored procedures that take no arguments can be invoked without
parentheses. That is, CALL p() and CALL p are equivalent.

CALL can pass back values to its caller using parameters that are
declared as OUT or INOUT parameters. When the procedure returns, a
client program can also obtain the number of rows affected for the
final statement executed within the routine: At the SQL level, call the
ROW_COUNT() function; from the C API, call the mysql_affected_rows()
(https://dev.mysql.com/doc/c-api/8.0/en/mysql-affected-rows.html)
function.

For information about the effect of unhandled conditions on procedure
parameters, see
https://dev.mysql.com/doc/refman/8.0/en/conditions-and-parameters.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/call.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/call.html</field>
	</row>
	<row>
		<field name="help_topic_id">542</field>
		<field name="name">DELETE</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
DELETE is a DML statement that removes rows from a table.

A DELETE statement can start with a WITH clause to define common table
expressions accessible within the DELETE. See
https://dev.mysql.com/doc/refman/8.0/en/with.html.

Single-Table Syntax

DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name [[AS] tbl_alias]
    [PARTITION (partition_name [, partition_name] ...)]
    [WHERE where_condition]
    [ORDER BY ...]
    [LIMIT row_count]

The DELETE statement deletes rows from tbl_name and returns the number
of deleted rows. To check the number of deleted rows, call the
ROW_COUNT() function described in
https://dev.mysql.com/doc/refman/8.0/en/information-functions.html.

Main Clauses

The conditions in the optional WHERE clause identify which rows to
delete. With no WHERE clause, all rows are deleted.

where_condition is an expression that evaluates to true for each row to
be deleted. It is specified as described in
https://dev.mysql.com/doc/refman/8.0/en/select.html.

If the ORDER BY clause is specified, the rows are deleted in the order
that is specified. The LIMIT clause places a limit on the number of
rows that can be deleted. These clauses apply to single-table deletes,
but not multi-table deletes.

Multiple-Table Syntax

DELETE [LOW_PRIORITY] [QUICK] [IGNORE]
    tbl_name[.*] [, tbl_name[.*]] ...
    FROM table_references
    [WHERE where_condition]

DELETE [LOW_PRIORITY] [QUICK] [IGNORE]
    FROM tbl_name[.*] [, tbl_name[.*]] ...
    USING table_references
    [WHERE where_condition]

Privileges

You need the DELETE privilege on a table to delete rows from it. You
need only the SELECT privilege for any columns that are only read, such
as those named in the WHERE clause.

Performance

When you do not need to know the number of deleted rows, the TRUNCATE
TABLE statement is a faster way to empty a table than a DELETE
statement with no WHERE clause. Unlike DELETE, TRUNCATE TABLE cannot be
used within a transaction or if you have a lock on the table. See [HELP
TRUNCATE TABLE] and [HELP LOCK TABLES].

The speed of delete operations may also be affected by factors
discussed in
https://dev.mysql.com/doc/refman/8.0/en/delete-optimization.html.

To ensure that a given DELETE statement does not take too much time,
the MySQL-specific LIMIT row_count clause for DELETE specifies the
maximum number of rows to be deleted. If the number of rows to delete
is larger than the limit, repeat the DELETE statement until the number
of affected rows is less than the LIMIT value.

Subqueries

You cannot delete from a table and select from the same table in a
subquery.

Partitioned Table Support

DELETE supports explicit partition selection using the PARTITION
clause, which takes a list of the comma-separated names of one or more
partitions or subpartitions (or both) from which to select rows to be
dropped. Partitions not included in the list are ignored. Given a
partitioned table t with a partition named p0, executing the statement
DELETE FROM t PARTITION (p0) has the same effect on the table as
executing ALTER TABLE t TRUNCATE PARTITION (p0); in both cases, all
rows in partition p0 are dropped.

PARTITION can be used along with a WHERE condition, in which case the
condition is tested only on rows in the listed partitions. For example,
DELETE FROM t PARTITION (p0) WHERE c &lt; 5 deletes rows only from
partition p0 for which the condition c &lt; 5 is true; rows in any other
partitions are not checked and thus not affected by the DELETE.

The PARTITION clause can also be used in multiple-table DELETE
statements. You can use up to one such option per table named in the
FROM option.

For more information and examples, see
https://dev.mysql.com/doc/refman/8.0/en/partitioning-selection.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/delete.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/delete.html</field>
	</row>
	<row>
		<field name="help_topic_id">543</field>
		<field name="name">DO</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
DO expr [, expr] ...

DO executes the expressions but does not return any results. In most
respects, DO is shorthand for SELECT expr, ..., but has the advantage
that it is slightly faster when you do not care about the result.

DO is useful primarily with functions that have side effects, such as
RELEASE_LOCK().

Example: This SELECT statement pauses, but also produces a result set:

mysql&gt; SELECT SLEEP(5);
+----------+
| SLEEP(5) |
+----------+
|        0 |
+----------+
1 row in set (5.02 sec)

DO, on the other hand, pauses without producing a result set.:

mysql&gt; DO SLEEP(5);
Query OK, 0 rows affected (4.99 sec)

This could be useful, for example in a stored function or trigger,
which prohibit statements that produce result sets.

DO only executes expressions. It cannot be used in all cases where
SELECT can be used. For example, DO id FROM t1 is invalid because it
references a table.

URL: https://dev.mysql.com/doc/refman/8.0/en/do.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/do.html</field>
	</row>
	<row>
		<field name="help_topic_id">544</field>
		<field name="name">EXCEPT</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
query_expression_body EXCEPT [ALL | DISTINCT] query_expression_body
    [EXCEPT [ALL | DISTINCT] query_expression_body]
    [...]

query_expression_body:
    See 

EXCEPT limits the result from the first query block to those rows which
are (also) not found in the second. As with UNION and INTERSECT, either
query block can make use of any of SELECT, TABLE, or VALUES. An example
using the tables a, b, and c defined in [HELP INTERSECT], is shown
here:

mysql&gt; TABLE a EXCEPT TABLE b;
+------+------+
| m    | n    |
+------+------+
|    2 |    3 |
+------+------+
1 row in set (0.00 sec)

mysql&gt; TABLE a EXCEPT TABLE c;
+------+------+
| m    | n    |
+------+------+
|    1 |    2 |
|    2 |    3 |
+------+------+
2 rows in set (0.00 sec)

mysql&gt; TABLE b EXCEPT TABLE c;
+------+------+
| m    | n    |
+------+------+
|    1 |    2 |
+------+------+
1 row in set (0.00 sec)

As with UNION and INTERSECT, if neither DISTINCT nor ALL is specified,
the default is DISTINCT.

DISTINCT removes duplicates found on either side of the relation, as
shown here:

mysql&gt; TABLE c EXCEPT DISTINCT TABLE a;
+------+------+
| m    | n    |
+------+------+
|    1 |    3 |
+------+------+
1 row in set (0.00 sec)

mysql&gt; TABLE c EXCEPT ALL TABLE a;
+------+------+
| m    | n    |
+------+------+
|    1 |    3 |
|    1 |    3 |
+------+------+
2 rows in set (0.00 sec)

(The first statement has the same effect as TABLE c EXCEPT TABLE a.)

Unlike UNION or INTERSECT, EXCEPT is not commutative---that is, the
result depends on the order of the operands, as shown here:

mysql&gt; TABLE a EXCEPT TABLE c;
+------+------+
| m    | n    |
+------+------+
|    1 |    2 |
|    2 |    3 |
+------+------+
2 rows in set (0.00 sec)

mysql&gt; TABLE c EXCEPT TABLE a;
+------+------+
| m    | n    |
+------+------+
|    1 |    3 |
+------+------+
1 row in set (0.00 sec)

As with UNION, the result sets to be compared must have the same number
of columns. Result set column types are also determined as for UNION.

EXCEPT was added in MySQL 8.0.31.

URL: https://dev.mysql.com/doc/refman/8.0/en/except.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/except.html</field>
	</row>
	<row>
		<field name="help_topic_id">545</field>
		<field name="name">HANDLER</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
HANDLER tbl_name OPEN [ [AS] alias]

HANDLER tbl_name READ index_name { = | &lt;= | &gt;= | &lt; | &gt; } (value1,value2,...)
    [ WHERE where_condition ] [LIMIT ... ]
HANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }
    [ WHERE where_condition ] [LIMIT ... ]
HANDLER tbl_name READ { FIRST | NEXT }
    [ WHERE where_condition ] [LIMIT ... ]

HANDLER tbl_name CLOSE

The HANDLER statement provides direct access to table storage engine
interfaces. It is available for InnoDB and MyISAM tables.

URL: https://dev.mysql.com/doc/refman/8.0/en/handler.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/handler.html</field>
	</row>
	<row>
		<field name="help_topic_id">546</field>
		<field name="name">IMPORT TABLE</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
IMPORT TABLE FROM sdi_file [, sdi_file] ...

The IMPORT TABLE statement imports MyISAM tables based on information
contained in .sdi (serialized dictionary information) metadata files.
IMPORT TABLE requires the FILE privilege to read the .sdi and table
content files, and the CREATE privilege for the table to be created.

Tables can be exported from one server using mysqldump to write a file
of SQL statements and imported into another server using mysql to
process the dump file. IMPORT TABLE provides a faster alternative using
the &quot;raw&quot; table files.

Prior to import, the files that provide the table content must be
placed in the appropriate schema directory for the import server, and
the .sdi file must be located in a directory accessible to the server.
For example, the .sdi file can be placed in the directory named by the
secure_file_priv system variable, or (if secure_file_priv is empty) in
a directory under the server data directory.

The following example describes how to export MyISAM tables named
employees and managers from the hr schema of one server and import them
into the hr schema of another server. The example uses these
assumptions (to perform a similar operation on your own system, modify
the path names as appropriate):

o For the export server, export_basedir represents its base directory,
  and its data directory is export_basedir/data.

o For the import server, import_basedir represents its base directory,
  and its data directory is import_basedir/data.

o Table files are exported from the export server into the /tmp/export
  directory and this directory is secure (not accessible to other
  users).

o The import server uses /tmp/mysql-files as the directory named by its
  secure_file_priv system variable.

To export tables from the export server, use this procedure:

1. Ensure a consistent snapshot by executing this statement to lock the
   tables so that they cannot be modified during export:

mysql&gt; FLUSH TABLES hr.employees, hr.managers WITH READ LOCK;

   While the lock is in effect, the tables can still be used, but only
   for read access.

2. At the file system level, copy the .sdi and table content files from
   the hr schema directory to the secure export directory:

  o The .sdi file is located in the hr schema directory, but might not
    have exactly the same basename as the table name. For example, the
    .sdi files for the employees and managers tables might be named
    employees_125.sdi and managers_238.sdi.

  o For a MyISAM table, the content files are its .MYD data file and
    .MYI index file.

   Given those file names, the copy commands look like this:

$&gt; cd export_basedir/data/hr
$&gt; cp employees_125.sdi /tmp/export
$&gt; cp managers_238.sdi /tmp/export
$&gt; cp employees.{MYD,MYI} /tmp/export
$&gt; cp managers.{MYD,MYI} /tmp/export

3. Unlock the tables:

mysql&gt; UNLOCK TABLES;

To import tables into the import server, use this procedure:

1. The import schema must exist. If necessary, execute this statement
   to create it:

mysql&gt; CREATE SCHEMA hr;

2. At the file system level, copy the .sdi files to the import server
   secure_file_priv directory, /tmp/mysql-files. Also, copy the table
   content files to the hr schema directory:

$&gt; cd /tmp/export
$&gt; cp employees_125.sdi /tmp/mysql-files
$&gt; cp managers_238.sdi /tmp/mysql-files
$&gt; cp employees.{MYD,MYI} import_basedir/data/hr
$&gt; cp managers.{MYD,MYI} import_basedir/data/hr

3. Import the tables by executing an IMPORT TABLE statement that names
   the .sdi files:

mysql&gt; IMPORT TABLE FROM
       '/tmp/mysql-files/employees.sdi',
       '/tmp/mysql-files/managers.sdi';

The .sdi file need not be placed in the import server directory named
by the secure_file_priv system variable if that variable is empty; it
can be in any directory accessible to the server, including the schema
directory for the imported table. If the .sdi file is placed in that
directory, however, it may be rewritten; the import operation creates a
new .sdi file for the table, which overwrites the old .sdi file if the
operation uses the same file name for the new file.

Each sdi_file value must be a string literal that names the .sdi file
for a table or is a pattern that matches .sdi files. If the string is a
pattern, any leading directory path and the .sdi file name suffix must
be given literally. Pattern characters are permitted only in the base
name part of the file name:

o ? matches any single character

o * matches any sequence of characters, including no characters

Using a pattern, the previous IMPORT TABLE statement could have been
written like this (assuming that the /tmp/mysql-files directory
contains no other .sdi files matching the pattern):

IMPORT TABLE FROM '/tmp/mysql-files/*.sdi';

To interpret the location of .sdi file path names, the server uses the
same rules for IMPORT TABLE as the server-side rules for LOAD DATA
(that is, the non-LOCAL rules). See [HELP LOAD DATA], paying particular
attention to the rules used to interpret relative path names.

IMPORT TABLE fails if the .sdi or table files cannot be located. After
importing a table, the server attempts to open it and reports as
warnings any problems detected. To attempt a repair to correct any
reported issues, use REPAIR TABLE.

IMPORT TABLE is not written to the binary log.

URL: https://dev.mysql.com/doc/refman/8.0/en/import-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/import-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">547</field>
		<field name="name">INSERT</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
    [INTO] tbl_name
    [PARTITION (partition_name [, partition_name] ...)]
    [(col_name [, col_name] ...)]
    { {VALUES | VALUE} (value_list) [, (value_list)] ... }
    [AS row_alias[(col_alias [, col_alias] ...)]]
    [ON DUPLICATE KEY UPDATE assignment_list]

INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
    [INTO] tbl_name
    [PARTITION (partition_name [, partition_name] ...)]
    SET assignment_list
    [AS row_alias[(col_alias [, col_alias] ...)]]
    [ON DUPLICATE KEY UPDATE assignment_list]

INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]
    [INTO] tbl_name
    [PARTITION (partition_name [, partition_name] ...)]
    [(col_name [, col_name] ...)]
    { SELECT ... 
      | TABLE table_name 
      | VALUES row_constructor_list
    }
    [ON DUPLICATE KEY UPDATE assignment_list]

value:
    {expr | DEFAULT}

value_list:
    value [, value] ...

row_constructor_list:
    ROW(value_list)[, ROW(value_list)][, ...]

assignment:
    col_name = 
          value
        | [row_alias.]col_name
        | [tbl_name.]col_name
        | [row_alias.]col_alias

assignment_list:
    assignment [, assignment] ...

INSERT inserts new rows into an existing table. The INSERT ... VALUES,
INSERT ... VALUES ROW(), and INSERT ... SET forms of the statement
insert rows based on explicitly specified values. The INSERT ... SELECT
form inserts rows selected from another table or tables. You can also
use INSERT ... TABLE in MySQL 8.0.19 and later to insert rows from a
single table. INSERT with an ON DUPLICATE KEY UPDATE clause enables
existing rows to be updated if a row to be inserted would cause a
duplicate value in a UNIQUE index or PRIMARY KEY. In MySQL 8.0.19 and
later, a row alias with one or more optional column aliases can be used
with ON DUPLICATE KEY UPDATE to refer to the row to be inserted.

For additional information about INSERT ... SELECT and INSERT ... ON
DUPLICATE KEY UPDATE, see [HELP INSERT SELECT], and
https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html.

In MySQL 8.0, the DELAYED keyword is accepted but ignored by the
server. For the reasons for this, see [HELP INSERT DELAYED],

Inserting into a table requires the INSERT privilege for the table. If
the ON DUPLICATE KEY UPDATE clause is used and a duplicate key causes
an UPDATE to be performed instead, the statement requires the UPDATE
privilege for the columns to be updated. For columns that are read but
not modified you need only the SELECT privilege (such as for a column
referenced only on the right hand side of an col_name=expr assignment
in an ON DUPLICATE KEY UPDATE clause).

When inserting into a partitioned table, you can control which
partitions and subpartitions accept new rows. The PARTITION clause
takes a list of the comma-separated names of one or more partitions or
subpartitions (or both) of the table. If any of the rows to be inserted
by a given INSERT statement do not match one of the partitions listed,
the INSERT statement fails with the error Found a row not matching the
given partition set. For more information and examples, see
https://dev.mysql.com/doc/refman/8.0/en/partitioning-selection.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/insert.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/insert.html</field>
	</row>
	<row>
		<field name="help_topic_id">548</field>
		<field name="name">INSERT SELECT</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]
    [INTO] tbl_name
    [PARTITION (partition_name [, partition_name] ...)]
    [(col_name [, col_name] ...)]
    {   SELECT ... 
      | TABLE table_name 
      | VALUES row_constructor_list
    }
    [ON DUPLICATE KEY UPDATE assignment_list]


value:
    {expr | DEFAULT}

value_list:
    value [, value] ...

row_constructor_list:
    ROW(value_list)[, ROW(value_list)][, ...]

assignment:
    col_name = 
          value
        | [row_alias.]col_name
        | [tbl_name.]col_name
        | [row_alias.]col_alias

assignment_list:
    assignment [, assignment] ...

With INSERT ... SELECT, you can quickly insert many rows into a table
from the result of a SELECT statement, which can select from one or
many tables. For example:

INSERT INTO tbl_temp2 (fld_id)
  SELECT tbl_temp1.fld_order_id
  FROM tbl_temp1 WHERE tbl_temp1.fld_order_id &gt; 100;

Beginning with MySQL 8.0.19, you can use a TABLE statement in place of
SELECT, as shown here:

INSERT INTO ta TABLE tb;

TABLE tb is equivalent to SELECT * FROM tb. It can be useful when
inserting all columns from the source table into the target table, and
no filtering with WHERE is required. In addition, the rows from TABLE
can be ordered by one or more columns using ORDER BY, and the number of
rows inserted can be limited using a LIMIT clause. For more
information, see [HELP TABLE].

URL: https://dev.mysql.com/doc/refman/8.0/en/insert-select.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/insert-select.html</field>
	</row>
	<row>
		<field name="help_topic_id">549</field>
		<field name="name">INSERT DELAYED</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
INSERT DELAYED ...

The DELAYED option for the INSERT statement is a MySQL extension to
standard SQL. In previous versions of MySQL, it can be used for certain
kinds of tables (such as MyISAM), such that when a client uses INSERT
DELAYED, it gets an okay from the server at once, and the row is queued
to be inserted when the table is not in use by any other thread.

DELAYED inserts and replaces were deprecated in MySQL 5.6. In MySQL
8.0, DELAYED is not supported. The server recognizes but ignores the
DELAYED keyword, handles the insert as a nondelayed insert, and
generates an ER_WARN_LEGACY_SYNTAX_CONVERTED warning: INSERT DELAYED is
no longer supported. The statement was converted to INSERT. The DELAYED
keyword is scheduled for removal in a future release.

URL: https://dev.mysql.com/doc/refman/8.0/en/insert-delayed.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/insert-delayed.html</field>
	</row>
	<row>
		<field name="help_topic_id">550</field>
		<field name="name">INTERSECT</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
query_expression_body INTERSECT [ALL | DISTINCT] query_expression_body
    [INTERSECT [ALL | DISTINCT] query_expression_body]
    [...]

query_expression_body:
    See 

INTERSECT limits the result from multiple query blocks to those rows
which are common to all. Example:

mysql&gt; TABLE a;
+------+------+
| m    | n    |
+------+------+
|    1 |    2 |
|    2 |    3 |
|    3 |    4 |
+------+------+
3 rows in set (0.00 sec)

mysql&gt; TABLE b;
+------+------+
| m    | n    |
+------+------+
|    1 |    2 |
|    1 |    3 |
|    3 |    4 |
+------+------+
3 rows in set (0.00 sec)

mysql&gt; TABLE c;
+------+------+
| m    | n    |
+------+------+
|    1 |    3 |
|    1 |    3 |
|    3 |    4 |
+------+------+
3 rows in set (0.00 sec)

mysql&gt; TABLE a INTERSECT TABLE b;
+------+------+
| m    | n    |
+------+------+
|    1 |    2 |
|    3 |    4 |
+------+------+
2 rows in set (0.00 sec)

mysql&gt; TABLE a INTERSECT TABLE c;
+------+------+
| m    | n    |
+------+------+
|    3 |    4 |
+------+------+
1 row in set (0.00 sec)

As with UNION and EXCEPT, if neither DISTINCT nor ALL is specified, the
default is DISTINCT.

DISTINCT can remove duplicates from either side of the intersection, as
shown here:

mysql&gt; TABLE c INTERSECT DISTINCT TABLE c;
+------+------+
| m    | n    |
+------+------+
|    1 |    3 |
|    3 |    4 |
+------+------+
2 rows in set (0.00 sec)

mysql&gt; TABLE c INTERSECT ALL TABLE c;
+------+------+
| m    | n    |
+------+------+
|    1 |    3 |
|    1 |    3 |
|    3 |    4 |
+------+------+
3 rows in set (0.00 sec)

(TABLE c INTERSECT TABLE c is the equivalent of the first of the two
statements just shown.)

As with UNION, the operands must have the same number of columns.
Result set column types are also determined as for UNION.

INTERSECT has greater precedence than and is evaluated before UNION and
EXCEPT, so that the two statements shown here are equivalent:

TABLE r EXCEPT TABLE s INTERSECT TABLE t;

TABLE r EXCEPT (TABLE s INTERSECT TABLE t);

For INTERSECT ALL, the maximum supported number of duplicates of any
unique row in the left hand table is 4294967295.

INTERSECT was added in MySQL 8.0.31.

URL: https://dev.mysql.com/doc/refman/8.0/en/intersect.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/intersect.html</field>
	</row>
	<row>
		<field name="help_topic_id">551</field>
		<field name="name">LOAD DATA</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
LOAD DATA
    [LOW_PRIORITY | CONCURRENT] [LOCAL]
    INFILE 'file_name'
    [REPLACE | IGNORE]
    INTO TABLE tbl_name
    [PARTITION (partition_name [, partition_name] ...)]
    [CHARACTER SET charset_name]
    [{FIELDS | COLUMNS}
        [TERMINATED BY 'string']
        [[OPTIONALLY] ENCLOSED BY 'char']
        [ESCAPED BY 'char']
    ]
    [LINES
        [STARTING BY 'string']
        [TERMINATED BY 'string']
    ]
    [IGNORE number {LINES | ROWS}]
    [(col_name_or_user_var
        [, col_name_or_user_var] ...)]
    [SET col_name={expr | DEFAULT}
        [, col_name={expr | DEFAULT}] ...]

The LOAD DATA statement reads rows from a text file into a table at a
very high speed. The file can be read from the server host or the
client host, depending on whether the LOCAL modifier is given. LOCAL
also affects data interpretation and error handling.

LOAD DATA is the complement of SELECT ... INTO OUTFILE. (See
https://dev.mysql.com/doc/refman/8.0/en/select-into.html.) To write
data from a table to a file, use SELECT ... INTO OUTFILE. To read the
file back into a table, use LOAD DATA. The syntax of the FIELDS and
LINES clauses is the same for both statements.

The mysqlimport utility provides another way to load data files; it
operates by sending a LOAD DATA statement to the server. See
https://dev.mysql.com/doc/refman/8.0/en/mysqlimport.html.

For information about the efficiency of INSERT versus LOAD DATA and
speeding up LOAD DATA, see
https://dev.mysql.com/doc/refman/8.0/en/insert-optimization.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/load-data.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/load-data.html</field>
	</row>
	<row>
		<field name="help_topic_id">552</field>
		<field name="name">LOAD XML</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
LOAD XML
    [LOW_PRIORITY | CONCURRENT] [LOCAL]
    INFILE 'file_name'
    [REPLACE | IGNORE]
    INTO TABLE [db_name.]tbl_name
    [CHARACTER SET charset_name]
    [ROWS IDENTIFIED BY '&lt;tagname&gt;']
    [IGNORE number {LINES | ROWS}]
    [(field_name_or_user_var
        [, field_name_or_user_var] ...)]
    [SET col_name={expr | DEFAULT}
        [, col_name={expr | DEFAULT}] ...]

The LOAD XML statement reads data from an XML file into a table. The
file_name must be given as a literal string. The tagname in the
optional ROWS IDENTIFIED BY clause must also be given as a literal
string, and must be surrounded by angle brackets (&lt; and &gt;).

LOAD XML acts as the complement of running the mysql client in XML
output mode (that is, starting the client with the --xml option). To
write data from a table to an XML file, you can invoke the mysql client
with the --xml and -e options from the system shell, as shown here:

$&gt; mysql --xml -e 'SELECT * FROM mydb.mytable' &gt; file.xml

To read the file back into a table, use LOAD XML. By default, the &lt;row&gt;
element is considered to be the equivalent of a database table row;
this can be changed using the ROWS IDENTIFIED BY clause.

This statement supports three different XML formats:

o Column names as attributes and column values as attribute values:

&lt;row column1=&quot;value1&quot; column2=&quot;value2&quot; .../&gt;

o Column names as tags and column values as the content of these tags:

&lt;row&gt;
  &lt;column1&gt;value1&lt;/column1&gt;
  &lt;column2&gt;value2&lt;/column2&gt;
&lt;/row&gt;

o Column names are the name attributes of &lt;field&gt; tags, and values are
  the contents of these tags:

&lt;row&gt;
  &lt;field name='column1'&gt;value1&lt;/field&gt;
  &lt;field name='column2'&gt;value2&lt;/field&gt;
&lt;/row&gt;

  This is the format used by other MySQL tools, such as mysqldump.

All three formats can be used in the same XML file; the import routine
automatically detects the format for each row and interprets it
correctly. Tags are matched based on the tag or attribute name and the
column name.

Prior to MySQL 8.0.21, LOAD XML did not support CDATA sections in the
source XML. (Bug #30753708, Bug #98199)

The following clauses work essentially the same way for LOAD XML as
they do for LOAD DATA:

o LOW_PRIORITY or CONCURRENT

o LOCAL

o REPLACE or IGNORE

o CHARACTER SET

o SET

See [HELP LOAD DATA], for more information about these clauses.

(field_name_or_user_var, ...) is a list of one or more comma-separated
XML fields or user variables. The name of a user variable used for this
purpose must match the name of a field from the XML file, prefixed with
@. You can use field names to select only desired fields. User
variables can be employed to store the corresponding field values for
subsequent re-use.

The IGNORE number LINES or IGNORE number ROWS clause causes the first
number rows in the XML file to be skipped. It is analogous to the LOAD
DATA statement's IGNORE ... LINES clause.

URL: https://dev.mysql.com/doc/refman/8.0/en/load-xml.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/load-xml.html</field>
	</row>
	<row>
		<field name="help_topic_id">553</field>
		<field name="name">PARENTHESIZED QUERY EXPRESSIONS</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
parenthesized_query_expression:
    ( query_expression [order_by_clause] [limit_clause] )
      [order_by_clause]
      [limit_clause]
      [into_clause]

query_expression:
    query_block [set_op query_block [set_op query_block ...]]
      [order_by_clause]
      [limit_clause]
      [into_clause]

query_block:
    SELECT ... | TABLE | VALUES

order_by_clause:
    ORDER BY as for SELECT

limit_clause:
    LIMIT as for SELECT

into_clause:
    INTO as for SELECT

set_op:
    UNION | INTERSECT | EXCEPT

MySQL 8.0.22 and higher supports parenthesized query expressions
according to the preceding syntax. At its simplest, a parenthesized
query expression contains a single SELECT or other statement returning
a result set and no following optional clauses:

(SELECT 1);
(SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'mysql');

TABLE t;

VALUES ROW(2, 3, 4), ROW(1, -2, 3);

(Support for the TABLE and VALUES statements is available beginning
with MySQL 8.0.19.)

A parenthesized query expression can also contain queries linked by one
or more set operations such as UNION, and end with any or all of the
optional clauses:

mysql&gt; (SELECT 1 AS result UNION SELECT 2);
+--------+
| result |
+--------+
|      1 |
|      2 |
+--------+
mysql&gt; (SELECT 1 AS result UNION SELECT 2) LIMIT 1;
+--------+
| result |
+--------+
|      1 |
+--------+
mysql&gt; (SELECT 1 AS result UNION SELECT 2) LIMIT 1 OFFSET 1;
+--------+
| result |
+--------+
|      2 |
+--------+
mysql&gt; (SELECT 1 AS result UNION SELECT 2)
       ORDER BY result DESC LIMIT 1;
+--------+
| result |
+--------+
|      2 |
+--------+
mysql&gt; (SELECT 1 AS result UNION SELECT 2)
       ORDER BY result DESC LIMIT 1 OFFSET 1;
+--------+
| result |
+--------+
|      1 |
+--------+
mysql&gt; (SELECT 1 AS result UNION SELECT 3 UNION SELECT 2)
       ORDER BY result LIMIT 1 OFFSET 1 INTO @var;
mysql&gt; SELECT @var;
+------+
| @var |
+------+
|    2 |
+------+

In addition to UNION, the INTERSECT and EXCEPT set operators are
available beginning with MySQL 8.0.31. INTERSECT acts before UNION and
EXCEPT, so that the following two statements are equivalent:

SELECT a FROM t1 EXCEPT SELECT b FROM t2 INTERSECT SELECT c FROM t3;

SELECT a FROM t1 EXCEPT (SELECT b FROM t2 INTERSECT SELECT c FROM t3);

Parenthesized query expressions are also used as query expressions, so
a query expression, usually composed of query blocks, may also consist
of parenthesized query expressions:

(TABLE t1 ORDER BY a) UNION (TABLE t2 ORDER BY b) ORDER BY z;

Query blocks may have trailing ORDER BY and LIMIT clauses, which are
applied before the outer set operation, ORDER BY, and LIMIT.

You cannot have a query block with a trailing ORDER BY or LIMIT without
wrapping it in parentheses but parentheses may be used for enforcement
in various ways:

o To enforce LIMIT on each query block:

(SELECT 1 LIMIT 1) UNION (VALUES ROW(2) LIMIT 1);

(VALUES ROW(1), ROW(2) LIMIT 2) EXCEPT (SELECT 2 LIMIT 1);

o To enforce LIMIT on both query blocks and the entire query
  expression:

(SELECT 1 LIMIT 1) UNION (SELECT 2 LIMIT 1) LIMIT 1;

o To enforce LIMIT on the entire query expression (with no
  parentheses):

VALUES ROW(1), ROW(2) INTERSECT VALUES ROW(2), ROW(1) LIMIT 1;

o Hybrid enforcement: LIMIT on the first query block and on the entire
  query expression:

(SELECT 1 LIMIT 1) UNION SELECT 2 LIMIT 1;

The syntax described in this section is subject to certain
restrictions:

o A trailing INTO clause for a query expression is not permitted if
  there is another INTO clause inside parentheses.

o Prior to MySQL 8.0.31, when ORDER BY or LIMIT occurred within a
  parenthesized query expression and was also applied in the outer
  query, the result was undefined. This is not an issue in MySQL 8.0.31
  and later, where this is handled in accordance with the SQL standard.

  Prior to MySQL 8.0.31, parenthesized query expressions did not permit
  multiple levels of ORDER BY or LIMIT operations, and statements
  containing these were rejected with ER_NOT_SUPPORTED_YET
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_not_supported_yet). In MySQL 8.0.31 and later, this
  restriction is lifted, and nested parenthesized query expressions are
  permitted. The maximum level of nesting supported is 63; this is
  after any simplifications or merges have been performed by the
  parser.

  An example of such a statement is shown here:

mysql&gt; (SELECT 'a' UNION SELECT 'b' LIMIT 2) LIMIT 3;
+---+
| a |
+---+
| a |
| b |
+---+
2 rows in set (0.00 sec)

  You should be aware that, in MySQL 8.0.31 and later, when collapsing
  parenthesized expression bodies, MySQL follows SQL standard
  semantics, so that a higher outer limit cannot override an inner
  lower one. For example, (SELECT ... LIMIT 5) LIMIT 10 can return no
  more than five rows.

URL: https://dev.mysql.com/doc/refman/8.0/en/parenthesized-query-expressions.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/parenthesized-query-expressions.html</field>
	</row>
	<row>
		<field name="help_topic_id">554</field>
		<field name="name">REPLACE</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
REPLACE [LOW_PRIORITY | DELAYED]
    [INTO] tbl_name
    [PARTITION (partition_name [, partition_name] ...)]
    [(col_name [, col_name] ...)]
    { {VALUES | VALUE} (value_list) [, (value_list)] ...
      |
      VALUES row_constructor_list
    }

REPLACE [LOW_PRIORITY | DELAYED]
    [INTO] tbl_name
    [PARTITION (partition_name [, partition_name] ...)]
    SET assignment_list

REPLACE [LOW_PRIORITY | DELAYED]
    [INTO] tbl_name
    [PARTITION (partition_name [, partition_name] ...)]
    [(col_name [, col_name] ...)]
    {SELECT ... | TABLE table_name}

value:
    {expr | DEFAULT}

value_list:
    value [, value] ...

row_constructor_list:
    ROW(value_list)[, ROW(value_list)][, ...]

assignment:
    col_name = value

assignment_list:
    assignment [, assignment] ...

REPLACE works exactly like INSERT, except that if an old row in the
table has the same value as a new row for a PRIMARY KEY or a UNIQUE
index, the old row is deleted before the new row is inserted. See [HELP
INSERT].

REPLACE is a MySQL extension to the SQL standard. It either inserts, or
deletes and inserts. For another MySQL extension to standard SQL---that
either inserts or updates---see
https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html.

DELAYED inserts and replaces were deprecated in MySQL 5.6. In MySQL
8.0, DELAYED is not supported. The server recognizes but ignores the
DELAYED keyword, handles the replace as a nondelayed replace, and
generates an ER_WARN_LEGACY_SYNTAX_CONVERTED warning: REPLACE DELAYED
is no longer supported. The statement was converted to REPLACE. The
DELAYED keyword is scheduled for removal in a future release. release.

*Note*:

REPLACE makes sense only if a table has a PRIMARY KEY or UNIQUE index.
Otherwise, it becomes equivalent to INSERT, because there is no index
to be used to determine whether a new row duplicates another.

Values for all columns are taken from the values specified in the
REPLACE statement. Any missing columns are set to their default values,
just as happens for INSERT. You cannot refer to values from the current
row and use them in the new row. If you use an assignment such as SET
col_name = col_name + 1, the reference to the column name on the right
hand side is treated as DEFAULT(col_name), so the assignment is
equivalent to SET col_name = DEFAULT(col_name) + 1.

In MySQL 8.0.19 and later, you can specify the column values that
REPLACE attempts to insert using VALUES ROW().

To use REPLACE, you must have both the INSERT and DELETE privileges for
the table.

If a generated column is replaced explicitly, the only permitted value
is DEFAULT. For information about generated columns, see
https://dev.mysql.com/doc/refman/8.0/en/create-table-generated-columns.
html.

REPLACE supports explicit partition selection using the PARTITION
clause with a list of comma-separated names of partitions,
subpartitions, or both. As with INSERT, if it is not possible to insert
the new row into any of these partitions or subpartitions, the REPLACE
statement fails with the error Found a row not matching the given
partition set. For more information and examples, see
https://dev.mysql.com/doc/refman/8.0/en/partitioning-selection.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/replace.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/replace.html</field>
	</row>
	<row>
		<field name="help_topic_id">555</field>
		<field name="name">SELECT</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
SELECT
    [ALL | DISTINCT | DISTINCTROW ]
    [HIGH_PRIORITY]
    [STRAIGHT_JOIN]
    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]
    [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]
    select_expr [, select_expr] ...
    [into_option]
    [FROM table_references
      [PARTITION partition_list]]
    [WHERE where_condition]
    [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]]
    [HAVING where_condition]
    [WINDOW window_name AS (window_spec)
        [, window_name AS (window_spec)] ...]
    [ORDER BY {col_name | expr | position}
      [ASC | DESC], ... [WITH ROLLUP]]
    [LIMIT {[offset,] row_count | row_count OFFSET offset}]
    [into_option]
    [FOR {UPDATE | SHARE}
        [OF tbl_name [, tbl_name] ...]
        [NOWAIT | SKIP LOCKED]
      | LOCK IN SHARE MODE]
    [into_option]

into_option: {
    INTO OUTFILE 'file_name'
        [CHARACTER SET charset_name]
        export_options
  | INTO DUMPFILE 'file_name'
  | INTO var_name [, var_name] ...
}

SELECT is used to retrieve rows selected from one or more tables, and
can include UNION operations and subqueries. Beginning with MySQL
8.0.31, INTERSECT and EXCEPT operations are also supported. The UNION,
INTERSECT, and EXCEPT operators are described in more detail later in
this section. See also
https://dev.mysql.com/doc/refman/8.0/en/subqueries.html.

A SELECT statement can start with a WITH clause to define common table
expressions accessible within the SELECT. See
https://dev.mysql.com/doc/refman/8.0/en/with.html.

The most commonly used clauses of SELECT statements are these:

o Each select_expr indicates a column that you want to retrieve. There
  must be at least one select_expr.

o table_references indicates the table or tables from which to retrieve
  rows. Its syntax is described in [HELP JOIN].

o SELECT supports explicit partition selection using the PARTITION
  clause with a list of partitions or subpartitions (or both) following
  the name of the table in a table_reference (see [HELP JOIN]). In this
  case, rows are selected only from the partitions listed, and any
  other partitions of the table are ignored. For more information and
  examples, see
  https://dev.mysql.com/doc/refman/8.0/en/partitioning-selection.html.

o The WHERE clause, if given, indicates the condition or conditions
  that rows must satisfy to be selected. where_condition is an
  expression that evaluates to true for each row to be selected. The
  statement selects all rows if there is no WHERE clause.

  In the WHERE expression, you can use any of the functions and
  operators that MySQL supports, except for aggregate (group)
  functions. See
  https://dev.mysql.com/doc/refman/8.0/en/expressions.html, and
  https://dev.mysql.com/doc/refman/8.0/en/functions.html.

SELECT can also be used to retrieve rows computed without reference to
any table.

URL: https://dev.mysql.com/doc/refman/8.0/en/select.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/select.html</field>
	</row>
	<row>
		<field name="help_topic_id">556</field>
		<field name="name">DUAL</field>
		<field name="help_category_id">41</field>
		<field name="description">You are permitted to specify DUAL as a dummy table name in situations
where no tables are referenced:

mysql&gt; SELECT 1 + 1 FROM DUAL;
        -&gt; 2

DUAL is purely for the convenience of people who require that all
SELECT statements should have FROM and possibly other clauses. MySQL
may ignore the clauses. MySQL does not require FROM DUAL if no tables
are referenced.

URL: https://dev.mysql.com/doc/refman/8.0/en/select.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/select.html</field>
	</row>
	<row>
		<field name="help_topic_id">557</field>
		<field name="name">JOIN</field>
		<field name="help_category_id">41</field>
		<field name="description">MySQL supports the following JOIN syntax for the table_references part
of SELECT statements and multiple-table DELETE and UPDATE statements:

table_references:
    escaped_table_reference [, escaped_table_reference] ...

escaped_table_reference: {
    table_reference
  | { OJ table_reference }
}

table_reference: {
    table_factor
  | joined_table
}

table_factor: {
    tbl_name [PARTITION (partition_names)]
        [[AS] alias] [index_hint_list]
  | [LATERAL] table_subquery [AS] alias [(col_list)]
  | ( table_references )
}

joined_table: {
    table_reference {[INNER | CROSS] JOIN | STRAIGHT_JOIN} table_factor [join_specification]
  | table_reference {LEFT|RIGHT} [OUTER] JOIN table_reference join_specification
  | table_reference NATURAL [INNER | {LEFT|RIGHT} [OUTER]] JOIN table_factor
}

join_specification: {
    ON search_condition
  | USING (join_column_list)
}

join_column_list:
    column_name [, column_name] ...

index_hint_list:
    index_hint [, index_hint] ...

index_hint: {
    USE {INDEX|KEY}
      [FOR {JOIN|ORDER BY|GROUP BY}] ([index_list])
  | {IGNORE|FORCE} {INDEX|KEY}
      [FOR {JOIN|ORDER BY|GROUP BY}] (index_list)
}

index_list:
    index_name [, index_name] ...

A table reference is also known as a join expression.

A table reference (when it refers to a partitioned table) may contain a
PARTITION clause, including a list of comma-separated partitions,
subpartitions, or both. This option follows the name of the table and
precedes any alias declaration. The effect of this option is that rows
are selected only from the listed partitions or subpartitions. Any
partitions or subpartitions not named in the list are ignored. For more
information and examples, see
https://dev.mysql.com/doc/refman/8.0/en/partitioning-selection.html.

The syntax of table_factor is extended in MySQL in comparison with
standard SQL. The standard accepts only table_reference, not a list of
them inside a pair of parentheses.

This is a conservative extension if each comma in a list of
table_reference items is considered as equivalent to an inner join. For
example:

SELECT * FROM t1 LEFT JOIN (t2, t3, t4)
                 ON (t2.a = t1.a AND t3.b = t1.b AND t4.c = t1.c)

is equivalent to:

SELECT * FROM t1 LEFT JOIN (t2 CROSS JOIN t3 CROSS JOIN t4)
                 ON (t2.a = t1.a AND t3.b = t1.b AND t4.c = t1.c)

In MySQL, JOIN, CROSS JOIN, and INNER JOIN are syntactic equivalents
(they can replace each other). In standard SQL, they are not
equivalent. INNER JOIN is used with an ON clause, CROSS JOIN is used
otherwise.

In general, parentheses can be ignored in join expressions containing
only inner join operations. MySQL also supports nested joins. See
https://dev.mysql.com/doc/refman/8.0/en/nested-join-optimization.html.

Index hints can be specified to affect how the MySQL optimizer makes
use of indexes. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/index-hints.html. Optimizer
hints and the optimizer_switch system variable are other ways to
influence optimizer use of indexes. See
https://dev.mysql.com/doc/refman/8.0/en/optimizer-hints.html, and
https://dev.mysql.com/doc/refman/8.0/en/switchable-optimizations.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/join.html

</field>
		<field name="example">SELECT left_tbl.*
  FROM left_tbl LEFT JOIN right_tbl ON left_tbl.id = right_tbl.id
  WHERE right_tbl.id IS NULL;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/join.html</field>
	</row>
	<row>
		<field name="help_topic_id">558</field>
		<field name="name">TABLE</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
TABLE is a DML statement introduced in MySQL 8.0.19 which returns rows
and columns of the named table.

TABLE table_name [ORDER BY column_name] [LIMIT number [OFFSET number]]

The TABLE statement in some ways acts like SELECT. Given the existence
of a table named t, the following two statements produce identical
output:

TABLE t;

SELECT * FROM t;

You can order and limit the number of rows produced by TABLE using
ORDER BY and LIMIT clauses, respectively. These function identically to
the same clauses when used with SELECT (including an optional OFFSET
clause with LIMIT), as you can see here:

mysql&gt; TABLE t;
+----+----+
| a  | b  |
+----+----+
|  1 |  2 |
|  6 |  7 |
|  9 |  5 |
| 10 | -4 |
| 11 | -1 |
| 13 |  3 |
| 14 |  6 |
+----+----+
7 rows in set (0.00 sec)

mysql&gt; TABLE t ORDER BY b;
+----+----+
| a  | b  |
+----+----+
| 10 | -4 |
| 11 | -1 |
|  1 |  2 |
| 13 |  3 |
|  9 |  5 |
| 14 |  6 |
|  6 |  7 |
+----+----+
7 rows in set (0.00 sec)

mysql&gt; TABLE t LIMIT 3;
+---+---+
| a | b |
+---+---+
| 1 | 2 |
| 6 | 7 |
| 9 | 5 |
+---+---+
3 rows in set (0.00 sec)

mysql&gt; TABLE t ORDER BY b LIMIT 3;
+----+----+
| a  | b  |
+----+----+
| 10 | -4 |
| 11 | -1 |
|  1 |  2 |
+----+----+
3 rows in set (0.00 sec)

mysql&gt; TABLE t ORDER BY b LIMIT 3 OFFSET 2;
+----+----+
| a  | b  |
+----+----+
|  1 |  2 |
| 13 |  3 |
|  9 |  5 |
+----+----+
3 rows in set (0.00 sec)

TABLE differs from SELECT in two key respects:

o TABLE always displays all columns of the table.

  Exception: The output of TABLE does not include invisible columns.
  See https://dev.mysql.com/doc/refman/8.0/en/invisible-columns.html.

o TABLE does not allow for any arbitrary filtering of rows; that is,
  TABLE does not support any WHERE clause.

For limiting which table columns are returned, filtering rows beyond
what can be accomplished using ORDER BY and LIMIT, or both, use SELECT.

TABLE can be used with temporary tables.

URL: https://dev.mysql.com/doc/refman/8.0/en/table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/table.html</field>
	</row>
	<row>
		<field name="help_topic_id">559</field>
		<field name="name">UPDATE</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
UPDATE is a DML statement that modifies rows in a table.

An UPDATE statement can start with a WITH clause to define common table
expressions accessible within the UPDATE. See
https://dev.mysql.com/doc/refman/8.0/en/with.html.

Single-table syntax:

UPDATE [LOW_PRIORITY] [IGNORE] table_reference
    SET assignment_list
    [WHERE where_condition]
    [ORDER BY ...]
    [LIMIT row_count]

value:
    {expr | DEFAULT}

assignment:
    col_name = value

assignment_list:
    assignment [, assignment] ...

Multiple-table syntax:

UPDATE [LOW_PRIORITY] [IGNORE] table_references
    SET assignment_list
    [WHERE where_condition]

For the single-table syntax, the UPDATE statement updates columns of
existing rows in the named table with new values. The SET clause
indicates which columns to modify and the values they should be given.
Each value can be given as an expression, or the keyword DEFAULT to set
a column explicitly to its default value. The WHERE clause, if given,
specifies the conditions that identify which rows to update. With no
WHERE clause, all rows are updated. If the ORDER BY clause is
specified, the rows are updated in the order that is specified. The
LIMIT clause places a limit on the number of rows that can be updated.

For the multiple-table syntax, UPDATE updates rows in each table named
in table_references that satisfy the conditions. Each matching row is
updated once, even if it matches the conditions multiple times. For
multiple-table syntax, ORDER BY and LIMIT cannot be used.

For partitioned tables, both the single-single and multiple-table forms
of this statement support the use of a PARTITION clause as part of a
table reference. This option takes a list of one or more partitions or
subpartitions (or both). Only the partitions (or subpartitions) listed
are checked for matches, and a row that is not in any of these
partitions or subpartitions is not updated, whether it satisfies the
where_condition or not.

*Note*:

Unlike the case when using PARTITION with an INSERT or REPLACE
statement, an otherwise valid UPDATE ... PARTITION statement is
considered successful even if no rows in the listed partitions (or
subpartitions) match the where_condition.

For more information and examples, see
https://dev.mysql.com/doc/refman/8.0/en/partitioning-selection.html.

where_condition is an expression that evaluates to true for each row to
be updated. For expression syntax, see
https://dev.mysql.com/doc/refman/8.0/en/expressions.html.

table_references and where_condition are specified as described in
https://dev.mysql.com/doc/refman/8.0/en/select.html.

You need the UPDATE privilege only for columns referenced in an UPDATE
that are actually updated. You need only the SELECT privilege for any
columns that are read but not modified.

The UPDATE statement supports the following modifiers:

o With the LOW_PRIORITY modifier, execution of the UPDATE is delayed
  until no other clients are reading from the table. This affects only
  storage engines that use only table-level locking (such as MyISAM,
  MEMORY, and MERGE).

o With the IGNORE modifier, the update statement does not abort even if
  errors occur during the update. Rows for which duplicate-key
  conflicts occur on a unique key value are not updated. Rows updated
  to values that would cause data conversion errors are updated to the
  closest valid values instead. For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#ignore-effect-o
  n-execution.

URL: https://dev.mysql.com/doc/refman/8.0/en/update.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/update.html</field>
	</row>
	<row>
		<field name="help_topic_id">560</field>
		<field name="name">UNION</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
query_expression_body UNION [ALL | DISTINCT] query_block
    [UNION [ALL | DISTINCT] query_expression_body]
    [...]

query_expression_body:
    See 

UNION combines the result from multiple query blocks into a single
result set. This example uses SELECT statements:

mysql&gt; SELECT 1, 2;
+---+---+
| 1 | 2 |
+---+---+
| 1 | 2 |
+---+---+
mysql&gt; SELECT 'a', 'b';
+---+---+
| a | b |
+---+---+
| a | b |
+---+---+
mysql&gt; SELECT 1, 2 UNION SELECT 'a', 'b';
+---+---+
| 1 | 2 |
+---+---+
| 1 | 2 |
| a | b |
+---+---+

UNION Handing in MySQL 8.0 Compared to MySQL 5.7

In MySQL 8.0, the parser rules for SELECT and UNION were refactored to
be more consistent (the same SELECT syntax applies uniformly in each
such context) and reduce duplication. Compared to MySQL 5.7, several
user-visible effects resulted from this work, which may require
rewriting of certain statements:

o NATURAL JOIN permits an optional INNER keyword (NATURAL INNER JOIN),
  in compliance with standard SQL.

o Right-deep joins without parentheses are permitted (for example, ...
  JOIN ... JOIN ... ON ... ON), in compliance with standard SQL.

o STRAIGHT_JOIN now permits a USING clause, similar to other inner
  joins.

o The parser accepts parentheses around query expressions. For example,
  (SELECT ... UNION SELECT ...) is permitted. See also [HELP
  parenthesized query expressions].

o The parser better conforms to the documented permitted placement of
  the SQL_CACHE and SQL_NO_CACHE query modifiers.

o Left-hand nesting of unions, previously permitted only in subqueries,
  is now permitted in top-level statements. For example, this statement
  is now accepted as valid:

(SELECT 1 UNION SELECT 1) UNION SELECT 1;

o Locking clauses (FOR UPDATE, LOCK IN SHARE MODE) are allowed only in
  non-UNION queries. This means that parentheses must be used for
  SELECT statements containing locking clauses. This statement is no
  longer accepted as valid:

SELECT 1 FOR UPDATE UNION SELECT 1 FOR UPDATE;

  Instead, write the statement like this:

(SELECT 1 FOR UPDATE) UNION (SELECT 1 FOR UPDATE);

URL: https://dev.mysql.com/doc/refman/8.0/en/union.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/union.html</field>
	</row>
	<row>
		<field name="help_topic_id">561</field>
		<field name="name">VALUES STATEMENT</field>
		<field name="help_category_id">41</field>
		<field name="description">Syntax:
VALUES row_constructor_list [ORDER BY column_designator] [LIMIT number]

row_constructor_list:
    ROW(value_list)[, ROW(value_list)][, ...]

value_list:
    value[, value][, ...]

column_designator:
    column_index

The VALUES statement consists of the VALUES keyword followed by a list
of one or more row constructors, separated by commas. A row constructor
consists of the ROW() row constructor clause with a value list of one
or more scalar values enclosed in the parentheses. A value can be a
literal of any MySQL data type or an expression that resolves to a
scalar value.

ROW() cannot be empty (but each of the supplied scalar values can be
NULL). Each ROW() in the same VALUES statement must have the same
number of values in its value list.

The DEFAULT keyword is not supported by VALUES and causes a syntax
error, except when it is used to supply values in an INSERT statement.

The output of VALUES is a table:

mysql&gt; VALUES ROW(1,-2,3), ROW(5,7,9), ROW(4,6,8);
+----------+----------+----------+
| column_0 | column_1 | column_2 |
+----------+----------+----------+
|        1 |       -2 |        3 |
|        5 |        7 |        9 |
|        4 |        6 |        8 |
+----------+----------+----------+
3 rows in set (0.00 sec)

The columns of the table output from VALUES have the implicitly named
columns column_0, column_1, column_2, and so on, always beginning with
0. This fact can be used to order the rows by column using an optional
ORDER BY clause in the same way that this clause works with a SELECT
statement, as shown here:

mysql&gt; VALUES ROW(1,-2,3), ROW(5,7,9), ROW(4,6,8) ORDER BY column_1;
+----------+----------+----------+
| column_0 | column_1 | column_2 |
+----------+----------+----------+
|        1 |       -2 |        3 |
|        4 |        6 |        8 |
|        5 |        7 |        9 |
+----------+----------+----------+
3 rows in set (0.00 sec)

In MySQL 8.0.21 and later, the VALUES statement also supports a LIMIT
clause for limiting the number of rows in the output. (Previously,
LIMIT was allowed but did nothing.)

URL: https://dev.mysql.com/doc/refman/8.0/en/values.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/values.html</field>
	</row>
	<row>
		<field name="help_topic_id">562</field>
		<field name="name">START TRANSACTION</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
START TRANSACTION
    [transaction_characteristic [, transaction_characteristic] ...]

transaction_characteristic: {
    WITH CONSISTENT SNAPSHOT
  | READ WRITE
  | READ ONLY
}

BEGIN [WORK]
COMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]
ROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]
SET autocommit = {0 | 1}

These statements provide control over use of transactions:

o START TRANSACTION or BEGIN start a new transaction.

o COMMIT commits the current transaction, making its changes permanent.

o ROLLBACK rolls back the current transaction, canceling its changes.

o SET autocommit disables or enables the default autocommit mode for
  the current session.

By default, MySQL runs with autocommit mode enabled. This means that,
when not otherwise inside a transaction, each statement is atomic, as
if it were surrounded by START TRANSACTION and COMMIT. You cannot use
ROLLBACK to undo the effect; however, if an error occurs during
statement execution, the statement is rolled back.

To disable autocommit mode implicitly for a single series of
statements, use the START TRANSACTION statement:

START TRANSACTION;
SELECT @A:=SUM(salary) FROM table1 WHERE type=1;
UPDATE table2 SET summary=@A WHERE type=1;
COMMIT;

With START TRANSACTION, autocommit remains disabled until you end the
transaction with COMMIT or ROLLBACK. The autocommit mode then reverts
to its previous state.

START TRANSACTION permits several modifiers that control transaction
characteristics. To specify multiple modifiers, separate them by
commas.

o The WITH CONSISTENT SNAPSHOT modifier starts a consistent read for
  storage engines that are capable of it. This applies only to InnoDB.
  The effect is the same as issuing a START TRANSACTION followed by a
  SELECT from any InnoDB table. See
  https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html.
  The WITH CONSISTENT SNAPSHOT modifier does not change the current
  transaction isolation level, so it provides a consistent snapshot
  only if the current isolation level is one that permits a consistent
  read. The only isolation level that permits a consistent read is
  REPEATABLE READ. For all other isolation levels, the WITH CONSISTENT
  SNAPSHOT clause is ignored. A warning is generated when the WITH
  CONSISTENT SNAPSHOT clause is ignored.

o The READ WRITE and READ ONLY modifiers set the transaction access
  mode. They permit or prohibit changes to tables used in the
  transaction. The READ ONLY restriction prevents the transaction from
  modifying or locking both transactional and nontransactional tables
  that are visible to other transactions; the transaction can still
  modify or lock temporary tables.

  MySQL enables extra optimizations for queries on InnoDB tables when
  the transaction is known to be read-only. Specifying READ ONLY
  ensures these optimizations are applied in cases where the read-only
  status cannot be determined automatically. See
  https://dev.mysql.com/doc/refman/8.0/en/innodb-performance-ro-txn.htm
  l for more information.

  If no access mode is specified, the default mode applies. Unless the
  default has been changed, it is read/write. It is not permitted to
  specify both READ WRITE and READ ONLY in the same statement.

  In read-only mode, it remains possible to change tables created with
  the TEMPORARY keyword using DML statements. Changes made with DDL
  statements are not permitted, just as with permanent tables.

  For additional information about transaction access mode, including
  ways to change the default mode, see [HELP SET TRANSACTION].

  If the read_only system variable is enabled, explicitly starting a
  transaction with START TRANSACTION READ WRITE requires the
  CONNECTION_ADMIN privilege (or the deprecated SUPER privilege).

*Important*:

Many APIs used for writing MySQL client applications (such as JDBC)
provide their own methods for starting transactions that can (and
sometimes should) be used instead of sending a START TRANSACTION
statement from the client. See
https://dev.mysql.com/doc/refman/8.0/en/connectors-apis.html, or the
documentation for your API, for more information.

To disable autocommit mode explicitly, use the following statement:

SET autocommit=0;

After disabling autocommit mode by setting the autocommit variable to
zero, changes to transaction-safe tables (such as those for InnoDB or
NDB) are not made permanent immediately. You must use COMMIT to store
your changes to disk or ROLLBACK to ignore the changes.

autocommit is a session variable and must be set for each session. To
disable autocommit mode for each new connection, see the description of
the autocommit system variable at
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

BEGIN and BEGIN WORK are supported as aliases of START TRANSACTION for
initiating a transaction. START TRANSACTION is standard SQL syntax, is
the recommended way to start an ad-hoc transaction, and permits
modifiers that BEGIN does not.

The BEGIN statement differs from the use of the BEGIN keyword that
starts a BEGIN ... END compound statement. The latter does not begin a
transaction. See [HELP BEGIN END].

*Note*:

Within all stored programs (stored procedures and functions, triggers,
and events), the parser treats BEGIN [WORK] as the beginning of a BEGIN
... END block. Begin a transaction in this context with START
TRANSACTION instead.

The optional WORK keyword is supported for COMMIT and ROLLBACK, as are
the CHAIN and RELEASE clauses. CHAIN and RELEASE can be used for
additional control over transaction completion. The value of the
completion_type system variable determines the default completion
behavior. See
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

The AND CHAIN clause causes a new transaction to begin as soon as the
current one ends, and the new transaction has the same isolation level
as the just-terminated transaction. The new transaction also uses the
same access mode (READ WRITE or READ ONLY) as the just-terminated
transaction. The RELEASE clause causes the server to disconnect the
current client session after terminating the current transaction.
Including the NO keyword suppresses CHAIN or RELEASE completion, which
can be useful if the completion_type system variable is set to cause
chaining or release completion by default.

URL: https://dev.mysql.com/doc/refman/8.0/en/commit.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/commit.html</field>
	</row>
	<row>
		<field name="help_topic_id">563</field>
		<field name="name">BEGIN</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
START TRANSACTION
    [transaction_characteristic [, transaction_characteristic] ...]

transaction_characteristic: {
    WITH CONSISTENT SNAPSHOT
  | READ WRITE
  | READ ONLY
}

BEGIN [WORK]
COMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]
ROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]
SET autocommit = {0 | 1}

These statements provide control over use of transactions:

o START TRANSACTION or BEGIN start a new transaction.

o COMMIT commits the current transaction, making its changes permanent.

o ROLLBACK rolls back the current transaction, canceling its changes.

o SET autocommit disables or enables the default autocommit mode for
  the current session.

By default, MySQL runs with autocommit mode enabled. This means that,
when not otherwise inside a transaction, each statement is atomic, as
if it were surrounded by START TRANSACTION and COMMIT. You cannot use
ROLLBACK to undo the effect; however, if an error occurs during
statement execution, the statement is rolled back.

To disable autocommit mode implicitly for a single series of
statements, use the START TRANSACTION statement:

START TRANSACTION;
SELECT @A:=SUM(salary) FROM table1 WHERE type=1;
UPDATE table2 SET summary=@A WHERE type=1;
COMMIT;

With START TRANSACTION, autocommit remains disabled until you end the
transaction with COMMIT or ROLLBACK. The autocommit mode then reverts
to its previous state.

START TRANSACTION permits several modifiers that control transaction
characteristics. To specify multiple modifiers, separate them by
commas.

o The WITH CONSISTENT SNAPSHOT modifier starts a consistent read for
  storage engines that are capable of it. This applies only to InnoDB.
  The effect is the same as issuing a START TRANSACTION followed by a
  SELECT from any InnoDB table. See
  https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html.
  The WITH CONSISTENT SNAPSHOT modifier does not change the current
  transaction isolation level, so it provides a consistent snapshot
  only if the current isolation level is one that permits a consistent
  read. The only isolation level that permits a consistent read is
  REPEATABLE READ. For all other isolation levels, the WITH CONSISTENT
  SNAPSHOT clause is ignored. A warning is generated when the WITH
  CONSISTENT SNAPSHOT clause is ignored.

o The READ WRITE and READ ONLY modifiers set the transaction access
  mode. They permit or prohibit changes to tables used in the
  transaction. The READ ONLY restriction prevents the transaction from
  modifying or locking both transactional and nontransactional tables
  that are visible to other transactions; the transaction can still
  modify or lock temporary tables.

  MySQL enables extra optimizations for queries on InnoDB tables when
  the transaction is known to be read-only. Specifying READ ONLY
  ensures these optimizations are applied in cases where the read-only
  status cannot be determined automatically. See
  https://dev.mysql.com/doc/refman/8.0/en/innodb-performance-ro-txn.htm
  l for more information.

  If no access mode is specified, the default mode applies. Unless the
  default has been changed, it is read/write. It is not permitted to
  specify both READ WRITE and READ ONLY in the same statement.

  In read-only mode, it remains possible to change tables created with
  the TEMPORARY keyword using DML statements. Changes made with DDL
  statements are not permitted, just as with permanent tables.

  For additional information about transaction access mode, including
  ways to change the default mode, see [HELP SET TRANSACTION].

  If the read_only system variable is enabled, explicitly starting a
  transaction with START TRANSACTION READ WRITE requires the
  CONNECTION_ADMIN privilege (or the deprecated SUPER privilege).

*Important*:

Many APIs used for writing MySQL client applications (such as JDBC)
provide their own methods for starting transactions that can (and
sometimes should) be used instead of sending a START TRANSACTION
statement from the client. See
https://dev.mysql.com/doc/refman/8.0/en/connectors-apis.html, or the
documentation for your API, for more information.

To disable autocommit mode explicitly, use the following statement:

SET autocommit=0;

After disabling autocommit mode by setting the autocommit variable to
zero, changes to transaction-safe tables (such as those for InnoDB or
NDB) are not made permanent immediately. You must use COMMIT to store
your changes to disk or ROLLBACK to ignore the changes.

autocommit is a session variable and must be set for each session. To
disable autocommit mode for each new connection, see the description of
the autocommit system variable at
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

BEGIN and BEGIN WORK are supported as aliases of START TRANSACTION for
initiating a transaction. START TRANSACTION is standard SQL syntax, is
the recommended way to start an ad-hoc transaction, and permits
modifiers that BEGIN does not.

The BEGIN statement differs from the use of the BEGIN keyword that
starts a BEGIN ... END compound statement. The latter does not begin a
transaction. See [HELP BEGIN END].

*Note*:

Within all stored programs (stored procedures and functions, triggers,
and events), the parser treats BEGIN [WORK] as the beginning of a BEGIN
... END block. Begin a transaction in this context with START
TRANSACTION instead.

The optional WORK keyword is supported for COMMIT and ROLLBACK, as are
the CHAIN and RELEASE clauses. CHAIN and RELEASE can be used for
additional control over transaction completion. The value of the
completion_type system variable determines the default completion
behavior. See
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

The AND CHAIN clause causes a new transaction to begin as soon as the
current one ends, and the new transaction has the same isolation level
as the just-terminated transaction. The new transaction also uses the
same access mode (READ WRITE or READ ONLY) as the just-terminated
transaction. The RELEASE clause causes the server to disconnect the
current client session after terminating the current transaction.
Including the NO keyword suppresses CHAIN or RELEASE completion, which
can be useful if the completion_type system variable is set to cause
chaining or release completion by default.

URL: https://dev.mysql.com/doc/refman/8.0/en/commit.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/commit.html</field>
	</row>
	<row>
		<field name="help_topic_id">564</field>
		<field name="name">COMMIT</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
START TRANSACTION
    [transaction_characteristic [, transaction_characteristic] ...]

transaction_characteristic: {
    WITH CONSISTENT SNAPSHOT
  | READ WRITE
  | READ ONLY
}

BEGIN [WORK]
COMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]
ROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]
SET autocommit = {0 | 1}

These statements provide control over use of transactions:

o START TRANSACTION or BEGIN start a new transaction.

o COMMIT commits the current transaction, making its changes permanent.

o ROLLBACK rolls back the current transaction, canceling its changes.

o SET autocommit disables or enables the default autocommit mode for
  the current session.

By default, MySQL runs with autocommit mode enabled. This means that,
when not otherwise inside a transaction, each statement is atomic, as
if it were surrounded by START TRANSACTION and COMMIT. You cannot use
ROLLBACK to undo the effect; however, if an error occurs during
statement execution, the statement is rolled back.

To disable autocommit mode implicitly for a single series of
statements, use the START TRANSACTION statement:

START TRANSACTION;
SELECT @A:=SUM(salary) FROM table1 WHERE type=1;
UPDATE table2 SET summary=@A WHERE type=1;
COMMIT;

With START TRANSACTION, autocommit remains disabled until you end the
transaction with COMMIT or ROLLBACK. The autocommit mode then reverts
to its previous state.

START TRANSACTION permits several modifiers that control transaction
characteristics. To specify multiple modifiers, separate them by
commas.

o The WITH CONSISTENT SNAPSHOT modifier starts a consistent read for
  storage engines that are capable of it. This applies only to InnoDB.
  The effect is the same as issuing a START TRANSACTION followed by a
  SELECT from any InnoDB table. See
  https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html.
  The WITH CONSISTENT SNAPSHOT modifier does not change the current
  transaction isolation level, so it provides a consistent snapshot
  only if the current isolation level is one that permits a consistent
  read. The only isolation level that permits a consistent read is
  REPEATABLE READ. For all other isolation levels, the WITH CONSISTENT
  SNAPSHOT clause is ignored. A warning is generated when the WITH
  CONSISTENT SNAPSHOT clause is ignored.

o The READ WRITE and READ ONLY modifiers set the transaction access
  mode. They permit or prohibit changes to tables used in the
  transaction. The READ ONLY restriction prevents the transaction from
  modifying or locking both transactional and nontransactional tables
  that are visible to other transactions; the transaction can still
  modify or lock temporary tables.

  MySQL enables extra optimizations for queries on InnoDB tables when
  the transaction is known to be read-only. Specifying READ ONLY
  ensures these optimizations are applied in cases where the read-only
  status cannot be determined automatically. See
  https://dev.mysql.com/doc/refman/8.0/en/innodb-performance-ro-txn.htm
  l for more information.

  If no access mode is specified, the default mode applies. Unless the
  default has been changed, it is read/write. It is not permitted to
  specify both READ WRITE and READ ONLY in the same statement.

  In read-only mode, it remains possible to change tables created with
  the TEMPORARY keyword using DML statements. Changes made with DDL
  statements are not permitted, just as with permanent tables.

  For additional information about transaction access mode, including
  ways to change the default mode, see [HELP SET TRANSACTION].

  If the read_only system variable is enabled, explicitly starting a
  transaction with START TRANSACTION READ WRITE requires the
  CONNECTION_ADMIN privilege (or the deprecated SUPER privilege).

*Important*:

Many APIs used for writing MySQL client applications (such as JDBC)
provide their own methods for starting transactions that can (and
sometimes should) be used instead of sending a START TRANSACTION
statement from the client. See
https://dev.mysql.com/doc/refman/8.0/en/connectors-apis.html, or the
documentation for your API, for more information.

To disable autocommit mode explicitly, use the following statement:

SET autocommit=0;

After disabling autocommit mode by setting the autocommit variable to
zero, changes to transaction-safe tables (such as those for InnoDB or
NDB) are not made permanent immediately. You must use COMMIT to store
your changes to disk or ROLLBACK to ignore the changes.

autocommit is a session variable and must be set for each session. To
disable autocommit mode for each new connection, see the description of
the autocommit system variable at
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

BEGIN and BEGIN WORK are supported as aliases of START TRANSACTION for
initiating a transaction. START TRANSACTION is standard SQL syntax, is
the recommended way to start an ad-hoc transaction, and permits
modifiers that BEGIN does not.

The BEGIN statement differs from the use of the BEGIN keyword that
starts a BEGIN ... END compound statement. The latter does not begin a
transaction. See [HELP BEGIN END].

*Note*:

Within all stored programs (stored procedures and functions, triggers,
and events), the parser treats BEGIN [WORK] as the beginning of a BEGIN
... END block. Begin a transaction in this context with START
TRANSACTION instead.

The optional WORK keyword is supported for COMMIT and ROLLBACK, as are
the CHAIN and RELEASE clauses. CHAIN and RELEASE can be used for
additional control over transaction completion. The value of the
completion_type system variable determines the default completion
behavior. See
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

The AND CHAIN clause causes a new transaction to begin as soon as the
current one ends, and the new transaction has the same isolation level
as the just-terminated transaction. The new transaction also uses the
same access mode (READ WRITE or READ ONLY) as the just-terminated
transaction. The RELEASE clause causes the server to disconnect the
current client session after terminating the current transaction.
Including the NO keyword suppresses CHAIN or RELEASE completion, which
can be useful if the completion_type system variable is set to cause
chaining or release completion by default.

URL: https://dev.mysql.com/doc/refman/8.0/en/commit.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/commit.html</field>
	</row>
	<row>
		<field name="help_topic_id">565</field>
		<field name="name">ROLLBACK</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
START TRANSACTION
    [transaction_characteristic [, transaction_characteristic] ...]

transaction_characteristic: {
    WITH CONSISTENT SNAPSHOT
  | READ WRITE
  | READ ONLY
}

BEGIN [WORK]
COMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]
ROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]
SET autocommit = {0 | 1}

These statements provide control over use of transactions:

o START TRANSACTION or BEGIN start a new transaction.

o COMMIT commits the current transaction, making its changes permanent.

o ROLLBACK rolls back the current transaction, canceling its changes.

o SET autocommit disables or enables the default autocommit mode for
  the current session.

By default, MySQL runs with autocommit mode enabled. This means that,
when not otherwise inside a transaction, each statement is atomic, as
if it were surrounded by START TRANSACTION and COMMIT. You cannot use
ROLLBACK to undo the effect; however, if an error occurs during
statement execution, the statement is rolled back.

To disable autocommit mode implicitly for a single series of
statements, use the START TRANSACTION statement:

START TRANSACTION;
SELECT @A:=SUM(salary) FROM table1 WHERE type=1;
UPDATE table2 SET summary=@A WHERE type=1;
COMMIT;

With START TRANSACTION, autocommit remains disabled until you end the
transaction with COMMIT or ROLLBACK. The autocommit mode then reverts
to its previous state.

START TRANSACTION permits several modifiers that control transaction
characteristics. To specify multiple modifiers, separate them by
commas.

o The WITH CONSISTENT SNAPSHOT modifier starts a consistent read for
  storage engines that are capable of it. This applies only to InnoDB.
  The effect is the same as issuing a START TRANSACTION followed by a
  SELECT from any InnoDB table. See
  https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html.
  The WITH CONSISTENT SNAPSHOT modifier does not change the current
  transaction isolation level, so it provides a consistent snapshot
  only if the current isolation level is one that permits a consistent
  read. The only isolation level that permits a consistent read is
  REPEATABLE READ. For all other isolation levels, the WITH CONSISTENT
  SNAPSHOT clause is ignored. A warning is generated when the WITH
  CONSISTENT SNAPSHOT clause is ignored.

o The READ WRITE and READ ONLY modifiers set the transaction access
  mode. They permit or prohibit changes to tables used in the
  transaction. The READ ONLY restriction prevents the transaction from
  modifying or locking both transactional and nontransactional tables
  that are visible to other transactions; the transaction can still
  modify or lock temporary tables.

  MySQL enables extra optimizations for queries on InnoDB tables when
  the transaction is known to be read-only. Specifying READ ONLY
  ensures these optimizations are applied in cases where the read-only
  status cannot be determined automatically. See
  https://dev.mysql.com/doc/refman/8.0/en/innodb-performance-ro-txn.htm
  l for more information.

  If no access mode is specified, the default mode applies. Unless the
  default has been changed, it is read/write. It is not permitted to
  specify both READ WRITE and READ ONLY in the same statement.

  In read-only mode, it remains possible to change tables created with
  the TEMPORARY keyword using DML statements. Changes made with DDL
  statements are not permitted, just as with permanent tables.

  For additional information about transaction access mode, including
  ways to change the default mode, see [HELP SET TRANSACTION].

  If the read_only system variable is enabled, explicitly starting a
  transaction with START TRANSACTION READ WRITE requires the
  CONNECTION_ADMIN privilege (or the deprecated SUPER privilege).

*Important*:

Many APIs used for writing MySQL client applications (such as JDBC)
provide their own methods for starting transactions that can (and
sometimes should) be used instead of sending a START TRANSACTION
statement from the client. See
https://dev.mysql.com/doc/refman/8.0/en/connectors-apis.html, or the
documentation for your API, for more information.

To disable autocommit mode explicitly, use the following statement:

SET autocommit=0;

After disabling autocommit mode by setting the autocommit variable to
zero, changes to transaction-safe tables (such as those for InnoDB or
NDB) are not made permanent immediately. You must use COMMIT to store
your changes to disk or ROLLBACK to ignore the changes.

autocommit is a session variable and must be set for each session. To
disable autocommit mode for each new connection, see the description of
the autocommit system variable at
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

BEGIN and BEGIN WORK are supported as aliases of START TRANSACTION for
initiating a transaction. START TRANSACTION is standard SQL syntax, is
the recommended way to start an ad-hoc transaction, and permits
modifiers that BEGIN does not.

The BEGIN statement differs from the use of the BEGIN keyword that
starts a BEGIN ... END compound statement. The latter does not begin a
transaction. See [HELP BEGIN END].

*Note*:

Within all stored programs (stored procedures and functions, triggers,
and events), the parser treats BEGIN [WORK] as the beginning of a BEGIN
... END block. Begin a transaction in this context with START
TRANSACTION instead.

The optional WORK keyword is supported for COMMIT and ROLLBACK, as are
the CHAIN and RELEASE clauses. CHAIN and RELEASE can be used for
additional control over transaction completion. The value of the
completion_type system variable determines the default completion
behavior. See
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

The AND CHAIN clause causes a new transaction to begin as soon as the
current one ends, and the new transaction has the same isolation level
as the just-terminated transaction. The new transaction also uses the
same access mode (READ WRITE or READ ONLY) as the just-terminated
transaction. The RELEASE clause causes the server to disconnect the
current client session after terminating the current transaction.
Including the NO keyword suppresses CHAIN or RELEASE completion, which
can be useful if the completion_type system variable is set to cause
chaining or release completion by default.

URL: https://dev.mysql.com/doc/refman/8.0/en/commit.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/commit.html</field>
	</row>
	<row>
		<field name="help_topic_id">566</field>
		<field name="name">SAVEPOINT</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
SAVEPOINT identifier
ROLLBACK [WORK] TO [SAVEPOINT] identifier
RELEASE SAVEPOINT identifier

InnoDB supports the SQL statements SAVEPOINT, ROLLBACK TO SAVEPOINT,
RELEASE SAVEPOINT and the optional WORK keyword for ROLLBACK.

URL: https://dev.mysql.com/doc/refman/8.0/en/savepoint.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/savepoint.html</field>
	</row>
	<row>
		<field name="help_topic_id">567</field>
		<field name="name">ROLLBACK TO SAVEPOINT</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
SAVEPOINT identifier
ROLLBACK [WORK] TO [SAVEPOINT] identifier
RELEASE SAVEPOINT identifier

InnoDB supports the SQL statements SAVEPOINT, ROLLBACK TO SAVEPOINT,
RELEASE SAVEPOINT and the optional WORK keyword for ROLLBACK.

URL: https://dev.mysql.com/doc/refman/8.0/en/savepoint.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/savepoint.html</field>
	</row>
	<row>
		<field name="help_topic_id">568</field>
		<field name="name">RELEASE SAVEPOINT</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
SAVEPOINT identifier
ROLLBACK [WORK] TO [SAVEPOINT] identifier
RELEASE SAVEPOINT identifier

InnoDB supports the SQL statements SAVEPOINT, ROLLBACK TO SAVEPOINT,
RELEASE SAVEPOINT and the optional WORK keyword for ROLLBACK.

URL: https://dev.mysql.com/doc/refman/8.0/en/savepoint.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/savepoint.html</field>
	</row>
	<row>
		<field name="help_topic_id">569</field>
		<field name="name">LOCK INSTANCE FOR BACKUP</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
LOCK INSTANCE FOR BACKUP

UNLOCK INSTANCE

LOCK INSTANCE FOR BACKUP acquires an instance-level backup lock that
permits DML during an online backup while preventing operations that
could result in an inconsistent snapshot.

Executing the LOCK INSTANCE FOR BACKUP statement requires the
BACKUP_ADMIN privilege. The BACKUP_ADMIN privilege is automatically
granted to users with the RELOAD privilege when performing an in-place
upgrade to MySQL 8.0 from an earlier version.

Multiple sessions can hold a backup lock simultaneously.

UNLOCK INSTANCE releases a backup lock held by the current session. A
backup lock held by a session is also released if the session is
terminated.

LOCK INSTANCE FOR BACKUP prevents files from being created, renamed, or
removed. REPAIR TABLE TRUNCATE TABLE, OPTIMIZE TABLE, and account
management statements are blocked. See
https://dev.mysql.com/doc/refman/8.0/en/account-management-statements.html
. Operations that modify InnoDB files that are not recorded in the
InnoDB redo log are also blocked.

LOCK INSTANCE FOR BACKUP permits DDL operations that only affect
user-created temporary tables. In effect, files that belong to
user-created temporary tables can be created, renamed, or removed while
a backup lock is held. Creation of binary log files is also permitted.

PURGE BINARY LOGS should not be issued while a LOCK INSTANCE FOR BACKUP
statement is in effect for the instance, because it contravenes the
rules of the backup lock by removing files from the server. From MySQL
8.0.28, this is disallowed.

A backup lock acquired by LOCK INSTANCE FOR BACKUP is independent of
transactional locks and locks taken by FLUSH TABLES tbl_name [,
tbl_name] ... WITH READ LOCK, and the following sequences of statements
are permitted:

LOCK INSTANCE FOR BACKUP;
FLUSH TABLES tbl_name [, tbl_name] ... WITH READ LOCK;
UNLOCK TABLES;
UNLOCK INSTANCE;

FLUSH TABLES tbl_name [, tbl_name] ... WITH READ LOCK;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
UNLOCK TABLES;

The lock_wait_timeout setting defines the amount of time that a LOCK
INSTANCE FOR BACKUP statement waits to acquire a lock before giving up.

URL: https://dev.mysql.com/doc/refman/8.0/en/lock-instance-for-backup.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/lock-instance-for-backup.html</field>
	</row>
	<row>
		<field name="help_topic_id">570</field>
		<field name="name">LOCK TABLES</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
LOCK TABLES
    tbl_name [[AS] alias] lock_type
    [, tbl_name [[AS] alias] lock_type] ...

lock_type: {
    READ [LOCAL]
  | [LOW_PRIORITY] WRITE
}

UNLOCK TABLES

MySQL enables client sessions to acquire table locks explicitly for the
purpose of cooperating with other sessions for access to tables, or to
prevent other sessions from modifying tables during periods when a
session requires exclusive access to them. A session can acquire or
release locks only for itself. One session cannot acquire locks for
another session or release locks held by another session.

Locks may be used to emulate transactions or to get more speed when
updating tables. This is explained in more detail in
https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html#lock-tables-re
strictions.

LOCK TABLES explicitly acquires table locks for the current client
session. Table locks can be acquired for base tables or views. You must
have the LOCK TABLES privilege, and the SELECT privilege for each
object to be locked.

For view locking, LOCK TABLES adds all base tables used in the view to
the set of tables to be locked and locks them automatically. For tables
underlying any view being locked, LOCK TABLES checks that the view
definer (for SQL SECURITY DEFINER views) or invoker (for all views) has
the proper privileges on the tables.

If you lock a table explicitly with LOCK TABLES, any tables used in
triggers are also locked implicitly, as described in
https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html#lock-tables-an
d-triggers.

If you lock a table explicitly with LOCK TABLES, any tables related by
a foreign key constraint are opened and locked implicitly. For foreign
key checks, a shared read-only lock (LOCK TABLES READ) is taken on
related tables. For cascading updates, a shared-nothing write lock
(LOCK TABLES WRITE) is taken on related tables that are involved in the
operation.

UNLOCK TABLES explicitly releases any table locks held by the current
session. LOCK TABLES implicitly releases any table locks held by the
current session before acquiring new locks.

Another use for UNLOCK TABLES is to release the global read lock
acquired with the FLUSH TABLES WITH READ LOCK statement, which enables
you to lock all tables in all databases. See [HELP FLUSH]. (This is a
very convenient way to get backups if you have a file system such as
Veritas that can take snapshots in time.)

URL: https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html</field>
	</row>
	<row>
		<field name="help_topic_id">571</field>
		<field name="name">SET TRANSACTION</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
SET [GLOBAL | SESSION] TRANSACTION
    transaction_characteristic [, transaction_characteristic] ...

transaction_characteristic: {
    ISOLATION LEVEL level
  | access_mode
}

level: {
     REPEATABLE READ
   | READ COMMITTED
   | READ UNCOMMITTED
   | SERIALIZABLE
}

access_mode: {
     READ WRITE
   | READ ONLY
}

This statement specifies transaction characteristics. It takes a list
of one or more characteristic values separated by commas. Each
characteristic value sets the transaction isolation level or access
mode. The isolation level is used for operations on InnoDB tables. The
access mode specifies whether transactions operate in read/write or
read-only mode.

In addition, SET TRANSACTION can include an optional GLOBAL or SESSION
keyword to indicate the scope of the statement.

URL: https://dev.mysql.com/doc/refman/8.0/en/set-transaction.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/set-transaction.html</field>
	</row>
	<row>
		<field name="help_topic_id">572</field>
		<field name="name">XA</field>
		<field name="help_category_id">42</field>
		<field name="description">Syntax:
XA {START|BEGIN} xid [JOIN|RESUME]

XA END xid [SUSPEND [FOR MIGRATE]]

XA PREPARE xid

XA COMMIT xid [ONE PHASE]

XA ROLLBACK xid

XA RECOVER [CONVERT XID]

For XA START, the JOIN and RESUME clauses are recognized but have no
effect.

For XA END the SUSPEND [FOR MIGRATE] clause is recognized but has no
effect.

Each XA statement begins with the XA keyword, and most of them require
an xid value. An xid is an XA transaction identifier. It indicates
which transaction the statement applies to. xid values are supplied by
the client, or generated by the MySQL server. An xid value has from one
to three parts:

xid: gtrid [, bqual [, formatID ]]

gtrid is a global transaction identifier, bqual is a branch qualifier,
and formatID is a number that identifies the format used by the gtrid
and bqual values. As indicated by the syntax, bqual and formatID are
optional. The default bqual value is '' if not given. The default
formatID value is 1 if not given.

gtrid and bqual must be string literals, each up to 64 bytes (not
characters) long. gtrid and bqual can be specified in several ways. You
can use a quoted string ('ab'), hex string (X'6162', 0x6162), or bit
value (b'nnnn').

formatID is an unsigned integer.

The gtrid and bqual values are interpreted in bytes by the MySQL
server's underlying XA support routines. However, while an SQL
statement containing an XA statement is being parsed, the server works
with some specific character set. To be safe, write gtrid and bqual as
hex strings.

xid values typically are generated by the Transaction Manager. Values
generated by one TM must be different from values generated by other
TMs. A given TM must be able to recognize its own xid values in a list
of values returned by the XA RECOVER statement.

XA START xid starts an XA transaction with the given xid value. Each XA
transaction must have a unique xid value, so the value must not
currently be used by another XA transaction. Uniqueness is assessed
using the gtrid and bqual values. All following XA statements for the
XA transaction must be specified using the same xid value as that given
in the XA START statement. If you use any of those statements but
specify an xid value that does not correspond to some existing XA
transaction, an error occurs.

Beginning with MySQL 8.0.31, XA START, XA BEGIN, XA END, XA COMMIT, and
XA ROLLBACK statements are not filtered by the default database when
the server is running with --replicate-do-db or --replicate-ignore-db.

One or more XA transactions can be part of the same global transaction.
All XA transactions within a given global transaction must use the same
gtrid value in the xid value. For this reason, gtrid values must be
globally unique so that there is no ambiguity about which global
transaction a given XA transaction is part of. The bqual part of the
xid value must be different for each XA transaction within a global
transaction. (The requirement that bqual values be different is a
limitation of the current MySQL XA implementation. It is not part of
the XA specification.)

The XA RECOVER statement returns information for those XA transactions
on the MySQL server that are in the PREPARED state. (See
https://dev.mysql.com/doc/refman/8.0/en/xa-states.html.) The output
includes a row for each such XA transaction on the server, regardless
of which client started it.

XA RECOVER requires the XA_RECOVER_ADMIN privilege. This privilege
requirement prevents users from discovering the XID values for
outstanding prepared XA transactions other than their own. It does not
affect normal commit or rollback of an XA transaction because the user
who started it knows its XID.

XA RECOVER output rows look like this (for an example xid value
consisting of the parts 'abc', 'def', and 7):

mysql&gt; XA RECOVER;
+----------+--------------+--------------+--------+
| formatID | gtrid_length | bqual_length | data   |
+----------+--------------+--------------+--------+
|        7 |            3 |            3 | abcdef |
+----------+--------------+--------------+--------+

The output columns have the following meanings:

o formatID is the formatID part of the transaction xid

o gtrid_length is the length in bytes of the gtrid part of the xid

o bqual_length is the length in bytes of the bqual part of the xid

o data is the concatenation of the gtrid and bqual parts of the xid

XID values may contain nonprintable characters. XA RECOVER permits an
optional CONVERT XID clause so that clients can request XID values in
hexadecimal.

URL: https://dev.mysql.com/doc/refman/8.0/en/xa-statements.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/xa-statements.html</field>
	</row>
	<row>
		<field name="help_topic_id">573</field>
		<field name="name">PURGE BINARY LOGS</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
PURGE { BINARY | MASTER } LOGS {
    TO 'log_name'
  | BEFORE datetime_expr
}

The binary log is a set of files that contain information about data
modifications made by the MySQL server. The log consists of a set of
binary log files, plus an index file (see
https://dev.mysql.com/doc/refman/8.0/en/binary-log.html).

The PURGE BINARY LOGS statement deletes all the binary log files listed
in the log index file prior to the specified log file name or date.
BINARY and MASTER are synonyms. Deleted log files also are removed from
the list recorded in the index file, so that the given log file becomes
the first in the list.

PURGE BINARY LOGS requires the BINLOG_ADMIN privilege. This statement
has no effect if the server was not started with the --log-bin option
to enable binary logging.

URL: https://dev.mysql.com/doc/refman/8.0/en/purge-binary-logs.html

</field>
		<field name="example">PURGE BINARY LOGS TO 'mysql-bin.010';
PURGE BINARY LOGS BEFORE '2019-04-02 22:46:26';
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/purge-binary-logs.html</field>
	</row>
	<row>
		<field name="help_topic_id">574</field>
		<field name="name">PURGE MASTER LOGS</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
PURGE { BINARY | MASTER } LOGS {
    TO 'log_name'
  | BEFORE datetime_expr
}

The binary log is a set of files that contain information about data
modifications made by the MySQL server. The log consists of a set of
binary log files, plus an index file (see
https://dev.mysql.com/doc/refman/8.0/en/binary-log.html).

The PURGE BINARY LOGS statement deletes all the binary log files listed
in the log index file prior to the specified log file name or date.
BINARY and MASTER are synonyms. Deleted log files also are removed from
the list recorded in the index file, so that the given log file becomes
the first in the list.

PURGE BINARY LOGS requires the BINLOG_ADMIN privilege. This statement
has no effect if the server was not started with the --log-bin option
to enable binary logging.

URL: https://dev.mysql.com/doc/refman/8.0/en/purge-binary-logs.html

</field>
		<field name="example">PURGE BINARY LOGS TO 'mysql-bin.010';
PURGE BINARY LOGS BEFORE '2019-04-02 22:46:26';
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/purge-binary-logs.html</field>
	</row>
	<row>
		<field name="help_topic_id">575</field>
		<field name="name">RESET MASTER</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
RESET MASTER [TO binary_log_file_index_number]

*Warning*:

Use this statement with caution to ensure you do not lose any wanted
binary log file data and GTID execution history.

RESET MASTER requires the RELOAD privilege.

For a server where binary logging is enabled (log_bin is ON), RESET
MASTER deletes all existing binary log files and resets the binary log
index file, resetting the server to its state before binary logging was
started. A new empty binary log file is created so that binary logging
can be restarted.

For a server where GTIDs are in use (gtid_mode is ON), issuing RESET
MASTER resets the GTID execution history. The value of the gtid_purged
system variable is set to an empty string (''), the global value (but
not the session value) of the gtid_executed system variable is set to
an empty string, and the mysql.gtid_executed table is cleared (see
https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-concepts.html
#replication-gtids-gtid-executed-table). If the GTID-enabled server has
binary logging enabled, RESET MASTER also resets the binary log as
described above. Note that RESET MASTER is the method to reset the GTID
execution history even if the GTID-enabled server is a replica where
binary logging is disabled; RESET REPLICA has no effect on the GTID
execution history. For more information on resetting the GTID execution
history, see
https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-lifecycle.html
#replication-gtids-execution-history.

Issuing RESET MASTER without the optional TO clause deletes all binary
log files listed in the index file, resets the binary log index file to
be empty, and creates a new binary log file starting at 1. Use the
optional TO clause to start the binary log file index from a number
other than 1 after the reset.

Check that you are using a reasonable value for the index number. If
you enter an incorrect value, you can correct this by issuing another
RESET MASTER statement with or without the TO clause. If you do not
correct a value that is out of range, the server cannot be restarted.

The following example demonstrates TO clause usage:

RESET MASTER TO 1234;

SHOW BINARY LOGS;
+-------------------+-----------+-----------+
| Log_name          | File_size | Encrypted |
+-------------------+-----------+-----------+
| source-bin.001234 |       154 | No        |
+-------------------+-----------+-----------+

URL: https://dev.mysql.com/doc/refman/8.0/en/reset-master.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/reset-master.html</field>
	</row>
	<row>
		<field name="help_topic_id">576</field>
		<field name="name">SET SQL_LOG_BIN</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
SET sql_log_bin = {OFF|ON}

The sql_log_bin variable controls whether logging to the binary log is
enabled for the current session (assuming that the binary log itself is
enabled). The default value is ON. To disable or enable binary logging
for the current session, set the session sql_log_bin variable to OFF or
ON.

Set this variable to OFF for a session to temporarily disable binary
logging while making changes to the source that you do not want
replicated to the replica.

Setting the session value of this system variable is a restricted
operation. The session user must have privileges sufficient to set
restricted session variables. See
https://dev.mysql.com/doc/refman/8.0/en/system-variable-privileges.html
.

It is not possible to set the session value of sql_log_bin within a
transaction or subquery.

Setting this variable to OFF prevents new GTIDs from being assigned to
transactions in the binary log. If you are using GTIDs for replication,
this means that even when binary logging is later enabled again, the
GTIDs written into the log from this point do not account for any
transactions that occurred in the meantime, so in effect those
transactions are lost.

mysqldump adds a SET @@SESSION.sql_log_bin=0 statement to a dump file
from a server where GTIDs are in use, which disables binary logging
while the dump file is being reloaded. The statement prevents new GTIDs
from being generated and assigned to the transactions in the dump file
as they are executed, so that the original GTIDs for the transactions
are used.

URL: https://dev.mysql.com/doc/refman/8.0/en/set-sql-log-bin.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/set-sql-log-bin.html</field>
	</row>
	<row>
		<field name="help_topic_id">577</field>
		<field name="name">CHANGE MASTER TO</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
CHANGE MASTER TO option [, option] ... [ channel_option ]

option: {
    MASTER_BIND = 'interface_name'
  | MASTER_HOST = 'host_name'
  | MASTER_USER = 'user_name'
  | MASTER_PASSWORD = 'password'
  | MASTER_PORT = port_num
  | PRIVILEGE_CHECKS_USER = {'account' | NULL}
  | REQUIRE_ROW_FORMAT = {0|1}
  | REQUIRE_TABLE_PRIMARY_KEY_CHECK = {STREAM | ON | OFF}
  | ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS = {OFF | LOCAL | uuid}
  | MASTER_LOG_FILE = 'source_log_name'
  | MASTER_LOG_POS = source_log_pos
  | MASTER_AUTO_POSITION = {0|1}
  | RELAY_LOG_FILE = 'relay_log_name'
  | RELAY_LOG_POS = relay_log_pos
  | MASTER_HEARTBEAT_PERIOD = interval
  | MASTER_CONNECT_RETRY = interval
  | MASTER_RETRY_COUNT = count
  | SOURCE_CONNECTION_AUTO_FAILOVER = {0|1}
  | MASTER_DELAY = interval
  | MASTER_COMPRESSION_ALGORITHMS = 'algorithm[,algorithm][,algorithm]'
  | MASTER_ZSTD_COMPRESSION_LEVEL = level
  | MASTER_SSL = {0|1}
  | MASTER_SSL_CA = 'ca_file_name'
  | MASTER_SSL_CAPATH = 'ca_directory_name'
  | MASTER_SSL_CERT = 'cert_file_name'
  | MASTER_SSL_CRL = 'crl_file_name'
  | MASTER_SSL_CRLPATH = 'crl_directory_name'
  | MASTER_SSL_KEY = 'key_file_name'
  | MASTER_SSL_CIPHER = 'cipher_list'
  | MASTER_SSL_VERIFY_SERVER_CERT = {0|1}
  | MASTER_TLS_VERSION = 'protocol_list'
  | MASTER_TLS_CIPHERSUITES = 'ciphersuite_list'
  | MASTER_PUBLIC_KEY_PATH = 'key_file_name'
  | GET_MASTER_PUBLIC_KEY = {0|1}
  | NETWORK_NAMESPACE = 'namespace'
  | IGNORE_SERVER_IDS = (server_id_list),
  | GTID_ONLY = {0|1}
}

channel_option:
    FOR CHANNEL channel

server_id_list:
    [server_id [, server_id] ... ]

CHANGE MASTER TO changes the parameters that the replica server uses
for connecting to the source and for reading data from the source. It
also updates the contents of the replication metadata repositories (see
https://dev.mysql.com/doc/refman/8.0/en/replica-logs.html). From MySQL
8.0.23, use CHANGE REPLICATION SOURCE TO in place of CHANGE MASTER TO,
which is deprecated from that release. In releases before MySQL 8.0.23,
use CHANGE MASTER TO.

CHANGE MASTER TO requires the REPLICATION_SLAVE_ADMIN privilege (or the
deprecated SUPER privilege).

Options that you do not specify on a CHANGE MASTER TO statement retain
their value, except as indicated in the following discussion. In most
cases, there is therefore no need to specify options that do not
change.

Values used for SOURCE_HOST and other CHANGE REPLICATION SOURCE TO
options are checked for linefeed (\n or 0x0A) characters. The presence
of such characters in these values causes the statement to fail with an
error.

The optional FOR CHANNEL channel clause enables you to name which
replication channel the statement applies to. Providing a FOR CHANNEL
channel clause applies the CHANGE MASTER TO statement to a specific
replication channel, and is used to add a new channel or modify an
existing channel. For example, to add a new channel called channel2:

CHANGE MASTER TO MASTER_HOST=host1, MASTER_PORT=3002 FOR CHANNEL 'channel2'

If no clause is named and no extra channels exist, a CHANGE MASTER TO
statement applies to the default channel, whose name is the empty
string (&quot;&quot;). When you have set up multiple replication channels, every
CHANGE MASTER TO statement must name a channel using the FOR CHANNEL
channel clause. See
https://dev.mysql.com/doc/refman/8.0/en/replication-channels.html for
more information.

For some of the options of the CHANGE MASTER TO statement, you must
issue a STOP SLAVE statement prior to issuing a CHANGE MASTER TO
statement (and a START SLAVE statement afterwards). Sometimes, you only
need to stop the replication SQL (applier) thread or the replication
I/O (receiver) thread, not both:

o When the applier thread is stopped, you can execute CHANGE MASTER TO
  using any combination that is otherwise allowed of RELAY_LOG_FILE,
  RELAY_LOG_POS, and MASTER_DELAY options, even if the replication
  receiver thread is running. No other options may be used with this
  statement when the receiver thread is running.

o When the receiver thread is stopped, you can execute CHANGE MASTER TO
  using any of the options for this statement (in any allowed
  combination) except RELAY_LOG_FILE, RELAY_LOG_POS, MASTER_DELAY, or
  MASTER_AUTO_POSITION = 1 even when the applier thread is running.

o Both the receiver thread and the applier thread must be stopped
  before issuing a CHANGE MASTER TO statement that employs
  MASTER_AUTO_POSITION = 1, GTID_ONLY = 1, or
  ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS.

You can check the current state of the replication applier thread and
replication receiver thread using SHOW SLAVE STATUS. Note that the
Group Replication applier channel (group_replication_applier) has no
receiver thread, only an applier thread.

CHANGE MASTER TO statements have a number of side-effects and
interactions that you should be aware of beforehand:

o CHANGE MASTER TO causes an implicit commit of an ongoing transaction.
  See https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html.

o CHANGE MASTER TO causes the previous values for MASTER_HOST,
  MASTER_PORT, MASTER_LOG_FILE, and MASTER_LOG_POS to be written to the
  error log, along with other information about the replica's state
  prior to execution.

o If you are using statement-based replication and temporary tables, it
  is possible for a CHANGE MASTER TO statement following a STOP SLAVE
  statement to leave behind temporary tables on the replica. A warning
  (ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_warn_open_temp_tables_must_be_zero)) is issued
  whenever this occurs. You can avoid this in such cases by making sure
  that the value of the Replica_open_temp_tables or
  Slave_open_temp_tables system status variable is equal to 0 prior to
  executing such a CHANGE MASTER TO statement.

o When using a multithreaded replica (replica_parallel_workers &gt; 0 or
  slave_parallel_workers &gt; 0), stopping the replica can cause gaps in
  the sequence of transactions that have been executed from the relay
  log, regardless of whether the replica was stopped intentionally or
  otherwise. When such gaps exist, issuing CHANGE MASTER TO fails. The
  solution in this situation is to issue START SLAVE UNTIL
  SQL_AFTER_MTS_GAPS which ensures that the gaps are closed. From MySQL
  8.0.26, the process of checking for gaps in the sequence of
  transactions is skipped entirely when GTID-based replication and GTID
  auto-positioning are in use, because gaps in transactions can be
  resolved using GTID auto-positioning. In that situation, CHANGE
  MASTER TO can still be used.

The following options are available for CHANGE MASTER TO statements:

o ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS = {OFF | LOCAL | uuid}

  Makes the replication channel assign a GTID to replicated
  transactions that do not have one, enabling replication from a source
  that does not use GTID-based replication, to a replica that does. For
  a multi-source replica, you can have a mix of channels that use
  ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS, and channels that do not. The
  default is OFF, meaning that the feature is not used.

  LOCAL assigns a GTID including the replica's own UUID (the
  server_uuid setting). uuid assigns a GTID including the specified
  UUID, such as the server_uuid setting for the replication source
  server. Using a nonlocal UUID lets you differentiate between
  transactions that originated on the replica and transactions that
  originated on the source, and for a multi-source replica, between
  transactions that originated on different sources. The UUID you
  choose only has significance for the replica's own use. If any of the
  transactions sent by the source do have a GTID already, that GTID is
  retained.

  Channels specific to Group Replication cannot use
  ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS, but an asynchronous
  replication channel for another source on a server instance that is a
  Group Replication group member can do so. In that case, do not
  specify the Group Replication group name as the UUID for creating the
  GTIDs.

  To set ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS to LOCAL or uuid, the
  replica must have gtid_mode=ON set, and this cannot be changed
  afterwards. This option is for use with a source that has binary log
  file position based replication, so MASTER_AUTO_POSITION=1 cannot be
  set for the channel. Both the replication SQL thread and the
  replication I/O (receiver) thread must be stopped before setting this
  option.

  *Important*:

  A replica set up with ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS on any
  channel cannot be promoted to replace the replication source server
  in the event that a failover is required, and a backup taken from the
  replica cannot be used to restore the replication source server. The
  same restriction applies to replacing or restoring other replicas
  that use ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS on any channel.

  For further restrictions and information, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-assign-anon
  .html.

o GET_MASTER_PUBLIC_KEY = {0|1}

  Enables RSA key pair-based password exchange by requesting the public
  key from the source. The option is disabled by default.

  This option applies to replicas that authenticate with the
  caching_sha2_password authentication plugin. For connections by
  accounts that authenticate using this plugin, the source does not
  send the public key unless requested, so it must be requested or
  specified in the client. If MASTER_PUBLIC_KEY_PATH is given and
  specifies a valid public key file, it takes precedence over
  GET_MASTER_PUBLIC_KEY. If you are using a replication user account
  that authenticates with the caching_sha2_password plugin (which is
  the default from MySQL 8.0), and you are not using a secure
  connection, you must specify either this option or the
  MASTER_PUBLIC_KEY_PATH option to provide the RSA public key to the
  replica.

o GTID_ONLY = {0|1}

  Stops the replication channel persisting file names and file
  positions in the replication metadata repositories. GTID_ONLY is
  available as of MySQL 8.0.27. The GTID_ONLY option is disabled by
  default for asynchronous replication channels, but it is enabled by
  default for Group Replication channels, and it cannot be disabled for
  them.

  For replication channels with this setting, in-memory file positions
  are still tracked, and file positions can still be observed for
  debugging purposes in error messages and through interfaces such as
  SHOW REPLICA STATUS statements (where they are shown as being invalid
  if they are out of date). However, the writes and reads required to
  persist and check the file positions are avoided in situations where
  GTID-based replication does not actually require them, including the
  transaction queuing and application process.

  This option can be used only if both the replication SQL (applier)
  thread and replication I/O (receiver) thread are stopped. To set
  GTID_ONLY = 1 for a replication channel, GTIDs must be in use on the
  server (gtid_mode = ON), and row-based binary logging must be in use
  on the source (statement-based replication is not supported). The
  options REQUIRE_ROW_FORMAT = 1 and SOURCE_AUTO_POSITION = 1 must be
  set for the replication channel.

  When GTID_ONLY = 1 is set, the replica uses
  replica_parallel_workers=1 if that system variable is set to zero for
  the server, so it is always technically a multi-threaded applier.
  This is because a multi-threaded applier uses saved positions rather
  than the replication metadata repositories to locate the start of a
  transaction that it needs to reapply.

  If you disable GTID_ONLY after setting it, the existing relay logs
  are deleted and the existing known binary log file positions are
  persisted, even if they are stale. The file positions for the binary
  log and relay log in the replication metadata repositories might be
  invalid, and a warning is returned if this is the case. Provided that
  SOURCE_AUTO_POSITION is still enabled, GTID auto-positioning is used
  to provide the correct positioning.

  If you also disable SOURCE_AUTO_POSITION, the file positions for the
  binary log and relay log in the replication metadata repositories are
  used for positioning if they are valid. If they are marked as
  invalid, you must provide a valid binary log file name and position
  (SOURCE_LOG_FILE and SOURCE_LOG_POS). If you also provide a relay log
  file name and position (RELAY_LOG_FILE and RELAY_LOG_POS), the relay
  logs are preserved and the applier position is set to the stated
  position. GTID auto-skip ensures that any transactions already
  applied are skipped even if the eventual applier position is not
  correct.

o IGNORE_SERVER_IDS = (server_id_list)

  Makes the replica ignore events originating from the specified
  servers. The option takes a comma-separated list of 0 or more server
  IDs. Log rotation and deletion events from the servers are not
  ignored, and are recorded in the relay log.

  In circular replication, the originating server normally acts as the
  terminator of its own events, so that they are not applied more than
  once. Thus, this option is useful in circular replication when one of
  the servers in the circle is removed. Suppose that you have a
  circular replication setup with 4 servers, having server IDs 1, 2, 3,
  and 4, and server 3 fails. When bridging the gap by starting
  replication from server 2 to server 4, you can include
  IGNORE_SERVER_IDS = (3) in the CHANGE MASTER TO statement that you
  issue on server 4 to tell it to use server 2 as its source instead of
  server 3. Doing so causes it to ignore and not to propagate any
  statements that originated with the server that is no longer in use.

  If IGNORE_SERVER_IDS contains the server's own ID and the server was
  started with the --replicate-same-server-id option enabled, an error
  results.

  *Note*:

  When global transaction identifiers (GTIDs) are used for replication,
  transactions that have already been applied are automatically
  ignored, so the IGNORE_SERVER_IDS function is not required and is
  deprecated. If gtid_mode=ON is set for the server, a deprecation
  warning is issued if you include the IGNORE_SERVER_IDS option in a
  CHANGE MASTER TO statement.

  The source metadata repository and the output of SHOW REPLICA STATUS
  provide the list of servers that are currently ignored. For more
  information, see
  https://dev.mysql.com/doc/refman/8.0/en/replica-logs-status.html, and
  [HELP SHOW REPLICA STATUS].

  If a CHANGE MASTER TO statement is issued without any
  IGNORE_SERVER_IDS option, any existing list is preserved. To clear
  the list of ignored servers, it is necessary to use the option with
  an empty list:

CHANGE MASTER TO IGNORE_SERVER_IDS = ();

  RESET REPLICA ALL clears IGNORE_SERVER_IDS.

  *Note*:

  A deprecation warning is issued if SET GTID_MODE=ON is issued when
  any channel has existing server IDs set with IGNORE_SERVER_IDS.
  Before starting GTID-based replication, check for and clear all
  ignored server ID lists on the servers involved. The SHOW REPLICA
  STATUS statement displays the list of ignored IDs, if there is one.
  If you do receive the deprecation warning, you can still clear a list
  after gtid_mode=ON is set by issuing a CHANGE MASTER TO statement
  containing the IGNORE_SERVER_IDS option with an empty list.

o MASTER_AUTO_POSITION = {0|1}

  Makes the replica attempt to connect to the source using the
  auto-positioning feature of GTID-based replication, rather than a
  binary log file based position. This option is used to start a
  replica using GTID-based replication. The default is 0, meaning that
  GTID auto-positioning and GTID-based replication are not used. This
  option can be used with CHANGE MASTER TO only if both the replication
  SQL (applier) thread and replication I/O (receiver) thread are
  stopped.

  Both the replica and the source must have GTIDs enabled
  (GTID_MODE=ON, ON_PERMISSIVE, or OFF_PERMISSIVE on the replica, and
  GTID_MODE=ON on the source). MASTER_LOG_FILE, MASTER_LOG_POS,
  RELAY_LOG_FILE, and RELAY_LOG_POS cannot be specified together with
  MASTER_AUTO_POSITION = 1. If multi-source replication is enabled on
  the replica, you need to set the MASTER_AUTO_POSITION = 1 option for
  each applicable replication channel.

  With MASTER_AUTO_POSITION = 1 set, in the initial connection
  handshake, the replica sends a GTID set containing the transactions
  that it has already received, committed, or both. The source responds
  by sending all transactions recorded in its binary log whose GTID is
  not included in the GTID set sent by the replica. This exchange
  ensures that the source only sends the transactions with a GTID that
  the replica has not already recorded or committed. If the replica
  receives transactions from more than one source, as in the case of a
  diamond topology, the auto-skip function ensures that the
  transactions are not applied twice. For details of how the GTID set
  sent by the replica is computed, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-auto-positi
  oning.html.

  If any of the transactions that should be sent by the source have
  been purged from the source's binary log, or added to the set of
  GTIDs in the gtid_purged system variable by another method, the
  source sends the error ER_MASTER_HAS_PURGED_REQUIRED_GTIDS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_master_has_purged_required_gtids) to the replica, and
  replication does not start. The GTIDs of the missing purged
  transactions are identified and listed in the source's error log in
  the warning message ER_FOUND_MISSING_GTIDS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_found_missing_gtids). Also, if during the exchange of
  transactions it is found that the replica has recorded or committed
  transactions with the source's UUID in the GTID, but the source
  itself has not committed them, the source sends the error
  ER_SLAVE_HAS_MORE_GTIDS_THAN_MASTER
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_slave_has_more_gtids_than_master) to the replica and
  replication does not start. For information on how to handle these
  situations, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-auto-positi
  oning.html.

  You can see whether replication is running with GTID auto-positioning
  enabled by checking the Performance Schema
  replication_connection_status table or the output of SHOW REPLICA
  STATUS. Disabling the MASTER_AUTO_POSITION option again makes the
  replica revert to file-based replication.

o MASTER_BIND = 'interface_name'

  Determines which of the replica's network interfaces is chosen for
  connecting to the source, for use on replicas that have multiple
  network interfaces. Specify the IP address of the network interface.
  The maximum length of the string value is 255 characters.

  The IP address configured with this option, if any, can be seen in
  the Master_Bind column of the output from SHOW REPLICA STATUS. In the
  source metadata repository table mysql.slave_master_info, the value
  can be seen as the Master_bind column. The ability to bind a replica
  to a specific network interface is also supported by NDB Cluster.

o MASTER_COMPRESSION_ALGORITHMS = 'algorithm[,algorithm][,algorithm]'

  Specifies one, two, or three of the permitted compression algorithms
  for connections to the replication source server, separated by
  commas. The maximum length of the string value is 99 characters. The
  default value is uncompressed.

  The available algorithms are zlib, zstd, and uncompressed, the same
  as for the protocol_compression_algorithms system variable. The
  algorithms can be specified in any order, but it is not an order of
  preference - the algorithm negotiation process attempts to use zlib,
  then zstd, then uncompressed, if they are specified.
  MASTER_COMPRESSION_ALGORITHMS is available as of MySQL 8.0.18.

  The value of MASTER_COMPRESSION_ALGORITHMS applies only if the
  replica_compressed_protocol or slave_compressed_protocol system
  variable is disabled. If replica_compressed_protocol or
  slave_compressed_protocol is enabled, it takes precedence over
  MASTER_COMPRESSION_ALGORITHMS and connections to the source use zlib
  compression if both source and replica support that algorithm. For
  more information, see
  https://dev.mysql.com/doc/refman/8.0/en/connection-compression-contro
  l.html.

  Binary log transaction compression (available as of MySQL 8.0.20),
  which is activated by the binlog_transaction_compression system
  variable, can also be used to save bandwidth. If you do this in
  combination with connection compression, connection compression has
  less opportunity to act on the data, but can still compress headers
  and those events and transaction payloads that are uncompressed. For
  more information on binary log transaction compression, see
  https://dev.mysql.com/doc/refman/8.0/en/binary-log-transaction-compre
  ssion.html.

o MASTER_CONNECT_RETRY = interval

  Specifies the interval in seconds between the reconnection attempts
  that the replica makes after the connection to the source times out.
  The default interval is 60.

  The attempts are limited by the MASTER_RETRY_COUNT option. If both
  the default settings are used, the replica waits 60 seconds between
  reconnection attempts (MASTER_CONNECT_RETRY=60), and keeps attempting
  to reconnect at this rate for 60 days (MASTER_RETRY_COUNT=86400).
  These values are recorded in the source metadata repository and shown
  in the replication_connection_configuration Performance Schema table.

o MASTER_DELAY = interval

  Specifies how many seconds behind the source the replica must lag. An
  event received from the source is not executed until at least
  interval seconds later than its execution on the source. interval
  must be a nonnegative integer in the range from 0 to 231−1. The
  default is 0. For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-delayed.html.

  A CHANGE MASTER TO statement employing the MASTER_DELAY option can be
  executed on a running replica when the replication SQL thread is
  stopped.

o MASTER_HEARTBEAT_PERIOD = interval

  Controls the heartbeat interval, which stops the connection timeout
  occurring in the absence of data if the connection is still good. A
  heartbeat signal is sent to the replica after that number of seconds,
  and the waiting period is reset whenever the source's binary log is
  updated with an event. Heartbeats are therefore sent by the source
  only if there are no unsent events in the binary log file for a
  period longer than this.

  The heartbeat interval interval is a decimal value having the range 0
  to 4294967 seconds and a resolution in milliseconds; the smallest
  nonzero value is 0.001. Setting interval to 0 disables heartbeats
  altogether. The heartbeat interval defaults to half the value of the
  replica_net_timeout or slave_net_timeout system variable. It is
  recorded in the source metadata repository and shown in the
  replication_connection_configuration Performance Schema table.

  The system variable replica_net_timeout (from MySQL 8.0.26) or
  slave_net_timeout (before MySQL 8.0.26) specifies the number of
  seconds that the replica waits for either more data or a heartbeat
  signal from the source, before the replica considers the connection
  broken, aborts the read, and tries to reconnect. The default value is
  60 seconds (one minute). Note that a change to the value or default
  setting of replica_net_timeout or slave_net_timeout does not
  automatically change the heartbeat interval, whether that has been
  set explicitly or is using a previously calculated default. A warning
  is issued if you set the global value of replica_net_timeout or
  slave_net_timeout to a value less than that of the current heartbeat
  interval. If replica_net_timeout or slave_net_timeout is changed, you
  must also issue CHANGE MASTER TO to adjust the heartbeat interval to
  an appropriate value so that the heartbeat signal occurs before the
  connection timeout. If you do not do this, the heartbeat signal has
  no effect, and if no data is received from the source, the replica
  can make repeated reconnection attempts, creating zombie dump
  threads.

o MASTER_HOST = 'host_name'

  The host name or IP address of the replication source server. The
  replica uses this to connect to the source. The maximum length of the
  string value is 255 characters. Before MySQL 8.0.17 it was 60
  characters.

  If you specify MASTER_HOST or MASTER_PORT, the replica assumes that
  the source server is different from before (even if the option value
  is the same as its current value.) In this case, the old values for
  the source's binary log file name and position are considered no
  longer applicable, so if you do not specify MASTER_LOG_FILE and
  MASTER_LOG_POS in the statement, MASTER_LOG_FILE='' and
  MASTER_LOG_POS=4 are silently appended to it.

  Setting MASTER_HOST='' (that is, setting its value explicitly to an
  empty string) is not the same as not setting MASTER_HOST at all.
  Trying to set MASTER_HOST to an empty string fails with an error.

o MASTER_LOG_FILE = 'source_log_name', MASTER_LOG_POS = source_log_pos

  The binary log file name, and the location in that file, at which the
  replication I/O (receiver) thread begins reading from the source's
  binary log the next time the thread starts. Specify these options if
  you are using binary log file position based replication.

  MASTER_LOG_FILE must include the numeric suffix of a specific binary
  log file that is available on the source server, for example,
  MASTER_LOG_FILE='binlog.000145'. The maximum length of the string
  value is 511 characters.

  MASTER_LOG_POS is the numeric position for the replica to start
  reading in that file. MASTER_LOG_POS=4 represents the start of the
  events in a binary log file.

  If you specify either of MASTER_LOG_FILE or MASTER_LOG_POS, you
  cannot specify MASTER_AUTO_POSITION = 1, which is for GTID-based
  replication.

  If neither of MASTER_LOG_FILE or MASTER_LOG_POS is specified, the
  replica uses the last coordinates of the replication SQL (applier)
  thread before CHANGE MASTER TO was issued. This ensures that there is
  no discontinuity in replication, even if the replication SQL
  (applier) thread was late compared to the replication I/O (receiver)
  thread.

o MASTER_PASSWORD = 'password'

  The password for the replication user account to use for connecting
  to the replication source server. The maximum length of the string
  value is 32 characters. If you specify MASTER_PASSWORD, MASTER_USER
  is also required.

  The password used for a replication user account in a CHANGE MASTER
  TO statement is limited to 32 characters in length. Trying to use a
  password of more than 32 characters causes CHANGE MASTER TO to fail.

  The password is masked in MySQL Server's logs, Performance Schema
  tables, and SHOW PROCESSLIST statements.

o MASTER_PORT = port_num

  The TCP/IP port number that the replica uses to connect to the
  replication source server.

  *Note*:

  Replication cannot use Unix socket files. You must be able to connect
  to the replication source server using TCP/IP.

  If you specify MASTER_HOST or MASTER_PORT, the replica assumes that
  the source server is different from before (even if the option value
  is the same as its current value). In this case, the old values for
  the source's binary log file name and position are considered no
  longer applicable, so if you do not specify MASTER_LOG_FILE and
  MASTER_LOG_POS in the statement, MASTER_LOG_FILE='' and
  MASTER_LOG_POS=4 are silently appended to it.

o MASTER_PUBLIC_KEY_PATH = 'key_file_name'

  Enables RSA key pair-based password exchange by providing the path
  name to a file containing a replica-side copy of the public key
  required by the source. The file must be in PEM format. The maximum
  length of the string value is 511 characters.

  This option applies to replicas that authenticate with the
  sha256_password or caching_sha2_password authentication plugin. (For
  sha256_password, MASTER_PUBLIC_KEY_PATH can be used only if MySQL was
  built using OpenSSL.) If you are using a replication user account
  that authenticates with the caching_sha2_password plugin (which is
  the default from MySQL 8.0), and you are not using a secure
  connection, you must specify either this option or the
  GET_MASTER_PUBLIC_KEY=1 option to provide the RSA public key to the
  replica.

o MASTER_RETRY_COUNT = count

  Sets the maximum number of reconnection attempts that the replica
  makes after the connection to the source times out, as determined by
  the replica_net_timeout or slave_net_timeout system variable. If the
  replica does need to reconnect, the first retry occurs immediately
  after the timeout. The default is 86400 attempts.

  The interval between the attempts is specified by the
  MASTER_CONNECT_RETRY option. If both the default settings are used,
  the replica waits 60 seconds between reconnection attempts
  (MASTER_CONNECT_RETRY=60), and keeps attempting to reconnect at this
  rate for 60 days (MASTER_RETRY_COUNT=86400). A setting of 0 for
  MASTER_RETRY_COUNT means that there is no limit on the number of
  reconnection attempts, so the replica keeps trying to reconnect
  indefinitely.

  The values for MASTER_CONNECT_RETRY and MASTER_RETRY_COUNT are
  recorded in the source metadata repository and shown in the
  replication_connection_configuration Performance Schema table.
  MASTER_RETRY_COUNT supersedes the --master-retry-count server startup
  option.

o MASTER_SSL = {0|1}

  Specify whether the replica encrypts the replication connection. The
  default is 0, meaning that the replica does not encrypt the
  replication connection. If you set MASTER_SSL=1, you can configure
  the encryption using the MASTER_SSL_xxx and MASTER_TLS_xxx options.

  Setting MASTER_SSL=1 for a replication connection and then setting no
  further MASTER_SSL_xxx options corresponds to setting
  --ssl-mode=REQUIRED for the client, as described in
  https://dev.mysql.com/doc/refman/8.0/en/connection-options.html#encry
  pted-connection-options. With MASTER_SSL=1, the connection attempt
  only succeeds if an encrypted connection can be established. A
  replication connection does not fall back to an unencrypted
  connection, so there is no setting corresponding to the
  --ssl-mode=PREFERRED setting for replication. If MASTER_SSL=0 is set,
  this corresponds to --ssl-mode=DISABLED.

  *Important*:

  To help prevent sophisticated man-in-the-middle attacks, it is
  important for the replica to verify the server's identity. You can
  specify additional MASTER_SSL_xxx options to correspond to the
  settings --ssl-mode=VERIFY_CA and --ssl-mode=VERIFY_IDENTITY, which
  are a better choice than the default setting to help prevent this
  type of attack. With these settings, the replica checks that the
  server's certificate is valid, and checks that the host name the
  replica is using matches the identity in the server's certificate. To
  implement one of these levels of verification, you must first ensure
  that the CA certificate for the server is reliably available to the
  replica, otherwise availability issues will result. For this reason,
  they are not the default setting.

o MASTER_SSL_xxx, MASTER_TLS_xxx

  Specify how the replica uses encryption and ciphers to secure the
  replication connection. These options can be changed even on replicas
  that are compiled without SSL support. They are saved to the source
  metadata repository, but are ignored if the replica does not have SSL
  support enabled. The maximum length of the value for the
  string-valued MASTER_SSL_xxx and MASTER_TLS_xxx options is 511
  characters, with the exception of MASTER_TLS_CIPHERSUITES, for which
  it is 4000 characters.

  The MASTER_SSL_xxx and MASTER_TLS_xxx options perform the same
  functions as the --ssl-xxx and --tls-xxx client options described in
  https://dev.mysql.com/doc/refman/8.0/en/connection-options.html#encry
  pted-connection-options. The correspondence between the two sets of
  options, and the use of the MASTER_SSL_xxx and MASTER_TLS_xxx options
  to set up a secure connection, is explained in
  https://dev.mysql.com/doc/refman/8.0/en/replication-encrypted-connect
  ions.html.

o MASTER_USER = 'user_name'

  The user name for the replication user account to use for connecting
  to the replication source server. The maximum length of the string
  value is 96 characters.

  For Group Replication, this account must exist on every member of the
  replication group. It is used for distributed recovery if the XCom
  communication stack is in use for the group, and also used for group
  communication connections if the MySQL communication stack is in use
  for the group. With the MySQL communication stack, the account must
  have the GROUP_REPLICATION_STREAM permission.

  It is possible to set an empty user name by specifying
  MASTER_USER='', but the replication channel cannot be started with an
  empty user name. In releases before MySQL 8.0.21, only set an empty
  MASTER_USER user name if you need to clear previously used
  credentials from the replication metadata repositories for security
  purposes. Do not use the channel afterwards, due to a bug in these
  releases that can substitute a default user name if an empty user
  name is read from the repositories (for example, during an automatic
  restart of a Group Replication channel). From MySQL 8.0.21, it is
  valid to set an empty MASTER_USER user name and use the channel
  afterwards if you always provide user credentials using the START
  REPLICA statement or START GROUP_REPLICATION statement that starts
  the replication channel. This approach means that the replication
  channel always needs operator intervention to restart, but the user
  credentials are not recorded in the replication metadata
  repositories.

  *Important*:

  To connect to the source using a replication user account that
  authenticates with the caching_sha2_password plugin, you must either
  set up a secure connection as described in
  https://dev.mysql.com/doc/refman/8.0/en/replication-encrypted-connect
  ions.html, or enable the unencrypted connection to support password
  exchange using an RSA key pair. The caching_sha2_password
  authentication plugin is the default for new users created from MySQL
  8.0 (for details, see
  https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authen
  tication.html). If the user account that you create or use for
  replication uses this authentication plugin, and you are not using a
  secure connection, you must enable RSA key pair-based password
  exchange for a successful connection. You can do this using either
  the MASTER_PUBLIC_KEY_PATH option or the GET_MASTER_PUBLIC_KEY=1
  option for this statement.

o MASTER_ZSTD_COMPRESSION_LEVEL = level

  The compression level to use for connections to the replication
  source server that use the zstd compression algorithm. The permitted
  levels are from 1 to 22, with larger values indicating increasing
  levels of compression. The default level is 3.
  MASTER_ZSTD_COMPRESSION_LEVEL is available as of MySQL 8.0.18.

  The compression level setting has no effect on connections that do
  not use zstd compression. For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/connection-compression-contro
  l.html.

o NETWORK_NAMESPACE = 'namespace'

  The network namespace to use for TCP/IP connections to the
  replication source server or, if the MySQL communication stack is in
  use, for Group Replication's group communication connections. The
  maximum length of the string value is 64 characters. If this option
  is omitted, connections from the replica use the default (global)
  namespace. On platforms that do not implement network namespace
  support, failure occurs when the replica attempts to connect to the
  source. For information about network namespaces, see
  https://dev.mysql.com/doc/refman/8.0/en/network-namespace-support.htm
  l. NETWORK_NAMESPACE is available as of MySQL 8.0.22.

o PRIVILEGE_CHECKS_USER = {NULL | 'account'}

  Names a user account that supplies a security context for the
  specified channel. NULL, which is the default, means no security
  context is used. PRIVILEGE_CHECKS_USER is available as of MySQL
  8.0.18.

  The user name and host name for the user account must follow the
  syntax described in
  https://dev.mysql.com/doc/refman/8.0/en/account-names.html, and the
  user must not be an anonymous user (with a blank user name) or the
  CURRENT_USER. The account must have the REPLICATION_APPLIER
  privilege, plus the required privileges to execute the transactions
  replicated on the channel. For details of the privileges required by
  the account, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-privilege-checks.
  html. When you restart the replication channel, the privilege checks
  are applied from that point on. If you do not specify a channel and
  no other channels exist, the statement is applied to the default
  channel.

  The use of row-based binary logging is strongly recommended when
  PRIVILEGE_CHECKS_USER is set, and you can set REQUIRE_ROW_FORMAT to
  enforce this. For example, to start privilege checks on the channel
  channel_1 on a running replica, issue the following statements:

mysql&gt; STOP REPLICA FOR CHANNEL 'channel_1';
mysql&gt; CHANGE MASTER TO
         PRIVILEGE_CHECKS_USER = 'priv_repl'@'%.example.com',
         REQUIRE_ROW_FORMAT = 1,
         FOR CHANNEL 'channel_1';
mysql&gt; START REPLICA FOR CHANNEL 'channel_1';

  For releases from MySQL 8.0.22, use START REPLICA and STOP REPLICA,
  and for releases before MySQL 8.0.22, use START SLAVE and STOP SLAVE.
  The statements work in the same way, only the terminology has
  changed.

o RELAY_LOG_FILE = 'relay_log_file' , RELAY_LOG_POS = 'relay_log_pos'

  The relay log file name, and the location in that file, at which the
  replication SQL thread begins reading from the replica's relay log
  the next time the thread starts. RELAY_LOG_FILE can use either an
  absolute or relative path, and uses the same base name as
  MASTER_LOG_FILE. The maximum length of the string value is 511
  characters.

  A CHANGE MASTER TO statement using RELAY_LOG_FILE, RELAY_LOG_POS, or
  both options can be executed on a running replica when the
  replication SQL thread is stopped. Relay logs are preserved if at
  least one of the replication SQL (applier) thread and the replication
  I/O (receiver) thread is running. If both threads are stopped, all
  relay log files are deleted unless at least one of RELAY_LOG_FILE or
  RELAY_LOG_POS is specified. For the Group Replication applier channel
  (group_replication_applier), which only has an applier thread and no
  receiver thread, this is the case if the applier thread is stopped,
  but with that channel you cannot use the RELAY_LOG_FILE and
  RELAY_LOG_POS options.

o REQUIRE_ROW_FORMAT = {0|1}

  Permits only row-based replication events to be processed by the
  replication channel. This option prevents the replication applier
  from taking actions such as creating temporary tables and executing
  LOAD DATA INFILE requests, which increases the security of the
  channel. The REQUIRE_ROW_FORMAT option is disabled by default for
  asynchronous replication channels, but it is enabled by default for
  Group Replication channels, and it cannot be disabled for them. For
  more information, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-privilege-checks.
  html. REQUIRE_ROW_FORMAT is available as of MySQL 8.0.19.

o REQUIRE_TABLE_PRIMARY_KEY_CHECK = {STREAM | ON | OFF}

  Enables a replica to select its own policy for primary key checks.
  The default is STREAM. REQUIRE_TABLE_PRIMARY_KEY_CHECK is available
  as of MySQL 8.0.20.

  When the option is set to ON for a replication channel, the replica
  always uses the value ON for the sql_require_primary_key system
  variable in replication operations, requiring a primary key. When the
  option is set to OFF, the replica always uses the value OFF for the
  sql_require_primary_key system variable in replication operations, so
  that a primary key is never required, even if the source required
  one. When the REQUIRE_TABLE_PRIMARY_KEY_CHECK option is set to
  STREAM, which is the default, the replica uses whatever value is
  replicated from the source for each transaction.

  For multisource replication, setting REQUIRE_TABLE_PRIMARY_KEY_CHECK
  to ON or OFF enables a replica to normalize behavior across the
  replication channels for different sources, and keep a consistent
  setting for the sql_require_primary_key system variable. Using ON
  safeguards against the accidental loss of primary keys when multiple
  sources update the same set of tables. Using OFF allows sources that
  can manipulate primary keys to work alongside sources that cannot.

  When PRIVILEGE_CHECKS_USER is set, setting
  REQUIRE_TABLE_PRIMARY_KEY_CHECK to ON or OFF means that the user
  account does not need session administration level privileges to set
  restricted session variables, which are required to change the value
  of sql_require_primary_key to match the source's setting for each
  transaction. For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-privilege-checks.
  html.

o SOURCE_CONNECTION_AUTO_FAILOVER = {0|1}

  Activates the asynchronous connection failover mechanism for a
  replication channel if one or more alternative replication source
  servers are available (so when there are multiple MySQL servers or
  groups of servers that share the replicated data).
  SOURCE_CONNECTION_AUTO_FAILOVER is available as of MySQL 8.0.22. The
  default is 0, meaning that the mechanism is not activated. For full
  information and instructions to set up this feature, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-asynchronous-conn
  ection-failover-replica.html.

  The asynchronous connection failover mechanism takes over after the
  reconnection attempts controlled by MASTER_CONNECT_RETRY and
  MASTER_RETRY_COUNT are exhausted. It reconnects the replica to an
  alternative source chosen from a specified source list, which you
  manage using the asynchronous_connection_failover_add_source and
  asynchronous_connection_failover_delete_source functions. To add and
  remove managed groups of servers, use the
  asynchronous_connection_failover_add_managed and
  asynchronous_connection_failover_delete_managed functions instead.
  For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-asynchronous-conn
  ection-failover.html.

  *Important*:

   1. You can only set SOURCE_CONNECTION_AUTO_FAILOVER = 1 when GTID
      auto-positioning is in use (MASTER_AUTO_POSITION = 1).

   2. When you set SOURCE_CONNECTION_AUTO_FAILOVER = 1, set
      MASTER_RETRY_COUNT and MASTER_CONNECT_RETRY to minimal numbers
      that just allow a few retry attempts with the same source in a
      short time, in case the connection failure is caused by a
      transient network outage. Otherwise the asynchronous connection
      failover mechanism cannot be activated promptly. Suitable values
      are MASTER_RETRY_COUNT=3 and MASTER_CONNECT_RETRY=10, which make
      the replica retry the connection 3 times with 10-second intervals
      between.

   3. When you set SOURCE_CONNECTION_AUTO_FAILOVER = 1, the replication
      metadata repositories must contain the credentials for a
      replication user account that can be used to connect to all the
      servers on the source list for the replication channel. These
      credentials can be set using the CHANGE REPLICATION SOURCE TO
      statement with the MASTER_USER and MASTER_PASSWORD options. For
      more information, see
      https://dev.mysql.com/doc/refman/8.0/en/replication-asynchronous-
      connection-failover.html.

   4. From MySQL 8.0.27, when you set SOURCE_CONNECTION_AUTO_FAILOVER =
      1, asynchronous connection failover for replicas is automatically
      activated if this replication channel is on a Group Replication
      primary in a group in single-primary mode. With this function
      active, if the primary that is replicating goes offline or into
      an error state, the new primary starts replication on the same
      channel when it is elected. If you want to use the function, this
      replication channel must also be set up on all the secondary
      servers in the replication group, and on any new joining members.
      (If the servers are provisioned using MySQL's clone
      functionality, this all happens automatically.) If you do not
      want to use the function, disable it by using the
      group_replication_disable_member_action function to disable the
      Group Replication member action
      mysql_start_failover_channels_if_primary, which is enabled by
      default. For more information, see
      https://dev.mysql.com/doc/refman/8.0/en/replication-asynchronous-
      connection-failover-replica.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html</field>
	</row>
	<row>
		<field name="help_topic_id">578</field>
		<field name="name">CHANGE REPLICATION FILTER</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
CHANGE REPLICATION FILTER filter[, filter]
	[, ...] [FOR CHANNEL channel]

filter: {
    REPLICATE_DO_DB = (db_list)
  | REPLICATE_IGNORE_DB = (db_list)
  | REPLICATE_DO_TABLE = (tbl_list)
  | REPLICATE_IGNORE_TABLE = (tbl_list)
  | REPLICATE_WILD_DO_TABLE = (wild_tbl_list)
  | REPLICATE_WILD_IGNORE_TABLE = (wild_tbl_list)
  | REPLICATE_REWRITE_DB = (db_pair_list)
}

db_list:
    db_name[, db_name][, ...]

tbl_list:
    db_name.table_name[, db_name.table_name][, ...]
wild_tbl_list:
    'db_pattern.table_pattern'[, 'db_pattern.table_pattern'][, ...]

db_pair_list:
    (db_pair)[, (db_pair)][, ...]

db_pair:
    from_db, to_db

CHANGE REPLICATION FILTER sets one or more replication filtering rules
on the replica in the same way as starting the replica mysqld with
replication filtering options such as --replicate-do-db or
--replicate-wild-ignore-table. Filters set using this statement differ
from those set using the server options in two key respects:

1. The statement does not require restarting the server to take effect,
   only that the replication SQL thread be stopped using STOP REPLICA
   SQL_THREAD first (and restarted with START REPLICA SQL_THREAD
   afterwards).

2. The effects of the statement are not persistent; any filters set
   using CHANGE REPLICATION FILTER are lost following a restart of the
   replica mysqld.

CHANGE REPLICATION FILTER requires the REPLICATION_SLAVE_ADMIN
privilege (or the deprecated SUPER privilege).

Use the FOR CHANNEL channel clause to make a replication filter
specific to a replication channel, for example on a multi-source
replica. Filters applied without a specific FOR CHANNEL clause are
considered global filters, meaning that they are applied to all
replication channels.

Global replication filters cannot be set on a MySQL server instance
that is configured for Group Replication, because filtering
transactions on some servers would make the group unable to reach
agreement on a consistent state. Channel specific replication filters
can be set on replication channels that are not directly involved with
Group Replication, such as where a group member also acts as a replica
to a source that is outside the group. They cannot be set on the
group_replication_applier or group_replication_recovery channels.

The following list shows the CHANGE REPLICATION FILTER options and how
they relate to --replicate-* server options:

o REPLICATE_DO_DB: Include updates based on database name. Equivalent
  to --replicate-do-db.

o REPLICATE_IGNORE_DB: Exclude updates based on database name.
  Equivalent to --replicate-ignore-db.

o REPLICATE_DO_TABLE: Include updates based on table name. Equivalent
  to --replicate-do-table.

o REPLICATE_IGNORE_TABLE: Exclude updates based on table name.
  Equivalent to --replicate-ignore-table.

o REPLICATE_WILD_DO_TABLE: Include updates based on wildcard pattern
  matching table name. Equivalent to --replicate-wild-do-table.

o REPLICATE_WILD_IGNORE_TABLE: Exclude updates based on wildcard
  pattern matching table name. Equivalent to
  --replicate-wild-ignore-table.

o REPLICATE_REWRITE_DB: Perform updates on replica after substituting
  new name on replica for specified database on source. Equivalent to
  --replicate-rewrite-db.

The precise effects of REPLICATE_DO_DB and REPLICATE_IGNORE_DB filters
are dependent on whether statement-based or row-based replication is in
effect. See
https://dev.mysql.com/doc/refman/8.0/en/replication-rules.html, for
more information.

Multiple replication filtering rules can be created in a single CHANGE
REPLICATION FILTER statement by separating the rules with commas, as
shown here:

CHANGE REPLICATION FILTER
    REPLICATE_DO_DB = (d1), REPLICATE_IGNORE_DB = (d2);

Issuing the statement just shown is equivalent to starting the replica
mysqld with the options --replicate-do-db=d1 --replicate-ignore-db=d2.

On a multi-source replica, which uses multiple replication channels to
process transaction from different sources, use the FOR CHANNEL channel
clause to set a replication filter on a replication channel:

CHANGE REPLICATION FILTER REPLICATE_DO_DB = (d1) FOR CHANNEL channel_1;

This enables you to create a channel specific replication filter to
filter out selected data from a source. When a FOR CHANNEL clause is
provided, the replication filter statement acts on that replication
channel, removing any existing replication filter which has the same
filter type as the specified replication filters, and replacing them
with the specified filter. Filter types not explicitly listed in the
statement are not modified. If issued against a replication channel
which is not configured, the statement fails with an
ER_SLAVE_CONFIGURATION error. If issued against Group Replication
channels, the statement fails with an
ER_SLAVE_CHANNEL_OPERATION_NOT_ALLOWED error.

On a replica with multiple replication channels configured, issuing
CHANGE REPLICATION FILTER with no FOR CHANNEL clause configures the
replication filter for every configured replication channel, and for
the global replication filters. For every filter type, if the filter
type is listed in the statement, then any existing filter rules of that
type are replaced by the filter rules specified in the most recently
issued statement, otherwise the old value of the filter type is
retained. For more information see
https://dev.mysql.com/doc/refman/8.0/en/replication-rules-channel-based
-filters.html.

If the same filtering rule is specified multiple times, only the last
such rule is actually used. For example, the two statements shown here
have exactly the same effect, because the first REPLICATE_DO_DB rule in
the first statement is ignored:

CHANGE REPLICATION FILTER
    REPLICATE_DO_DB = (db1, db2), REPLICATE_DO_DB = (db3, db4);

CHANGE REPLICATION FILTER
    REPLICATE_DO_DB = (db3, db4);

*Caution*:

This behavior differs from that of the --replicate-* filter options
where specifying the same option multiple times causes the creation of
multiple filter rules.

Names of tables and database not containing any special characters need
not be quoted. Values used with REPLICATION_WILD_TABLE and
REPLICATION_WILD_IGNORE_TABLE are string expressions, possibly
containing (special) wildcard characters, and so must be quoted. This
is shown in the following example statements:

CHANGE REPLICATION FILTER
    REPLICATE_WILD_DO_TABLE = ('db1.old%');

CHANGE REPLICATION FILTER
    REPLICATE_WILD_IGNORE_TABLE = ('db1.new%', 'db2.new%');

Values used with REPLICATE_REWRITE_DB represent pairs of database
names; each such value must be enclosed in parentheses. The following
statement rewrites statements occurring on database db1 on the source
to database db2 on the replica:

CHANGE REPLICATION FILTER REPLICATE_REWRITE_DB = ((db1, db2));

The statement just shown contains two sets of parentheses, one
enclosing the pair of database names, and the other enclosing the
entire list. This is perhaps more easily seen in the following example,
which creates two rewrite-db rules, one rewriting database dbA to dbB,
and one rewriting database dbC to dbD:

CHANGE REPLICATION FILTER
  REPLICATE_REWRITE_DB = ((dbA, dbB), (dbC, dbD));

The CHANGE REPLICATION FILTER statement replaces replication filtering
rules only for the filter types and replication channels affected by
the statement, and leaves other rules and channels unchanged. If you
want to unset all filters of a given type, set the filter's value to an
explicitly empty list, as shown in this example, which removes all
existing REPLICATE_DO_DB and REPLICATE_IGNORE_DB rules:

CHANGE REPLICATION FILTER
    REPLICATE_DO_DB = (), REPLICATE_IGNORE_DB = ();

Setting a filter to empty in this way removes all existing rules, does
not create any new ones, and does not restore any rules set at mysqld
startup using --replicate-* options on the command line or in the
configuration file.

The RESET REPLICA ALL statement removes channel specific replication
filters that were set on channels deleted by the statement. When the
deleted channel or channels are recreated, any global replication
filters specified for the replica are copied to them, and no channel
specific replication filters are applied.

For more information, see
https://dev.mysql.com/doc/refman/8.0/en/replication-rules.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/change-replication-filter.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/change-replication-filter.html</field>
	</row>
	<row>
		<field name="help_topic_id">579</field>
		<field name="name">CHANGE REPLICATION SOURCE TO</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
CHANGE REPLICATION SOURCE TO option [, option] ... [ channel_option ]

option: {
    SOURCE_BIND = 'interface_name'
  | SOURCE_HOST = 'host_name'
  | SOURCE_USER = 'user_name'
  | SOURCE_PASSWORD = 'password'
  | SOURCE_PORT = port_num
  | PRIVILEGE_CHECKS_USER = {NULL | 'account'}
  | REQUIRE_ROW_FORMAT = {0|1}
  | REQUIRE_TABLE_PRIMARY_KEY_CHECK = {STREAM | ON | OFF | GENERATE}
  | ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS = {OFF | LOCAL | uuid}
  | SOURCE_LOG_FILE = 'source_log_name'
  | SOURCE_LOG_POS = source_log_pos
  | SOURCE_AUTO_POSITION = {0|1}
  | RELAY_LOG_FILE = 'relay_log_name'
  | RELAY_LOG_POS = relay_log_pos
  | SOURCE_HEARTBEAT_PERIOD = interval
  | SOURCE_CONNECT_RETRY = interval
  | SOURCE_RETRY_COUNT = count
  | SOURCE_CONNECTION_AUTO_FAILOVER = {0|1}
  | SOURCE_DELAY = interval
  | SOURCE_COMPRESSION_ALGORITHMS = 'algorithm[,algorithm][,algorithm]'
  | SOURCE_ZSTD_COMPRESSION_LEVEL = level
  | SOURCE_SSL = {0|1}
  | SOURCE_SSL_CA = 'ca_file_name'
  | SOURCE_SSL_CAPATH = 'ca_directory_name'
  | SOURCE_SSL_CERT = 'cert_file_name'
  | SOURCE_SSL_CRL = 'crl_file_name'
  | SOURCE_SSL_CRLPATH = 'crl_directory_name'
  | SOURCE_SSL_KEY = 'key_file_name'
  | SOURCE_SSL_CIPHER = 'cipher_list'
  | SOURCE_SSL_VERIFY_SERVER_CERT = {0|1}
  | SOURCE_TLS_VERSION = 'protocol_list'
  | SOURCE_TLS_CIPHERSUITES = 'ciphersuite_list'
  | SOURCE_PUBLIC_KEY_PATH = 'key_file_name'
  | GET_SOURCE_PUBLIC_KEY = {0|1}
  | NETWORK_NAMESPACE = 'namespace'
  | IGNORE_SERVER_IDS = (server_id_list),
  | GTID_ONLY = {0|1}
}

channel_option:
    FOR CHANNEL channel

server_id_list:
    [server_id [, server_id] ... ]

CHANGE REPLICATION SOURCE TO changes the parameters that the replica
server uses for connecting to the source and reading data from the
source. It also updates the contents of the replication metadata
repositories (see
https://dev.mysql.com/doc/refman/8.0/en/replica-logs.html). In MySQL
8.0.23 and later, use CHANGE REPLICATION SOURCE TO in place of the
deprecated CHANGE MASTER TO statement.

CHANGE REPLICATION SOURCE TO requires the REPLICATION_SLAVE_ADMIN
privilege (or the deprecated SUPER privilege).

Options that you do not specify on a CHANGE REPLICATION SOURCE TO
statement retain their value, except as indicated in the following
discussion. In most cases, there is therefore no need to specify
options that do not change.

Values used for SOURCE_HOST and other CHANGE REPLICATION SOURCE TO
options are checked for linefeed (\n or 0x0A) characters. The presence
of such characters in these values causes the statement to fail with an
error.

The optional FOR CHANNEL channel clause lets you name which replication
channel the statement applies to. Providing a FOR CHANNEL channel
clause applies the CHANGE REPLICATION SOURCE TO statement to a specific
replication channel, and is used to add a new channel or modify an
existing channel. For example, to add a new channel called channel2:

CHANGE REPLICATION SOURCE TO SOURCE_HOST=host1, SOURCE_PORT=3002 FOR CHANNEL 'channel2';

If no clause is named and no extra channels exist, a CHANGE REPLICATION
SOURCE TO statement applies to the default channel, whose name is the
empty string (&quot;&quot;). When you have set up multiple replication channels,
every CHANGE REPLICATION SOURCE TO statement must name a channel using
the FOR CHANNEL channel clause. See
https://dev.mysql.com/doc/refman/8.0/en/replication-channels.html for
more information.

For some of the options of the CHANGE REPLICATION SOURCE TO statement,
you must issue a STOP REPLICA statement prior to issuing a CHANGE
REPLICATION SOURCE TO statement (and a START REPLICA statement
afterwards). Sometimes, you only need to stop the replication SQL
(applier) thread or the replication I/O (receiver) thread, not both:

o When the applier thread is stopped, you can execute CHANGE
  REPLICATION SOURCE TO using any combination that is otherwise allowed
  of RELAY_LOG_FILE, RELAY_LOG_POS, and SOURCE_DELAY options, even if
  the replication receiver thread is running. No other options may be
  used with this statement when the receiver thread is running.

o When the receiver thread is stopped, you can execute CHANGE
  REPLICATION SOURCE TO using any of the options for this statement (in
  any allowed combination) except RELAY_LOG_FILE, RELAY_LOG_POS,
  SOURCE_DELAY, or SOURCE_AUTO_POSITION = 1 even when the applier
  thread is running.

o Both the receiver thread and the applier thread must be stopped
  before issuing a CHANGE REPLICATION SOURCE TO statement that employs
  SOURCE_AUTO_POSITION = 1, GTID_ONLY = 1, or
  ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS.

You can check the current state of the replication applier thread and
replication receiver thread using SHOW REPLICA STATUS. Note that the
Group Replication applier channel (group_replication_applier) has no
receiver thread, only an applier thread.

CHANGE REPLICATION SOURCE TO statements have a number of side-effects
and interactions that you should be aware of beforehand:

o CHANGE REPLICATION SOURCE TO causes an implicit commit of an ongoing
  transaction. See
  https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html.

o CHANGE REPLICATION SOURCE TO causes the previous values for
  SOURCE_HOST, SOURCE_PORT, SOURCE_LOG_FILE, and SOURCE_LOG_POS to be
  written to the error log, along with other information about the
  replica's state prior to execution.

o If you are using statement-based replication and temporary tables, it
  is possible for a CHANGE REPLICATION SOURCE TO statement following a
  STOP REPLICA statement to leave behind temporary tables on the
  replica. A warning (ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_warn_open_temp_tables_must_be_zero)) is issued
  whenever this occurs. You can avoid this in such cases by making sure
  that the value of the Replica_open_temp_tables or
  Slave_open_temp_tables system status variable is equal to 0 prior to
  executing such a CHANGE REPLICATION SOURCE TO statement.

o When using a multithreaded replica (replica_parallel_workers &gt; 0),
  stopping the replica can cause gaps in the sequence of transactions
  that have been executed from the relay log, regardless of whether the
  replica was stopped intentionally or otherwise. When such gaps exist,
  issuing CHANGE REPLICATION SOURCE TO fails. The solution in this
  situation is to issue START REPLICA UNTIL SQL_AFTER_MTS_GAPS which
  ensures that the gaps are closed. From MySQL 8.0.26, the process of
  checking for gaps in the sequence of transactions is skipped entirely
  when GTID-based replication and GTID auto-positioning are in use,
  because gaps in transactions can be resolved using GTID
  auto-positioning. In that situation, CHANGE REPLICATION SOURCE TO can
  still be used.

The following options are available for CHANGE REPLICATION SOURCE TO
statements:

o ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS = {OFF | LOCAL | uuid}

  Makes the replication channel assign a GTID to replicated
  transactions that do not have one, enabling replication from a source
  that does not use GTID-based replication, to a replica that does. For
  a multi-source replica, you can have a mix of channels that use
  ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS, and channels that do not. The
  default is OFF, meaning that the feature is not used.

  LOCAL assigns a GTID including the replica's own UUID (the
  server_uuid setting). uuid assigns a GTID including the specified
  UUID, such as the server_uuid setting for the replication source
  server. Using a nonlocal UUID lets you differentiate between
  transactions that originated on the replica and transactions that
  originated on the source, and for a multi-source replica, between
  transactions that originated on different sources. The UUID you
  choose only has significance for the replica's own use. If any of the
  transactions sent by the source do have a GTID already, that GTID is
  retained.

  Channels specific to Group Replication cannot use
  ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS, but an asynchronous
  replication channel for another source on a server instance that is a
  Group Replication group member can do so. In that case, do not
  specify the Group Replication group name as the UUID for creating the
  GTIDs.

  To set ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS to LOCAL or uuid, the
  replica must have gtid_mode=ON set, and this cannot be changed
  afterwards. This option is for use with a source that has binary log
  file position based replication, so SOURCE_AUTO_POSITION=1 cannot be
  set for the channel. Both the replication SQL thread and the
  replication I/O (receiver) thread must be stopped before setting this
  option.

  *Important*:

  A replica set up with ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS on any
  channel cannot be promoted to replace the replication source server
  in the event that a failover is required, and a backup taken from the
  replica cannot be used to restore the replication source server. The
  same restriction applies to replacing or restoring other replicas
  that use ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS on any channel.

  For further restrictions and information, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-assign-anon
  .html.

o GET_SOURCE_PUBLIC_KEY = {0|1}

  Enables RSA key pair-based password exchange by requesting the public
  key from the source. The option is disabled by default.

  This option applies to replicas that authenticate with the
  caching_sha2_password authentication plugin. For connections by
  accounts that authenticate using this plugin, the source does not
  send the public key unless requested, so it must be requested or
  specified in the client. If SOURCE_PUBLIC_KEY_PATH is given and
  specifies a valid public key file, it takes precedence over
  GET_SOURCE_PUBLIC_KEY. If you are using a replication user account
  that authenticates with the caching_sha2_password plugin (which is
  the default from MySQL 8.0), and you are not using a secure
  connection, you must specify either this option or the
  SOURCE_PUBLIC_KEY_PATH option to provide the RSA public key to the
  replica.

o GTID_ONLY = {0|1}

  Stops the replication channel persisting file names and file
  positions in the replication metadata repositories. GTID_ONLY is
  available as of MySQL 8.0.27. The GTID_ONLY option is disabled by
  default for asynchronous replication channels, but it is enabled by
  default for Group Replication channels, and it cannot be disabled for
  them.

  For replication channels with this setting, in-memory file positions
  are still tracked, and file positions can still be observed for
  debugging purposes in error messages and through interfaces such as
  SHOW REPLICA STATUS statements (where they are shown as being invalid
  if they are out of date). However, the writes and reads required to
  persist and check the file positions are avoided in situations where
  GTID-based replication does not actually require them, including the
  transaction queuing and application process.

  This option can be used only if both the replication SQL (applier)
  thread and replication I/O (receiver) thread are stopped. To set
  GTID_ONLY = 1 for a replication channel, GTIDs must be in use on the
  server (gtid_mode = ON), and row-based binary logging must be in use
  on the source (statement-based replication is not supported). The
  options REQUIRE_ROW_FORMAT = 1 and SOURCE_AUTO_POSITION = 1 must be
  set for the replication channel.

  When GTID_ONLY = 1 is set, the replica uses
  replica_parallel_workers=1 if that system variable is set to zero for
  the server, so it is always technically a multi-threaded applier.
  This is because a multi-threaded applier uses saved positions rather
  than the replication metadata repositories to locate the start of a
  transaction that it needs to reapply.

  If you disable GTID_ONLY after setting it, the existing relay logs
  are deleted and the existing known binary log file positions are
  persisted, even if they are stale. The file positions for the binary
  log and relay log in the replication metadata repositories might be
  invalid, and a warning is returned if this is the case. Provided that
  SOURCE_AUTO_POSITION is still enabled, GTID auto-positioning is used
  to provide the correct positioning.

  If you also disable SOURCE_AUTO_POSITION, the file positions for the
  binary log and relay log in the replication metadata repositories are
  used for positioning if they are valid. If they are marked as
  invalid, you must provide a valid binary log file name and position
  (SOURCE_LOG_FILE and SOURCE_LOG_POS). If you also provide a relay log
  file name and position (RELAY_LOG_FILE and RELAY_LOG_POS), the relay
  logs are preserved and the applier position is set to the stated
  position. GTID auto-skip ensures that any transactions already
  applied are skipped even if the eventual applier position is not
  correct.

o IGNORE_SERVER_IDS = (server_id_list)

  Makes the replica ignore events originating from the specified
  servers. The option takes a comma-separated list of 0 or more server
  IDs. Log rotation and deletion events from the servers are not
  ignored, and are recorded in the relay log.

  In circular replication, the originating server normally acts as the
  terminator of its own events, so that they are not applied more than
  once. Thus, this option is useful in circular replication when one of
  the servers in the circle is removed. Suppose that you have a
  circular replication setup with 4 servers, having server IDs 1, 2, 3,
  and 4, and server 3 fails. When bridging the gap by starting
  replication from server 2 to server 4, you can include
  IGNORE_SERVER_IDS = (3) in the CHANGE REPLICATION SOURCE TO statement
  that you issue on server 4 to tell it to use server 2 as its source
  instead of server 3. Doing so causes it to ignore and not to
  propagate any statements that originated with the server that is no
  longer in use.

  If IGNORE_SERVER_IDS contains the server's own ID and the server was
  started with the --replicate-same-server-id option enabled, an error
  results.

  *Note*:

  When global transaction identifiers (GTIDs) are used for replication,
  transactions that have already been applied are automatically
  ignored, so the IGNORE_SERVER_IDS function is not required and is
  deprecated. If gtid_mode=ON is set for the server, a deprecation
  warning is issued if you include the IGNORE_SERVER_IDS option in a
  CHANGE REPLICATION SOURCE TO statement.

  The source metadata repository and the output of SHOW REPLICA STATUS
  provide the list of servers that are currently ignored. For more
  information, see
  https://dev.mysql.com/doc/refman/8.0/en/replica-logs-status.html, and
  [HELP SHOW REPLICA STATUS].

  If a CHANGE REPLICATION SOURCE TO statement is issued without any
  IGNORE_SERVER_IDS option, any existing list is preserved. To clear
  the list of ignored servers, it is necessary to use the option with
  an empty list:

CHANGE REPLICATION SOURCE TO IGNORE_SERVER_IDS = ();

  RESET REPLICA ALL clears IGNORE_SERVER_IDS.

  *Note*:

  A deprecation warning is issued if SET GTID_MODE=ON is issued when
  any channel has existing server IDs set with IGNORE_SERVER_IDS.
  Before starting GTID-based replication, check for and clear all
  ignored server ID lists on the servers involved. The SHOW REPLICA
  STATUS statement displays the list of ignored IDs, if there is one.
  If you do receive the deprecation warning, you can still clear a list
  after gtid_mode=ON is set by issuing a CHANGE REPLICATION SOURCE TO
  statement containing the IGNORE_SERVER_IDS option with an empty list.

o NETWORK_NAMESPACE = 'namespace'

  The network namespace to use for TCP/IP connections to the
  replication source server or, if the MySQL communication stack is in
  use, for Group Replication's group communication connections. The
  maximum length of the string value is 64 characters. If this option
  is omitted, connections from the replica use the default (global)
  namespace. On platforms that do not implement network namespace
  support, failure occurs when the replica attempts to connect to the
  source. For information about network namespaces, see
  https://dev.mysql.com/doc/refman/8.0/en/network-namespace-support.htm
  l. NETWORK_NAMESPACE is available as of MySQL 8.0.22.

o PRIVILEGE_CHECKS_USER = {NULL | 'account'}

  Names a user account that supplies a security context for the
  specified channel. NULL, which is the default, means no security
  context is used. PRIVILEGE_CHECKS_USER is available as of MySQL
  8.0.18.

  The user name and host name for the user account must follow the
  syntax described in
  https://dev.mysql.com/doc/refman/8.0/en/account-names.html, and the
  user must not be an anonymous user (with a blank user name) or the
  CURRENT_USER. The account must have the REPLICATION_APPLIER
  privilege, plus the required privileges to execute the transactions
  replicated on the channel. For details of the privileges required by
  the account, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-privilege-checks.
  html. When you restart the replication channel, the privilege checks
  are applied from that point on. If you do not specify a channel and
  no other channels exist, the statement is applied to the default
  channel.

  The use of row-based binary logging is strongly recommended when
  PRIVILEGE_CHECKS_USER is set, and you can set REQUIRE_ROW_FORMAT to
  enforce this. For example, to start privilege checks on the channel
  channel_1 on a running replica, issue the following statements:

STOP REPLICA FOR CHANNEL 'channel_1';

CHANGE REPLICATION SOURCE TO
    PRIVILEGE_CHECKS_USER = 'user'@'host',
    REQUIRE_ROW_FORMAT = 1,
    FOR CHANNEL 'channel_1';

START REPLICA FOR CHANNEL 'channel_1';

o RELAY_LOG_FILE = 'relay_log_file' , RELAY_LOG_POS = 'relay_log_pos'

  The relay log file name, and the location in that file, at which the
  replication SQL thread begins reading from the replica's relay log
  the next time the thread starts. RELAY_LOG_FILE can use either an
  absolute or relative path, and uses the same base name as
  SOURCE_LOG_FILE. The maximum length of the string value is 511
  characters.

  A CHANGE REPLICATION SOURCE TO statement using RELAY_LOG_FILE,
  RELAY_LOG_POS, or both options can be executed on a running replica
  when the replication SQL (applier) thread is stopped. Relay logs are
  preserved if at least one of the replication applier thread and the
  replication I/O (receiver) thread is running. If both threads are
  stopped, all relay log files are deleted unless at least one of
  RELAY_LOG_FILE or RELAY_LOG_POS is specified. For the Group
  Replication applier channel (group_replication_applier), which only
  has an applier thread and no receiver thread, this is the case if the
  applier thread is stopped, but with that channel you cannot use the
  RELAY_LOG_FILE and RELAY_LOG_POS options.

o REQUIRE_ROW_FORMAT = {0|1}

  Permits only row-based replication events to be processed by the
  replication channel. This option prevents the replication applier
  from taking actions such as creating temporary tables and executing
  LOAD DATA INFILE requests, which increases the security of the
  channel. The REQUIRE_ROW_FORMAT option is disabled by default for
  asynchronous replication channels, but it is enabled by default for
  Group Replication channels, and it cannot be disabled for them. For
  more information, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-privilege-checks.
  html. REQUIRE_ROW_FORMAT is available as of MySQL 8.0.19.

o REQUIRE_TABLE_PRIMARY_KEY_CHECK = {STREAM | ON | OFF | GENERATE}

  Available as of MySQL 8.0.20, this option lets a replica set its own
  policy for primary key checks, as follows:

  o ON: The replica sets sql_require_primary_key = ON; any replicated
    CREATE TABLE or ALTER TABLE statement must result in a table that
    contains a primary key.

  o OFF: The replica sets sql_require_primary_key = OFF; no replicated
    CREATE TABLE or ALTER TABLE statement is checked for the presence
    of a primary key.

  o STREAM: The replica uses whatever value of sql_require_primary_key
    is replicated from the source for each transaction. This is the
    default value, and the default behavior.

  o GENERATE: Added in MySQL 8.0.32, this causes the replica to
    generate an invisible primary key for any InnoDB table that, as
    replicated, lacks a primary key. See
    https://dev.mysql.com/doc/refman/8.0/en/create-table-gipks.html,
    for more information.

    GENERATE is not compatible with Group Replication; you can use ON,
    OFF, or STREAM.

  A divergence based on the presence of a generated invisible primary
  key solely on a source or replica table is supported by MySQL
  Replication as long as the source supports GIPKs (MySQL 8.0.30 and
  later) and the replica uses MySQL version 8.0.32 or later. If you use
  GIPKs on a replica and replicate from a source using MySQL 8.0.29 or
  earlier, you should be aware that in this case such divergences in
  schema, other than the extra GIPK on the replica, are not supported
  and may result in replication errors.

  For multisource replication, setting REQUIRE_TABLE_PRIMARY_KEY_CHECK
  to ON or OFF lets the replica normalize behavior across replication
  channels for different sources, and to keep a consistent setting for
  sql_require_primary_key. Using ON safeguards against the accidental
  loss of primary keys when multiple sources update the same set of
  tables. Using OFF lets sources that can manipulate primary keys to
  work alongside sources that cannot.

  In the case of multiple replicas, when
  REQUIRE_TABLE_PRIMARY_KEY_CHECK is set to GENERATE, the generated
  invisible primary key added by a given replica is independent of any
  such key added on any other replica. This means that, if generated
  invisible primary keys are in use, the values in the generated
  primary key columns on different replicas are not guaranteed to be
  the same. This may be an issue when failing over to such a replica.

  When PRIVILEGE_CHECKS_USER is NULL (the default), the user account
  does not need administration level privileges to set restricted
  session variables. Setting this option to a value other than NULL
  means that, when REQUIRE_TABLE_PRIMARY_KEY_CHECK is ON or OFF, the
  user account does not require session administration level privileges
  to set restricted session variables such as sql_require_primary_key,
  avoiding the need to grant the account such privileges. (Such
  privileges are required when PRIVILEGE_CHECKS_USER is STREAM or
  GENERATE.) For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-privilege-checks.
  html.

o SOURCE_AUTO_POSITION = {0|1}

  Makes the replica attempt to connect to the source using the
  auto-positioning feature of GTID-based replication, rather than a
  binary log file based position. This option is used to start a
  replica using GTID-based replication. The default is 0, meaning that
  GTID auto-positioning and GTID-based replication are not used. This
  option can be used with CHANGE REPLICATION SOURCE TO only if both the
  replication SQL (applier) thread and replication I/O (receiver)
  thread are stopped.

  Both the replica and the source must have GTIDs enabled
  (GTID_MODE=ON, ON_PERMISSIVE, or OFF_PERMISSIVE on the replica, and
  GTID_MODE=ON on the source). SOURCE_LOG_FILE, SOURCE_LOG_POS,
  RELAY_LOG_FILE, and RELAY_LOG_POS cannot be specified together with
  SOURCE_AUTO_POSITION = 1. If multi-source replication is enabled on
  the replica, you need to set the SOURCE_AUTO_POSITION = 1 option for
  each applicable replication channel.

  With SOURCE_AUTO_POSITION = 1 set, in the initial connection
  handshake, the replica sends a GTID set containing the transactions
  that it has already received, committed, or both. The source responds
  by sending all transactions recorded in its binary log whose GTID is
  not included in the GTID set sent by the replica. This exchange
  ensures that the source only sends the transactions with a GTID that
  the replica has not already recorded or committed. If the replica
  receives transactions from more than one source, as in the case of a
  diamond topology, the auto-skip function ensures that the
  transactions are not applied twice. For details of how the GTID set
  sent by the replica is computed, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-auto-positi
  oning.html.

  If any of the transactions that should be sent by the source have
  been purged from the source's binary log, or added to the set of
  GTIDs in the gtid_purged system variable by another method, the
  source sends the error ER_MASTER_HAS_PURGED_REQUIRED_GTIDS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_master_has_purged_required_gtids) to the replica, and
  replication does not start. The GTIDs of the missing purged
  transactions are identified and listed in the source's error log in
  the warning message ER_FOUND_MISSING_GTIDS
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_found_missing_gtids). Also, if during the exchange of
  transactions it is found that the replica has recorded or committed
  transactions with the source's UUID in the GTID, but the source
  itself has not committed them, the source sends the error
  ER_SLAVE_HAS_MORE_GTIDS_THAN_MASTER
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html#error_er_slave_has_more_gtids_than_master) to the replica and
  replication does not start. For information on how to handle these
  situations, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-auto-positi
  oning.html.

  You can see whether replication is running with GTID auto-positioning
  enabled by checking the Performance Schema
  replication_connection_status table or the output of SHOW REPLICA
  STATUS. Disabling the SOURCE_AUTO_POSITION option again makes the
  replica revert to file-based replication.

o SOURCE_BIND = 'interface_name'

  Determines which of the replica's network interfaces is chosen for
  connecting to the source, for use on replicas that have multiple
  network interfaces. Specify the IP address of the network interface.
  The maximum length of the string value is 255 characters.

  The IP address configured with this option, if any, can be seen in
  the Source_Bind column of the output from SHOW REPLICA STATUS. In the
  source metadata repository table mysql.slave_master_info, the value
  can be seen as the Source_bind column. The ability to bind a replica
  to a specific network interface is also supported by NDB Cluster.

o SOURCE_COMPRESSION_ALGORITHMS = 'algorithm[,algorithm][,algorithm]'

  Specifies one, two, or three of the permitted compression algorithms
  for connections to the replication source server, separated by
  commas. The maximum length of the string value is 99 characters. The
  default value is uncompressed.

  The available algorithms are zlib, zstd, and uncompressed, the same
  as for the protocol_compression_algorithms system variable. The
  algorithms can be specified in any order, but it is not an order of
  preference - the algorithm negotiation process attempts to use zlib,
  then zstd, then uncompressed, if they are specified.
  SOURCE_COMPRESSION_ALGORITHMS is available as of MySQL 8.0.18.

  The value of SOURCE_COMPRESSION_ALGORITHMS applies only if the
  replica_compressed_protocol or slave_compressed_protocol system
  variable is disabled. If replica_compressed_protocol or
  slave_compressed_protocol is enabled, it takes precedence over
  SOURCE_COMPRESSION_ALGORITHMS and connections to the source use zlib
  compression if both source and replica support that algorithm. For
  more information, see
  https://dev.mysql.com/doc/refman/8.0/en/connection-compression-contro
  l.html.

  Binary log transaction compression (available as of MySQL 8.0.20),
  which is activated by the binlog_transaction_compression system
  variable, can also be used to save bandwidth. If you do this in
  combination with connection compression, connection compression has
  less opportunity to act on the data, but can still compress headers
  and those events and transaction payloads that are uncompressed. For
  more information on binary log transaction compression, see
  https://dev.mysql.com/doc/refman/8.0/en/binary-log-transaction-compre
  ssion.html.

o SOURCE_CONNECT_RETRY = interval

  Specifies the interval in seconds between the reconnection attempts
  that the replica makes after the connection to the source times out.
  The default interval is 60.

  The number of attempts is limited by the SOURCE_RETRY_COUNT option.
  If both the default settings are used, the replica waits 60 seconds
  between reconnection attempts (SOURCE_CONNECT_RETRY=60), and keeps
  attempting to reconnect at this rate for 60 days
  (SOURCE_RETRY_COUNT=86400). These values are recorded in the source
  metadata repository and shown in the
  replication_connection_configuration Performance Schema table.

o SOURCE_CONNECTION_AUTO_FAILOVER = {0|1}

  Activates the asynchronous connection failover mechanism for a
  replication channel if one or more alternative replication source
  servers are available (so when there are multiple MySQL servers or
  groups of servers that share the replicated data).
  SOURCE_CONNECTION_AUTO_FAILOVER is available as of MySQL 8.0.22. The
  default is 0, meaning that the mechanism is not activated. For full
  information and instructions to set up this feature, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-asynchronous-conn
  ection-failover-replica.html.

  The asynchronous connection failover mechanism takes over after the
  reconnection attempts controlled by SOURCE_CONNECT_RETRY and
  SOURCE_RETRY_COUNT are exhausted. It reconnects the replica to an
  alternative source chosen from a specified source list, which you
  manage using the asynchronous_connection_failover_add_source and
  asynchronous_connection_failover_delete_source functions. To add and
  remove managed groups of servers, use the
  asynchronous_connection_failover_add_managed and
  asynchronous_connection_failover_delete_managed functions instead.
  For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-asynchronous-conn
  ection-failover.html.

  *Important*:

   1. You can only set SOURCE_CONNECTION_AUTO_FAILOVER = 1 when GTID
      auto-positioning is in use (SOURCE_AUTO_POSITION = 1).

   2. When you set SOURCE_CONNECTION_AUTO_FAILOVER = 1, set
      SOURCE_RETRY_COUNT and SOURCE_CONNECT_RETRY to minimal numbers
      that just allow a few retry attempts with the same source, in
      case the connection failure is caused by a transient network
      outage. Otherwise the asynchronous connection failover mechanism
      cannot be activated promptly. Suitable values are
      SOURCE_RETRY_COUNT=3 and SOURCE_CONNECT_RETRY=10, which make the
      replica retry the connection 3 times with 10-second intervals
      between.

   3. When you set SOURCE_CONNECTION_AUTO_FAILOVER = 1, the replication
      metadata repositories must contain the credentials for a
      replication user account that can be used to connect to all the
      servers on the source list for the replication channel. The
      account must also have SELECT permissions on the Performance
      Schema tables. These credentials can be set using the CHANGE
      REPLICATION SOURCE TO statement with the SOURCE_USER and
      SOURCE_PASSWORD options. For more information, see
      https://dev.mysql.com/doc/refman/8.0/en/replication-asynchronous-
      connection-failover.html.

   4. From MySQL 8.0.27, when you set SOURCE_CONNECTION_AUTO_FAILOVER =
      1, asynchronous connection failover for replicas is automatically
      activated if this replication channel is on a Group Replication
      primary in a group in single-primary mode. With this function
      active, if the primary that is replicating goes offline or into
      an error state, the new primary starts replication on the same
      channel when it is elected. If you want to use the function, this
      replication channel must also be set up on all the secondary
      servers in the replication group, and on any new joining members.
      (If the servers are provisioned using MySQL's clone
      functionality, this all happens automatically.) If you do not
      want to use the function, disable it by using the
      group_replication_disable_member_action() function to disable the
      Group Replication member action
      mysql_start_failover_channels_if_primary, which is enabled by
      default. For more information, see
      https://dev.mysql.com/doc/refman/8.0/en/replication-asynchronous-
      connection-failover-replica.html.

o SOURCE_DELAY = interval

  Specifies how many seconds behind the source the replica must lag. An
  event received from the source is not executed until at least
  interval seconds later than its execution on the source. interval
  must be a nonnegative integer in the range from 0 to 231−1. The
  default is 0. For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/replication-delayed.html.

  A CHANGE REPLICATION SOURCE TO statement using the SOURCE_DELAY
  option can be executed on a running replica when the replication SQL
  thread is stopped.

o SOURCE_HEARTBEAT_PERIOD = interval

  Controls the heartbeat interval, which stops the connection timeout
  occurring in the absence of data if the connection is still good. A
  heartbeat signal is sent to the replica after that number of seconds,
  and the waiting period is reset whenever the source's binary log is
  updated with an event. Heartbeats are therefore sent by the source
  only if there are no unsent events in the binary log file for a
  period longer than this.

  The heartbeat interval interval is a decimal value having the range 0
  to 4294967 seconds and a resolution in milliseconds; the smallest
  nonzero value is 0.001. Setting interval to 0 disables heartbeats
  altogether. The heartbeat interval defaults to half the value of the
  replica_net_timeout or slave_net_timeout system variable. It is
  recorded in the source metadata repository and shown in the
  replication_connection_configuration Performance Schema table.

  The system variable replica_net_timeout (from MySQL 8.0.26) or
  slave_net_timeout (before MySQL 8.0.26) specifies the number of
  seconds that the replica waits for either more data or a heartbeat
  signal from the source, before the replica considers the connection
  broken, aborts the read, and tries to reconnect. The default value is
  60 seconds (one minute). Note that a change to the value or default
  setting of replica_net_timeout or slave_net_timeout does not
  automatically change the heartbeat interval, whether that has been
  set explicitly or is using a previously calculated default. A warning
  is issued if you set the global value of replica_net_timeout or
  slave_net_timeout to a value less than that of the current heartbeat
  interval. If replica_net_timeout or slave_net_timeout is changed, you
  must also issue CHANGE REPLICATION SOURCE TO to adjust the heartbeat
  interval to an appropriate value so that the heartbeat signal occurs
  before the connection timeout. If you do not do this, the heartbeat
  signal has no effect, and if no data is received from the source, the
  replica can make repeated reconnection attempts, creating zombie dump
  threads.

o SOURCE_HOST = 'host_name'

  The host name or IP address of the replication source server. The
  replica uses this to connect to the source. The maximum length of the
  string value is 255 characters.

  If you specify SOURCE_HOST or SOURCE_PORT, the replica assumes that
  the source server is different from before (even if the option value
  is the same as its current value.) In this case, the old values for
  the source's binary log file name and position are considered no
  longer applicable, so if you do not specify SOURCE_LOG_FILE and
  SOURCE_LOG_POS in the statement, SOURCE_LOG_FILE='' and
  SOURCE_LOG_POS=4 are silently appended to it.

  Setting SOURCE_HOST='' (that is, setting its value explicitly to an
  empty string) is not the same as not setting SOURCE_HOST at all.
  Trying to set SOURCE_HOST to an empty string fails with an error.

o SOURCE_LOG_FILE = 'source_log_name', SOURCE_LOG_POS = source_log_pos

  The binary log file name, and the location in that file, at which the
  replication I/O (receiver) thread begins reading from the source's
  binary log the next time the thread starts. Specify these options if
  you are using binary log file position based replication.

  SOURCE_LOG_FILE must include the numeric suffix of a specific binary
  log file that is available on the source server, for example,
  SOURCE_LOG_FILE='binlog.000145'. The maximum length of the string
  value is 511 characters.

  SOURCE_LOG_POS is the numeric position for the replica to start
  reading in that file. SOURCE_LOG_POS=4 represents the start of the
  events in a binary log file.

  If you specify either of SOURCE_LOG_FILE or SOURCE_LOG_POS, you
  cannot specify SOURCE_AUTO_POSITION = 1, which is for GTID-based
  replication.

  If neither of SOURCE_LOG_FILE or SOURCE_LOG_POS is specified, the
  replica uses the last coordinates of the replication SQL thread
  before CHANGE REPLICATION SOURCE TO was issued. This ensures that
  there is no discontinuity in replication, even if the replication SQL
  (applier) thread was late compared to the replication I/O (receiver)
  thread.

o SOURCE_PASSWORD = 'password'

  The password for the replication user account to use for connecting
  to the replication source server. The maximum length of the string
  value is 32 characters. If you specify SOURCE_PASSWORD, SOURCE_USER
  is also required.

  The password used for a replication user account in a CHANGE
  REPLICATION SOURCE TO statement is limited to 32 characters in
  length. Trying to use a password of more than 32 characters causes
  CHANGE REPLICATION SOURCE TO to fail.

  The password is masked in MySQL Server's logs, Performance Schema
  tables, and SHOW PROCESSLIST statements.

o SOURCE_PORT = port_num

  The TCP/IP port number that the replica uses to connect to the
  replication source server.

  *Note*:

  Replication cannot use Unix socket files. You must be able to connect
  to the replication source server using TCP/IP.

  If you specify SOURCE_HOST or SOURCE_PORT, the replica assumes that
  the source server is different from before (even if the option value
  is the same as its current value.) In this case, the old values for
  the source's binary log file name and position are considered no
  longer applicable, so if you do not specify SOURCE_LOG_FILE and
  SOURCE_LOG_POS in the statement, SOURCE_LOG_FILE='' and
  SOURCE_LOG_POS=4 are silently appended to it.

o SOURCE_PUBLIC_KEY_PATH = 'key_file_name'

  Enables RSA key pair-based password exchange by providing the path
  name to a file containing a replica-side copy of the public key
  required by the source. The file must be in PEM format. The maximum
  length of the string value is 511 characters.

  This option applies to replicas that authenticate with the
  sha256_password or caching_sha2_password authentication plugin. (For
  sha256_password, SOURCE_PUBLIC_KEY_PATH can be used only if MySQL was
  built using OpenSSL.) If you are using a replication user account
  that authenticates with the caching_sha2_password plugin (which is
  the default from MySQL 8.0), and you are not using a secure
  connection, you must specify either this option or the
  GET_SOURCE_PUBLIC_KEY=1 option to provide the RSA public key to the
  replica.

o SOURCE_RETRY_COUNT = count

  Sets the maximum number of reconnection attempts that the replica
  makes after the connection to the source times out, as determined by
  the replica_net_timeout or slave_net_timeout system variable. If the
  replica does need to reconnect, the first retry occurs immediately
  after the timeout. The default is 86400 attempts.

  The interval between the attempts is specified by the
  SOURCE_CONNECT_RETRY option. If both the default settings are used,
  the replica waits 60 seconds between reconnection attempts
  (SOURCE_CONNECT_RETRY=60), and keeps attempting to reconnect at this
  rate for 60 days (SOURCE_RETRY_COUNT=86400). A setting of 0 for
  SOURCE_RETRY_COUNT means that there is no limit on the number of
  reconnection attempts, so the replica keeps trying to reconnect
  indefinitely.

  The values for SOURCE_CONNECT_RETRY and SOURCE_RETRY_COUNT are
  recorded in the source metadata repository and shown in the
  replication_connection_configuration Performance Schema table.
  SOURCE_RETRY_COUNT supersedes the --master-retry-count server startup
  option.

o SOURCE_SSL = {0|1}

  Specify whether the replica encrypts the replication connection. The
  default is 0, meaning that the replica does not encrypt the
  replication connection. If you set SOURCE_SSL=1, you can configure
  the encryption using the SOURCE_SSL_xxx and SOURCE_TLS_xxx options.

  Setting SOURCE_SSL=1 for a replication connection and then setting no
  further SOURCE_SSL_xxx options corresponds to setting
  --ssl-mode=REQUIRED for the client, as described in
  https://dev.mysql.com/doc/refman/8.0/en/connection-options.html#encry
  pted-connection-options. With SOURCE_SSL=1, the connection attempt
  only succeeds if an encrypted connection can be established. A
  replication connection does not fall back to an unencrypted
  connection, so there is no setting corresponding to the
  --ssl-mode=PREFERRED setting for replication. If SOURCE_SSL=0 is set,
  this corresponds to --ssl-mode=DISABLED.

  *Important*:

  To help prevent sophisticated man-in-the-middle attacks, it is
  important for the replica to verify the server's identity. You can
  specify additional SOURCE_SSL_xxx options to correspond to the
  settings --ssl-mode=VERIFY_CA and --ssl-mode=VERIFY_IDENTITY, which
  are a better choice than the default setting to help prevent this
  type of attack. With these settings, the replica checks that the
  server's certificate is valid, and checks that the host name the
  replica is using matches the identity in the server's certificate. To
  implement one of these levels of verification, you must first ensure
  that the CA certificate for the server is reliably available to the
  replica, otherwise availability issues will result. For this reason,
  they are not the default setting.

o SOURCE_SSL_xxx, SOURCE_TLS_xxx

  Specify how the replica uses encryption and ciphers to secure the
  replication connection. These options can be changed even on replicas
  that are compiled without SSL support. They are saved to the source
  metadata repository, but are ignored if the replica does not have SSL
  support enabled. The maximum length of the value for the
  string-valued SOURCE_SSL_xxx and SOURCE_TLS_xxx options is 511
  characters, with the exception of SOURCE_TLS_CIPHERSUITES, for which
  it is 4000 characters.

  The SOURCE_SSL_xxx and SOURCE_TLS_xxx options perform the same
  functions as the --ssl-xxx and --tls-xxx client options described in
  https://dev.mysql.com/doc/refman/8.0/en/connection-options.html#encry
  pted-connection-options. The correspondence between the two sets of
  options, and the use of the SOURCE_SSL_xxx and SOURCE_TLS_xxx options
  to set up a secure connection, is explained in
  https://dev.mysql.com/doc/refman/8.0/en/replication-encrypted-connect
  ions.html.

o SOURCE_USER = 'user_name'

  The user name for the replication user account to use for connecting
  to the replication source server. The maximum length of the string
  value is 96 characters.

  For Group Replication, this account must exist on every member of the
  replication group. It is used for distributed recovery if the XCom
  communication stack is in use for the group, and also used for group
  communication connections if the MySQL communication stack is in use
  for the group. With the MySQL communication stack, the account must
  have the GROUP_REPLICATION_STREAM permission.

  It is possible to set an empty user name by specifying
  SOURCE_USER='', but the replication channel cannot be started with an
  empty user name. In releases before MySQL 8.0.21, only set an empty
  SOURCE_USER user name if you need to clear previously used
  credentials from the replication metadata repositories for security
  purposes. Do not use the channel afterwards, due to a bug in these
  releases that can substitute a default user name if an empty user
  name is read from the repositories (for example, during an automatic
  restart of a Group Replication channel). From MySQL 8.0.21, it is
  valid to set an empty SOURCE_USER user name and use the channel
  afterwards if you always provide user credentials using the START
  REPLICA statement or START GROUP_REPLICATION statement that starts
  the replication channel. This approach means that the replication
  channel always needs operator intervention to restart, but the user
  credentials are not recorded in the replication metadata
  repositories.

  *Important*:

  To connect to the source using a replication user account that
  authenticates with the caching_sha2_password plugin, you must either
  set up a secure connection as described in
  https://dev.mysql.com/doc/refman/8.0/en/replication-encrypted-connect
  ions.html, or enable the unencrypted connection to support password
  exchange using an RSA key pair. The caching_sha2_password
  authentication plugin is the default for new users created from MySQL
  8.0 (see
  https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authen
  tication.html). If the user account that you create or use for
  replication uses this authentication plugin, and you are not using a
  secure connection, you must enable RSA key pair-based password
  exchange for a successful connection. You can do this using either
  the SOURCE_PUBLIC_KEY_PATH option or the GET_SOURCE_PUBLIC_KEY=1
  option for this statement.

o SOURCE_ZSTD_COMPRESSION_LEVEL = level

  The compression level to use for connections to the replication
  source server that use the zstd compression algorithm.
  SOURCE_ZSTD_COMPRESSION_LEVEL is available as of MySQL 8.0.18. The
  permitted levels are from 1 to 22, with larger values indicating
  increasing levels of compression. The default level is 3.

  The compression level setting has no effect on connections that do
  not use zstd compression. For more information, see
  https://dev.mysql.com/doc/refman/8.0/en/connection-compression-contro
  l.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/change-replication-source-to.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/change-replication-source-to.html</field>
	</row>
	<row>
		<field name="help_topic_id">580</field>
		<field name="name">RESET REPLICA</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
RESET REPLICA [ALL] [channel_option]

channel_option:
    FOR CHANNEL channel

RESET REPLICA makes the replica forget its position in the source's
binary log. From MySQL 8.0.22, use RESET REPLICA in place of RESET
SLAVE, which is deprecated from that release. In releases before MySQL
8.0.22, use RESET SLAVE.

This statement is meant to be used for a clean start; it clears the
replication metadata repositories, deletes all the relay log files, and
starts a new relay log file. It also resets to 0 the replication delay
specified with the SOURCE_DELAY | MASTER_DELAY option of the CHANGE
REPLICATION SOURCE TO statement (from MySQL 8.0.23) or CHANGE MASTER TO
statement (before MySQL 8.0.23).

*Note*:

All relay log files are deleted, even if they have not been completely
executed by the replication SQL thread. (This is a condition likely to
exist on a replica if you have issued a STOP REPLICA statement or if
the replica is highly loaded.)

For a server where GTIDs are in use (gtid_mode is ON), issuing RESET
REPLICA has no effect on the GTID execution history. The statement does
not change the values of gtid_executed or gtid_purged, or the
mysql.gtid_executed table. If you need to reset the GTID execution
history, use RESET MASTER, even if the GTID-enabled server is a replica
where binary logging is disabled.

RESET REPLICA requires the RELOAD privilege.

To use RESET REPLICA, the replication SQL thread and replication I/O
(receiver) thread must be stopped, so on a running replica use STOP
REPLICA before issuing RESET REPLICA. To use RESET REPLICA on a Group
Replication group member, the member status must be OFFLINE, meaning
that the plugin is loaded but the member does not currently belong to
any group. A group member can be taken offline by using a STOP GROUP
REPLICATION statement.

The optional FOR CHANNEL channel clause enables you to name which
replication channel the statement applies to. Providing a FOR CHANNEL
channel clause applies the RESET REPLICA statement to a specific
replication channel. Combining a FOR CHANNEL channel clause with the
ALL option deletes the specified channel. If no channel is named and no
extra channels exist, the statement applies to the default channel.
Issuing a RESET REPLICA ALL statement without a FOR CHANNEL channel
clause when multiple replication channels exist deletes all replication
channels and recreates only the default channel. See
https://dev.mysql.com/doc/refman/8.0/en/replication-channels.html for
more information.

RESET REPLICA does not change any replication connection parameters,
which include the source's host name and port, the replication user
account and its password, the PRIVILEGE_CHECKS_USER account, the
REQUIRE_ROW_FORMAT option, the REQUIRE_TABLE_PRIMARY_KEY_CHECK
option,and the ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS option. If you
want to change any of the replication connection parameters, you can do
this using a CHANGE REPLICATION SOURCE TO statement (from MySQL 8.0.23)
or CHANGE MASTER TO statement (before MySQL 8.0.23) after the server
start. If you want to remove all of the replication connection
parameters, use RESET REPLICA ALL. RESET REPLICA ALL also clears the
IGNORE_SERVER_IDS list set by CHANGE REPLICATION SOURCE TO | CHANGE
MASTER TO. When you have used RESET REPLICA ALL, if you want to use the
instance as a replica again, you need to issue a CHANGE REPLICATION
SOURCE TO | CHANGE MASTER TO statement after the server start to
specify new connection parameters.

From MySQL 8.0.27, you can set the GTID_ONLY option on the CHANGE
REPLICATION SOURCE TO statement to stop a replication channel from
persisting file names and file positions in the replication metadata
repositories. When you issue a RESET REPLICA statement, the replication
metadata repositories are synchronized. RESET REPLICA ALL deletes
rather than updates the repositories, so they are synchronized
implicitly.

In the event of an unexpected server exit or deliberate restart after
issuing RESET REPLICA but before issuing START REPLICA, retention of
the replication connection parameters depends on the repository used
for the replication metadata:

o When master_info_repository=TABLE and relay_log_info_repository=TABLE
  are set on the server (which are the default settings from MySQL
  8.0), replication connection parameters are preserved in the
  crash-safe InnoDB tables mysql.slave_master_info and
  mysql.slave_relay_log_info as part of the RESET REPLICA operation.
  They are also retained in memory. In the event of an unexpected
  server exit or deliberate restart after issuing RESET REPLICA but
  before issuing START REPLICA, the replication connection parameters
  are retrieved from the tables and reapplied to the channel. This
  situation applies from MySQL 8.0.13 for the connection metadata
  repository, and from MySQL 8.0.19 for the applier metadata
  repository.

o If master_info_repository=FILE and relay_log_info_repository=FILE are
  set on the server, which is deprecated from MySQL 8.0, or the MySQL
  Server release is earlier than those specified above, replication
  connection parameters are only retained in memory. If the replica
  mysqld is restarted immediately after issuing RESET REPLICA due to an
  unexpected server exit or deliberate restart, the connection
  parameters are lost. In that case, you must issue a CHANGE
  REPLICATION SOURCE TO statement (from MySQL 8.0.23) or CHANGE MASTER
  TO statement (before MySQL 8.0.23) after the server start to
  respecify the connection parameters before issuing START REPLICA.

RESET REPLICA does not change any replication filter settings (such as
--replicate-ignore-table) for channels affected by the statement.
However, RESET REPLICA ALL removes the replication filters that were
set on the channels deleted by the statement. When the deleted channel
or channels are recreated, any global replication filters specified for
the replica are copied to them, and no channel specific replication
filters are applied. For more information see
https://dev.mysql.com/doc/refman/8.0/en/replication-rules-channel-based
-filters.html.

RESET REPLICA causes an implicit commit of an ongoing transaction. See
https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html.

If the replication SQL thread was in the middle of replicating
temporary tables when it was stopped, and RESET REPLICA is issued,
these replicated temporary tables are deleted on the replica.

*Note*:

When used on an NDB Cluster replica SQL node, RESET REPLICA clears the
mysql.ndb_apply_status table. You should keep in mind when using this
statement that ndb_apply_status uses the NDB storage engine and so is
shared by all SQL nodes attached to the cluster.

You can override this behavior by issuing SET GLOBAL
@@ndb_clear_apply_status=OFF prior to executing RESET REPLICA, which
keeps the replica from purging the ndb_apply_status table in such
cases.

URL: https://dev.mysql.com/doc/refman/8.0/en/reset-replica.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/reset-replica.html</field>
	</row>
	<row>
		<field name="help_topic_id">581</field>
		<field name="name">RESET SLAVE</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
RESET {SLAVE | REPLICA} [ALL] [channel_option]

channel_option:
    FOR CHANNEL channel

Makes the replica forget its position in the source's binary log. From
MySQL 8.0.22, RESET SLAVE is deprecated and the alias RESET REPLICA
should be used instead. In releases before MySQL 8.0.22, use RESET
SLAVE. The statement works in the same way as before, only the
terminology used for the statement and its output has changed. Both
versions of the statement update the same status variables when used.
Please see the documentation for RESET REPLICA for a description of the
statement.

URL: https://dev.mysql.com/doc/refman/8.0/en/reset-slave.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/reset-slave.html</field>
	</row>
	<row>
		<field name="help_topic_id">582</field>
		<field name="name">START REPLICA</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
START REPLICA [thread_types] [until_option] [connection_options] [channel_option]

thread_types:
    [thread_type [, thread_type] ... ]

thread_type:
    IO_THREAD | SQL_THREAD

until_option:
    UNTIL {   {SQL_BEFORE_GTIDS | SQL_AFTER_GTIDS} = gtid_set
          |   MASTER_LOG_FILE = 'log_name', MASTER_LOG_POS = log_pos
          |   SOURCE_LOG_FILE = 'log_name', SOURCE_LOG_POS = log_pos
          |   RELAY_LOG_FILE = 'log_name', RELAY_LOG_POS = log_pos
          |   SQL_AFTER_MTS_GAPS  }

connection_options:
    [USER='user_name'] [PASSWORD='user_pass'] [DEFAULT_AUTH='plugin_name'] [PLUGIN_DIR='plugin_dir']


channel_option:
    FOR CHANNEL channel

gtid_set:
    uuid_set [, uuid_set] ...
    | ''

uuid_set:
    uuid:interval[:interval]...

uuid:
    hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh

h:
    [0-9,A-F]

interval:
    n[-n]

    (n &gt;= 1)

START REPLICA starts the replication threads, either together or
separately. From MySQL 8.0.22, use START REPLICA in place of START
SLAVE, which is deprecated from that release. In releases before MySQL
8.0.22, use START SLAVE.

START REPLICA requires the REPLICATION_SLAVE_ADMIN privilege (or the
deprecated SUPER privilege). START REPLICA causes an implicit commit of
an ongoing transaction. See
https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html.

For the thread type options, you can specify IO_THREAD, SQL_THREAD,
both of these, or neither of them. Only the threads that are started
are affected by the statement.

o START REPLICA with no thread type options starts all of the
  replication threads, and so does START REPLICA with both of the
  thread type options.

o IO_THREAD starts the replication receiver thread, which reads events
  from the source server and stores them in the relay log.

o SQL_THREAD starts the replication applier thread, which reads events
  from the relay log and executes them. A multithreaded replica (with
  replica_parallel_workers or slave_parallel_workers &gt; 0) applies
  transactions using a coordinator thread and multiple applier threads,
  and SQL_THREAD starts all of these.

*Important*:

START REPLICA sends an acknowledgment to the user after all the
replication threads have started. However, the replication receiver
thread might not yet have connected to the source successfully, or an
applier thread might stop when applying an event right after starting.
START REPLICA does not continue to monitor the threads after they are
started, so it does not warn you if they subsequently stop or cannot
connect. You must check the replica's error log for error messages
generated by the replication threads, or check that they are running
satisfactorily with SHOW REPLICA STATUS. A successful START REPLICA
statement causes SHOW REPLICA STATUS to show Replica_SQL_Running=Yes,
but it might or might not show Replica_IO_Running=Yes, because
Replica_IO_Running=Yes is only shown if the receiver thread is both
running and connected. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/replication-administration-stat
us.html.

The optional FOR CHANNEL channel clause enables you to name which
replication channel the statement applies to. Providing a FOR CHANNEL
channel clause applies the START REPLICA statement to a specific
replication channel. If no clause is named and no extra channels exist,
the statement applies to the default channel. If a START REPLICA
statement does not have a channel defined when using multiple channels,
this statement starts the specified threads for all channels. See
https://dev.mysql.com/doc/refman/8.0/en/replication-channels.html for
more information.

The replication channels for Group Replication
(group_replication_applier and group_replication_recovery) are managed
automatically by the server instance. START REPLICA cannot be used at
all with the group_replication_recovery channel, and should only be
used with the group_replication_applier channel when Group Replication
is not running. The group_replication_applier channel only has an
applier thread and has no receiver thread, so it can be started if
required by using the SQL_THREAD option without the IO_THREAD option.

START REPLICA supports pluggable user-password authentication (see
https://dev.mysql.com/doc/refman/8.0/en/pluggable-authentication.html)
with the USER, PASSWORD, DEFAULT_AUTH and PLUGIN_DIR options, as
described in the following list. When you use these options, you must
start the receiver thread (IO_THREAD option) or all the replication
threads; you cannot start the replication applier thread (SQL_THREAD
option) alone.

o USER

  The user name for the account. You must set this if PASSWORD is used.
  The option cannot be set to an empty or null string.

o PASSWORD

  The password for the named user account.

o DEFAULT_AUTH

  The name of the authentication plugin. The default is MySQL native
  authentication.

o PLUGIN_DIR

  The location of the authentication plugin.

*Important*:

The password that you set using START REPLICA is masked when it is
written to MySQL Server's logs, Performance Schema tables, and SHOW
PROCESSLIST statements. However, it is sent in plain text over the
connection to the replica server instance. To protect the password in
transit, use SSL/TLS encryption, an SSH tunnel, or another method of
protecting the connection from unauthorized viewing, for the connection
between the replica server instance and the client that you use to
issue START REPLICA.

The UNTIL clause makes the replica start replication, then process
transactions up to the point that you specify in the UNTIL clause, then
stop again. The UNTIL clause can be used to make a replica proceed
until just before the point where you want to skip a transaction that
is unwanted, and then skip the transaction as described in
https://dev.mysql.com/doc/refman/8.0/en/replication-administration-skip
.html. To identify a transaction, you can use mysqlbinlog with the
source's binary log or the replica's relay log, or use a SHOW BINLOG
EVENTS statement.

You can also use the UNTIL clause for debugging replication by
processing transactions one at a time or in sections. If you are using
the UNTIL clause to do this, start the replica with the
--skip-slave-start option, or from MySQL 8.0.24, the skip_slave_start
system variable, to prevent the SQL thread from running when the
replica server starts. Remove the option or system variable setting
after the procedure is complete, so that it is not forgotten in the
event of an unexpected server restart.

The SHOW REPLICA STATUS statement includes output fields that display
the current values of the UNTIL condition. The UNTIL condition lasts
for as long as the affected threads are still running, and is removed
when they stop.

The UNTIL clause operates on the replication applier thread (SQL_THREAD
option). You can use the SQL_THREAD option or let the replica default
to starting both threads. If you use the IO_THREAD option alone, the
UNTIL clause is ignored because the applier thread is not started.

The point that you specify in the UNTIL clause can be any one (and only
one) of the following options:

o SOURCE_LOG_FILE and SOURCE_LOG_POS (from MySQL 8.0.23), or
  MASTER_LOG_FILE and MASTER_LOG_POS (to MySQL 8.0.22)

  These options make the replication applier process transactions up to
  a position in its relay log, identified by the file name and file
  position of the corresponding point in the binary log on the source
  server. The applier thread finds the nearest transaction boundary at
  or after the specified position, finishes applying the transaction,
  and stops there. For compressed transaction payloads, specify the end
  position of the compressed Transaction_payload_event.

  These options can still be used when the GTID_ONLY option was set on
  the CHANGE REPLICATION SOURCE TO statement to stop the replication
  channel from persisting file names and file positions in the
  replication metadata repositories. The file names and file positions
  are tracked in memory.

o RELAY_LOG_FILE and RELAY_LOG_POS

  These options make the replication applier process transactions up to
  a position in the replica's relay log, identified by the relay log
  file name and a position in that file. The applier thread finds the
  nearest transaction boundary at or after the specified position,
  finishes applying the transaction, and stops there. For compressed
  transaction payloads, specify the end position of the compressed
  Transaction_payload_event.

  These options can still be used when the GTID_ONLY option was set on
  the CHANGE REPLICATION SOURCE TO statement to stop the replication
  channel from persisting file names and file positions in the
  replication metadata repositories. The file names and file positions
  are tracked in memory.

o SQL_BEFORE_GTIDS

  This option makes the replication applier start processing
  transactions and stop when it encounters any transaction that is in
  the specified GTID set. The encountered transaction from the GTID set
  is not applied, and nor are any of the other transactions in the GTID
  set. The option takes a GTID set containing one or more global
  transaction identifiers as an argument (see
  https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-concepts.ht
  ml#replication-gtids-concepts-gtid-sets). Transactions in a GTID set
  do not necessarily appear in the replication stream in the order of
  their GTIDs, so the transaction before which the applier stops is not
  necessarily the earliest.

o SQL_AFTER_GTIDS

  This option makes the replication applier start processing
  transactions and stop when it has processed all of the transactions
  in a specified GTID set. The option takes a GTID set containing one
  or more global transaction identifiers as an argument (see
  https://dev.mysql.com/doc/refman/8.0/en/replication-gtids-concepts.ht
  ml#replication-gtids-concepts-gtid-sets).

  With SQL_AFTER_GTIDS, the replication threads stop after they have
  processed all transactions in the GTID set. Transactions are
  processed in the order received, so it is possible that these include
  transactions which are not part of the GTID set, but which are
  received (and processed) before all transactions in the set have been
  committed. For example, executing START REPLICA UNTIL SQL_AFTER_GTIDS
  = 3E11FA47-71CA-11E1-9E33-C80AA9429562:11-56 causes the replica to
  obtain (and process) all transactions from the source until all of
  the transactions having the sequence numbers 11 through 56 have been
  processed, and then to stop without processing any additional
  transactions after that point has been reached.

  SQL_AFTER_GTIDS is not compatible with the multi-threaded applier. If
  this option is used with the multi-threaded applier, a warning is
  raised, and the replica switches to single-threaded mode. Depending
  on the use case, it may be possible to to use START REPLICA UNTIL
  MASTER_LOG_POS or START REPLICA UNTIL SQL_BEFORE_GTIDS. You can also
  use WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(), which waits until the
  correct position is reached, but does not stop the applier thread.

o SQL_AFTER_MTS_GAPS

  For a multithreaded replica only (with replica_parallel_workers or
  slave_parallel_workers &gt; 0), this option makes the replica process
  transactions up to the point where there are no more gaps in the
  sequence of transactions executed from the relay log. When using a
  multithreaded replica, there is a chance of gaps occurring in the
  following situations:

  o The coordinator thread is stopped.

  o An error occurs in the applier threads.

  o mysqld shuts down unexpectedly.

  When a replication channel has gaps, the replica's database is in a
  state that might never have existed on the source. The replica tracks
  the gaps internally and disallows CHANGE REPLICATION SOURCE TO
  statements that would remove the gap information if they executed.

  Before MySQL 8.0.26, issuing START REPLICA on a multithreaded replica
  with gaps in the sequence of transactions executed from the relay log
  generates a warning. To correct this situation, the solution is to
  use START REPLICA UNTIL SQL_AFTER_MTS_GAPS. See
  https://dev.mysql.com/doc/refman/8.0/en/replication-features-transact
  ion-inconsistencies.html for more information.

  From MySQL 8.0.26, the process of checking for gaps in the sequence
  of transactions is skipped entirely when GTID-based replication and
  GTID auto-positioning (SOURCE_AUTO_POSITION=1) are in use for the
  channel, because gaps in transactions can be resolved using GTID
  auto-positioning. In that situation, START REPLICA UNTIL
  SQL_AFTER_MTS_GAPS just stops the applier thread when it finds the
  first transaction to execute, and does not attempt to check for gaps
  in the sequence of transactions. You can also continue to use CHANGE
  REPLICATION SOURCE TO statements as normal, and relay log recovery is
  possible for the channel.

  From MySQL 8.0.27, all replicas are multithreaded by default. When
  replica_preserve_commit_order=ON or slave_preserve_commit_order=ON is
  set for the replica, which is also the default setting from MySQL
  8.0.27, gaps should not occur except in the specific situations
  listed in the description for replica_preserve_commit_order and
  slave_preserve_commit_order. If replica_preserve_commit_order=OFF or
  slave_preserve_commit_order=OFF is set for the replica, which is the
  default before MySQL 8.0.27, the commit order of transactions is not
  preserved, so the chance of gaps occurring is much larger.

  If GTIDs are not in use and you need to change a failed multithreaded
  replica to single-threaded mode, you can issue the following series
  of statements, in the order shown:

START SLAVE UNTIL SQL_AFTER_MTS_GAPS;
SET @@GLOBAL.slave_parallel_workers = 0;
START SLAVE SQL_THREAD;

Or from MySQL 8.0.26:
START REPLICA UNTIL SQL_AFTER_MTS_GAPS;
SET @@GLOBAL.replica_parallel_workers = 0;
START REPLICA SQL_THREAD;

URL: https://dev.mysql.com/doc/refman/8.0/en/start-replica.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/start-replica.html</field>
	</row>
	<row>
		<field name="help_topic_id">583</field>
		<field name="name">START SLAVE</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
START {SLAVE | REPLICA} [thread_types] [until_option] [connection_options] [channel_option]

thread_types:
    [thread_type [, thread_type] ... ]

thread_type:
    IO_THREAD | SQL_THREAD

until_option:
    UNTIL {   {SQL_BEFORE_GTIDS | SQL_AFTER_GTIDS} = gtid_set
          |   MASTER_LOG_FILE = 'log_name', MASTER_LOG_POS = log_pos
          |   SOURCE_LOG_FILE = 'log_name', SOURCE_LOG_POS = log_pos
          |   RELAY_LOG_FILE = 'log_name', RELAY_LOG_POS = log_pos
          |   SQL_AFTER_MTS_GAPS  }

connection_options:
    [USER='user_name'] [PASSWORD='user_pass'] [DEFAULT_AUTH='plugin_name'] [PLUGIN_DIR='plugin_dir']


channel_option:
    FOR CHANNEL channel

gtid_set:
    uuid_set [, uuid_set] ...
    | ''

uuid_set:
    uuid:interval[:interval]...

uuid:
    hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh

h:
    [0-9,A-F]

interval:
    n[-n]

    (n &gt;= 1)

Starts the replication threads. From MySQL 8.0.22, START SLAVE is
deprecated and the alias START REPLICA should be used instead. The
statement works in the same way as before, only the terminology used
for the statement and its output has changed. Both versions of the
statement update the same status variables when used. Please see the
documentation for START REPLICA for a description of the statement.

URL: https://dev.mysql.com/doc/refman/8.0/en/start-slave.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/start-slave.html</field>
	</row>
	<row>
		<field name="help_topic_id">584</field>
		<field name="name">STOP REPLICA</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
STOP REPLICA [thread_types] [channel_option]

thread_types:
    [thread_type [, thread_type] ... ]

thread_type: IO_THREAD | SQL_THREAD

channel_option:
    FOR CHANNEL channel

Stops the replication threads. From MySQL 8.0.22, use STOP REPLICA in
place of STOP SLAVE, which is now deprecated. In releases before MySQL
8.0.22, use STOP SLAVE.

STOP REPLICA requires the REPLICATION_SLAVE_ADMIN privilege (or the
deprecated SUPER privilege). Recommended best practice is to execute
STOP REPLICA on the replica before stopping the replica server (see
https://dev.mysql.com/doc/refman/8.0/en/server-shutdown.html, for more
information).

Like START REPLICA, this statement may be used with the IO_THREAD and
SQL_THREAD options to name the replication thread or threads to be
stopped. Note that the Group Replication applier channel
(group_replication_applier) has no replication I/O (receiver) thread,
only a replication SQL (applier) thread. Using the SQL_THREAD option
therefore stops this channel completely.

STOP REPLICA causes an implicit commit of an ongoing transaction. See
https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html.

gtid_next must be set to AUTOMATIC before issuing this statement.

You can control how long STOP REPLICA waits before timing out by
setting the system variable rpl_stop_replica_timeout (from MySQL
8.0.26) or rpl_stop_slave_timeout (before MySQL 8.0.26). This can be
used to avoid deadlocks between STOP REPLICA and other SQL statements
using different client connections to the replica. When the timeout
value is reached, the issuing client returns an error message and stops
waiting, but the STOP REPLICA instruction remains in effect. Once the
replication threads are no longer busy, the STOP REPLICA statement is
executed and the replica stops.

Some CHANGE REPLICATION SOURCE TO | CHANGE MASTER TO statements are
allowed while the replica is running, depending on the states of the
replication threads. However, using STOP REPLICA prior to executing a
CHANGE REPLICATION SOURCE TO | CHANGE MASTER TO statement in such cases
is still supported. See [HELP CHANGE REPLICATION SOURCE TO], [HELP
CHANGE MASTER TO], and
https://dev.mysql.com/doc/refman/8.0/en/replication-solutions-switch.html
, for more information.

The optional FOR CHANNEL channel clause enables you to name which
replication channel the statement applies to. Providing a FOR CHANNEL
channel clause applies the STOP REPLICA statement to a specific
replication channel. If no channel is named and no extra channels
exist, the statement applies to the default channel. If a STOP REPLICA
statement does not name a channel when using multiple channels, this
statement stops the specified threads for all channels. See
https://dev.mysql.com/doc/refman/8.0/en/replication-channels.html for
more information.

The replication channels for Group Replication
(group_replication_applier and group_replication_recovery) are managed
automatically by the server instance. STOP REPLICA cannot be used at
all with the group_replication_recovery channel, and should only be
used with the group_replication_applier channel when Group Replication
is not running. The group_replication_applier channel only has an
applier thread and has no receiver thread, so it can be stopped if
required by using the SQL_THREAD option without the IO_THREAD option.

When the replica is multithreaded (replica_parallel_workers or
slave_parallel_workers is a nonzero value), any gaps in the sequence of
transactions executed from the relay log are closed as part of stopping
the worker threads. If the replica is stopped unexpectedly (for example
due to an error in a worker thread, or another thread issuing KILL)
while a STOP REPLICA statement is executing, the sequence of executed
transactions from the relay log may become inconsistent. See
https://dev.mysql.com/doc/refman/8.0/en/replication-features-transactio
n-inconsistencies.html, for more information.

When the source is using the row-based binary logging format, you
should execute STOP REPLICA or STOP REPLICA SQL_THREAD on the replica
prior to shutting down the replica server if you are replicating any
tables that use a nontransactional storage engine. If the current
replication event group has modified one or more nontransactional
tables, STOP REPLICA waits for up to 60 seconds for the event group to
complete, unless you issue a KILL QUERY or KILL CONNECTION statement
for the replication SQL thread. If the event group remains incomplete
after the timeout, an error message is logged.

When the source is using the statement-based binary logging format,
changing the source while it has open temporary tables is potentially
unsafe. This is one of the reasons why statement-based replication of
temporary tables is not recommended. You can find out whether there are
any temporary tables on the replica by checking the value of
Replica_open_temp_tables or Slave_open_temp_tables. When using
statement-based replication, this value should be 0 before executing
CHANGE REPLICATION SOURCE TO | CHANGE MASTER TO. If there are any
temporary tables open on the replica, issuing a CHANGE REPLICATION
SOURCE TO | CHANGE MASTER TO statement after issuing a STOP REPLICA
causes an ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO
(https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
#error_er_warn_open_temp_tables_must_be_zero) warning.

URL: https://dev.mysql.com/doc/refman/8.0/en/stop-replica.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/stop-replica.html</field>
	</row>
	<row>
		<field name="help_topic_id">585</field>
		<field name="name">STOP SLAVE</field>
		<field name="help_category_id">43</field>
		<field name="description">Syntax:
STOP {SLAVE | REPLICA} [thread_types] [channel_option]

thread_types:
    [thread_type [, thread_type] ... ]

thread_type: IO_THREAD | SQL_THREAD

channel_option:
    FOR CHANNEL channel

Stops the replication threads. From MySQL 8.0.22, STOP SLAVE is
deprecated and the alias STOP REPLICA should be used instead. The
statement works in the same way as before, only the terminology used
for the statement and its output has changed. Both versions of the
statement update the same status variables when used. Please see the
documentation for STOP REPLICA for a description of the statement.

URL: https://dev.mysql.com/doc/refman/8.0/en/stop-slave.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/stop-slave.html</field>
	</row>
	<row>
		<field name="help_topic_id">586</field>
		<field name="name">PREPARE</field>
		<field name="help_category_id">44</field>
		<field name="description">Syntax:
PREPARE stmt_name FROM preparable_stmt

The PREPARE statement prepares a SQL statement and assigns it a name,
stmt_name, by which to refer to the statement later. The prepared
statement is executed with EXECUTE and released with DEALLOCATE
PREPARE. For examples, see
https://dev.mysql.com/doc/refman/8.0/en/sql-prepared-statements.html.

Statement names are not case-sensitive. preparable_stmt is either a
string literal or a user variable that contains the text of the SQL
statement. The text must represent a single statement, not multiple
statements. Within the statement, ? characters can be used as parameter
markers to indicate where data values are to be bound to the query
later when you execute it. The ? characters should not be enclosed
within quotation marks, even if you intend to bind them to string
values. Parameter markers can be used only where data values should
appear, not for SQL keywords, identifiers, and so forth.

If a prepared statement with the given name already exists, it is
deallocated implicitly before the new statement is prepared. This means
that if the new statement contains an error and cannot be prepared, an
error is returned and no statement with the given name exists.

The scope of a prepared statement is the session within which it is
created, which as several implications:

o A prepared statement created in one session is not available to other
  sessions.

o When a session ends, whether normally or abnormally, its prepared
  statements no longer exist. If auto-reconnect is enabled, the client
  is not notified that the connection was lost. For this reason,
  clients may wish to disable auto-reconnect. See Automatic
  Reconnection Control
  (https://dev.mysql.com/doc/c-api/8.0/en/c-api-auto-reconnect.html).

o A prepared statement created within a stored program continues to
  exist after the program finishes executing and can be executed
  outside the program later.

o A statement prepared in stored program context cannot refer to stored
  procedure or function parameters or local variables because they go
  out of scope when the program ends and would be unavailable were the
  statement to be executed later outside the program. As a workaround,
  refer instead to user-defined variables, which also have session
  scope; see
  https://dev.mysql.com/doc/refman/8.0/en/user-variables.html.

Beginning with MySQL 8.0.22, a parameter used in a prepared statement
has its type determined when the statement is first prepared, and
retains this type whenever EXECUTE is invoked for this prepared
statement (unless the statement is reprepared, as explained later in
this section). Rules for determining a parameter's type are listed
here:

o A parameter which is an operand of a binary arithmetic operator has
  the same data type as the other operand.

o If both operands of a binary arithmetic operator are parameters, the
  type of the parameters is decided by the context of the operator.

o If a parameter is the operand of a unary arithmetic operator, the
  parameter's type is decided by the context of the operator.

o If an arithmetic operator has no type-determining context, the
  derived type for any parameters involved is DOUBLE PRECISION. This
  can happen, for example, when the parameter is a top-level node in a
  SELECT list, or when it is part of a comparison operator.

o A parameter which is an operand of a character string operator has
  the same derived type as the aggregated type of the other operands.
  If all operands of the operator are parameters, the derived type is
  VARCHAR; its collation is determined by the value of
  collation_connection.

o A parameter which is an operand of a temporal operator has type
  DATETIME if the operator returns a DATETIME, TIME if the operator
  returns a TIME, and DATE if the operator returns a DATE.

o A parameter which is an operand of a binary comparison operator has
  the same derived type as the other operand of the comparison.

o A parameter that is an operand of a ternary comparison operator such
  as BETWEEN has the same derived type as the aggregated type of the
  other operands.

o If all operands of a comparison operator are parameters, the derived
  type for each of them is VARCHAR, with collation determined by the
  value of collation_connection.

o A parameter that is an output operand of any of CASE, COALESCE, IF,
  IFNULL, or NULLIF has the same derived type as the aggregated type of
  the operator's other output operands.

o If all output operands of any of CASE, COALESCE, IF, IFNULL, or
  NULLIF are parameters, or they are all NULL, the type of the
  parameter is decided by the context of the operator.

o If the parameter is an operand of any of CASE, COALESCE(), IF, or
  IFNULL, and has no type-determining context, the derived type for
  each of the parameters involved is VARCHAR, and its collation is
  determined by the value of collation_connection.

o A parameter which is the operand of a CAST() has the same type as
  specified by the CAST().

o If a parameter is an immediate member of a SELECT list that is not
  part of an INSERT statement, the derived type of the parameter is
  VARCHAR, and its collation is determined by the value of
  collation_connection.

o If a parameter is an immediate member of a SELECT list that is part
  of an INSERT statement, the derived type of the parameter is the type
  of the corresponding column into which the parameter is inserted.

o If a parameter is used as source for an assignment in a SET clause of
  an UPDATE statement or in the ON DUPLICATE KEY UPDATE clause of an
  INSERT statement, the derived type of the parameter is the type of
  the corresponding column which is updated by the SET or ON DUPLICATE
  KEY UPDATE clause.

o If a parameter is an argument of a function, the derived type depends
  on the function's return type.

For some combinations of actual type and derived type, an automatic
repreparation of the statement is triggered, to ensure closer
compatibility with previous versions of MySQL. Repreparation does not
occur if any of the following conditions are true:

o NULL is used as the actual parameter value.

o A parameter is an operand of a CAST(). (Instead, a cast to the
  derived type is attempted, and an exception raised if the cast
  fails.)

o A parameter is a string. (In this case, an implicit CAST(? AS
  derived_type) is performed.)

o The derived type and actual type of the parameter are both INTEGER
  and have the same sign.

o The parameter's derived type is DECIMAL and its actual type is either
  DECIMAL or INTEGER.

o The derived type is DOUBLE and the actual type is any numeric type.

o Both the derived type and the actual type are string types.

o If the derived type is temporal and the actual type is temporal.
  Exceptions: The derived type is TIME and the actual type is not TIME;
  the derived type is DATE and the actual type is not DATE.

o The derived type is temporal and the actual type is numeric.

For cases other than those just listed, the statement is reprepared and
the actual parameter types are used instead of the derived parameter
types.

These rules also apply to a user variable referenced in a prepared
statement.

Using a different data type for a given parameter or user variable
within a prepared statement for executions of the statement subsequent
to the first execution causes the statement to be reprepared. This is
less efficient; it may also lead to the parameter's (or variable's)
actual type to vary, and thus for results to be inconsistent, with
subsequent executions of the prepared statement. For these reasons, it
is advisable to use the same data type for a given parameter when
re-executing a prepared statement.

URL: https://dev.mysql.com/doc/refman/8.0/en/prepare.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/prepare.html</field>
	</row>
	<row>
		<field name="help_topic_id">587</field>
		<field name="name">EXECUTE STATEMENT</field>
		<field name="help_category_id">44</field>
		<field name="description">Syntax:
EXECUTE stmt_name
    [USING @var_name [, @var_name] ...]

After preparing a statement with PREPARE, you execute it with an
EXECUTE statement that refers to the prepared statement name. If the
prepared statement contains any parameter markers, you must supply a
USING clause that lists user variables containing the values to be
bound to the parameters. Parameter values can be supplied only by user
variables, and the USING clause must name exactly as many variables as
the number of parameter markers in the statement.

You can execute a given prepared statement multiple times, passing
different variables to it or setting the variables to different values
before each execution.

URL: https://dev.mysql.com/doc/refman/8.0/en/execute.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/execute.html</field>
	</row>
	<row>
		<field name="help_topic_id">588</field>
		<field name="name">DEALLOCATE PREPARE</field>
		<field name="help_category_id">44</field>
		<field name="description">Syntax:
{DEALLOCATE | DROP} PREPARE stmt_name

To deallocate a prepared statement produced with PREPARE, use a
DEALLOCATE PREPARE statement that refers to the prepared statement
name. Attempting to execute a prepared statement after deallocating it
results in an error. If too many prepared statements are created and
not deallocated by either the DEALLOCATE PREPARE statement or the end
of the session, you might encounter the upper limit enforced by the
max_prepared_stmt_count system variable.

URL: https://dev.mysql.com/doc/refman/8.0/en/deallocate-prepare.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/deallocate-prepare.html</field>
	</row>
	<row>
		<field name="help_topic_id">589</field>
		<field name="name">DROP PREPARE</field>
		<field name="help_category_id">44</field>
		<field name="description">Syntax:
{DEALLOCATE | DROP} PREPARE stmt_name

To deallocate a prepared statement produced with PREPARE, use a
DEALLOCATE PREPARE statement that refers to the prepared statement
name. Attempting to execute a prepared statement after deallocating it
results in an error. If too many prepared statements are created and
not deallocated by either the DEALLOCATE PREPARE statement or the end
of the session, you might encounter the upper limit enforced by the
max_prepared_stmt_count system variable.

URL: https://dev.mysql.com/doc/refman/8.0/en/deallocate-prepare.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/deallocate-prepare.html</field>
	</row>
	<row>
		<field name="help_topic_id">590</field>
		<field name="name">BEGIN END</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
[begin_label:] BEGIN
    [statement_list]
END [end_label]

BEGIN ... END syntax is used for writing compound statements, which can
appear within stored programs (stored procedures and functions,
triggers, and events). A compound statement can contain multiple
statements, enclosed by the BEGIN and END keywords. statement_list
represents a list of one or more statements, each terminated by a
semicolon (;) statement delimiter. The statement_list itself is
optional, so the empty compound statement (BEGIN END) is legal.

BEGIN ... END blocks can be nested.

Use of multiple statements requires that a client is able to send
statement strings containing the ; statement delimiter. In the mysql
command-line client, this is handled with the delimiter command.
Changing the ; end-of-statement delimiter (for example, to //) permit ;
to be used in a program body. For an example, see
https://dev.mysql.com/doc/refman/8.0/en/stored-programs-defining.html.

A BEGIN ... END block can be labeled. See [HELP labels].

URL: https://dev.mysql.com/doc/refman/8.0/en/begin-end.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/begin-end.html</field>
	</row>
	<row>
		<field name="help_topic_id">591</field>
		<field name="name">LABELS</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
[begin_label:] BEGIN
    [statement_list]
END [end_label]

[begin_label:] LOOP
    statement_list
END LOOP [end_label]

[begin_label:] REPEAT
    statement_list
UNTIL search_condition
END REPEAT [end_label]

[begin_label:] WHILE search_condition DO
    statement_list
END WHILE [end_label]

Labels are permitted for BEGIN ... END blocks and for the LOOP, REPEAT,
and WHILE statements. Label use for those statements follows these
rules:

o begin_label must be followed by a colon.

o begin_label can be given without end_label. If end_label is present,
  it must be the same as begin_label.

o end_label cannot be given without begin_label.

o Labels at the same nesting level must be distinct.

o Labels can be up to 16 characters long.

To refer to a label within the labeled construct, use an ITERATE or
LEAVE statement. The following example uses those statements to
continue iterating or terminate the loop:

CREATE PROCEDURE doiterate(p1 INT)
BEGIN
  label1: LOOP
    SET p1 = p1 + 1;
    IF p1 &lt; 10 THEN ITERATE label1; END IF;
    LEAVE label1;
  END LOOP label1;
END;

The scope of a block label does not include the code for handlers
declared within the block. For details, see [HELP DECLARE HANDLER].

URL: https://dev.mysql.com/doc/refman/8.0/en/statement-labels.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/statement-labels.html</field>
	</row>
	<row>
		<field name="help_topic_id">592</field>
		<field name="name">DECLARE VARIABLE</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
DECLARE var_name [, var_name] ... type [DEFAULT value]

This statement declares local variables within stored programs. To
provide a default value for a variable, include a DEFAULT clause. The
value can be specified as an expression; it need not be a constant. If
the DEFAULT clause is missing, the initial value is NULL.

Local variables are treated like stored routine parameters with respect
to data type and overflow checking. See [HELP CREATE PROCEDURE].

Variable declarations must appear before cursor or handler
declarations.

Local variable names are not case-sensitive. Permissible characters and
quoting rules are the same as for other identifiers, as described in
https://dev.mysql.com/doc/refman/8.0/en/identifiers.html.

The scope of a local variable is the BEGIN ... END block within which
it is declared. The variable can be referred to in blocks nested within
the declaring block, except those blocks that declare a variable with
the same name.

For examples of variable declarations, see
https://dev.mysql.com/doc/refman/8.0/en/local-variable-scope.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/declare-local-variable.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/declare-local-variable.html</field>
	</row>
	<row>
		<field name="help_topic_id">593</field>
		<field name="name">CASE STATEMENT</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
CASE case_value
    WHEN when_value THEN statement_list
    [WHEN when_value THEN statement_list] ...
    [ELSE statement_list]
END CASE

Or:

CASE
    WHEN search_condition THEN statement_list
    [WHEN search_condition THEN statement_list] ...
    [ELSE statement_list]
END CASE

The CASE statement for stored programs implements a complex conditional
construct.

*Note*:

There is also a CASE operator, which differs from the CASE statement
described here. See
https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html.
The CASE statement cannot have an ELSE NULL clause, and it is
terminated with END CASE instead of END.

For the first syntax, case_value is an expression. This value is
compared to the when_value expression in each WHEN clause until one of
them is equal. When an equal when_value is found, the corresponding
THEN clause statement_list executes. If no when_value is equal, the
ELSE clause statement_list executes, if there is one.

This syntax cannot be used to test for equality with NULL because NULL
= NULL is false. See
https://dev.mysql.com/doc/refman/8.0/en/working-with-null.html.

For the second syntax, each WHEN clause search_condition expression is
evaluated until one is true, at which point its corresponding THEN
clause statement_list executes. If no search_condition is equal, the
ELSE clause statement_list executes, if there is one.

If no when_value or search_condition matches the value tested and the
CASE statement contains no ELSE clause, a Case not found for CASE
statement error results.

Each statement_list consists of one or more SQL statements; an empty
statement_list is not permitted.

To handle situations where no value is matched by any WHEN clause, use
an ELSE containing an empty BEGIN ... END block, as shown in this
example. (The indentation used here in the ELSE clause is for purposes
of clarity only, and is not otherwise significant.)

DELIMITER |

CREATE PROCEDURE p()
  BEGIN
    DECLARE v INT DEFAULT 1;

    CASE v
      WHEN 2 THEN SELECT v;
      WHEN 3 THEN SELECT 0;
      ELSE
        BEGIN
        END;
    END CASE;
  END;
  |

URL: https://dev.mysql.com/doc/refman/8.0/en/case.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/case.html</field>
	</row>
	<row>
		<field name="help_topic_id">594</field>
		<field name="name">IF STATEMENT</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
IF search_condition THEN statement_list
    [ELSEIF search_condition THEN statement_list] ...
    [ELSE statement_list]
END IF

The IF statement for stored programs implements a basic conditional
construct.

*Note*:

There is also an IF() function, which differs from the IF statement
described here. See
https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html.
The IF statement can have THEN, ELSE, and ELSEIF clauses, and it is
terminated with END IF.

If a given search_condition evaluates to true, the corresponding THEN
or ELSEIF clause statement_list executes. If no search_condition
matches, the ELSE clause statement_list executes.

Each statement_list consists of one or more SQL statements; an empty
statement_list is not permitted.

URL: https://dev.mysql.com/doc/refman/8.0/en/if.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/if.html</field>
	</row>
	<row>
		<field name="help_topic_id">595</field>
		<field name="name">ITERATE</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
ITERATE label

ITERATE can appear only within LOOP, REPEAT, and WHILE statements.
ITERATE means &quot;start the loop again.&quot;

URL: https://dev.mysql.com/doc/refman/8.0/en/iterate.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/iterate.html</field>
	</row>
	<row>
		<field name="help_topic_id">596</field>
		<field name="name">LEAVE</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
LEAVE label

This statement is used to exit the flow control construct that has the
given label. If the label is for the outermost stored program block,
LEAVE exits the program.

LEAVE can be used within BEGIN ... END or loop constructs (LOOP,
REPEAT, WHILE).

URL: https://dev.mysql.com/doc/refman/8.0/en/leave.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/leave.html</field>
	</row>
	<row>
		<field name="help_topic_id">597</field>
		<field name="name">LOOP</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
[begin_label:] LOOP
    statement_list
END LOOP [end_label]

LOOP implements a simple loop construct, enabling repeated execution of
the statement list, which consists of one or more statements, each
terminated by a semicolon (;) statement delimiter. The statements
within the loop are repeated until the loop is terminated. Usually,
this is accomplished with a LEAVE statement. Within a stored function,
RETURN can also be used, which exits the function entirely.

Neglecting to include a loop-termination statement results in an
infinite loop.

A LOOP statement can be labeled. For the rules regarding label use, see
[HELP labels].

URL: https://dev.mysql.com/doc/refman/8.0/en/loop.html

</field>
		<field name="example">CREATE PROCEDURE doiterate(p1 INT)
BEGIN
  label1: LOOP
    SET p1 = p1 + 1;
    IF p1 &lt; 10 THEN
      ITERATE label1;
    END IF;
    LEAVE label1;
  END LOOP label1;
  SET @x = p1;
END;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/loop.html</field>
	</row>
	<row>
		<field name="help_topic_id">598</field>
		<field name="name">REPEAT LOOP</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
[begin_label:] REPEAT
    statement_list
UNTIL search_condition
END REPEAT [end_label]

The statement list within a REPEAT statement is repeated until the
search_condition expression is true. Thus, a REPEAT always enters the
loop at least once. statement_list consists of one or more statements,
each terminated by a semicolon (;) statement delimiter.

A REPEAT statement can be labeled. For the rules regarding label use,
see [HELP labels].

URL: https://dev.mysql.com/doc/refman/8.0/en/repeat.html

</field>
		<field name="example">mysql&gt; delimiter //

mysql&gt; CREATE PROCEDURE dorepeat(p1 INT)
       BEGIN
         SET @x = 0;
         REPEAT
           SET @x = @x + 1;
         UNTIL @x &gt; p1 END REPEAT;
       END
       //
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CALL dorepeat(1000)//
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @x//
+------+
| @x   |
+------+
| 1001 |
+------+
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/repeat.html</field>
	</row>
	<row>
		<field name="help_topic_id">599</field>
		<field name="name">RETURN</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
RETURN expr

The RETURN statement terminates execution of a stored function and
returns the value expr to the function caller. There must be at least
one RETURN statement in a stored function. There may be more than one
if the function has multiple exit points.

This statement is not used in stored procedures, triggers, or events.
The LEAVE statement can be used to exit a stored program of those
types.

URL: https://dev.mysql.com/doc/refman/8.0/en/return.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/return.html</field>
	</row>
	<row>
		<field name="help_topic_id">600</field>
		<field name="name">WHILE</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
[begin_label:] WHILE search_condition DO
    statement_list
END WHILE [end_label]

The statement list within a WHILE statement is repeated as long as the
search_condition expression is true. statement_list consists of one or
more SQL statements, each terminated by a semicolon (;) statement
delimiter.

A WHILE statement can be labeled. For the rules regarding label use,
see [HELP labels].

URL: https://dev.mysql.com/doc/refman/8.0/en/while.html

</field>
		<field name="example">CREATE PROCEDURE dowhile()
BEGIN
  DECLARE v1 INT DEFAULT 5;

  WHILE v1 &gt; 0 DO
    ...
    SET v1 = v1 - 1;
  END WHILE;
END;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/while.html</field>
	</row>
	<row>
		<field name="help_topic_id">601</field>
		<field name="name">CLOSE</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
CLOSE cursor_name

This statement closes a previously opened cursor. For an example, see
https://dev.mysql.com/doc/refman/8.0/en/cursors.html.

An error occurs if the cursor is not open.

If not closed explicitly, a cursor is closed at the end of the BEGIN
... END block in which it was declared.

URL: https://dev.mysql.com/doc/refman/8.0/en/close.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/close.html</field>
	</row>
	<row>
		<field name="help_topic_id">602</field>
		<field name="name">DECLARE CURSOR</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
DECLARE cursor_name CURSOR FOR select_statement

This statement declares a cursor and associates it with a SELECT
statement that retrieves the rows to be traversed by the cursor. To
fetch the rows later, use a FETCH statement. The number of columns
retrieved by the SELECT statement must match the number of output
variables specified in the FETCH statement.

The SELECT statement cannot have an INTO clause.

Cursor declarations must appear before handler declarations and after
variable and condition declarations.

A stored program may contain multiple cursor declarations, but each
cursor declared in a given block must have a unique name. For an
example, see https://dev.mysql.com/doc/refman/8.0/en/cursors.html.

For information available through SHOW statements, it is possible in
many cases to obtain equivalent information by using a cursor with an
INFORMATION_SCHEMA table.

URL: https://dev.mysql.com/doc/refman/8.0/en/declare-cursor.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/declare-cursor.html</field>
	</row>
	<row>
		<field name="help_topic_id">603</field>
		<field name="name">FETCH</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
FETCH [[NEXT] FROM] cursor_name INTO var_name [, var_name] ...

This statement fetches the next row for the SELECT statement associated
with the specified cursor (which must be open), and advances the cursor
pointer. If a row exists, the fetched columns are stored in the named
variables. The number of columns retrieved by the SELECT statement must
match the number of output variables specified in the FETCH statement.

If no more rows are available, a No Data condition occurs with SQLSTATE
value '02000'. To detect this condition, you can set up a handler for
it (or for a NOT FOUND condition). For an example, see
https://dev.mysql.com/doc/refman/8.0/en/cursors.html.

Be aware that another operation, such as a SELECT or another FETCH, may
also cause the handler to execute by raising the same condition. If it
is necessary to distinguish which operation raised the condition, place
the operation within its own BEGIN ... END block so that it can be
associated with its own handler.

URL: https://dev.mysql.com/doc/refman/8.0/en/fetch.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/fetch.html</field>
	</row>
	<row>
		<field name="help_topic_id">604</field>
		<field name="name">OPEN</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
OPEN cursor_name

This statement opens a previously declared cursor. For an example, see
https://dev.mysql.com/doc/refman/8.0/en/cursors.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/open.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/open.html</field>
	</row>
	<row>
		<field name="help_topic_id">605</field>
		<field name="name">DECLARE CONDITION</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
DECLARE condition_name CONDITION FOR condition_value

condition_value: {
    mysql_error_code
  | SQLSTATE [VALUE] sqlstate_value
}

The DECLARE ... CONDITION statement declares a named error condition,
associating a name with a condition that needs specific handling. The
name can be referred to in a subsequent DECLARE ... HANDLER statement
(see [HELP DECLARE HANDLER]).

Condition declarations must appear before cursor or handler
declarations.

The condition_value for DECLARE ... CONDITION indicates the specific
condition or class of conditions to associate with the condition name.
It can take the following forms:

o mysql_error_code: An integer literal indicating a MySQL error code.

  Do not use MySQL error code 0 because that indicates success rather
  than an error condition. For a list of MySQL error codes, see Server
  Error Message Reference
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html).

o SQLSTATE [VALUE] sqlstate_value: A 5-character string literal
  indicating an SQLSTATE value.

  Do not use SQLSTATE values that begin with '00' because those
  indicate success rather than an error condition. For a list of
  SQLSTATE values, see Server Error Message Reference
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html).

Condition names referred to in SIGNAL or use RESIGNAL statements must
be associated with SQLSTATE values, not MySQL error codes.

URL: https://dev.mysql.com/doc/refman/8.0/en/declare-condition.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/declare-condition.html</field>
	</row>
	<row>
		<field name="help_topic_id">606</field>
		<field name="name">DECLARE HANDLER</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
DECLARE handler_action HANDLER
    FOR condition_value [, condition_value] ...
    statement

handler_action: {
    CONTINUE
  | EXIT
  | UNDO
}

condition_value: {
    mysql_error_code
  | SQLSTATE [VALUE] sqlstate_value
  | condition_name
  | SQLWARNING
  | NOT FOUND
  | SQLEXCEPTION
}

The DECLARE ... HANDLER statement specifies a handler that deals with
one or more conditions. If one of these conditions occurs, the
specified statement executes. statement can be a simple statement such
as SET var_name = value, or a compound statement written using BEGIN
and END (see [HELP BEGIN END]).

Handler declarations must appear after variable or condition
declarations.

The handler_action value indicates what action the handler takes after
execution of the handler statement:

o CONTINUE: Execution of the current program continues.

o EXIT: Execution terminates for the BEGIN ... END compound statement
  in which the handler is declared. This is true even if the condition
  occurs in an inner block.

o UNDO: Not supported.

The condition_value for DECLARE ... HANDLER indicates the specific
condition or class of conditions that activates the handler. It can
take the following forms:

o mysql_error_code: An integer literal indicating a MySQL error code,
  such as 1051 to specify &quot;unknown table&quot;:

DECLARE CONTINUE HANDLER FOR 1051
  BEGIN
    -- body of handler
  END;

  Do not use MySQL error code 0 because that indicates success rather
  than an error condition. For a list of MySQL error codes, see Server
  Error Message Reference
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html).

o SQLSTATE [VALUE] sqlstate_value: A 5-character string literal
  indicating an SQLSTATE value, such as '42S01' to specify &quot;unknown
  table&quot;:

DECLARE CONTINUE HANDLER FOR SQLSTATE '42S02'
  BEGIN
    -- body of handler
  END;

  Do not use SQLSTATE values that begin with '00' because those
  indicate success rather than an error condition. For a list of
  SQLSTATE values, see Server Error Message Reference
  (https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference
  .html).

o condition_name: A condition name previously specified with DECLARE
  ... CONDITION. A condition name can be associated with a MySQL error
  code or SQLSTATE value. See [HELP DECLARE CONDITION].

o SQLWARNING: Shorthand for the class of SQLSTATE values that begin
  with '01'.

DECLARE CONTINUE HANDLER FOR SQLWARNING
  BEGIN
    -- body of handler
  END;

o NOT FOUND: Shorthand for the class of SQLSTATE values that begin with
  '02'. This is relevant within the context of cursors and is used to
  control what happens when a cursor reaches the end of a data set. If
  no more rows are available, a No Data condition occurs with SQLSTATE
  value '02000'. To detect this condition, you can set up a handler for
  it or for a NOT FOUND condition.

DECLARE CONTINUE HANDLER FOR NOT FOUND
  BEGIN
    -- body of handler
  END;

  For another example, see
  https://dev.mysql.com/doc/refman/8.0/en/cursors.html. The NOT FOUND
  condition also occurs for SELECT ... INTO var_list statements that
  retrieve no rows.

o SQLEXCEPTION: Shorthand for the class of SQLSTATE values that do not
  begin with '00', '01', or '02'.

DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  BEGIN
    -- body of handler
  END;

For information about how the server chooses handlers when a condition
occurs, see https://dev.mysql.com/doc/refman/8.0/en/handler-scope.html.

If a condition occurs for which no handler has been declared, the
action taken depends on the condition class:

o For SQLEXCEPTION conditions, the stored program terminates at the
  statement that raised the condition, as if there were an EXIT
  handler. If the program was called by another stored program, the
  calling program handles the condition using the handler selection
  rules applied to its own handlers.

o For SQLWARNING conditions, the program continues executing, as if
  there were a CONTINUE handler.

o For NOT FOUND conditions, if the condition was raised normally, the
  action is CONTINUE. If it was raised by SIGNAL or RESIGNAL, the
  action is EXIT.

URL: https://dev.mysql.com/doc/refman/8.0/en/declare-handler.html

</field>
		<field name="example">mysql&gt; CREATE TABLE test.t (s1 INT, PRIMARY KEY (s1));
Query OK, 0 rows affected (0.00 sec)

mysql&gt; delimiter //

mysql&gt; CREATE PROCEDURE handlerdemo ()
       BEGIN
         DECLARE CONTINUE HANDLER FOR SQLSTATE '23000' SET @x2 = 1;
         SET @x = 1;
         INSERT INTO test.t VALUES (1);
         SET @x = 2;
         INSERT INTO test.t VALUES (1);
         SET @x = 3;
       END;
       //
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CALL handlerdemo()//
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @x//
    +------+
    | @x   |
    +------+
    | 3    |
    +------+
    1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/declare-handler.html</field>
	</row>
	<row>
		<field name="help_topic_id">607</field>
		<field name="name">GET DIAGNOSTICS</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
GET [CURRENT | STACKED] DIAGNOSTICS {
    statement_information_item
    [, statement_information_item] ...
  | CONDITION condition_number
    condition_information_item
    [, condition_information_item] ...
}

statement_information_item:
    target = statement_information_item_name

condition_information_item:
    target = condition_information_item_name

statement_information_item_name: {
    NUMBER
  | ROW_COUNT
}

condition_information_item_name: {
    CLASS_ORIGIN
  | SUBCLASS_ORIGIN
  | RETURNED_SQLSTATE
  | MESSAGE_TEXT
  | MYSQL_ERRNO
  | CONSTRAINT_CATALOG
  | CONSTRAINT_SCHEMA
  | CONSTRAINT_NAME
  | CATALOG_NAME
  | SCHEMA_NAME
  | TABLE_NAME
  | COLUMN_NAME
  | CURSOR_NAME
}

condition_number, target:
    (see following discussion)

SQL statements produce diagnostic information that populates the
diagnostics area. The GET DIAGNOSTICS statement enables applications to
inspect this information. (You can also use SHOW WARNINGS or SHOW
ERRORS to see conditions or errors.)

No special privileges are required to execute GET DIAGNOSTICS.

The keyword CURRENT means to retrieve information from the current
diagnostics area. The keyword STACKED means to retrieve information
from the second diagnostics area, which is available only if the
current context is a condition handler. If neither keyword is given,
the default is to use the current diagnostics area.

The GET DIAGNOSTICS statement is typically used in a handler within a
stored program. It is a MySQL extension that GET [CURRENT] DIAGNOSTICS
is permitted outside handler context to check the execution of any SQL
statement. For example, if you invoke the mysql client program, you can
enter these statements at the prompt:

mysql&gt; DROP TABLE test.no_such_table;
ERROR 1051 (42S02): Unknown table 'test.no_such_table'
mysql&gt; GET DIAGNOSTICS CONDITION 1
         @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
mysql&gt; SELECT @p1, @p2;
+-------+------------------------------------+
| @p1   | @p2                                |
+-------+------------------------------------+
| 42S02 | Unknown table 'test.no_such_table' |
+-------+------------------------------------+

This extension applies only to the current diagnostics area. It does
not apply to the second diagnostics area because GET STACKED
DIAGNOSTICS is permitted only if the current context is a condition
handler. If that is not the case, a GET STACKED DIAGNOSTICS when
handler not active error occurs.

For a description of the diagnostics area, see
https://dev.mysql.com/doc/refman/8.0/en/diagnostics-area.html. Briefly,
it contains two kinds of information:

o Statement information, such as the number of conditions that occurred
  or the affected-rows count.

o Condition information, such as the error code and message. If a
  statement raises multiple conditions, this part of the diagnostics
  area has a condition area for each one. If a statement raises no
  conditions, this part of the diagnostics area is empty.

For a statement that produces three conditions, the diagnostics area
contains statement and condition information like this:

Statement information:
  row count
  ... other statement information items ...
Condition area list:
  Condition area 1:
    error code for condition 1
    error message for condition 1
    ... other condition information items ...
  Condition area 2:
    error code for condition 2:
    error message for condition 2
    ... other condition information items ...
  Condition area 3:
    error code for condition 3
    error message for condition 3
    ... other condition information items ...

GET DIAGNOSTICS can obtain either statement or condition information,
but not both in the same statement:

o To obtain statement information, retrieve the desired statement items
  into target variables. This instance of GET DIAGNOSTICS assigns the
  number of available conditions and the rows-affected count to the
  user variables @p1 and @p2:

GET DIAGNOSTICS @p1 = NUMBER, @p2 = ROW_COUNT;

o To obtain condition information, specify the condition number and
  retrieve the desired condition items into target variables. This
  instance of GET DIAGNOSTICS assigns the SQLSTATE value and error
  message to the user variables @p3 and @p4:

GET DIAGNOSTICS CONDITION 1
  @p3 = RETURNED_SQLSTATE, @p4 = MESSAGE_TEXT;

The retrieval list specifies one or more target = item_name
assignments, separated by commas. Each assignment names a target
variable and either a statement_information_item_name or
condition_information_item_name designator, depending on whether the
statement retrieves statement or condition information.

Valid target designators for storing item information can be stored
procedure or function parameters, stored program local variables
declared with DECLARE, or user-defined variables.

Valid condition_number designators can be stored procedure or function
parameters, stored program local variables declared with DECLARE,
user-defined variables, system variables, or literals. A character
literal may include a _charset introducer. A warning occurs if the
condition number is not in the range from 1 to the number of condition
areas that have information. In this case, the warning is added to the
diagnostics area without clearing it.

When a condition occurs, MySQL does not populate all condition items
recognized by GET DIAGNOSTICS. For example:

mysql&gt; GET DIAGNOSTICS CONDITION 1
         @p5 = SCHEMA_NAME, @p6 = TABLE_NAME;
mysql&gt; SELECT @p5, @p6;
+------+------+
| @p5  | @p6  |
+------+------+
|      |      |
+------+------+

In standard SQL, if there are multiple conditions, the first condition
relates to the SQLSTATE value returned for the previous SQL statement.
In MySQL, this is not guaranteed. To get the main error, you cannot do
this:

GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO;

Instead, retrieve the condition count first, then use it to specify
which condition number to inspect:

GET DIAGNOSTICS @cno = NUMBER;
GET DIAGNOSTICS CONDITION @cno @errno = MYSQL_ERRNO;

For information about permissible statement and condition information
items, and which ones are populated when a condition occurs, see
https://dev.mysql.com/doc/refman/8.0/en/diagnostics-area.html#diagnosti
cs-area-information-items.

Here is an example that uses GET DIAGNOSTICS and an exception handler
in stored procedure context to assess the outcome of an insert
operation. If the insert was successful, the procedure uses GET
DIAGNOSTICS to get the rows-affected count. This shows that you can use
GET DIAGNOSTICS multiple times to retrieve information about a
statement as long as the current diagnostics area has not been cleared.

CREATE PROCEDURE do_insert(value INT)
BEGIN
  -- Declare variables to hold diagnostics area information
  DECLARE code CHAR(5) DEFAULT '00000';
  DECLARE msg TEXT;
  DECLARE nrows INT;
  DECLARE result TEXT;
  -- Declare exception handler for failed insert
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        code = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
    END;

  -- Perform the insert
  INSERT INTO t1 (int_col) VALUES(value);
  -- Check whether the insert was successful
  IF code = '00000' THEN
    GET DIAGNOSTICS nrows = ROW_COUNT;
    SET result = CONCAT('insert succeeded, row count = ',nrows);
  ELSE
    SET result = CONCAT('insert failed, error = ',code,', message = ',msg);
  END IF;
  -- Say what happened
  SELECT result;
END;

Suppose that t1.int_col is an integer column that is declared as NOT
NULL. The procedure produces these results when invoked to insert
non-NULL and NULL values, respectively:

mysql&gt; CALL do_insert(1);
+---------------------------------+
| result                          |
+---------------------------------+
| insert succeeded, row count = 1 |
+---------------------------------+

mysql&gt; CALL do_insert(NULL);
+-------------------------------------------------------------------------+
| result                                                                  |
+-------------------------------------------------------------------------+
| insert failed, error = 23000, message = Column 'int_col' cannot be null |
+-------------------------------------------------------------------------+

URL: https://dev.mysql.com/doc/refman/8.0/en/get-diagnostics.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/get-diagnostics.html</field>
	</row>
	<row>
		<field name="help_topic_id">608</field>
		<field name="name">RESIGNAL</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
RESIGNAL [condition_value]
    [SET signal_information_item
    [, signal_information_item] ...]

condition_value: {
    SQLSTATE [VALUE] sqlstate_value
  | condition_name
}

signal_information_item:
    condition_information_item_name = simple_value_specification

condition_information_item_name: {
    CLASS_ORIGIN
  | SUBCLASS_ORIGIN
  | MESSAGE_TEXT
  | MYSQL_ERRNO
  | CONSTRAINT_CATALOG
  | CONSTRAINT_SCHEMA
  | CONSTRAINT_NAME
  | CATALOG_NAME
  | SCHEMA_NAME
  | TABLE_NAME
  | COLUMN_NAME
  | CURSOR_NAME
}

condition_name, simple_value_specification:
    (see following discussion)

RESIGNAL passes on the error condition information that is available
during execution of a condition handler within a compound statement
inside a stored procedure or function, trigger, or event. RESIGNAL may
change some or all information before passing it on. RESIGNAL is
related to SIGNAL, but instead of originating a condition as SIGNAL
does, RESIGNAL relays existing condition information, possibly after
modifying it.

RESIGNAL makes it possible to both handle an error and return the error
information. Otherwise, by executing an SQL statement within the
handler, information that caused the handler's activation is destroyed.
RESIGNAL also can make some procedures shorter if a given handler can
handle part of a situation, then pass the condition &quot;up the line&quot; to
another handler.

No privileges are required to execute the RESIGNAL statement.

All forms of RESIGNAL require that the current context be a condition
handler. Otherwise, RESIGNAL is illegal and a RESIGNAL when handler not
active error occurs.

To retrieve information from the diagnostics area, use the GET
DIAGNOSTICS statement (see [HELP GET DIAGNOSTICS]). For information
about the diagnostics area, see
https://dev.mysql.com/doc/refman/8.0/en/diagnostics-area.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/resignal.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/resignal.html</field>
	</row>
	<row>
		<field name="help_topic_id">609</field>
		<field name="name">SIGNAL</field>
		<field name="help_category_id">45</field>
		<field name="description">Syntax:
SIGNAL condition_value
    [SET signal_information_item
    [, signal_information_item] ...]

condition_value: {
    SQLSTATE [VALUE] sqlstate_value
  | condition_name
}

signal_information_item:
    condition_information_item_name = simple_value_specification

condition_information_item_name: {
    CLASS_ORIGIN
  | SUBCLASS_ORIGIN
  | MESSAGE_TEXT
  | MYSQL_ERRNO
  | CONSTRAINT_CATALOG
  | CONSTRAINT_SCHEMA
  | CONSTRAINT_NAME
  | CATALOG_NAME
  | SCHEMA_NAME
  | TABLE_NAME
  | COLUMN_NAME
  | CURSOR_NAME
}

condition_name, simple_value_specification:
    (see following discussion)

SIGNAL is the way to &quot;return&quot; an error. SIGNAL provides error
information to a handler, to an outer portion of the application, or to
the client. Also, it provides control over the error's characteristics
(error number, SQLSTATE value, message). Without SIGNAL, it is
necessary to resort to workarounds such as deliberately referring to a
nonexistent table to cause a routine to return an error.

No privileges are required to execute the SIGNAL statement.

To retrieve information from the diagnostics area, use the GET
DIAGNOSTICS statement (see [HELP GET DIAGNOSTICS]). For information
about the diagnostics area, see
https://dev.mysql.com/doc/refman/8.0/en/diagnostics-area.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/signal.html

</field>
		<field name="example">CREATE PROCEDURE p (pval INT)
BEGIN
  DECLARE specialty CONDITION FOR SQLSTATE '45000';
  IF pval = 0 THEN
    SIGNAL SQLSTATE '01000';
  ELSEIF pval = 1 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'An error occurred';
  ELSEIF pval = 2 THEN
    SIGNAL specialty
      SET MESSAGE_TEXT = 'An error occurred';
  ELSE
    SIGNAL SQLSTATE '01000'
      SET MESSAGE_TEXT = 'A warning occurred', MYSQL_ERRNO = 1000;
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'An error occurred', MYSQL_ERRNO = 1001;
  END IF;
END;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/signal.html</field>
	</row>
	<row>
		<field name="help_topic_id">610</field>
		<field name="name">ALTER USER</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
ALTER USER [IF EXISTS]
    user [auth_option] [, user [auth_option]] ...
    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]
    [WITH resource_option [resource_option] ...]
    [password_option | lock_option] ...
    [COMMENT 'comment_string' | ATTRIBUTE 'json_object']

ALTER USER [IF EXISTS]
    USER() user_func_auth_option

ALTER USER [IF EXISTS]
    user [registration_option]

ALTER USER [IF EXISTS]
    USER() [registration_option]

ALTER USER [IF EXISTS]
    user DEFAULT ROLE
    {NONE | ALL | role [, role ] ...}

user:
    (see )

auth_option: {
    IDENTIFIED BY 'auth_string'
        [REPLACE 'current_auth_string']
        [RETAIN CURRENT PASSWORD]
  | IDENTIFIED BY RANDOM PASSWORD
        [REPLACE 'current_auth_string']
        [RETAIN CURRENT PASSWORD]
  | IDENTIFIED WITH auth_plugin
  | IDENTIFIED WITH auth_plugin BY 'auth_string'
        [REPLACE 'current_auth_string']
        [RETAIN CURRENT PASSWORD]
  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD
        [REPLACE 'current_auth_string']
        [RETAIN CURRENT PASSWORD]
  | IDENTIFIED WITH auth_plugin AS 'auth_string'
  | DISCARD OLD PASSWORD
  | ADD factor factor_auth_option [ADD factor factor_auth_option]
  | MODIFY factor factor_auth_option [MODIFY factor factor_auth_option]
  | DROP factor [DROP factor]
}

user_func_auth_option: {
    IDENTIFIED BY 'auth_string'
        [REPLACE 'current_auth_string']
        [RETAIN CURRENT PASSWORD]
  | DISCARD OLD PASSWORD
}

factor_auth_option: {
    IDENTIFIED BY 'auth_string'
  | IDENTIFIED BY RANDOM PASSWORD
  | IDENTIFIED WITH auth_plugin BY 'auth_string'
  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD
  | IDENTIFIED WITH auth_plugin AS 'auth_string'
}

registration_option: {
    factor INITIATE REGISTRATION
  | factor FINISH REGISTRATION SET CHALLENGE_RESPONSE AS 'auth_string'
  | factor UNREGISTER
}

factor: {2 | 3} FACTOR

tls_option: {
   SSL
 | X509
 | CIPHER 'cipher'
 | ISSUER 'issuer'
 | SUBJECT 'subject'
}

resource_option: {
    MAX_QUERIES_PER_HOUR count
  | MAX_UPDATES_PER_HOUR count
  | MAX_CONNECTIONS_PER_HOUR count
  | MAX_USER_CONNECTIONS count
}

password_option: {
    PASSWORD EXPIRE [DEFAULT | NEVER | INTERVAL N DAY]
  | PASSWORD HISTORY {DEFAULT | N}
  | PASSWORD REUSE INTERVAL {DEFAULT | N DAY}
  | PASSWORD REQUIRE CURRENT [DEFAULT | OPTIONAL]
  | FAILED_LOGIN_ATTEMPTS N
  | PASSWORD_LOCK_TIME {N | UNBOUNDED}
}

lock_option: {
    ACCOUNT LOCK
  | ACCOUNT UNLOCK
}

The ALTER USER statement modifies MySQL accounts. It enables
authentication, role, SSL/TLS, resource-limit, password-management,
comment, and attribute properties to be modified for existing accounts.
It can also be used to lock and unlock accounts.

In most cases, ALTER USER requires the global CREATE USER privilege, or
the UPDATE privilege for the mysql system schema. The exceptions are:

o Any client who connects to the server using a nonanonymous account
  can change the password for that account. (In particular, you can
  change your own password.) To see which account the server
  authenticated you as, invoke the CURRENT_USER() function:

SELECT CURRENT_USER();

o For DEFAULT ROLE syntax, ALTER USER requires these privileges:

  o Setting the default roles for another user requires the global
    CREATE USER privilege, or the UPDATE privilege for the
    mysql.default_roles system table.

  o Setting the default roles for yourself requires no special
    privileges, as long as the roles you want as the default have been
    granted to you.

o Statements that modify secondary passwords require these privileges:

  o The APPLICATION_PASSWORD_ADMIN privilege is required to use the
    RETAIN CURRENT PASSWORD or DISCARD OLD PASSWORD clause for ALTER
    USER statements that apply to your own account. The privilege is
    required to manipulate your own secondary password because most
    users require only one password.

  o If an account is to be permitted to manipulate secondary passwords
    for all accounts, it requires the CREATE USER privilege rather than
    APPLICATION_PASSWORD_ADMIN.

When the read_only system variable is enabled, ALTER USER additionally
requires the CONNECTION_ADMIN privilege (or the deprecated SUPER
privilege).

As of MySQL 8.0.27, these additional privilege considerations apply:

o The authentication_policy system variable places certain constraints
  on how the authentication-related clauses of ALTER USER statements
  may be used; for details, see the description of that variable. These
  constraints do not apply if you have the AUTHENTICATION_POLICY_ADMIN
  privilege.

o To modify an account that uses passwordless authentication, you must
  have the PASSWORDLESS_USER_ADMIN privilege.

By default, an error occurs if you try to modify a user that does not
exist. If the IF EXISTS clause is given, the statement produces a
warning for each named user that does not exist, rather than an error.

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-user.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-user.html</field>
	</row>
	<row>
		<field name="help_topic_id">611</field>
		<field name="name">CREATE ROLE</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
CREATE ROLE [IF NOT EXISTS] role [, role ] ...

CREATE ROLE creates one or more roles, which are named collections of
privileges. To use this statement, you must have the global CREATE ROLE
or CREATE USER privilege. When the read_only system variable is
enabled, CREATE ROLE additionally requires the CONNECTION_ADMIN
privilege (or the deprecated SUPER privilege).

A role when created is locked, has no password, and is assigned the
default authentication plugin. (These role attributes can be changed
later with the ALTER USER statement, by users who have the global
CREATE USER privilege.)

CREATE ROLE either succeeds for all named roles or rolls back and has
no effect if any error occurs. By default, an error occurs if you try
to create a role that already exists. If the IF NOT EXISTS clause is
given, the statement produces a warning for each named role that
already exists, rather than an error.

The statement is written to the binary log if it succeeds, but not if
it fails; in that case, rollback occurs and no changes are made. A
statement written to the binary log includes all named roles. If the IF
NOT EXISTS clause is given, this includes even roles that already exist
and were not created.

Each role name uses the format described in
https://dev.mysql.com/doc/refman/8.0/en/role-names.html. For example:

CREATE ROLE 'admin', 'developer';
CREATE ROLE 'webapp'@'localhost';

The host name part of the role name, if omitted, defaults to '%'.

For role usage examples, see
https://dev.mysql.com/doc/refman/8.0/en/roles.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-role.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-role.html</field>
	</row>
	<row>
		<field name="help_topic_id">612</field>
		<field name="name">CREATE USER</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
CREATE USER [IF NOT EXISTS]
    user [auth_option] [, user [auth_option]] ...
    DEFAULT ROLE role [, role ] ...
    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]
    [WITH resource_option [resource_option] ...]
    [password_option | lock_option] ...
    [COMMENT 'comment_string' | ATTRIBUTE 'json_object']

user:
    (see )

auth_option: {
    IDENTIFIED BY 'auth_string' [AND 2fa_auth_option]
  | IDENTIFIED BY RANDOM PASSWORD [AND 2fa_auth_option]
  | IDENTIFIED WITH auth_plugin [AND 2fa_auth_option]
  | IDENTIFIED WITH auth_plugin BY 'auth_string' [AND 2fa_auth_option]
  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD [AND 2fa_auth_option]
  | IDENTIFIED WITH auth_plugin AS 'auth_string' [AND 2fa_auth_option]
  | IDENTIFIED WITH auth_plugin [initial_auth_option]
}

2fa_auth_option: {
    IDENTIFIED BY 'auth_string' [AND 3fa_auth_option]
  | IDENTIFIED BY RANDOM PASSWORD [AND 3fa_auth_option]
  | IDENTIFIED WITH auth_plugin [AND 3fa_auth_option]
  | IDENTIFIED WITH auth_plugin BY 'auth_string' [AND 3fa_auth_option]
  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD [AND 3fa_auth_option]
  | IDENTIFIED WITH auth_plugin AS 'auth_string' [AND 3fa_auth_option]
}

3fa_auth_option: {
    IDENTIFIED BY 'auth_string'
  | IDENTIFIED BY RANDOM PASSWORD
  | IDENTIFIED WITH auth_plugin
  | IDENTIFIED WITH auth_plugin BY 'auth_string'
  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD
  | IDENTIFIED WITH auth_plugin AS 'auth_string'
}

initial_auth_option: {
    INITIAL AUTHENTICATION IDENTIFIED BY {RANDOM PASSWORD | 'auth_string'}
  | INITIAL AUTHENTICATION IDENTIFIED WITH auth_plugin AS 'auth_string'
}

tls_option: {
   SSL
 | X509
 | CIPHER 'cipher'
 | ISSUER 'issuer'
 | SUBJECT 'subject'
}

resource_option: {
    MAX_QUERIES_PER_HOUR count
  | MAX_UPDATES_PER_HOUR count
  | MAX_CONNECTIONS_PER_HOUR count
  | MAX_USER_CONNECTIONS count
}

password_option: {
    PASSWORD EXPIRE [DEFAULT | NEVER | INTERVAL N DAY]
  | PASSWORD HISTORY {DEFAULT | N}
  | PASSWORD REUSE INTERVAL {DEFAULT | N DAY}
  | PASSWORD REQUIRE CURRENT [DEFAULT | OPTIONAL]
  | FAILED_LOGIN_ATTEMPTS N
  | PASSWORD_LOCK_TIME {N | UNBOUNDED}
}

lock_option: {
    ACCOUNT LOCK
  | ACCOUNT UNLOCK
}

The CREATE USER statement creates new MySQL accounts. It enables
authentication, role, SSL/TLS, resource-limit, password-management,
comment, and attribute properties to be established for new accounts.
It also controls whether accounts are initially locked or unlocked.

To use CREATE USER, you must have the global CREATE USER privilege, or
the INSERT privilege for the mysql system schema. When the read_only
system variable is enabled, CREATE USER additionally requires the
CONNECTION_ADMIN privilege (or the deprecated SUPER privilege).

As of MySQL 8.0.27, these additional privilege considerations apply:

o The authentication_policy system variable places certain constraints
  on how the authentication-related clauses of CREATE USER statements
  may be used; for details, see the description of that variable. These
  constraints do not apply if you have the AUTHENTICATION_POLICY_ADMIN
  privilege.

o To create an account that uses passwordless authentication, you must
  have the PASSWORDLESS_USER_ADMIN privilege.

As of MySQL 8.0.22, CREATE USER fails with an error if any account to
be created is named as the DEFINER attribute for any stored object.
(That is, the statement fails if creating an account would cause the
account to adopt a currently orphaned stored object.) To perform the
operation anyway, you must have the SET_USER_ID privilege; in this
case, the statement succeeds with a warning rather than failing with an
error. Without SET_USER_ID, to perform the user-creation operation,
drop the orphan objects, create the account and grant its privileges,
and then re-create the dropped objects. For additional information,
including how to identify which objects name a given account as the
DEFINER attribute, see
https://dev.mysql.com/doc/refman/8.0/en/stored-objects-security.html#st
ored-objects-security-orphan-objects.

CREATE USER either succeeds for all named users or rolls back and has
no effect if any error occurs. By default, an error occurs if you try
to create a user that already exists. If the IF NOT EXISTS clause is
given, the statement produces a warning for each named user that
already exists, rather than an error.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-user.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-user.html</field>
	</row>
	<row>
		<field name="help_topic_id">613</field>
		<field name="name">DROP ROLE</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
DROP ROLE [IF EXISTS] role [, role ] ...

DROP ROLE removes one or more roles (named collections of privileges).
To use this statement, you must have the global DROP ROLE or CREATE
USER privilege. When the read_only system variable is enabled, DROP
ROLE additionally requires the CONNECTION_ADMIN privilege (or the
deprecated SUPER privilege).

As of MySQL 8.0.16, users who have the CREATE USER privilege can use
this statement to drop accounts that are locked or unlocked. Users who
have the DROP ROLE privilege can use this statement only to drop
accounts that are locked (unlocked accounts are presumably user
accounts used to log in to the server and not just as roles).

Roles named in the mandatory_roles system variable value cannot be
dropped.

DROP ROLE either succeeds for all named roles or rolls back and has no
effect if any error occurs. By default, an error occurs if you try to
drop a role that does not exist. If the IF EXISTS clause is given, the
statement produces a warning for each named role that does not exist,
rather than an error.

The statement is written to the binary log if it succeeds, but not if
it fails; in that case, rollback occurs and no changes are made. A
statement written to the binary log includes all named roles. If the IF
EXISTS clause is given, this includes even roles that do not exist and
were not dropped.

Each role name uses the format described in
https://dev.mysql.com/doc/refman/8.0/en/role-names.html. For example:

DROP ROLE 'admin', 'developer';
DROP ROLE 'webapp'@'localhost';

The host name part of the role name, if omitted, defaults to '%'.

A dropped role is automatically revoked from any user account (or role)
to which the role was granted. Within any current session for such an
account, its adjusted privileges apply beginning with the next
statement executed.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-role.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-role.html</field>
	</row>
	<row>
		<field name="help_topic_id">614</field>
		<field name="name">DROP USER</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
DROP USER [IF EXISTS] user [, user] ...

The DROP USER statement removes one or more MySQL accounts and their
privileges. It removes privilege rows for the account from all grant
tables.

Roles named in the mandatory_roles system variable value cannot be
dropped.

To use DROP USER, you must have the global CREATE USER privilege, or
the DELETE privilege for the mysql system schema. When the read_only
system variable is enabled, DROP USER additionally requires the
CONNECTION_ADMIN privilege (or the deprecated SUPER privilege).

As of MySQL 8.0.22, DROP USER fails with an error if any account to be
dropped is named as the DEFINER attribute for any stored object. (That
is, the statement fails if dropping an account would cause a stored
object to become orphaned.) To perform the operation anyway, you must
have the SET_USER_ID privilege; in this case, the statement succeeds
with a warning rather than failing with an error. For additional
information, including how to identify which objects name a given
account as the DEFINER attribute, see
https://dev.mysql.com/doc/refman/8.0/en/stored-objects-security.html#st
ored-objects-security-orphan-objects.

DROP USER either succeeds for all named users or rolls back and has no
effect if any error occurs. By default, an error occurs if you try to
drop a user that does not exist. If the IF EXISTS clause is given, the
statement produces a warning for each named user that does not exist,
rather than an error.

The statement is written to the binary log if it succeeds, but not if
it fails; in that case, rollback occurs and no changes are made. A
statement written to the binary log includes all named users. If the IF
EXISTS clause is given, this includes even users that do not exist and
were not dropped.

Each account name uses the format described in
https://dev.mysql.com/doc/refman/8.0/en/account-names.html. For
example:

DROP USER 'jeffrey'@'localhost';

The host name part of the account name, if omitted, defaults to '%'.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-user.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-user.html</field>
	</row>
	<row>
		<field name="help_topic_id">615</field>
		<field name="name">GRANT</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
GRANT
    priv_type [(column_list)]
      [, priv_type [(column_list)]] ...
    ON [object_type] priv_level
    TO user_or_role [, user_or_role] ...
    [WITH GRANT OPTION]
    [AS user
        [WITH ROLE
            DEFAULT
          | NONE
          | ALL
          | ALL EXCEPT role [, role ] ...
          | role [, role ] ...
        ]
    ]
}

GRANT PROXY ON user_or_role
    TO user_or_role [, user_or_role] ...
    [WITH GRANT OPTION]

GRANT role [, role] ...
    TO user_or_role [, user_or_role] ...
    [WITH ADMIN OPTION]

object_type: {
    TABLE
  | FUNCTION
  | PROCEDURE
}

priv_level: {
    *
  | *.*
  | db_name.*
  | db_name.tbl_name
  | tbl_name
  | db_name.routine_name
}

user_or_role: {
    user (see https://dev.mysql.com/doc/refman/8.0/en/account-names.html)
  | role (see https://dev.mysql.com/doc/refman/8.0/en/role-names.html)
}

The GRANT statement enables system administrators to grant privileges
and roles, which can be granted to user accounts and roles. These
syntax restrictions apply:

o GRANT cannot mix granting both privileges and roles in the same
  statement. A given GRANT statement must grant either privileges or
  roles.

o The ON clause distinguishes whether the statement grants privileges
  or roles:

  o With ON, the statement grants privileges.

  o Without ON, the statement grants roles.

  o It is permitted to assign both privileges and roles to an account,
    but you must use separate GRANT statements, each with syntax
    appropriate to what is to be granted.

For more information about roles, see
https://dev.mysql.com/doc/refman/8.0/en/roles.html.

To grant a privilege with GRANT, you must have the GRANT OPTION
privilege, and you must have the privileges that you are granting.
(Alternatively, if you have the UPDATE privilege for the grant tables
in the mysql system schema, you can grant any account any privilege.)
When the read_only system variable is enabled, GRANT additionally
requires the CONNECTION_ADMIN privilege (or the deprecated SUPER
privilege).

GRANT either succeeds for all named users and roles or rolls back and
has no effect if any error occurs. The statement is written to the
binary log only if it succeeds for all named users and roles.

The REVOKE statement is related to GRANT and enables administrators to
remove account privileges. See [HELP REVOKE].

Each account name uses the format described in
https://dev.mysql.com/doc/refman/8.0/en/account-names.html. Each role
name uses the format described in
https://dev.mysql.com/doc/refman/8.0/en/role-names.html. For example:

GRANT ALL ON db1.* TO 'jeffrey'@'localhost';
GRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';
GRANT SELECT ON world.* TO 'role3';

The host name part of the account or role name, if omitted, defaults to
'%'.

Normally, a database administrator first uses CREATE USER to create an
account and define its nonprivilege characteristics such as its
password, whether it uses secure connections, and limits on access to
server resources, then uses GRANT to define its privileges. ALTER USER
may be used to change the nonprivilege characteristics of existing
accounts. For example:

CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';
GRANT ALL ON db1.* TO 'jeffrey'@'localhost';
GRANT SELECT ON db2.invoice TO 'jeffrey'@'localhost';
ALTER USER 'jeffrey'@'localhost' WITH MAX_QUERIES_PER_HOUR 90;

From the mysql program, GRANT responds with Query OK, 0 rows affected
when executed successfully. To determine what privileges result from
the operation, use SHOW GRANTS. See [HELP SHOW GRANTS].

URL: https://dev.mysql.com/doc/refman/8.0/en/grant.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/grant.html</field>
	</row>
	<row>
		<field name="help_topic_id">616</field>
		<field name="name">RENAME USER</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
RENAME USER old_user TO new_user
    [, old_user TO new_user] ...

The RENAME USER statement renames existing MySQL accounts. An error
occurs for old accounts that do not exist or new accounts that already
exist.

To use RENAME USER, you must have the global CREATE USER privilege, or
the UPDATE privilege for the mysql system schema. When the read_only
system variable is enabled, RENAME USER additionally requires the
CONNECTION_ADMIN privilege (or the deprecated SUPER privilege).

As of MySQL 8.0.22, RENAME USER fails with an error if any account to
be renamed is named as the DEFINER attribute for any stored object.
(That is, the statement fails if renaming an account would cause a
stored object to become orphaned.) To perform the operation anyway, you
must have the SET_USER_ID privilege; in this case, the statement
succeeds with a warning rather than failing with an error. For
additional information, including how to identify which objects name a
given account as the DEFINER attribute, see
https://dev.mysql.com/doc/refman/8.0/en/stored-objects-security.html#st
ored-objects-security-orphan-objects.

Each account name uses the format described in
https://dev.mysql.com/doc/refman/8.0/en/account-names.html. For
example:

RENAME USER 'jeffrey'@'localhost' TO 'jeff'@'127.0.0.1';

The host name part of the account name, if omitted, defaults to '%'.

RENAME USER causes the privileges held by the old user to be those held
by the new user. However, RENAME USER does not automatically drop or
invalidate databases or objects within them that the old user created.
This includes stored programs or views for which the DEFINER attribute
names the old user. Attempts to access such objects may produce an
error if they execute in definer security context. (For information
about security context, see
https://dev.mysql.com/doc/refman/8.0/en/stored-objects-security.html.)

The privilege changes take effect as indicated in
https://dev.mysql.com/doc/refman/8.0/en/privilege-changes.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/rename-user.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/rename-user.html</field>
	</row>
	<row>
		<field name="help_topic_id">617</field>
		<field name="name">REVOKE</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
REVOKE [IF EXISTS]
    priv_type [(column_list)]
      [, priv_type [(column_list)]] ...
    ON [object_type] priv_level
    FROM user_or_role [, user_or_role] ...
    [IGNORE UNKNOWN USER]

REVOKE [IF EXISTS] ALL [PRIVILEGES], GRANT OPTION
    FROM user_or_role [, user_or_role] ...
    [IGNORE UNKNOWN USER]

REVOKE [IF EXISTS] PROXY ON user_or_role
    FROM user_or_role [, user_or_role] ...
    [IGNORE UNKNOWN USER]

REVOKE [IF EXISTS] role [, role ] ...
    FROM user_or_role [, user_or_role ] ...
    [IGNORE UNKNOWN USER]

user_or_role: {
    user (see https://dev.mysql.com/doc/refman/8.0/en/account-names.html)
  | role (see https://dev.mysql.com/doc/refman/8.0/en/role-names.html
}

The REVOKE statement enables system administrators to revoke privileges
and roles, which can be revoked from user accounts and roles.

For details on the levels at which privileges exist, the permissible
priv_type, priv_level, and object_type values, and the syntax for
specifying users and passwords, see [HELP GRANT].

For information about roles, see
https://dev.mysql.com/doc/refman/8.0/en/roles.html.

When the read_only system variable is enabled, REVOKE requires the
CONNECTION_ADMIN or privilege (or the deprecated SUPER privilege), in
addition to any other required privileges described in the following
discussion.

Beginning with MySQL 8.0.30, all the forms shown for REVOKE support an
IF EXISTS option as well as an IGNORE UNKNOWN USER option. With neither
of these modifications, REVOKE either succeeds for all named users and
roles, or rolls back and has no effect if any error occurs; the
statement is written to the binary log only if it succeeds for all
named users and roles. The precise effects of IF EXISTS and IGNORE
UNKNOWN USER are discussed later in this section.

Each account name uses the format described in
https://dev.mysql.com/doc/refman/8.0/en/account-names.html. Each role
name uses the format described in
https://dev.mysql.com/doc/refman/8.0/en/role-names.html. For example:

REVOKE INSERT ON *.* FROM 'jeffrey'@'localhost';
REVOKE 'role1', 'role2' FROM 'user1'@'localhost', 'user2'@'localhost';
REVOKE SELECT ON world.* FROM 'role3';

The host name part of the account or role name, if omitted, defaults to
'%'.

To use the first REVOKE syntax, you must have the GRANT OPTION
privilege, and you must have the privileges that you are revoking.

To revoke all privileges, use the second syntax, which drops all
global, database, table, column, and routine privileges for the named
users or roles:

REVOKE ALL PRIVILEGES, GRANT OPTION
  FROM user_or_role [, user_or_role] ...

REVOKE ALL PRIVILEGES, GRANT OPTION does not revoke any roles.

To use this REVOKE syntax, you must have the global CREATE USER
privilege, or the UPDATE privilege for the mysql system schema.

The syntax for which the REVOKE keyword is followed by one or more role
names takes a FROM clause indicating one or more users or roles from
which to revoke the roles.

The IF EXISTS and IGNORE UNKNOWN USER options (MySQL 8.0.30 and later)
have the effects listed here:

o IF EXISTS means that, if the target user or role exists but no such
  privilege or role is found assigned to the target for any reason, a
  warning is raised, instead of an error; if no privilege or role named
  by the statement is assigned to the target, the statement has no
  (other) effect. Otherwise, REVOKE executes normally; if the user does
  not exist, the statement raises an error.

  Example: Given table t1 in database test, we execute the following
  statements, with the results shown.

mysql&gt; CREATE USER jerry@localhost;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; REVOKE SELECT ON test.t1 FROM jerry@localhost;
ERROR 1147 (42000): There is no such grant defined for user 'jerry' on host
'localhost' on table 't1' 
mysql&gt; REVOKE IF EXISTS SELECT ON test.t1 FROM jerry@localhost;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Warning
   Code: 1147
Message: There is no such grant defined for user 'jerry' on host 'localhost' on
table 't1' 
1 row in set (0.00 sec)

  IF EXISTS causes an error to be demoted to a warning even if the
  privilege or role named does not exist, or the statement attempts to
  assign it at the wrong level.

o If the REVOKE statement includes IGNORE UNKNOWN USER, the statement
  raises a warning for any target user or role named in the statement
  but not found; if no target named by the statement exists, REVOKE
  succeeds but has no actual effect. Otherwise, the statement executes
  as usual, and attempting to revoke a privilege not assigned to the
  target for whatever reason raises an error, as expected.

  Example (continuing from the previous example):

mysql&gt; DROP USER IF EXISTS jerry@localhost;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; REVOKE SELECT ON test.t1 FROM jerry@localhost;
ERROR 1147 (42000): There is no such grant defined for user 'jerry' on host
'localhost' on table 't1' 
mysql&gt; REVOKE SELECT ON test.t1 FROM jerry@localhost IGNORE UNKNOWN USER;
Query OK, 0 rows affected, 1 warning (0.01 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Warning
   Code: 3162
Message: Authorization ID jerry does not exist.
1 row in set (0.00 sec)

o The combination of IF EXISTS and IGNORE UNKNOWN USER means that
  REVOKE never raises an error for an unknown target user or role or
  for an unassigned or unavailable privilege, and the statement as
  whole in such cases succeeds; roles or privileges are removed from
  existing target users or roles whenever possible, and any revocation
  which is not possible raises a warning and executes as a NOOP.

  Example (again continuing from example in the previous item):

# No such user, no such role
mysql&gt; DROP ROLE IF EXISTS Bogus;
Query OK, 0 rows affected, 1 warning (0.02 sec)

mysql&gt; SHOW WARNINGS;
+-------+------+----------------------------------------------+
| Level | Code | Message                                      |
+-------+------+----------------------------------------------+
| Note  | 3162 | Authorization ID 'Bogus'@'%' does not exist. |
+-------+------+----------------------------------------------+
1 row in set (0.00 sec)

# This statement attempts to revoke a nonexistent role from a nonexistent user
mysql&gt; REVOKE Bogus ON test FROM jerry@localhost;
ERROR 3619 (HY000): Illegal privilege level specified for test

# The same, with IF EXISTS
mysql&gt; REVOKE IF EXISTS Bogus ON test FROM jerry@localhost;
ERROR 1147 (42000): There is no such grant defined for user 'jerry' on host
'localhost' on table 'test' 

# The same, with IGNORE UNKNOWN USER
mysql&gt; REVOKE Bogus ON test FROM jerry@localhost IGNORE UNKNOWN USER;
ERROR 3619 (HY000): Illegal privilege level specified for test

# The same, with both options
mysql&gt; REVOKE IF EXISTS Bogus ON test FROM jerry@localhost IGNORE UNKNOWN USER;
Query OK, 0 rows affected, 2 warnings (0.01 sec)

mysql&gt; SHOW WARNINGS;
+---------+------+--------------------------------------------+
| Level   | Code | Message                                    |
+---------+------+--------------------------------------------+
| Warning | 3619 | Illegal privilege level specified for test |
| Warning | 3162 | Authorization ID jerry does not exist.     |
+---------+------+--------------------------------------------+
2 rows in set (0.00 sec)

Roles named in the mandatory_roles system variable value cannot be
revoked. When IF EXISTS and IGNORE UNKNOWN USER are used together in a
statement that tries to remove a mandatory privilege, the error
normally raised by attempting to do this is demoted to a warning; the
statement executes successfully, but does not make any changes.

A revoked role immediately affects any user account from which it was
revoked, such that within any current session for the account, its
privileges are adjusted for the next statement executed.

Revoking a role revokes the role itself, not the privileges that it
represents. Suppose that an account is granted a role that includes a
given privilege, and is also granted the privilege explicitly or
another role that includes the privilege. In this case, the account
still possesses that privilege if the first role is revoked. For
example, if an account is granted two roles that each include SELECT,
the account still can select after either role is revoked.

REVOKE ALL ON *.* (at the global level) revokes all granted static
global privileges and all granted dynamic privileges.

A revoked privilege that is granted but not known to the server is
revoked with a warning. This situation can occur for dynamic
privileges. For example, a dynamic privilege can be granted while the
component that registers it is installed, but if that component is
subsequently uninstalled, the privilege becomes unregistered, although
accounts that possess the privilege still possess it and it can be
revoked from them.

URL: https://dev.mysql.com/doc/refman/8.0/en/revoke.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/revoke.html</field>
	</row>
	<row>
		<field name="help_topic_id">618</field>
		<field name="name">SET DEFAULT ROLE</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
SET DEFAULT ROLE
    {NONE | ALL | role [, role ] ...}
    TO user [, user ] ...

For each user named immediately after the TO keyword, this statement
defines which roles become active when the user connects to the server
and authenticates, or when the user executes the SET ROLE DEFAULT
statement during a session.

SET DEFAULT ROLE is alternative syntax for ALTER USER ... DEFAULT ROLE
(see [HELP ALTER USER]). However, ALTER USER can set the default for
only a single user, whereas SET DEFAULT ROLE can set the default for
multiple users. On the other hand, you can specify CURRENT_USER as the
user name for the ALTER USER statement, whereas you cannot for SET
DEFAULT ROLE.

SET DEFAULT ROLE requires these privileges:

o Setting the default roles for another user requires the global CREATE
  USER privilege, or the UPDATE privilege for the mysql.default_roles
  system table.

o Setting the default roles for yourself requires no special
  privileges, as long as the roles you want as the default have been
  granted to you.

Each role name uses the format described in
https://dev.mysql.com/doc/refman/8.0/en/role-names.html. For example:

SET DEFAULT ROLE 'admin', 'developer' TO 'joe'@'10.0.0.1';

The host name part of the role name, if omitted, defaults to '%'.

The clause following the DEFAULT ROLE keywords permits these values:

o NONE: Set the default to NONE (no roles).

o ALL: Set the default to all roles granted to the account.

o role [, role ] ...: Set the default to the named roles, which must
  exist and be granted to the account at the time SET DEFAULT ROLE is
  executed.

URL: https://dev.mysql.com/doc/refman/8.0/en/set-default-role.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/set-default-role.html</field>
	</row>
	<row>
		<field name="help_topic_id">619</field>
		<field name="name">SET PASSWORD</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
SET PASSWORD [FOR user] auth_option
    [REPLACE 'current_auth_string']
    [RETAIN CURRENT PASSWORD]

auth_option: {
    = 'auth_string'
  | TO RANDOM
}

The SET PASSWORD statement assigns a password to a MySQL user account.
The password may be either explicitly specified in the statement or
randomly generated by MySQL. The statement may also include a
password-verification clause that specifies the account current
password to be replaced, and a clause that manages whether an account
has a secondary password. 'auth_string' and 'current_auth_string' each
represent a cleartext (unencrypted) password.

*Note*:

Rather than using SET PASSWORD to assign passwords, ALTER USER is the
preferred statement for account alterations, including assigning
passwords. For example:

ALTER USER user IDENTIFIED BY 'auth_string';

*Note*:

Clauses for random password generation, password verification, and
secondary passwords apply only to accounts that use an authentication
plugin that stores credentials internally to MySQL. For accounts that
use a plugin that performs authentication against a credentials system
that is external to MySQL, password management must be handled
externally against that system as well. For more information about
internal credentials storage, see
https://dev.mysql.com/doc/refman/8.0/en/password-management.html.

The REPLACE 'current_auth_string' clause performs password verification
and is available as of MySQL 8.0.13. If given:

o REPLACE specifies the account current password to be replaced, as a
  cleartext (unencrypted) string.

o The clause must be given if password changes for the account are
  required to specify the current password, as verification that the
  user attempting to make the change actually knows the current
  password.

o The clause is optional if password changes for the account may but
  need not specify the current password.

o The statement fails if the clause is given but does not match the
  current password, even if the clause is optional.

o REPLACE can be specified only when changing the account password for
  the current user.

For more information about password verification by specifying the
current password, see
https://dev.mysql.com/doc/refman/8.0/en/password-management.html.

The RETAIN CURRENT PASSWORD clause implements dual-password capability
and is available as of MySQL 8.0.14. If given:

o RETAIN CURRENT PASSWORD retains an account current password as its
  secondary password, replacing any existing secondary password. The
  new password becomes the primary password, but clients can use the
  account to connect to the server using either the primary or
  secondary password. (Exception: If the new password specified by the
  SET PASSWORD statement is empty, the secondary password becomes empty
  as well, even if RETAIN CURRENT PASSWORD is given.)

o If you specify RETAIN CURRENT PASSWORD for an account that has an
  empty primary password, the statement fails.

o If an account has a secondary password and you change its primary
  password without specifying RETAIN CURRENT PASSWORD, the secondary
  password remains unchanged.

For more information about use of dual passwords, see
https://dev.mysql.com/doc/refman/8.0/en/password-management.html.

SET PASSWORD permits these auth_option syntaxes:

o = 'auth_string'

  Assigns the account the given literal password.

o TO RANDOM

  Assigns the account a password randomly generated by MySQL. The
  statement also returns the cleartext password in a result set to make
  it available to the user or application executing the statement.

  For details about the result set and characteristics of randomly
  generated passwords, see
  https://dev.mysql.com/doc/refman/8.0/en/password-management.html#rand
  om-password-generation.

  Random password generation is available as of MySQL 8.0.18.

*Important*:

Under some circumstances, SET PASSWORD may be recorded in server logs
or on the client side in a history file such as ~/.mysql_history, which
means that cleartext passwords may be read by anyone having read access
to that information. For information about the conditions under which
this occurs for the server logs and how to control it, see
https://dev.mysql.com/doc/refman/8.0/en/password-logging.html. For
similar information about client-side logging, see
https://dev.mysql.com/doc/refman/8.0/en/mysql-logging.html.

SET PASSWORD can be used with or without a FOR clause that explicitly
names a user account:

o With a FOR user clause, the statement sets the password for the named
  account, which must exist:

SET PASSWORD FOR 'jeffrey'@'localhost' = 'auth_string';

o With no FOR user clause, the statement sets the password for the
  current user:

SET PASSWORD = 'auth_string';

  Any client who connects to the server using a nonanonymous account
  can change the password for that account. (In particular, you can
  change your own password.) To see which account the server
  authenticated you as, invoke the CURRENT_USER() function:

SELECT CURRENT_USER();

If a FOR user clause is given, the account name uses the format
described in
https://dev.mysql.com/doc/refman/8.0/en/account-names.html. For
example:

SET PASSWORD FOR 'bob'@'%.example.org' = 'auth_string';

The host name part of the account name, if omitted, defaults to '%'.

SET PASSWORD interprets the string as a cleartext string, passes it to
the authentication plugin associated with the account, and stores the
result returned by the plugin in the account row in the mysql.user
system table. (The plugin is given the opportunity to hash the value
into the encryption format it expects. The plugin may use the value as
specified, in which case no hashing occurs.)

Setting the password for a named account (with a FOR clause) requires
the UPDATE privilege for the mysql system schema. Setting the password
for yourself (for a nonanonymous account with no FOR clause) requires
no special privileges.

Statements that modify secondary passwords require these privileges:

o The APPLICATION_PASSWORD_ADMIN privilege is required to use the
  RETAIN CURRENT PASSWORD clause for SET PASSWORD statements that apply
  to your own account. The privilege is required to manipulate your own
  secondary password because most users require only one password.

o If an account is to be permitted to manipulate secondary passwords
  for all accounts, it should be granted the CREATE USER privilege
  rather than APPLICATION_PASSWORD_ADMIN.

When the read_only system variable is enabled, SET PASSWORD requires
the CONNECTION_ADMIN privilege (or the deprecated SUPER privilege), in
addition to any other required privileges.

URL: https://dev.mysql.com/doc/refman/8.0/en/set-password.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/set-password.html</field>
	</row>
	<row>
		<field name="help_topic_id">620</field>
		<field name="name">SET ROLE</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
SET ROLE {
    DEFAULT
  | NONE
  | ALL
  | ALL EXCEPT role [, role ] ...
  | role [, role ] ...
}

SET ROLE modifies the current user's effective privileges within the
current session by specifying which of its granted roles are active.
Granted roles include those granted explicitly to the user and those
named in the mandatory_roles system variable value.

Examples:

SET ROLE DEFAULT;
SET ROLE 'role1', 'role2';
SET ROLE ALL;
SET ROLE ALL EXCEPT 'role1', 'role2';

Each role name uses the format described in
https://dev.mysql.com/doc/refman/8.0/en/role-names.html. The host name
part of the role name, if omitted, defaults to '%'.

Privileges that the user has been granted directly (rather than through
roles) remain unaffected by changes to the active roles.

The statement permits these role specifiers:

o DEFAULT: Activate the account default roles. Default roles are those
  specified with SET DEFAULT ROLE.

  When a user connects to the server and authenticates successfully,
  the server determines which roles to activate as the default roles.
  If the activate_all_roles_on_login system variable is enabled, the
  server activates all granted roles. Otherwise, the server executes
  SET ROLE DEFAULT implicitly. The server activates only default roles
  that can be activated. The server writes warnings to its error log
  for default roles that cannot be activated, but the client receives
  no warnings.

  If a user executes SET ROLE DEFAULT during a session, an error occurs
  if any default role cannot be activated (for example, if it does not
  exist or is not granted to the user). In this case, the current
  active roles are not changed.

o NONE: Set the active roles to NONE (no active roles).

o ALL: Activate all roles granted to the account.

o ALL EXCEPT role [, role ] ...: Activate all roles granted to the
  account except those named. The named roles need not exist or be
  granted to the account.

o role [, role ] ...: Activate the named roles, which must be granted
  to the account.

URL: https://dev.mysql.com/doc/refman/8.0/en/set-role.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/set-role.html</field>
	</row>
	<row>
		<field name="help_topic_id">621</field>
		<field name="name">ALTER RESOURCE GROUP</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
ALTER RESOURCE GROUP group_name
    [VCPU [=] vcpu_spec [, vcpu_spec] ...]
    [THREAD_PRIORITY [=] N]
    [ENABLE|DISABLE [FORCE]]

vcpu_spec: {N | M - N}

ALTER RESOURCE GROUP is used for resource group management (see
https://dev.mysql.com/doc/refman/8.0/en/resource-groups.html). This
statement alters modifiable attributes of an existing resource group.
It requires the RESOURCE_GROUP_ADMIN privilege.

group_name identifies which resource group to alter. If the group does
not exist, an error occurs.

The attributes for CPU affinity, priority, and whether the group is
enabled can be modified with ALTER RESOURCE GROUP. These attributes are
specified the same way as described for CREATE RESOURCE GROUP (see
[HELP CREATE RESOURCE GROUP]). Only the attributes specified are
altered. Unspecified attributes retain their current values.

The FORCE modifier is used with DISABLE. It determines statement
behavior if the resource group has any threads assigned to it:

o If FORCE is not given, existing threads in the group continue to run
  until they terminate, but new threads cannot be assigned to the
  group.

o If FORCE is given, existing threads in the group are moved to their
  respective default group (system threads to SYS_default, user threads
  to USR_default).

The name and type attributes are set at group creation time and cannot
be modified thereafter with ALTER RESOURCE GROUP.

Examples:

o Alter a group CPU affinity:

ALTER RESOURCE GROUP rg1 VCPU = 0-63;

o Alter a group thread priority:

ALTER RESOURCE GROUP rg2 THREAD_PRIORITY = 5;

o Disable a group, moving any threads assigned to it to the default
  groups:

ALTER RESOURCE GROUP rg3 DISABLE FORCE;

Resource group management is local to the server on which it occurs.
ALTER RESOURCE GROUP statements are not written to the binary log and
are not replicated.

URL: https://dev.mysql.com/doc/refman/8.0/en/alter-resource-group.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/alter-resource-group.html</field>
	</row>
	<row>
		<field name="help_topic_id">622</field>
		<field name="name">CREATE RESOURCE GROUP</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
CREATE RESOURCE GROUP group_name
    TYPE = {SYSTEM|USER}
    [VCPU [=] vcpu_spec [, vcpu_spec] ...]
    [THREAD_PRIORITY [=] N]
    [ENABLE|DISABLE]

vcpu_spec: {N | M - N}

CREATE RESOURCE GROUP is used for resource group management (see
https://dev.mysql.com/doc/refman/8.0/en/resource-groups.html). This
statement creates a new resource group and assigns its initial
attribute values. It requires the RESOURCE_GROUP_ADMIN privilege.

group_name identifies which resource group to create. If the group
already exists, an error occurs.

The TYPE attribute is required. It should be SYSTEM for a system
resource group, USER for a user resource group. The group type affects
permitted THREAD_PRIORITY values, as described later.

The VCPU attribute indicates the CPU affinity; that is, the set of
virtual CPUs the group can use:

o If VCPU is not given, the resource group has no CPU affinity and can
  use all available CPUs.

o If VCPU is given, the attribute value is a list of comma-separated
  CPU numbers or ranges:

  o Each number must be an integer in the range from 0 to the number of
    CPUs − 1. For example, on a system with 64 CPUs, the number can
    range from 0 to 63.

  o A range is given in the form M − N, where M is less than or equal
    to N and both numbers are in the CPU range.

  o If a CPU number is an integer outside the permitted range or is not
    an integer, an error occurs.

Example VCPU specifiers (these are all equivalent):

VCPU = 0,1,2,3,9,10
VCPU = 0-3,9-10
VCPU = 9,10,0-3
VCPU = 0,10,1,9,3,2

The THREAD_PRIORITY attribute indicates the priority for threads
assigned to the group:

o If THREAD_PRIORITY is not given, the default priority is 0.

o If THREAD_PRIORITY is given, the attribute value must be in the range
  from -20 (highest priority) to 19 (lowest priority). The priority for
  system resource groups must be in the range from -20 to 0. The
  priority for user resource groups must be in the range from 0 to 19.
  Use of different ranges for system and user groups ensures that user
  threads never have a higher priority than system threads.

ENABLE and DISABLE specify that the resource group is initially enabled
or disabled. If neither is specified, the group is enabled by default.
A disabled group cannot have threads assigned to it.

Examples:

o Create an enabled user group that has a single CPU and the lowest
  priority:

CREATE RESOURCE GROUP rg1
  TYPE = USER
  VCPU = 0
  THREAD_PRIORITY = 19;

o Create a disabled system group that has no CPU affinity (can use all
  CPUs) and the highest priority:

CREATE RESOURCE GROUP rg2
  TYPE = SYSTEM
  THREAD_PRIORITY = -20
  DISABLE;

Resource group management is local to the server on which it occurs.
CREATE RESOURCE GROUP statements are not written to the binary log and
are not replicated.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-resource-group.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-resource-group.html</field>
	</row>
	<row>
		<field name="help_topic_id">623</field>
		<field name="name">DROP RESOURCE GROUP</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
DROP RESOURCE GROUP group_name [FORCE]

DROP RESOURCE GROUP is used for resource group management (see
https://dev.mysql.com/doc/refman/8.0/en/resource-groups.html). This
statement drops a resource group. It requires the RESOURCE_GROUP_ADMIN
privilege.

group_name identifies which resource group to drop. If the group does
not exist, an error occurs.

The FORCE modifier determines statement behavior if the resource group
has any threads assigned to it:

o If FORCE is not given and any threads are assigned to the group, an
  error occurs.

o If FORCE is given, existing threads in the group are moved to their
  respective default group (system threads to SYS_default, user threads
  to USR_default).

Examples:

o Drop a group, failing if the group contains any threads:

DROP RESOURCE GROUP rg1;

o Drop a group and move existing threads to the default groups:

DROP RESOURCE GROUP rg2 FORCE;

Resource group management is local to the server on which it occurs.
DROP RESOURCE GROUP statements are not written to the binary log and
are not replicated.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-resource-group.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-resource-group.html</field>
	</row>
	<row>
		<field name="help_topic_id">624</field>
		<field name="name">SET RESOURCE GROUP</field>
		<field name="help_category_id">46</field>
		<field name="description">Syntax:
SET RESOURCE GROUP group_name
    [FOR thread_id [, thread_id] ...]

SET RESOURCE GROUP is used for resource group management (see
https://dev.mysql.com/doc/refman/8.0/en/resource-groups.html). This
statement assigns threads to a resource group. It requires the
RESOURCE_GROUP_ADMIN or RESOURCE_GROUP_USER privilege.

group_name identifies which resource group to be assigned. Any
thread_id values indicate threads to assign to the group. Thread IDs
can be determined from the Performance Schema threads table. If the
resource group or any named thread ID does not exist, an error occurs.

With no FOR clause, the statement assigns the current thread for the
session to the resource group.

With a FOR clause that names thread IDs, the statement assigns those
threads to the resource group.

For attempts to assign a system thread to a user resource group or a
user thread to a system resource group, a warning occurs.

Examples:

o Assign the current session thread to a group:

SET RESOURCE GROUP rg1;

o Assign the named threads to a group:

SET RESOURCE GROUP rg2 FOR 14, 78, 4;

Resource group management is local to the server on which it occurs.
SET RESOURCE GROUP statements are not written to the binary log and are
not replicated.

An alternative to SET RESOURCE GROUP is the RESOURCE_GROUP optimizer
hint, which assigns individual statements to a resource group. See
https://dev.mysql.com/doc/refman/8.0/en/optimizer-hints.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/set-resource-group.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/set-resource-group.html</field>
	</row>
	<row>
		<field name="help_topic_id">625</field>
		<field name="name">ANALYZE TABLE</field>
		<field name="help_category_id">47</field>
		<field name="description">Syntax:
ANALYZE [NO_WRITE_TO_BINLOG | LOCAL]
    TABLE tbl_name [, tbl_name] ...

ANALYZE [NO_WRITE_TO_BINLOG | LOCAL]
    TABLE tbl_name
    UPDATE HISTOGRAM ON col_name [, col_name] ...
        [WITH N BUCKETS]

ANALYZE [NO_WRITE_TO_BINLOG | LOCAL] 
    TABLE tbl_name
    UPDATE HISTOGRAM ON col_name [USING DATA 'json_data']

ANALYZE [NO_WRITE_TO_BINLOG | LOCAL]
    TABLE tbl_name
    DROP HISTOGRAM ON col_name [, col_name] ...

ANALYZE TABLE generates table statistics:

o ANALYZE TABLE without either HISTOGRAM clause performs a key
  distribution analysis and stores the distribution for the named table
  or tables. For MyISAM tables, ANALYZE TABLE for key distribution
  analysis is equivalent to using myisamchk --analyze.

o ANALYZE TABLE with the UPDATE HISTOGRAM clause generates histogram
  statistics for the named table columns and stores them in the data
  dictionary. Only one table name is permitted for this syntax. MySQL
  8.0.31 and later also supports setting the histogram of a single
  column to a user-defined JSON value.

o ANALYZE TABLE with the DROP HISTOGRAM clause removes histogram
  statistics for the named table columns from the data dictionary. Only
  one table name is permitted for this syntax.

This statement requires SELECT and INSERT privileges for the table.

ANALYZE TABLE works with InnoDB, NDB, and MyISAM tables. It does not
work with views.

If the innodb_read_only system variable is enabled, ANALYZE TABLE may
fail because it cannot update statistics tables in the data dictionary,
which use InnoDB. For ANALYZE TABLE operations that update the key
distribution, failure may occur even if the operation updates the table
itself (for example, if it is a MyISAM table). To obtain the updated
distribution statistics, set information_schema_stats_expiry=0.

ANALYZE TABLE is supported for partitioned tables, and you can use
ALTER TABLE ... ANALYZE PARTITION to analyze one or more partitions;
for more information, see [HELP ALTER TABLE], and
https://dev.mysql.com/doc/refman/8.0/en/partitioning-maintenance.html.

During the analysis, the table is locked with a read lock for InnoDB
and MyISAM.

ANALYZE TABLE removes the table from the table definition cache, which
requires a flush lock. If there are long running statements or
transactions still using the table, subsequent statements and
transactions must wait for those operations to finish before the flush
lock is released. Because ANALYZE TABLE itself typically finishes
quickly, it may not be apparent that delayed transactions or statements
involving the same table are due to the remaining flush lock.

By default, the server writes ANALYZE TABLE statements to the binary
log so that they replicate to replicas. To suppress logging, specify
the optional NO_WRITE_TO_BINLOG keyword or its alias LOCAL.

URL: https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">626</field>
		<field name="name">CHECK TABLE</field>
		<field name="help_category_id">47</field>
		<field name="description">Syntax:
CHECK TABLE tbl_name [, tbl_name] ... [option] ...

option: {
    FOR UPGRADE
  | QUICK
  | FAST
  | MEDIUM
  | EXTENDED
  | CHANGED
}

CHECK TABLE checks a table or tables for errors. CHECK TABLE can also
check views for problems, such as tables that are referenced in the
view definition that no longer exist.

To check a table, you must have some privilege for it.

CHECK TABLE works for InnoDB, MyISAM, ARCHIVE, and CSV tables.

Before running CHECK TABLE on InnoDB tables, see
https://dev.mysql.com/doc/refman/8.0/en/check-table.html#check-table-in
nodb.

CHECK TABLE is supported for partitioned tables, and you can use ALTER
TABLE ... CHECK PARTITION to check one or more partitions; for more
information, see [HELP ALTER TABLE], and
https://dev.mysql.com/doc/refman/8.0/en/partitioning-maintenance.html.

CHECK TABLE ignores virtual generated columns that are not indexed.

URL: https://dev.mysql.com/doc/refman/8.0/en/check-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/check-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">627</field>
		<field name="name">CHECKSUM TABLE</field>
		<field name="help_category_id">47</field>
		<field name="description">Syntax:
CHECKSUM TABLE tbl_name [, tbl_name] ... [QUICK | EXTENDED]

CHECKSUM TABLE reports a checksum for the contents of a table. You can
use this statement to verify that the contents are the same before and
after a backup, rollback, or other operation that is intended to put
the data back to a known state.

This statement requires the SELECT privilege for the table.

This statement is not supported for views. If you run CHECKSUM TABLE
against a view, the Checksum value is always NULL, and a warning is
returned.

For a nonexistent table, CHECKSUM TABLE returns NULL and generates a
warning.

During the checksum operation, the table is locked with a read lock for
InnoDB and MyISAM.

URL: https://dev.mysql.com/doc/refman/8.0/en/checksum-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/checksum-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">628</field>
		<field name="name">OPTIMIZE TABLE</field>
		<field name="help_category_id">47</field>
		<field name="description">Syntax:
OPTIMIZE [NO_WRITE_TO_BINLOG | LOCAL]
    TABLE tbl_name [, tbl_name] ...

OPTIMIZE TABLE reorganizes the physical storage of table data and
associated index data, to reduce storage space and improve I/O
efficiency when accessing the table. The exact changes made to each
table depend on the storage engine used by that table.

Use OPTIMIZE TABLE in these cases, depending on the type of table:

o After doing substantial insert, update, or delete operations on an
  InnoDB table that has its own .ibd file because it was created with
  the innodb_file_per_table option enabled. The table and indexes are
  reorganized, and disk space can be reclaimed for use by the operating
  system.

o After doing substantial insert, update, or delete operations on
  columns that are part of a FULLTEXT index in an InnoDB table. Set the
  configuration option innodb_optimize_fulltext_only=1 first. To keep
  the index maintenance period to a reasonable time, set the
  innodb_ft_num_word_optimize option to specify how many words to
  update in the search index, and run a sequence of OPTIMIZE TABLE
  statements until the search index is fully updated.

o After deleting a large part of a MyISAM or ARCHIVE table, or making
  many changes to a MyISAM or ARCHIVE table with variable-length rows
  (tables that have VARCHAR, VARBINARY, BLOB, or TEXT columns). Deleted
  rows are maintained in a linked list and subsequent INSERT operations
  reuse old row positions. You can use OPTIMIZE TABLE to reclaim the
  unused space and to defragment the data file. After extensive changes
  to a table, this statement may also improve performance of statements
  that use the table, sometimes significantly.

This statement requires SELECT and INSERT privileges for the table.

OPTIMIZE TABLE works for InnoDB, MyISAM, and ARCHIVE tables. OPTIMIZE
TABLE is also supported for dynamic columns of in-memory NDB tables. It
does not work for fixed-width columns of in-memory tables, nor does it
work for Disk Data tables. The performance of OPTIMIZE on NDB Cluster
tables can be tuned using --ndb-optimization-delay, which controls the
length of time to wait between processing batches of rows by OPTIMIZE
TABLE. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-resol
ved.html.

For NDB Cluster tables, OPTIMIZE TABLE can be interrupted by (for
example) killing the SQL thread performing the OPTIMIZE operation.

By default, OPTIMIZE TABLE does not work for tables created using any
other storage engine and returns a result indicating this lack of
support. You can make OPTIMIZE TABLE work for other storage engines by
starting mysqld with the --skip-new option. In this case, OPTIMIZE
TABLE is just mapped to ALTER TABLE.

This statement does not work with views.

OPTIMIZE TABLE is supported for partitioned tables. For information
about using this statement with partitioned tables and table
partitions, see
https://dev.mysql.com/doc/refman/8.0/en/partitioning-maintenance.html.

By default, the server writes OPTIMIZE TABLE statements to the binary
log so that they replicate to replicas. To suppress logging, specify
the optional NO_WRITE_TO_BINLOG keyword or its alias LOCAL.

URL: https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">629</field>
		<field name="name">REPAIR TABLE</field>
		<field name="help_category_id">47</field>
		<field name="description">Syntax:
REPAIR [NO_WRITE_TO_BINLOG | LOCAL]
    TABLE tbl_name [, tbl_name] ...
    [QUICK] [EXTENDED] [USE_FRM]

REPAIR TABLE repairs a possibly corrupted table, for certain storage
engines only.

This statement requires SELECT and INSERT privileges for the table.

Although normally you should never have to run REPAIR TABLE, if
disaster strikes, this statement is very likely to get back all your
data from a MyISAM table. If your tables become corrupted often, try to
find the reason for it, to eliminate the need to use REPAIR TABLE. See
https://dev.mysql.com/doc/refman/8.0/en/crashing.html, and
https://dev.mysql.com/doc/refman/8.0/en/myisam-table-problems.html.

REPAIR TABLE checks the table to see whether an upgrade is required. If
so, it performs the upgrade, following the same rules as CHECK TABLE
... FOR UPGRADE. See [HELP CHECK TABLE], for more information.

*Important*:

o Make a backup of a table before performing a table repair operation;
  under some circumstances the operation might cause data loss.
  Possible causes include but are not limited to file system errors.
  See https://dev.mysql.com/doc/refman/8.0/en/backup-and-recovery.html.

o If the server exits during a REPAIR TABLE operation, it is essential
  after restarting it that you immediately execute another REPAIR TABLE
  statement for the table before performing any other operations on it.
  In the worst case, you might have a new clean index file without
  information about the data file, and then the next operation you
  perform could overwrite the data file. This is an unlikely but
  possible scenario that underscores the value of making a backup
  first.

o In the event that a table on the source becomes corrupted and you run
  REPAIR TABLE on it, any resulting changes to the original table are
  not propagated to replicas.

URL: https://dev.mysql.com/doc/refman/8.0/en/repair-table.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/repair-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">630</field>
		<field name="name">CREATE FUNCTION LOADABLE FUNCTION</field>
		<field name="help_category_id">48</field>
		<field name="description">Syntax:
CREATE [AGGREGATE] FUNCTION [IF NOT EXISTS] function_name
    RETURNS {STRING|INTEGER|REAL|DECIMAL}
    SONAME shared_library_name

This statement loads the loadable function named function_name. (CREATE
FUNCTION is also used to created stored functions; see [HELP CREATE
PROCEDURE].)

A loadable function is a way to extend MySQL with a new function that
works like a native (built-in) MySQL function such as ABS() or
CONCAT(). See Adding a Loadable Function
(https://dev.mysql.com/doc/extending-mysql/8.0/en/adding-loadable-funct
ion.html).

function_name is the name that should be used in SQL statements to
invoke the function. The RETURNS clause indicates the type of the
function's return value. DECIMAL is a legal value after RETURNS, but
currently DECIMAL functions return string values and should be written
like STRING functions.

IF NOT EXISTS prevents an error from occurring if there already exists
a loadable function with the same name. It does not prevent an error
from occurring if there already exists a built-in function having the
same name. IF NOT EXISTS is supported for CREATE FUNCTION statements
beginning with MySQL 8.0.29. See also
https://dev.mysql.com/doc/refman/8.0/en/function-resolution.html#functi
on-name-resolution.

The AGGREGATE keyword, if given, signifies that the function is an
aggregate (group) function. An aggregate function works exactly like a
native MySQL aggregate function such as SUM() or COUNT().

shared_library_name is the base name of the shared library file
containing the code that implements the function. The file must be
located in the plugin directory. This directory is given by the value
of the plugin_dir system variable. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/function-loading.html.

CREATE FUNCTION requires the INSERT privilege for the mysql system
schema because it adds a row to the mysql.func system table to register
the function.

CREATE FUNCTION also adds the function to the Performance Schema
user_defined_functions table that provides runtime information about
installed loadable functions. See
https://dev.mysql.com/doc/refman/8.0/en/performance-schema-user-defined
-functions-table.html.

*Note*:

Like the mysql.func system table, the Performance Schema
user_defined_functions table lists loadable functions installed using
CREATE FUNCTION. Unlike the mysql.func table, the
user_defined_functions table also lists loadable functions installed
automatically by server components or plugins. This difference makes
user_defined_functions preferable to mysql.func for checking which
loadable functions are installed.

During the normal startup sequence, the server loads functions
registered in the mysql.func table. If the server is started with the
--skip-grant-tables option, functions registered in the table are not
loaded and are unavailable.

URL: https://dev.mysql.com/doc/refman/8.0/en/create-function-loadable.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/create-function-loadable.html</field>
	</row>
	<row>
		<field name="help_topic_id">631</field>
		<field name="name">DROP FUNCTION LOADABLE FUNCTION</field>
		<field name="help_category_id">48</field>
		<field name="description">Syntax:
DROP FUNCTION [IF EXISTS] function_name

This statement drops the loadable function named function_name. (DROP
FUNCTION is also used to drop stored functions; see [HELP DROP
PROCEDURE].)

DROP FUNCTION is the complement of CREATE FUNCTION. It requires the
DELETE privilege for the mysql system schema because it removes the row
from the mysql.func system table that registers the function.

DROP FUNCTION also removes the function from the Performance Schema
user_defined_functions table that provides runtime information about
installed loadable functions. See
https://dev.mysql.com/doc/refman/8.0/en/performance-schema-user-defined
-functions-table.html.

During the normal startup sequence, the server loads functions
registered in the mysql.func table. Because DROP FUNCTION removes the
mysql.func row for the dropped function, the server does not load the
function during subsequent restarts.

DROP FUNCTION cannot be used to drop a loadable function that is
installed automatically by components or plugins rather than by using
CREATE FUNCTION. Such a function is also dropped automatically, when
the component or plugin that installed it is uninstalled.

URL: https://dev.mysql.com/doc/refman/8.0/en/drop-function-loadable.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/drop-function-loadable.html</field>
	</row>
	<row>
		<field name="help_topic_id">632</field>
		<field name="name">INSTALL COMPONENT</field>
		<field name="help_category_id">49</field>
		<field name="description">Syntax:
INSTALL COMPONENT component_name  [, component_name ...
     [SET variable = expr [, variable = expr] ...] 
  
  variable: {
    {GLOBAL | @@GLOBAL.} [component_prefix.]system_var_name
  | {PERSIST | @@PERSIST.} [component_prefix.]system_var_name
}

This statement installs one or more components, which become active
immediately. A component provides services that are available to the
server and other components; see
https://dev.mysql.com/doc/refman/8.0/en/components.html. INSTALL
COMPONENT requires the INSERT privilege for the mysql.component system
table because it adds a row to that table to register the component.

Example:

INSTALL COMPONENT 'file://component1', 'file://component2';

A component is named using a URN that begins with file:// and indicates
the base name of the library file that implements the component,
located in the directory named by the plugin_dir system variable.
Component names do not include any platform-dependent file name suffix
such as .so or .dll. (These naming details are subject to change
because component name interpretation is itself performed by a service
and the component infrastructure makes it possible to replace the
default service implementation with alternative implementations.)

INSTALL COMPONENT (from 8.0.33) permits setting the values of component
system variables when you install one or more components. The SET
clause enables you to specify variable values precisely when they are
needed, without the inconvenience or limitations associated with other
forms of assignment. Specifically, you can also set component variables
with these alternatives:

o At server startup using options on the command line or in an option
  file, but doing so involves a server restart. The values do not take
  effect until you install the component. You can specify an invalid
  variable name for a component on the command line without triggering
  an error.

o Dynamically while the server is running by means of the SET
  statement, which enables you to modify operation of the server
  without having to stop and restart it. Setting a read-only variable
  is not permitted.

The optional SET clause applies a value, or values, only to the
component specified in the INSTALL COMPONENT statement, rather than to
all subsequent installations of that component. SET GLOBAL|PERSIST
works for all types of variables, including read-only variables,
without having to restart the server. A component system variable that
you set using INSTALL COMPONENT takes precedence over any conflicting
value coming from the command line or an option file.

Example:

INSTALL COMPONENT 'file://component1', 'file://component2' 
    SET GLOBAL component1.var1 = 12 + 3, PERSIST component2.var2 = 'strings';

Omitting PERSIST or GLOBAL is equivalent to specifying GLOBAL.

Specifying PERSIST for any variable in SET silently executes SET
PERSIST_ONLY immediately after INSTALL COMPONENT loads the components,
but before updating the mysql.component table. If SET PERSIST_ONLY
fails, then the server unloads all of the previously loaded new
components without persisting anything to mysql.component.

The SET clause accepts only valid variable names of the component being
installed and emits an error message for all invalid names. Subqueries,
stored functions, and aggregate functions are not permitted as part of
the value expression. If you install a single component, it is not
necessary to prefix the variable name with the component name.

*Note*:

While specifying a variable value using the SET clause is similar to
that of the command line---it is available immediately at variable
registration---there is a distinct difference in how the SET clause
handles invalid numerical values for boolean variables. For example, if
you set a boolean variable to 11 (component1.boolvar = 11), you see the
following behavior:

o SET clause yields true

o Command line yields false (11 is neither ON nor 1)

If any error occurs, the statement fails and has no effect. For
example, this happens if a component name is erroneous, a named
component does not exist or is already installed, or component
initialization fails.

A loader service handles component loading, which includes adding
installed components to the mysql.component system table that serves as
a registry. For subsequent server restarts, any components listed in
mysql.component are loaded by the loader service during the startup
sequence. This occurs even if the server is started with the
--skip-grant-tables option.

If a component depends on services not present in the registry and you
attempt to install the component without also installing the component
or components that provide the services on which it depends, an error
occurs:

ERROR 3527 (HY000): Cannot satisfy dependency for service 'component_a'
required by component 'component_b'.

To avoid this problem, either install all components in the same
statement, or install the dependent component after installing any
components on which it depends.

*Note*:

For keyring components, do not use INSTALL COMPONENT. Instead,
configure keyring component loading using a manifest file. See
https://dev.mysql.com/doc/refman/8.0/en/keyring-component-installation.
html.

URL: https://dev.mysql.com/doc/refman/8.0/en/install-component.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/install-component.html</field>
	</row>
	<row>
		<field name="help_topic_id">633</field>
		<field name="name">INSTALL PLUGIN</field>
		<field name="help_category_id">50</field>
		<field name="description">Syntax:
INSTALL PLUGIN plugin_name SONAME 'shared_library_name'

This statement installs a server plugin. It requires the INSERT
privilege for the mysql.plugin system table because it adds a row to
that table to register the plugin.

plugin_name is the name of the plugin as defined in the plugin
descriptor structure contained in the library file (see Plugin Data
Structures
(https://dev.mysql.com/doc/extending-mysql/8.0/en/plugin-data-structure
s.html)). Plugin names are not case-sensitive. For maximal
compatibility, plugin names should be limited to ASCII letters, digits,
and underscore because they are used in C source files, shell command
lines, M4 and Bourne shell scripts, and SQL environments.

shared_library_name is the name of the shared library that contains the
plugin code. The name includes the file name extension (for example,
libmyplugin.so, libmyplugin.dll, or libmyplugin.dylib).

The shared library must be located in the plugin directory (the
directory named by the plugin_dir system variable). The library must be
in the plugin directory itself, not in a subdirectory. By default,
plugin_dir is the plugin directory under the directory named by the
pkglibdir configuration variable, but it can be changed by setting the
value of plugin_dir at server startup. For example, set its value in a
my.cnf file:

[mysqld]
plugin_dir=/path/to/plugin/directory

If the value of plugin_dir is a relative path name, it is taken to be
relative to the MySQL base directory (the value of the basedir system
variable).

INSTALL PLUGIN loads and initializes the plugin code to make the plugin
available for use. A plugin is initialized by executing its
initialization function, which handles any setup that the plugin must
perform before it can be used. When the server shuts down, it executes
the deinitialization function for each plugin that is loaded so that
the plugin has a chance to perform any final cleanup.

INSTALL PLUGIN also registers the plugin by adding a line that
indicates the plugin name and library file name to the mysql.plugin
system table. During the normal startup sequence, the server loads and
initializes plugins registered in mysql.plugin. This means that a
plugin is installed with INSTALL PLUGIN only once, not every time the
server starts. If the server is started with the --skip-grant-tables
option, plugins registered in the mysql.plugin table are not loaded and
are unavailable.

A plugin library can contain multiple plugins. For each of them to be
installed, use a separate INSTALL PLUGIN statement. Each statement
names a different plugin, but all of them specify the same library
name.

URL: https://dev.mysql.com/doc/refman/8.0/en/install-plugin.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/install-plugin.html</field>
	</row>
	<row>
		<field name="help_topic_id">634</field>
		<field name="name">UNINSTALL COMPONENT</field>
		<field name="help_category_id">49</field>
		<field name="description">Syntax:
UNINSTALL COMPONENT component_name [, component_name ] ...

This statement deactivates and uninstalls one or more components. A
component provides services that are available to the server and other
components; see
https://dev.mysql.com/doc/refman/8.0/en/components.html. UNINSTALL
COMPONENT is the complement of INSTALL COMPONENT. It requires the
DELETE privilege for the mysql.component system table because it
removes the row from that table that registers the component. UNINSTALL
COMPONENT does not undo persisted variables, including the variables
persisted using INSTALL COMPONENT ... SET PERSIST.

Example:

UNINSTALL COMPONENT 'file://component1', 'file://component2';

For information about component naming, see [HELP INSTALL COMPONENT].

If any error occurs, the statement fails and has no effect. For
example, this happens if a component name is erroneous, a named
component is not installed, or cannot be uninstalled because other
installed components depend on it.

A loader service handles component unloading, which includes removing
uninstalled components from the mysql.component system table that
serves as a registry. As a result, unloaded components are not loaded
during the startup sequence for subsequent server restarts.

*Note*:

This statement has no effect for keyring components, which are loaded
using a manifest file and cannot be uninstalled. See
https://dev.mysql.com/doc/refman/8.0/en/keyring-component-installation.
html.

URL: https://dev.mysql.com/doc/refman/8.0/en/uninstall-component.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/uninstall-component.html</field>
	</row>
	<row>
		<field name="help_topic_id">635</field>
		<field name="name">UNINSTALL PLUGIN</field>
		<field name="help_category_id">49</field>
		<field name="description">Syntax:
UNINSTALL PLUGIN plugin_name

This statement removes an installed server plugin. UNINSTALL PLUGIN is
the complement of INSTALL PLUGIN. It requires the DELETE privilege for
the mysql.plugin system table because it removes the row from that
table that registers the plugin.

plugin_name must be the name of some plugin that is listed in the
mysql.plugin table. The server executes the plugin's deinitialization
function and removes the row for the plugin from the mysql.plugin
system table, so that subsequent server restarts do not load and
initialize the plugin. UNINSTALL PLUGIN does not remove the plugin's
shared library file.

URL: https://dev.mysql.com/doc/refman/8.0/en/uninstall-plugin.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/uninstall-plugin.html</field>
	</row>
	<row>
		<field name="help_topic_id">636</field>
		<field name="name">CLONE</field>
		<field name="help_category_id">49</field>
		<field name="description">Syntax:
CLONE clone_action

clone_action: {
    LOCAL DATA DIRECTORY [=] 'clone_dir';
  | INSTANCE FROM 'user'@'host':port
    IDENTIFIED BY 'password'
    [DATA DIRECTORY [=] 'clone_dir']
    [REQUIRE [NO] SSL]
}

The CLONE statement is used to clone data locally or from a remote
MySQL server instance. To use CLONE syntax, the clone plugin must be
installed. See
https://dev.mysql.com/doc/refman/8.0/en/clone-plugin.html.

CLONE LOCAL DATA DIRECTORY syntax clones data from the local MySQL data
directory to a directory on the same server or node where the MySQL
server instance runs. The 'clone_dir' directory is the full path of the
local directory that data is cloned to. An absolute path is required.
The specified directory must not exist, but the specified path must be
an existent path. The MySQL server requires the necessary write access
to create the specified directory. For more information, see
https://dev.mysql.com/doc/refman/8.0/en/clone-plugin-local.html.

CLONE INSTANCE syntax clones data from a remote MySQL server instance
(the donor) and transfers it to the MySQL instance where the cloning
operation was initiated (the recipient).

o user is the clone user on the donor MySQL server instance.

o host is the hostname address of the donor MySQL server instance.
  Internet Protocol version 6 (IPv6) address format is not supported.
  An alias to the IPv6 address can be used instead. An IPv4 address can
  be used as is.

o port is the port number of the donor MySQL server instance. (The X
  Protocol port specified by mysqlx_port is not supported. Connecting
  to the donor MySQL server instance through MySQL Router is also not
  supported.)

o IDENTIFIED BY 'password' specifies the password of the clone user on
  the donor MySQL server instance.

o DATA DIRECTORY [=] 'clone_dir' is an optional clause used to specify
  a directory on the recipient for the data you are cloning. Use this
  option if you do not want to remove existing data in the recipient
  data directory. An absolute path is required, and the directory must
  not exist. The MySQL server must have the necessary write access to
  create the directory.

  When the optional DATA DIRECTORY [=] 'clone_dir' clause is not used,
  a cloning operation removes existing data in the recipient data
  directory, replaces it with the cloned data, and automatically
  restarts the server afterward.

o [REQUIRE [NO] SSL] explicitly specifies whether an encrypted
  connection is to be used or not when transferring cloned data over
  the network. An error is returned if the explicit specification
  cannot be satisfied. If an SSL clause is not specified, clone
  attempts to establish an encrypted connection by default, falling
  back to an insecure connection if the secure connection attempt
  fails. A secure connection is required when cloning encrypted data
  regardless of whether this clause is specified. For more information,
  see
  https://dev.mysql.com/doc/refman/8.0/en/clone-plugin-remote.html#clon
  e-plugin-remote-ssl.

For additional information about cloning data from a remote MySQL
server instance, see
https://dev.mysql.com/doc/refman/8.0/en/clone-plugin-remote.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/clone.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/clone.html</field>
	</row>
	<row>
		<field name="help_topic_id">637</field>
		<field name="name">SET</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SET variable = expr [, variable = expr] ...

variable: {
    user_var_name
  | param_name
  | local_var_name
  | {GLOBAL | @@GLOBAL.} system_var_name
  | {PERSIST | @@PERSIST.} system_var_name
  | {PERSIST_ONLY | @@PERSIST_ONLY.} system_var_name
  | [SESSION | @@SESSION. | @@] system_var_name
}

SET syntax for variable assignment enables you to assign values to
different types of variables that affect the operation of the server or
clients:

o User-defined variables. See
  https://dev.mysql.com/doc/refman/8.0/en/user-variables.html.

o Stored procedure and function parameters, and stored program local
  variables. See
  https://dev.mysql.com/doc/refman/8.0/en/stored-program-variables.html
  .

o System variables. See
  https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.
  System variables also can be set at server startup, as described in
  https://dev.mysql.com/doc/refman/8.0/en/using-system-variables.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/set-variable.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/set-variable.html</field>
	</row>
	<row>
		<field name="help_topic_id">638</field>
		<field name="name">SET CHARACTER SET</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SET {CHARACTER SET | CHARSET}
    {'charset_name' | DEFAULT}

This statement maps all strings sent between the server and the current
client with the given mapping. SET CHARACTER SET sets three session
system variables: character_set_client and character_set_results are
set to the given character set, and character_set_connection to the
value of character_set_database. See
https://dev.mysql.com/doc/refman/8.0/en/charset-connection.html.

charset_name may be quoted or unquoted.

The default character set mapping can be restored by using the value
DEFAULT. The default depends on the server configuration.

Some character sets cannot be used as the client character set.
Attempting to use them with SET CHARACTER SET produces an error. See
https://dev.mysql.com/doc/refman/8.0/en/charset-connection.html#charset
-connection-impermissible-client-charset.

URL: https://dev.mysql.com/doc/refman/8.0/en/set-character-set.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/set-character-set.html</field>
	</row>
	<row>
		<field name="help_topic_id">639</field>
		<field name="name">SET CHARSET</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SET {CHARACTER SET | CHARSET}
    {'charset_name' | DEFAULT}

This statement maps all strings sent between the server and the current
client with the given mapping. SET CHARACTER SET sets three session
system variables: character_set_client and character_set_results are
set to the given character set, and character_set_connection to the
value of character_set_database. See
https://dev.mysql.com/doc/refman/8.0/en/charset-connection.html.

charset_name may be quoted or unquoted.

The default character set mapping can be restored by using the value
DEFAULT. The default depends on the server configuration.

Some character sets cannot be used as the client character set.
Attempting to use them with SET CHARACTER SET produces an error. See
https://dev.mysql.com/doc/refman/8.0/en/charset-connection.html#charset
-connection-impermissible-client-charset.

URL: https://dev.mysql.com/doc/refman/8.0/en/set-character-set.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/set-character-set.html</field>
	</row>
	<row>
		<field name="help_topic_id">640</field>
		<field name="name">SET NAMES</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SET NAMES {'charset_name'
    [COLLATE 'collation_name'] | DEFAULT}

This statement sets the three session system variables
character_set_client, character_set_connection, and
character_set_results to the given character set. Setting
character_set_connection to charset_name also sets collation_connection
to the default collation for charset_name. See
https://dev.mysql.com/doc/refman/8.0/en/charset-connection.html.

The optional COLLATE clause may be used to specify a collation
explicitly. If given, the collation must one of the permitted
collations for charset_name.

charset_name and collation_name may be quoted or unquoted.

The default mapping can be restored by using a value of DEFAULT. The
default depends on the server configuration.

Some character sets cannot be used as the client character set.
Attempting to use them with SET NAMES produces an error. See
https://dev.mysql.com/doc/refman/8.0/en/charset-connection.html#charset
-connection-impermissible-client-charset.

URL: https://dev.mysql.com/doc/refman/8.0/en/set-names.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/set-names.html</field>
	</row>
	<row>
		<field name="help_topic_id">641</field>
		<field name="name">SHOW</field>
		<field name="help_category_id">3</field>
		<field name="description">SHOW has many forms that provide information about databases, tables,
columns, or status information about the server. This section describes
those following:

SHOW {BINARY | MASTER} LOGS
SHOW BINLOG EVENTS [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]
SHOW {CHARACTER SET | CHARSET} [like_or_where]
SHOW COLLATION [like_or_where]
SHOW [FULL] COLUMNS FROM tbl_name [FROM db_name] [like_or_where]
SHOW CREATE DATABASE db_name
SHOW CREATE EVENT event_name
SHOW CREATE FUNCTION func_name
SHOW CREATE PROCEDURE proc_name
SHOW CREATE TABLE tbl_name
SHOW CREATE TRIGGER trigger_name
SHOW CREATE VIEW view_name
SHOW DATABASES [like_or_where]
SHOW ENGINE engine_name {STATUS | MUTEX}
SHOW [STORAGE] ENGINES
SHOW ERRORS [LIMIT [offset,] row_count]
SHOW EVENTS
SHOW FUNCTION CODE func_name
SHOW FUNCTION STATUS [like_or_where]
SHOW GRANTS FOR user
SHOW INDEX FROM tbl_name [FROM db_name]
SHOW MASTER STATUS
SHOW OPEN TABLES [FROM db_name] [like_or_where]
SHOW PLUGINS
SHOW PROCEDURE CODE proc_name
SHOW PROCEDURE STATUS [like_or_where]
SHOW PRIVILEGES
SHOW [FULL] PROCESSLIST
SHOW PROFILE [types] [FOR QUERY n] [OFFSET n] [LIMIT n]
SHOW PROFILES
SHOW RELAYLOG EVENTS [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]
SHOW {REPLICAS | SLAVE HOSTS}
SHOW {REPLICA | SLAVE} STATUS [FOR CHANNEL channel]
SHOW [GLOBAL | SESSION] STATUS [like_or_where]
SHOW TABLE STATUS [FROM db_name] [like_or_where]
SHOW [FULL] TABLES [FROM db_name] [like_or_where]
SHOW TRIGGERS [FROM db_name] [like_or_where]
SHOW [GLOBAL | SESSION] VARIABLES [like_or_where]
SHOW WARNINGS [LIMIT [offset,] row_count]

like_or_where: {
    LIKE 'pattern'
  | WHERE expr
}

If the syntax for a given SHOW statement includes a LIKE 'pattern'
part, 'pattern' is a string that can contain the SQL % and _ wildcard
characters. The pattern is useful for restricting statement output to
matching values.

Several SHOW statements also accept a WHERE clause that provides more
flexibility in specifying which rows to display. See
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

In SHOW statement results, user names and host names are quoted using
backticks (`).

URL: https://dev.mysql.com/doc/refman/8.0/en/show.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show.html</field>
	</row>
	<row>
		<field name="help_topic_id">642</field>
		<field name="name">SHOW BINARY LOGS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW BINARY LOGS
SHOW MASTER LOGS

Lists the binary log files on the server. This statement is used as
part of the procedure described in [HELP PURGE BINARY LOGS], that shows
how to determine which logs can be purged. SHOW BINARY LOGS requires
the REPLICATION CLIENT privilege (or the deprecated SUPER privilege).

Encrypted binary log files have a 512-byte file header that stores
information required for encryption and decryption of the file. This is
included in the file size displayed by SHOW BINARY LOGS. The Encrypted
column shows whether or not the binary log file is encrypted. Binary
log encryption is active if binlog_encryption=ON is set for the server.
Existing binary log files are not encrypted or decrypted if binary log
encryption is activated or deactivated while the server is running.

mysql&gt; SHOW BINARY LOGS;
+---------------+-----------+-----------+
| Log_name      | File_size | Encrypted |
+---------------+-----------+-----------+
| binlog.000015 |    724935 |       Yes |
| binlog.000016 |    733481 |       Yes |
+---------------+-----------+-----------+

URL: https://dev.mysql.com/doc/refman/8.0/en/show-binary-logs.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-binary-logs.html</field>
	</row>
	<row>
		<field name="help_topic_id">643</field>
		<field name="name">SHOW MASTER LOGS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW BINARY LOGS
SHOW MASTER LOGS

Lists the binary log files on the server. This statement is used as
part of the procedure described in [HELP PURGE BINARY LOGS], that shows
how to determine which logs can be purged. SHOW BINARY LOGS requires
the REPLICATION CLIENT privilege (or the deprecated SUPER privilege).

Encrypted binary log files have a 512-byte file header that stores
information required for encryption and decryption of the file. This is
included in the file size displayed by SHOW BINARY LOGS. The Encrypted
column shows whether or not the binary log file is encrypted. Binary
log encryption is active if binlog_encryption=ON is set for the server.
Existing binary log files are not encrypted or decrypted if binary log
encryption is activated or deactivated while the server is running.

mysql&gt; SHOW BINARY LOGS;
+---------------+-----------+-----------+
| Log_name      | File_size | Encrypted |
+---------------+-----------+-----------+
| binlog.000015 |    724935 |       Yes |
| binlog.000016 |    733481 |       Yes |
+---------------+-----------+-----------+

URL: https://dev.mysql.com/doc/refman/8.0/en/show-binary-logs.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-binary-logs.html</field>
	</row>
	<row>
		<field name="help_topic_id">644</field>
		<field name="name">SHOW BINLOG EVENTS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW BINLOG EVENTS
   [IN 'log_name']
   [FROM pos]
   [LIMIT [offset,] row_count]

Shows the events in the binary log. If you do not specify 'log_name',
the first binary log is displayed. SHOW BINLOG EVENTS requires the
REPLICATION SLAVE privilege.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-binlog-events.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-binlog-events.html</field>
	</row>
	<row>
		<field name="help_topic_id">645</field>
		<field name="name">SHOW CHARACTER SET</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW {CHARACTER SET | CHARSET}
    [LIKE 'pattern' | WHERE expr]

The SHOW CHARACTER SET statement shows all available character sets.
The LIKE clause, if present, indicates which character set names to
match. The WHERE clause can be given to select rows using more general
conditions, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html. For
example:

mysql&gt; SHOW CHARACTER SET LIKE 'latin%';
+---------+-----------------------------+-------------------+--------+
| Charset | Description                 | Default collation | Maxlen |
+---------+-----------------------------+-------------------+--------+
| latin1  | cp1252 West European        | latin1_swedish_ci |      1 |
| latin2  | ISO 8859-2 Central European | latin2_general_ci |      1 |
| latin5  | ISO 8859-9 Turkish          | latin5_turkish_ci |      1 |
| latin7  | ISO 8859-13 Baltic          | latin7_general_ci |      1 |
+---------+-----------------------------+-------------------+--------+

URL: https://dev.mysql.com/doc/refman/8.0/en/show-character-set.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-character-set.html</field>
	</row>
	<row>
		<field name="help_topic_id">646</field>
		<field name="name">SHOW COLLATION</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW COLLATION
    [LIKE 'pattern' | WHERE expr]

This statement lists collations supported by the server. By default,
the output from SHOW COLLATION includes all available collations. The
LIKE clause, if present, indicates which collation names to match. The
WHERE clause can be given to select rows using more general conditions,
as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html. For
example:

mysql&gt; SHOW COLLATION WHERE Charset = 'latin1';
+-------------------+---------+----+---------+----------+---------+
| Collation         | Charset | Id | Default | Compiled | Sortlen |
+-------------------+---------+----+---------+----------+---------+
| latin1_german1_ci | latin1  |  5 |         | Yes      |       1 |
| latin1_swedish_ci | latin1  |  8 | Yes     | Yes      |       1 |
| latin1_danish_ci  | latin1  | 15 |         | Yes      |       1 |
| latin1_german2_ci | latin1  | 31 |         | Yes      |       2 |
| latin1_bin        | latin1  | 47 |         | Yes      |       1 |
| latin1_general_ci | latin1  | 48 |         | Yes      |       1 |
| latin1_general_cs | latin1  | 49 |         | Yes      |       1 |
| latin1_spanish_ci | latin1  | 94 |         | Yes      |       1 |
+-------------------+---------+----+---------+----------+---------+

URL: https://dev.mysql.com/doc/refman/8.0/en/show-collation.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-collation.html</field>
	</row>
	<row>
		<field name="help_topic_id">647</field>
		<field name="name">SHOW COLUMNS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW [EXTENDED] [FULL] {COLUMNS | FIELDS}
    {FROM | IN} tbl_name
    [{FROM | IN} db_name]
    [LIKE 'pattern' | WHERE expr]

SHOW COLUMNS displays information about the columns in a given table.
It also works for views. SHOW COLUMNS displays information only for
those columns for which you have some privilege.

mysql&gt; SHOW COLUMNS FROM City;
+-------------+----------+------+-----+---------+----------------+
| Field       | Type     | Null | Key | Default | Extra          |
+-------------+----------+------+-----+---------+----------------+
| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |
| Name        | char(35) | NO   |     |         |                |
| CountryCode | char(3)  | NO   | MUL |         |                |
| District    | char(20) | NO   |     |         |                |
| Population  | int(11)  | NO   |     | 0       |                |
+-------------+----------+------+-----+---------+----------------+

An alternative to tbl_name FROM db_name syntax is db_name.tbl_name.
These two statements are equivalent:

SHOW COLUMNS FROM mytable FROM mydb;
SHOW COLUMNS FROM mydb.mytable;

The optional EXTENDED keyword causes the output to include information
about hidden columns that MySQL uses internally and are not accessible
by users.

The optional FULL keyword causes the output to include the column
collation and comments, as well as the privileges you have for each
column.

The LIKE clause, if present, indicates which column names to match. The
WHERE clause can be given to select rows using more general conditions,
as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

The data types may differ from what you expect them to be based on a
CREATE TABLE statement because MySQL sometimes changes data types when
you create or alter a table. The conditions under which this occurs are
described in
https://dev.mysql.com/doc/refman/8.0/en/silent-column-changes.html.

SHOW COLUMNS displays the following values for each table column:

o Field

  The name of the column.

o Type

  The column data type.

o Collation

  The collation for nonbinary string columns, or NULL for other
  columns. This value is displayed only if you use the FULL keyword.

o Null

  The column nullability. The value is YES if NULL values can be stored
  in the column, NO if not.

o Key

  Whether the column is indexed:

  o If Key is empty, the column either is not indexed or is indexed
    only as a secondary column in a multiple-column, nonunique index.

  o If Key is PRI, the column is a PRIMARY KEY or is one of the columns
    in a multiple-column PRIMARY KEY.

  o If Key is UNI, the column is the first column of a UNIQUE index. (A
    UNIQUE index permits multiple NULL values, but you can tell whether
    the column permits NULL by checking the Null field.)

  o If Key is MUL, the column is the first column of a nonunique index
    in which multiple occurrences of a given value are permitted within
    the column.

  If more than one of the Key values applies to a given column of a
  table, Key displays the one with the highest priority, in the order
  PRI, UNI, MUL.

  A UNIQUE index may be displayed as PRI if it cannot contain NULL
  values and there is no PRIMARY KEY in the table. A UNIQUE index may
  display as MUL if several columns form a composite UNIQUE index;
  although the combination of the columns is unique, each column can
  still hold multiple occurrences of a given value.

o Default

  The default value for the column. This is NULL if the column has an
  explicit default of NULL, or if the column definition includes no
  DEFAULT clause.

o Extra

  Any additional information that is available about a given column.
  The value is nonempty in these cases:

  o auto_increment for columns that have the AUTO_INCREMENT attribute.

  o on update CURRENT_TIMESTAMP for TIMESTAMP or DATETIME columns that
    have the ON UPDATE CURRENT_TIMESTAMP attribute.

  o VIRTUAL GENERATED or STORED GENERATED for generated columns.

  o DEFAULT_GENERATED for columns that have an expression default
    value.

o Privileges

  The privileges you have for the column. This value is displayed only
  if you use the FULL keyword.

o Comment

  Any comment included in the column definition. This value is
  displayed only if you use the FULL keyword.

Table column information is also available from the INFORMATION_SCHEMA
COLUMNS table. See
https://dev.mysql.com/doc/refman/8.0/en/information-schema-columns-tabl
e.html. The extended information about hidden columns is available only
using SHOW EXTENDED COLUMNS; it cannot be obtained from the COLUMNS
table.

You can list a table's columns with the mysqlshow db_name tbl_name
command.

The DESCRIBE statement provides information similar to SHOW COLUMNS.
See https://dev.mysql.com/doc/refman/8.0/en/describe.html.

The SHOW CREATE TABLE, SHOW TABLE STATUS, and SHOW INDEX statements
also provide information about tables. See [HELP SHOW].

In MySQL 8.0.30 and later, SHOW COLUMNS includes the table's generated
invisible primary key, if it has one, by default. You can cause this
information to be suppressed in the statement's output by setting
show_gipk_in_create_table_and_information_schema = OFF. For more
information, see
https://dev.mysql.com/doc/refman/8.0/en/create-table-gipks.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-columns.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-columns.html</field>
	</row>
	<row>
		<field name="help_topic_id">648</field>
		<field name="name">SHOW FIELDS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW [EXTENDED] [FULL] {COLUMNS | FIELDS}
    {FROM | IN} tbl_name
    [{FROM | IN} db_name]
    [LIKE 'pattern' | WHERE expr]

SHOW COLUMNS displays information about the columns in a given table.
It also works for views. SHOW COLUMNS displays information only for
those columns for which you have some privilege.

mysql&gt; SHOW COLUMNS FROM City;
+-------------+----------+------+-----+---------+----------------+
| Field       | Type     | Null | Key | Default | Extra          |
+-------------+----------+------+-----+---------+----------------+
| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |
| Name        | char(35) | NO   |     |         |                |
| CountryCode | char(3)  | NO   | MUL |         |                |
| District    | char(20) | NO   |     |         |                |
| Population  | int(11)  | NO   |     | 0       |                |
+-------------+----------+------+-----+---------+----------------+

An alternative to tbl_name FROM db_name syntax is db_name.tbl_name.
These two statements are equivalent:

SHOW COLUMNS FROM mytable FROM mydb;
SHOW COLUMNS FROM mydb.mytable;

The optional EXTENDED keyword causes the output to include information
about hidden columns that MySQL uses internally and are not accessible
by users.

The optional FULL keyword causes the output to include the column
collation and comments, as well as the privileges you have for each
column.

The LIKE clause, if present, indicates which column names to match. The
WHERE clause can be given to select rows using more general conditions,
as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

The data types may differ from what you expect them to be based on a
CREATE TABLE statement because MySQL sometimes changes data types when
you create or alter a table. The conditions under which this occurs are
described in
https://dev.mysql.com/doc/refman/8.0/en/silent-column-changes.html.

SHOW COLUMNS displays the following values for each table column:

o Field

  The name of the column.

o Type

  The column data type.

o Collation

  The collation for nonbinary string columns, or NULL for other
  columns. This value is displayed only if you use the FULL keyword.

o Null

  The column nullability. The value is YES if NULL values can be stored
  in the column, NO if not.

o Key

  Whether the column is indexed:

  o If Key is empty, the column either is not indexed or is indexed
    only as a secondary column in a multiple-column, nonunique index.

  o If Key is PRI, the column is a PRIMARY KEY or is one of the columns
    in a multiple-column PRIMARY KEY.

  o If Key is UNI, the column is the first column of a UNIQUE index. (A
    UNIQUE index permits multiple NULL values, but you can tell whether
    the column permits NULL by checking the Null field.)

  o If Key is MUL, the column is the first column of a nonunique index
    in which multiple occurrences of a given value are permitted within
    the column.

  If more than one of the Key values applies to a given column of a
  table, Key displays the one with the highest priority, in the order
  PRI, UNI, MUL.

  A UNIQUE index may be displayed as PRI if it cannot contain NULL
  values and there is no PRIMARY KEY in the table. A UNIQUE index may
  display as MUL if several columns form a composite UNIQUE index;
  although the combination of the columns is unique, each column can
  still hold multiple occurrences of a given value.

o Default

  The default value for the column. This is NULL if the column has an
  explicit default of NULL, or if the column definition includes no
  DEFAULT clause.

o Extra

  Any additional information that is available about a given column.
  The value is nonempty in these cases:

  o auto_increment for columns that have the AUTO_INCREMENT attribute.

  o on update CURRENT_TIMESTAMP for TIMESTAMP or DATETIME columns that
    have the ON UPDATE CURRENT_TIMESTAMP attribute.

  o VIRTUAL GENERATED or STORED GENERATED for generated columns.

  o DEFAULT_GENERATED for columns that have an expression default
    value.

o Privileges

  The privileges you have for the column. This value is displayed only
  if you use the FULL keyword.

o Comment

  Any comment included in the column definition. This value is
  displayed only if you use the FULL keyword.

Table column information is also available from the INFORMATION_SCHEMA
COLUMNS table. See
https://dev.mysql.com/doc/refman/8.0/en/information-schema-columns-tabl
e.html. The extended information about hidden columns is available only
using SHOW EXTENDED COLUMNS; it cannot be obtained from the COLUMNS
table.

You can list a table's columns with the mysqlshow db_name tbl_name
command.

The DESCRIBE statement provides information similar to SHOW COLUMNS.
See https://dev.mysql.com/doc/refman/8.0/en/describe.html.

The SHOW CREATE TABLE, SHOW TABLE STATUS, and SHOW INDEX statements
also provide information about tables. See [HELP SHOW].

In MySQL 8.0.30 and later, SHOW COLUMNS includes the table's generated
invisible primary key, if it has one, by default. You can cause this
information to be suppressed in the statement's output by setting
show_gipk_in_create_table_and_information_schema = OFF. For more
information, see
https://dev.mysql.com/doc/refman/8.0/en/create-table-gipks.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-columns.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-columns.html</field>
	</row>
	<row>
		<field name="help_topic_id">649</field>
		<field name="name">SHOW CREATE DATABASE</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name

Shows the CREATE DATABASE statement that creates the named database. If
the SHOW statement includes an IF NOT EXISTS clause, the output too
includes such a clause. SHOW CREATE SCHEMA is a synonym for SHOW CREATE
DATABASE.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-create-database.html

</field>
		<field name="example">mysql&gt; SHOW CREATE DATABASE test\G
*************************** 1. row ***************************
       Database: test
Create Database: CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET utf8mb4
                 COLLATE utf8mb4_0900_ai_ci */ /*!80014 DEFAULT ENCRYPTION='N' */

mysql&gt; SHOW CREATE SCHEMA test\G
*************************** 1. row ***************************
       Database: test
Create Database: CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET utf8mb4
                 COLLATE utf8mb4_0900_ai_ci */ /*!80014 DEFAULT ENCRYPTION='N' */
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-create-database.html</field>
	</row>
	<row>
		<field name="help_topic_id">650</field>
		<field name="name">SHOW CREATE SCHEMA</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name

Shows the CREATE DATABASE statement that creates the named database. If
the SHOW statement includes an IF NOT EXISTS clause, the output too
includes such a clause. SHOW CREATE SCHEMA is a synonym for SHOW CREATE
DATABASE.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-create-database.html

</field>
		<field name="example">mysql&gt; SHOW CREATE DATABASE test\G
*************************** 1. row ***************************
       Database: test
Create Database: CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET utf8mb4
                 COLLATE utf8mb4_0900_ai_ci */ /*!80014 DEFAULT ENCRYPTION='N' */

mysql&gt; SHOW CREATE SCHEMA test\G
*************************** 1. row ***************************
       Database: test
Create Database: CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET utf8mb4
                 COLLATE utf8mb4_0900_ai_ci */ /*!80014 DEFAULT ENCRYPTION='N' */
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-create-database.html</field>
	</row>
	<row>
		<field name="help_topic_id">651</field>
		<field name="name">SHOW CREATE EVENT</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW CREATE EVENT event_name

This statement displays the CREATE EVENT statement needed to re-create
a given event. It requires the EVENT privilege for the database from
which the event is to be shown. For example (using the same event
e_daily defined and then altered in [HELP SHOW EVENTS]):

URL: https://dev.mysql.com/doc/refman/8.0/en/show-create-event.html

</field>
		<field name="example">mysql&gt; SHOW CREATE EVENT myschema.e_daily\G
*************************** 1. row ***************************
               Event: e_daily
            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,
                      NO_ZERO_IN_DATE,NO_ZERO_DATE,
                      ERROR_FOR_DIVISION_BY_ZERO,
                      NO_ENGINE_SUBSTITUTION
           time_zone: SYSTEM
        Create Event: CREATE DEFINER=`jon`@`ghidora` EVENT `e_daily`
                        ON SCHEDULE EVERY 1 DAY
                        STARTS CURRENT_TIMESTAMP + INTERVAL 6 HOUR
                        ON COMPLETION NOT PRESERVE
                        ENABLE
                        COMMENT 'Saves total number of sessions then
                                clears the table each day'
                        DO BEGIN
                          INSERT INTO site_activity.totals (time, total)
                            SELECT CURRENT_TIMESTAMP, COUNT(*)
                              FROM site_activity.sessions;
                          DELETE FROM site_activity.sessions;
                        END
character_set_client: utf8mb4
collation_connection: utf8mb4_0900_ai_ci
  Database Collation: utf8mb4_0900_ai_ci
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-create-event.html</field>
	</row>
	<row>
		<field name="help_topic_id">652</field>
		<field name="name">SHOW CREATE FUNCTION</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW CREATE FUNCTION func_name

This statement is similar to SHOW CREATE PROCEDURE but for stored
functions. See [HELP SHOW CREATE PROCEDURE].

URL: https://dev.mysql.com/doc/refman/8.0/en/show-create-function.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-create-function.html</field>
	</row>
	<row>
		<field name="help_topic_id">653</field>
		<field name="name">SHOW CREATE PROCEDURE</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW CREATE PROCEDURE proc_name

This statement is a MySQL extension. It returns the exact string that
can be used to re-create the named stored procedure. A similar
statement, SHOW CREATE FUNCTION, displays information about stored
functions (see [HELP SHOW CREATE FUNCTION]).

To use either statement, you must be the user named as the routine
DEFINER, have the SHOW_ROUTINE privilege, have the SELECT privilege at
the global level, or have the CREATE ROUTINE, ALTER ROUTINE, or EXECUTE
privilege granted at a scope that includes the routine. The value
displayed for the Create Procedure or Create Function field is NULL if
you have only CREATE ROUTINE, ALTER ROUTINE, or EXECUTE.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-create-procedure.html

</field>
		<field name="example">mysql&gt; SHOW CREATE PROCEDURE test.citycount\G
*************************** 1. row ***************************
           Procedure: citycount
            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,
                      NO_ZERO_IN_DATE,NO_ZERO_DATE,
                      ERROR_FOR_DIVISION_BY_ZERO,
                      NO_ENGINE_SUBSTITUTION
    Create Procedure: CREATE DEFINER=`me`@`localhost`
                      PROCEDURE `citycount`(IN country CHAR(3), OUT cities INT)
                      BEGIN
                        SELECT COUNT(*) INTO cities FROM world.city
                        WHERE CountryCode = country;
                      END
character_set_client: utf8mb4
collation_connection: utf8mb4_0900_ai_ci
  Database Collation: utf8mb4_0900_ai_ci

mysql&gt; SHOW CREATE FUNCTION test.hello\G
*************************** 1. row ***************************
            Function: hello
            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,
                      NO_ZERO_IN_DATE,NO_ZERO_DATE,
                      ERROR_FOR_DIVISION_BY_ZERO,
                      NO_ENGINE_SUBSTITUTION
     Create Function: CREATE DEFINER=`me`@`localhost`
                      FUNCTION `hello`(s CHAR(20))
                      RETURNS char(50) CHARSET utf8mb4
                      DETERMINISTIC
                      RETURN CONCAT('Hello, ',s,'!')
character_set_client: utf8mb4
collation_connection: utf8mb4_0900_ai_ci
  Database Collation: utf8mb4_0900_ai_ci
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-create-procedure.html</field>
	</row>
	<row>
		<field name="help_topic_id">654</field>
		<field name="name">SHOW CREATE TABLE</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW CREATE TABLE tbl_name

Shows the CREATE TABLE statement that creates the named table. To use
this statement, you must have some privilege for the table. This
statement also works with views.

As of MySQL 8.0.16, MySQL implements CHECK constraints and SHOW CREATE
TABLE displays them. All CHECK constraints are displayed as table
constraints. That is, a CHECK constraint originally specified as part
of a column definition displays as a separate clause not part of the
column definition. Example:

mysql&gt; CREATE TABLE t1 (
         i1 INT CHECK (i1 &lt;&gt; 0),      -- column constraint
         i2 INT,
         CHECK (i2 &gt; i1),             -- table constraint
         CHECK (i2 &lt;&gt; 0) NOT ENFORCED -- table constraint, not enforced
       );

mysql&gt; SHOW CREATE TABLE t1\G
*************************** 1. row ***************************
       Table: t1
Create Table: CREATE TABLE `t1` (
  `i1` int DEFAULT NULL,
  `i2` int DEFAULT NULL,
  CONSTRAINT `t1_chk_1` CHECK ((`i1` &lt;&gt; 0)),
  CONSTRAINT `t1_chk_2` CHECK ((`i2` &gt; `i1`)),
  CONSTRAINT `t1_chk_3` CHECK ((`i2` &lt;&gt; 0)) /*!80016 NOT ENFORCED */
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci

SHOW CREATE TABLE quotes table and column names according to the value
of the sql_quote_show_create option. See
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

When altering the storage engine of a table, table options that are not
applicable to the new storage engine are retained in the table
definition to enable reverting the table with its previously defined
options to the original storage engine, if necessary. For example, when
changing the storage engine from InnoDB to MyISAM, options specific to
InnoDB, such as ROW_FORMAT=COMPACT, are retained, as shown here:

mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY) ROW_FORMAT=COMPACT ENGINE=InnoDB;
mysql&gt; ALTER TABLE t1 ENGINE=MyISAM;
mysql&gt; SHOW CREATE TABLE t1\G
*************************** 1. row ***************************
       Table: t1
Create Table: CREATE TABLE `t1` (
  `c1` int NOT NULL,
  PRIMARY KEY (`c1`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=COMPACT

When creating a table with strict mode disabled, the storage engine's
default row format is used if the specified row format is not
supported. The actual row format of the table is reported in the
Row_format column in response to SHOW TABLE STATUS. SHOW CREATE TABLE
shows the row format that was specified in the CREATE TABLE statement.

In MySQL 8.0.30 and later, SHOW CREATE TABLE includes the definition of
the table's generated invisible primary key, if it has such a key, by
default. You can cause this information to be suppressed in the
statement's output by setting
show_gipk_in_create_table_and_information_schema = OFF. For more
information, see
https://dev.mysql.com/doc/refman/8.0/en/create-table-gipks.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-create-table.html

</field>
		<field name="example">mysql&gt; SHOW CREATE TABLE t\G
*************************** 1. row ***************************
       Table: t
Create Table: CREATE TABLE `t` (
  `id` int NOT NULL AUTO_INCREMENT,
  `s` char(60) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-create-table.html</field>
	</row>
	<row>
		<field name="help_topic_id">655</field>
		<field name="name">SHOW CREATE TRIGGER</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW CREATE TRIGGER trigger_name

This statement shows the CREATE TRIGGER statement that creates the
named trigger. This statement requires the TRIGGER privilege for the
table associated with the trigger.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-create-trigger.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-create-trigger.html</field>
	</row>
	<row>
		<field name="help_topic_id">656</field>
		<field name="name">SHOW CREATE USER</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW CREATE USER user

This statement shows the CREATE USER statement that creates the named
user. An error occurs if the user does not exist. The statement
requires the SELECT privilege for the mysql system schema, except to
see information for the current user. For the current user, the SELECT
privilege for the mysql.user system table is required for display of
the password hash in the IDENTIFIED AS clause; otherwise, the hash
displays as &lt;secret&gt;.

To name the account, use the format described in
https://dev.mysql.com/doc/refman/8.0/en/account-names.html. The host
name part of the account name, if omitted, defaults to '%'. It is also
possible to specify CURRENT_USER or CURRENT_USER() to refer to the
account associated with the current session.

Password hash values displayed in the IDENTIFIED WITH clause of output
from SHOW CREATE USER may contain unprintable characters that have
adverse effects on terminal displays and in other environments.
Enabling the print_identified_with_as_hex system variable (available as
of MySQL 8.0.17) causes SHOW CREATE USER to display such hash values as
hexadecimal strings rather than as regular string literals. Hash values
that do not contain unprintable characters still display as regular
string literals, even with this variable enabled.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-create-user.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-create-user.html</field>
	</row>
	<row>
		<field name="help_topic_id">657</field>
		<field name="name">SHOW CREATE VIEW</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW CREATE VIEW view_name

This statement shows the CREATE VIEW statement that creates the named
view.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-create-view.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-create-view.html</field>
	</row>
	<row>
		<field name="help_topic_id">658</field>
		<field name="name">SHOW DATABASES</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW {DATABASES | SCHEMAS}
    [LIKE 'pattern' | WHERE expr]

SHOW DATABASES lists the databases on the MySQL server host. SHOW
SCHEMAS is a synonym for SHOW DATABASES. The LIKE clause, if present,
indicates which database names to match. The WHERE clause can be given
to select rows using more general conditions, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

You see only those databases for which you have some kind of privilege,
unless you have the global SHOW DATABASES privilege. You can also get
this list using the mysqlshow command.

If the server was started with the --skip-show-database option, you
cannot use this statement at all unless you have the SHOW DATABASES
privilege.

MySQL implements databases as directories in the data directory, so
this statement simply lists directories in that location. However, the
output may include names of directories that do not correspond to
actual databases.

Database information is also available from the INFORMATION_SCHEMA
SCHEMATA table. See
https://dev.mysql.com/doc/refman/8.0/en/information-schema-schemata-tab
le.html.

*Caution*:

Because any static global privilege is considered a privilege for all
databases, any static global privilege enables a user to see all
database names with SHOW DATABASES or by examining the SCHEMATA table
of INFORMATION_SCHEMA, except databases that have been restricted at
the database level by partial revokes.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-databases.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-databases.html</field>
	</row>
	<row>
		<field name="help_topic_id">659</field>
		<field name="name">SHOW SCHEMAS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW {DATABASES | SCHEMAS}
    [LIKE 'pattern' | WHERE expr]

SHOW DATABASES lists the databases on the MySQL server host. SHOW
SCHEMAS is a synonym for SHOW DATABASES. The LIKE clause, if present,
indicates which database names to match. The WHERE clause can be given
to select rows using more general conditions, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

You see only those databases for which you have some kind of privilege,
unless you have the global SHOW DATABASES privilege. You can also get
this list using the mysqlshow command.

If the server was started with the --skip-show-database option, you
cannot use this statement at all unless you have the SHOW DATABASES
privilege.

MySQL implements databases as directories in the data directory, so
this statement simply lists directories in that location. However, the
output may include names of directories that do not correspond to
actual databases.

Database information is also available from the INFORMATION_SCHEMA
SCHEMATA table. See
https://dev.mysql.com/doc/refman/8.0/en/information-schema-schemata-tab
le.html.

*Caution*:

Because any static global privilege is considered a privilege for all
databases, any static global privilege enables a user to see all
database names with SHOW DATABASES or by examining the SCHEMATA table
of INFORMATION_SCHEMA, except databases that have been restricted at
the database level by partial revokes.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-databases.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-databases.html</field>
	</row>
	<row>
		<field name="help_topic_id">660</field>
		<field name="name">SHOW ENGINE</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW ENGINE engine_name {STATUS | MUTEX}

SHOW ENGINE displays operational information about a storage engine. It
requires the PROCESS privilege. The statement has these variants:

SHOW ENGINE INNODB STATUS
SHOW ENGINE INNODB MUTEX
SHOW ENGINE PERFORMANCE_SCHEMA STATUS

SHOW ENGINE INNODB STATUS displays extensive information from the
standard InnoDB Monitor about the state of the InnoDB storage engine.
For information about the standard monitor and other InnoDB Monitors
that provide information about InnoDB processing, see
https://dev.mysql.com/doc/refman/8.0/en/innodb-monitors.html.

SHOW ENGINE INNODB MUTEX displays InnoDB mutex and rw-lock statistics.

*Note*:

InnoDB mutexes and rwlocks can also be monitored using Performance
Schema tables. See
https://dev.mysql.com/doc/refman/8.0/en/monitor-innodb-mutex-waits-perf
ormance-schema.html.

Mutex statistics collection is configured dynamically using the
following options:

o To enable the collection of mutex statistics, run:

SET GLOBAL innodb_monitor_enable='latch';

o To reset mutex statistics, run:

SET GLOBAL innodb_monitor_reset='latch';

o To disable the collection of mutex statistics, run:

SET GLOBAL innodb_monitor_disable='latch';

Collection of mutex statistics for SHOW ENGINE INNODB MUTEX can also be
enabled by setting innodb_monitor_enable='all', or disabled by setting
innodb_monitor_disable='all'.

SHOW ENGINE INNODB MUTEX output has these columns:

o Type

  Always InnoDB.

o Name

  For mutexes, the Name field reports only the mutex name. For rwlocks,
  the Name field reports the source file where the rwlock is
  implemented, and the line number in the file where the rwlock is
  created. The line number is specific to your version of MySQL.

o Status

  The mutex status. This field reports the number of spins, waits, and
  calls. Statistics for low-level operating system mutexes, which are
  implemented outside of InnoDB, are not reported.

  o spins indicates the number of spins.

  o waits indicates the number of mutex waits.

  o calls indicates how many times the mutex was requested.

SHOW ENGINE INNODB MUTEX does not list mutexes and rw-locks for each
buffer pool block, as the amount of output would be overwhelming on
systems with a large buffer pool. SHOW ENGINE INNODB MUTEX does,
however, print aggregate BUF_BLOCK_MUTEX spin, wait, and call values
for buffer pool block mutexes and rw-locks. SHOW ENGINE INNODB MUTEX
also does not list any mutexes or rw-locks that have never been waited
on (os_waits=0). Thus, SHOW ENGINE INNODB MUTEX only displays
information about mutexes and rw-locks outside of the buffer pool that
have caused at least one OS-level wait.

Use SHOW ENGINE PERFORMANCE_SCHEMA STATUS to inspect the internal
operation of the Performance Schema code:

mysql&gt; SHOW ENGINE PERFORMANCE_SCHEMA STATUS\G
...
*************************** 3. row ***************************
  Type: performance_schema
  Name: events_waits_history.size
Status: 76
*************************** 4. row ***************************
  Type: performance_schema
  Name: events_waits_history.count
Status: 10000
*************************** 5. row ***************************
  Type: performance_schema
  Name: events_waits_history.memory
Status: 760000
...
*************************** 57. row ***************************
  Type: performance_schema
  Name: performance_schema.memory
Status: 26459600
...

This statement is intended to help the DBA understand the effects that
different Performance Schema options have on memory requirements.

Name values consist of two parts, which name an internal buffer and a
buffer attribute, respectively. Interpret buffer names as follows:

o An internal buffer that is not exposed as a table is named within
  parentheses. Examples: (pfs_cond_class).size,
  (pfs_mutex_class).memory.

o An internal buffer that is exposed as a table in the
  performance_schema database is named after the table, without
  parentheses. Examples: events_waits_history.size,
  mutex_instances.count.

o A value that applies to the Performance Schema as a whole begins with
  performance_schema. Example: performance_schema.memory.

Buffer attributes have these meanings:

o size is the size of the internal record used by the implementation,
  such as the size of a row in a table. size values cannot be changed.

o count is the number of internal records, such as the number of rows
  in a table. count values can be changed using Performance Schema
  configuration options.

o For a table, tbl_name.memory is the product of size and count. For
  the Performance Schema as a whole, performance_schema.memory is the
  sum of all the memory used (the sum of all other memory values).

In some cases, there is a direct relationship between a Performance
Schema configuration parameter and a SHOW ENGINE value. For example,
events_waits_history_long.count corresponds to
performance_schema_events_waits_history_long_size. In other cases, the
relationship is more complex. For example, events_waits_history.count
corresponds to performance_schema_events_waits_history_size (the number
of rows per thread) multiplied by
performance_schema_max_thread_instances ( the number of threads).

SHOW ENGINE NDB STATUS If the server has the NDB storage engine
enabled, SHOW ENGINE NDB STATUS displays cluster status information
such as the number of connected data nodes, the cluster connectstring,
and cluster binary log epochs, as well as counts of various Cluster API
objects created by the MySQL Server when connected to the cluster.
Sample output from this statement is shown here:

mysql&gt; SHOW ENGINE NDB STATUS;
+------------+-----------------------+--------------------------------------------------+
| Type       | Name                  | Status                                           |
+------------+-----------------------+--------------------------------------------------+
| ndbcluster | connection            | cluster_node_id=7,
  connected_host=198.51.100.103, connected_port=1186, number_of_data_nodes=4,
  number_of_ready_data_nodes=3, connect_count=0                                         |
| ndbcluster | NdbTransaction        | created=6, free=0, sizeof=212                    |
| ndbcluster | NdbOperation          | created=8, free=8, sizeof=660                    |
| ndbcluster | NdbIndexScanOperation | created=1, free=1, sizeof=744                    |
| ndbcluster | NdbIndexOperation     | created=0, free=0, sizeof=664                    |
| ndbcluster | NdbRecAttr            | created=1285, free=1285, sizeof=60               |
| ndbcluster | NdbApiSignal          | created=16, free=16, sizeof=136                  |
| ndbcluster | NdbLabel              | created=0, free=0, sizeof=196                    |
| ndbcluster | NdbBranch             | created=0, free=0, sizeof=24                     |
| ndbcluster | NdbSubroutine         | created=0, free=0, sizeof=68                     |
| ndbcluster | NdbCall               | created=0, free=0, sizeof=16                     |
| ndbcluster | NdbBlob               | created=1, free=1, sizeof=264                    |
| ndbcluster | NdbReceiver           | created=4, free=0, sizeof=68                     |
| ndbcluster | binlog                | latest_epoch=155467, latest_trans_epoch=148126,
  latest_received_binlog_epoch=0, latest_handled_binlog_epoch=0,
  latest_applied_binlog_epoch=0                                                         |
+------------+-----------------------+--------------------------------------------------+

The Status column in each of these rows provides information about the
MySQL server's connection to the cluster and about the cluster binary
log's status, respectively. The Status information is in the form of
comma-delimited set of name/value pairs.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-engine.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-engine.html</field>
	</row>
	<row>
		<field name="help_topic_id">661</field>
		<field name="name">SHOW ENGINES</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW [STORAGE] ENGINES

SHOW ENGINES displays status information about the server's storage
engines. This is particularly useful for checking whether a storage
engine is supported, or to see what the default engine is.

For information about MySQL storage engines, see
https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html, and
https://dev.mysql.com/doc/refman/8.0/en/storage-engines.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-engines.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-engines.html</field>
	</row>
	<row>
		<field name="help_topic_id">662</field>
		<field name="name">SHOW ERRORS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW ERRORS [LIMIT [offset,] row_count]
SHOW COUNT(*) ERRORS

SHOW ERRORS is a diagnostic statement that is similar to SHOW WARNINGS,
except that it displays information only for errors, rather than for
errors, warnings, and notes.

The LIMIT clause has the same syntax as for the SELECT statement. See
https://dev.mysql.com/doc/refman/8.0/en/select.html.

The SHOW COUNT(*) ERRORS statement displays the number of errors. You
can also retrieve this number from the error_count variable:

SHOW COUNT(*) ERRORS;
SELECT @@error_count;

SHOW ERRORS and error_count apply only to errors, not warnings or
notes. In other respects, they are similar to SHOW WARNINGS and
warning_count. In particular, SHOW ERRORS cannot display information
for more than max_error_count messages, and error_count can exceed the
value of max_error_count if the number of errors exceeds
max_error_count.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-errors.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-errors.html</field>
	</row>
	<row>
		<field name="help_topic_id">663</field>
		<field name="name">SHOW EVENTS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW EVENTS
    [{FROM | IN} schema_name]
    [LIKE 'pattern' | WHERE expr]

This statement displays information about Event Manager events, which
are discussed in
https://dev.mysql.com/doc/refman/8.0/en/event-scheduler.html. It
requires the EVENT privilege for the database from which the events are
to be shown.

In its simplest form, SHOW EVENTS lists all of the events in the
current schema:

mysql&gt; SELECT CURRENT_USER(), SCHEMA();
+----------------+----------+
| CURRENT_USER() | SCHEMA() |
+----------------+----------+
| jon@ghidora    | myschema |
+----------------+----------+
1 row in set (0.00 sec)

mysql&gt; SHOW EVENTS\G
*************************** 1. row ***************************
                  Db: myschema
                Name: e_daily
             Definer: jon@ghidora
           Time zone: SYSTEM
                Type: RECURRING
          Execute at: NULL
      Interval value: 1
      Interval field: DAY
              Starts: 2018-08-08 11:06:34
                Ends: NULL
              Status: ENABLED
          Originator: 1
character_set_client: utf8mb4
collation_connection: utf8mb4_0900_ai_ci
  Database Collation: utf8mb4_0900_ai_ci

To see events for a specific schema, use the FROM clause. For example,
to see events for the test schema, use the following statement:

SHOW EVENTS FROM test;

The LIKE clause, if present, indicates which event names to match. The
WHERE clause can be given to select rows using more general conditions,
as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-events.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-events.html</field>
	</row>
	<row>
		<field name="help_topic_id">664</field>
		<field name="name">SHOW FUNCTION CODE</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW FUNCTION CODE func_name

This statement is similar to SHOW PROCEDURE CODE but for stored
functions. See [HELP SHOW PROCEDURE CODE].

URL: https://dev.mysql.com/doc/refman/8.0/en/show-function-code.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-function-code.html</field>
	</row>
	<row>
		<field name="help_topic_id">665</field>
		<field name="name">SHOW FUNCTION STATUS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW FUNCTION STATUS
    [LIKE 'pattern' | WHERE expr]

This statement is similar to SHOW PROCEDURE STATUS but for stored
functions. See [HELP SHOW PROCEDURE STATUS].

URL: https://dev.mysql.com/doc/refman/8.0/en/show-function-status.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-function-status.html</field>
	</row>
	<row>
		<field name="help_topic_id">666</field>
		<field name="name">SHOW GRANTS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW GRANTS
    [FOR user_or_role
        [USING role [, role] ...]]

user_or_role: {
    user (see )
  | role (see .
}

This statement displays the privileges and roles that are assigned to a
MySQL user account or role, in the form of GRANT statements that must
be executed to duplicate the privilege and role assignments.

*Note*:

To display nonprivilege information for MySQL accounts, use the SHOW
CREATE USER statement. See [HELP SHOW CREATE USER].

SHOW GRANTS requires the SELECT privilege for the mysql system schema,
except to display privileges and roles for the current user.

To name the account or role for SHOW GRANTS, use the same format as for
the GRANT statement (for example, 'jeffrey'@'localhost'):

mysql&gt; SHOW GRANTS FOR 'jeffrey'@'localhost';
+------------------------------------------------------------------+
| Grants for jeffrey@localhost                                     |
+------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `jeffrey`@`localhost`                      |
| GRANT SELECT, INSERT, UPDATE ON `db1`.* TO `jeffrey`@`localhost` |
+------------------------------------------------------------------+

The host part, if omitted, defaults to '%'. For additional information
about specifying account and role names, see
https://dev.mysql.com/doc/refman/8.0/en/account-names.html, and
https://dev.mysql.com/doc/refman/8.0/en/role-names.html.

To display the privileges granted to the current user (the account you
are using to connect to the server), you can use any of the following
statements:

SHOW GRANTS;
SHOW GRANTS FOR CURRENT_USER;
SHOW GRANTS FOR CURRENT_USER();

If SHOW GRANTS FOR CURRENT_USER (or any equivalent syntax) is used in
definer context, such as within a stored procedure that executes with
definer rather than invoker privileges, the grants displayed are those
of the definer and not the invoker.

In MySQL 8.0 compared to previous series, SHOW GRANTS no longer
displays ALL PRIVILEGES in its global-privileges output because the
meaning of ALL PRIVILEGES at the global level varies depending on which
dynamic privileges are defined. Instead, SHOW GRANTS explicitly lists
each granted global privilege:

mysql&gt; SHOW GRANTS FOR 'root'@'localhost';
+---------------------------------------------------------------------+
| Grants for root@localhost                                           |
+---------------------------------------------------------------------+
| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD,         |
| SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES,  |
| SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION   |
| SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE,  |
| ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE,      |
| CREATE ROLE, DROP ROLE ON *.* TO `root`@`localhost` WITH GRANT      |
| OPTION                                                              |
| GRANT PROXY ON ''@'' TO `root`@`localhost` WITH GRANT OPTION        |
+---------------------------------------------------------------------+

Applications that process SHOW GRANTS output should be adjusted
accordingly.

At the global level, GRANT OPTION applies to all granted static global
privileges if granted for any of them, but applies individually to
granted dynamic privileges. SHOW GRANTS displays global privileges this
way:

o One line listing all granted static privileges, if there are any,
  including WITH GRANT OPTION if appropriate.

o One line listing all granted dynamic privileges for which GRANT
  OPTION is granted, if there are any, including WITH GRANT OPTION.

o One line listing all granted dynamic privileges for which GRANT
  OPTION is not granted, if there are any, without WITH GRANT OPTION.

With the optional USING clause, SHOW GRANTS enables you to examine the
privileges associated with roles for the user. Each role named in the
USING clause must be granted to the user.

Suppose that user u1 is assigned roles r1 and r2, as follows:

CREATE ROLE 'r1', 'r2';
GRANT SELECT ON db1.* TO 'r1';
GRANT INSERT, UPDATE, DELETE ON db1.* TO 'r2';
CREATE USER 'u1'@'localhost' IDENTIFIED BY 'u1pass';
GRANT 'r1', 'r2' TO 'u1'@'localhost';

SHOW GRANTS without USING shows the granted roles:

mysql&gt; SHOW GRANTS FOR 'u1'@'localhost';
+---------------------------------------------+
| Grants for u1@localhost                     |
+---------------------------------------------+
| GRANT USAGE ON *.* TO `u1`@`localhost`      |
| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost` |
+---------------------------------------------+

Adding a USING clause causes the statement to also display the
privileges associated with each role named in the clause:

mysql&gt; SHOW GRANTS FOR 'u1'@'localhost' USING 'r1';
+---------------------------------------------+
| Grants for u1@localhost                     |
+---------------------------------------------+
| GRANT USAGE ON *.* TO `u1`@`localhost`      |
| GRANT SELECT ON `db1`.* TO `u1`@`localhost` |
| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost` |
+---------------------------------------------+
mysql&gt; SHOW GRANTS FOR 'u1'@'localhost' USING 'r2';
+-------------------------------------------------------------+
| Grants for u1@localhost                                     |
+-------------------------------------------------------------+
| GRANT USAGE ON *.* TO `u1`@`localhost`                      |
| GRANT INSERT, UPDATE, DELETE ON `db1`.* TO `u1`@`localhost` |
| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost`                 |
+-------------------------------------------------------------+
mysql&gt; SHOW GRANTS FOR 'u1'@'localhost' USING 'r1', 'r2';
+---------------------------------------------------------------------+
| Grants for u1@localhost                                             |
+---------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `u1`@`localhost`                              |
| GRANT SELECT, INSERT, UPDATE, DELETE ON `db1`.* TO `u1`@`localhost` |
| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost`                         |
+---------------------------------------------------------------------+

*Note*:

A privilege granted to an account is always in effect, but a role is
not. The active roles for an account can differ across and within
sessions, depending on the value of the activate_all_roles_on_login
system variable, the account default roles, and whether SET ROLE has
been executed within a session.

MySQL 8.0.16 and higher supports partial revokes of global privileges,
such that a global privilege can be restricted from applying to
particular schemas (see
https://dev.mysql.com/doc/refman/8.0/en/partial-revokes.html). To
indicate which global schema privileges have been revoked for
particular schemas, SHOW GRANTS output includes REVOKE statements:

mysql&gt; SET PERSIST partial_revokes = ON;
mysql&gt; CREATE USER u1;
mysql&gt; GRANT SELECT, INSERT, DELETE ON *.* TO u1;
mysql&gt; REVOKE SELECT, INSERT ON mysql.* FROM u1;
mysql&gt; REVOKE DELETE ON world.* FROM u1;
mysql&gt; SHOW GRANTS FOR u1;
+--------------------------------------------------+
| Grants for u1@%                                  |
+--------------------------------------------------+
| GRANT SELECT, INSERT, DELETE ON *.* TO `u1`@`%`  |
| REVOKE SELECT, INSERT ON `mysql`.* FROM `u1`@`%` |
| REVOKE DELETE ON `world`.* FROM `u1`@`%`         |
+--------------------------------------------------+

SHOW GRANTS does not display privileges that are available to the named
account but are granted to a different account. For example, if an
anonymous account exists, the named account might be able to use its
privileges, but SHOW GRANTS does not display them.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-grants.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-grants.html</field>
	</row>
	<row>
		<field name="help_topic_id">667</field>
		<field name="name">SHOW INDEX</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW [EXTENDED] {INDEX | INDEXES | KEYS}
    {FROM | IN} tbl_name
    [{FROM | IN} db_name]
    [WHERE expr]

SHOW INDEX returns table index information. The format resembles that
of the SQLStatistics call in ODBC. This statement requires some
privilege for any column in the table.

mysql&gt; SHOW INDEX FROM City\G
*************************** 1. row ***************************
        Table: city
   Non_unique: 0
     Key_name: PRIMARY
 Seq_in_index: 1
  Column_name: ID
    Collation: A
  Cardinality: 4188
     Sub_part: NULL
       Packed: NULL
         Null:
   Index_type: BTREE
      Comment:
Index_comment:
      Visible: YES
   Expression: NULL
*************************** 2. row ***************************
        Table: city
   Non_unique: 1
     Key_name: CountryCode
 Seq_in_index: 1
  Column_name: CountryCode
    Collation: A
  Cardinality: 232
     Sub_part: NULL
       Packed: NULL
         Null:
   Index_type: BTREE
      Comment:
Index_comment:
      Visible: YES
   Expression: NULL

An alternative to tbl_name FROM db_name syntax is db_name.tbl_name.
These two statements are equivalent:

SHOW INDEX FROM mytable FROM mydb;
SHOW INDEX FROM mydb.mytable;

The optional EXTENDED keyword causes the output to include information
about hidden indexes that MySQL uses internally and are not accessible
by users.

The WHERE clause can be given to select rows using more general
conditions, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

SHOW INDEX returns the following fields:

o Table

  The name of the table.

o Non_unique

  0 if the index cannot contain duplicates, 1 if it can.

o Key_name

  The name of the index. If the index is the primary key, the name is
  always PRIMARY.

o Seq_in_index

  The column sequence number in the index, starting with 1.

o Column_name

  The column name. See also the description for the Expression column.

o Collation

  How the column is sorted in the index. This can have values A
  (ascending), D (descending), or NULL (not sorted).

o Cardinality

  An estimate of the number of unique values in the index. To update
  this number, run ANALYZE TABLE or (for MyISAM tables) myisamchk -a.

  Cardinality is counted based on statistics stored as integers, so the
  value is not necessarily exact even for small tables. The higher the
  cardinality, the greater the chance that MySQL uses the index when
  doing joins.

o Sub_part

  The index prefix. That is, the number of indexed characters if the
  column is only partly indexed, NULL if the entire column is indexed.

  *Note*:

  Prefix limits are measured in bytes. However, prefix lengths for
  index specifications in CREATE TABLE, ALTER TABLE, and CREATE INDEX
  statements are interpreted as number of characters for nonbinary
  string types (CHAR, VARCHAR, TEXT) and number of bytes for binary
  string types (BINARY, VARBINARY, BLOB). Take this into account when
  specifying a prefix length for a nonbinary string column that uses a
  multibyte character set.

  For additional information about index prefixes, see
  https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html, and
  [HELP CREATE INDEX].

o Packed

  Indicates how the key is packed. NULL if it is not.

o Null

  Contains YES if the column may contain NULL values and '' if not.

o Index_type

  The index method used (BTREE, FULLTEXT, HASH, RTREE).

o Comment

  Information about the index not described in its own column, such as
  disabled if the index is disabled.

o Index_comment

  Any comment provided for the index with a COMMENT attribute when the
  index was created.

o Visible

  Whether the index is visible to the optimizer. See
  https://dev.mysql.com/doc/refman/8.0/en/invisible-indexes.html.

o Expression

  MySQL 8.0.13 and higher supports functional key parts (see
  https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-inde
  x-functional-key-parts), which affects both the Column_name and
  Expression columns:

  o For a nonfunctional key part, Column_name indicates the column
    indexed by the key part and Expression is NULL.

  o For a functional key part, Column_name column is NULL and
    Expression indicates the expression for the key part.

Information about table indexes is also available from the
INFORMATION_SCHEMA STATISTICS table. See
https://dev.mysql.com/doc/refman/8.0/en/information-schema-statistics-t
able.html. The extended information about hidden indexes is available
only using SHOW EXTENDED INDEX; it cannot be obtained from the
STATISTICS table.

You can list a table's indexes with the mysqlshow -k db_name tbl_name
command.

In MySQL 8.0.30 and later, SHOW INDEX includes the table's generated
invisible key, if it has one, by default. You can cause this
information to be suppressed in the statement's output by setting
show_gipk_in_create_table_and_information_schema = OFF. For more
information, see
https://dev.mysql.com/doc/refman/8.0/en/create-table-gipks.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-index.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-index.html</field>
	</row>
	<row>
		<field name="help_topic_id">668</field>
		<field name="name">SHOW MASTER STATUS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW MASTER STATUS

This statement provides status information about the binary log files
of the source server. It requires the REPLICATION CLIENT privilege (or
the deprecated SUPER privilege).

Example:

mysql&gt; SHOW MASTER STATUS\G
*************************** 1. row ***************************
             File: source-bin.000002
         Position: 1307
     Binlog_Do_DB: test
 Binlog_Ignore_DB: manual, mysql
Executed_Gtid_Set: 3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5
1 row in set (0.00 sec)

URL: https://dev.mysql.com/doc/refman/8.0/en/show-master-status.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-master-status.html</field>
	</row>
	<row>
		<field name="help_topic_id">669</field>
		<field name="name">SHOW OPEN TABLES</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW OPEN TABLES
    [{FROM | IN} db_name]
    [LIKE 'pattern' | WHERE expr]

SHOW OPEN TABLES lists the non-TEMPORARY tables that are currently open
in the table cache. See
https://dev.mysql.com/doc/refman/8.0/en/table-cache.html. The FROM
clause, if present, restricts the tables shown to those present in the
db_name database. The LIKE clause, if present, indicates which table
names to match. The WHERE clause can be given to select rows using more
general conditions, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-open-tables.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-open-tables.html</field>
	</row>
	<row>
		<field name="help_topic_id">670</field>
		<field name="name">SHOW PLUGINS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW PLUGINS

SHOW PLUGINS displays information about server plugins.

Example of SHOW PLUGINS output:

mysql&gt; SHOW PLUGINS\G
*************************** 1. row ***************************
   Name: binlog
 Status: ACTIVE
   Type: STORAGE ENGINE
Library: NULL
License: GPL
*************************** 2. row ***************************
   Name: CSV
 Status: ACTIVE
   Type: STORAGE ENGINE
Library: NULL
License: GPL
*************************** 3. row ***************************
   Name: MEMORY
 Status: ACTIVE
   Type: STORAGE ENGINE
Library: NULL
License: GPL
*************************** 4. row ***************************
   Name: MyISAM
 Status: ACTIVE
   Type: STORAGE ENGINE
Library: NULL
License: GPL
...

URL: https://dev.mysql.com/doc/refman/8.0/en/show-plugins.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-plugins.html</field>
	</row>
	<row>
		<field name="help_topic_id">671</field>
		<field name="name">SHOW PRIVILEGES</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW PRIVILEGES

SHOW PRIVILEGES shows the list of system privileges that the MySQL
server supports. The privileges displayed include all static
privileges, and all currently registered dynamic privileges.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-privileges.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-privileges.html</field>
	</row>
	<row>
		<field name="help_topic_id">672</field>
		<field name="name">SHOW PROCEDURE CODE</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW PROCEDURE CODE proc_name

This statement is a MySQL extension that is available only for servers
that have been built with debugging support. It displays a
representation of the internal implementation of the named stored
procedure. A similar statement, SHOW FUNCTION CODE, displays
information about stored functions (see [HELP SHOW FUNCTION CODE]).

To use either statement, you must be the user named as the routine
DEFINER, have the SHOW_ROUTINE privilege, or have the SELECT privilege
at the global level.

If the named routine is available, each statement produces a result
set. Each row in the result set corresponds to one &quot;instruction&quot; in the
routine. The first column is Pos, which is an ordinal number beginning
with 0. The second column is Instruction, which contains an SQL
statement (usually changed from the original source), or a directive
which has meaning only to the stored-routine handler.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-procedure-code.html

</field>
		<field name="example">mysql&gt; DELIMITER //
mysql&gt; CREATE PROCEDURE p1 ()
       BEGIN
         DECLARE fanta INT DEFAULT 55;
         DROP TABLE t2;
         LOOP
           INSERT INTO t3 VALUES (fanta);
           END LOOP;
         END//
Query OK, 0 rows affected (0.01 sec)

mysql&gt; SHOW PROCEDURE CODE p1//
+-----+----------------------------------------+
| Pos | Instruction                            |
+-----+----------------------------------------+
|   0 | set fanta@0 55                         |
|   1 | stmt 9 &quot;DROP TABLE t2&quot;                 |
|   2 | stmt 5 &quot;INSERT INTO t3 VALUES (fanta)&quot; |
|   3 | jump 2                                 |
+-----+----------------------------------------+
4 rows in set (0.00 sec)

mysql&gt; CREATE FUNCTION test.hello (s CHAR(20))
       RETURNS CHAR(50) DETERMINISTIC
       RETURN CONCAT('Hello, ',s,'!');
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SHOW FUNCTION CODE test.hello;
+-----+---------------------------------------+
| Pos | Instruction                           |
+-----+---------------------------------------+
|   0 | freturn 254 concat('Hello, ',s@0,'!') |
+-----+---------------------------------------+
1 row in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-procedure-code.html</field>
	</row>
	<row>
		<field name="help_topic_id">673</field>
		<field name="name">SHOW PROCEDURE STATUS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW PROCEDURE STATUS
    [LIKE 'pattern' | WHERE expr]

This statement is a MySQL extension. It returns characteristics of a
stored procedure, such as the database, name, type, creator, creation
and modification dates, and character set information. A similar
statement, SHOW FUNCTION STATUS, displays information about stored
functions (see [HELP SHOW FUNCTION STATUS]).

To use either statement, you must be the user named as the routine
DEFINER, have the SHOW_ROUTINE privilege, have the SELECT privilege at
the global level, or have the CREATE ROUTINE, ALTER ROUTINE, or EXECUTE
privilege granted at a scope that includes the routine.

The LIKE clause, if present, indicates which procedure or function
names to match. The WHERE clause can be given to select rows using more
general conditions, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-procedure-status.html

</field>
		<field name="example">mysql&gt; SHOW PROCEDURE STATUS LIKE 'sp1'\G
*************************** 1. row ***************************
                  Db: test
                Name: sp1
                Type: PROCEDURE
             Definer: testuser@localhost
            Modified: 2018-08-08 13:54:11
             Created: 2018-08-08 13:54:11
       Security_type: DEFINER
             Comment:
character_set_client: utf8mb4
collation_connection: utf8mb4_0900_ai_ci
  Database Collation: utf8mb4_0900_ai_ci

mysql&gt; SHOW FUNCTION STATUS LIKE 'hello'\G
*************************** 1. row ***************************
                  Db: test
                Name: hello
                Type: FUNCTION
             Definer: testuser@localhost
            Modified: 2020-03-10 11:10:03
             Created: 2020-03-10 11:10:03
       Security_type: DEFINER
             Comment:
character_set_client: utf8mb4
collation_connection: utf8mb4_0900_ai_ci
  Database Collation: utf8mb4_0900_ai_ci
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-procedure-status.html</field>
	</row>
	<row>
		<field name="help_topic_id">674</field>
		<field name="name">SHOW PROCESSLIST</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW [FULL] PROCESSLIST

*Important*:

The INFORMATION SCHEMA implementation of SHOW PROCESSLIST is deprecated
and subject to removal in a future MySQL release. It is recommended to
use the Performance Schema implementation of SHOW PROCESSLIST instead.

The MySQL process list indicates the operations currently being
performed by the set of threads executing within the server. The SHOW
PROCESSLIST statement is one source of process information. For a
comparison of this statement with other sources, see
https://dev.mysql.com/doc/refman/8.0/en/processlist-access.html#process
list-sources.

*Note*:

As of MySQL 8.0.22, an alternative implementation for SHOW PROCESSLIST
is available based on the Performance Schema processlist table, which,
unlike the default SHOW PROCESSLIST implementation, does not require a
mutex and has better performance characteristics. For details, see
https://dev.mysql.com/doc/refman/8.0/en/performance-schema-processlist-
table.html.

If you have the PROCESS privilege, you can see all threads, even those
belonging to other users. Otherwise (without the PROCESS privilege),
nonanonymous users have access to information about their own threads
but not threads for other users, and anonymous users have no access to
thread information.

Without the FULL keyword, SHOW PROCESSLIST displays only the first 100
characters of each statement in the Info field.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-processlist.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-processlist.html</field>
	</row>
	<row>
		<field name="help_topic_id">675</field>
		<field name="name">SHOW PROFILE</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW PROFILE [type [, type] ... ]
    [FOR QUERY n]
    [LIMIT row_count [OFFSET offset]]

type: {
    ALL
  | BLOCK IO
  | CONTEXT SWITCHES
  | CPU
  | IPC
  | MEMORY
  | PAGE FAULTS
  | SOURCE
  | SWAPS
}

The SHOW PROFILE and SHOW PROFILES statements display profiling
information that indicates resource usage for statements executed
during the course of the current session.

*Note*:

The SHOW PROFILE and SHOW PROFILES statements are deprecated; expect
them to be removed in a future MySQL release. Use the Performance
Schema instead; see
https://dev.mysql.com/doc/refman/8.0/en/performance-schema-query-profil
ing.html.

To control profiling, use the profiling session variable, which has a
default value of 0 (OFF). Enable profiling by setting profiling to 1 or
ON:

mysql&gt; SET profiling = 1;

SHOW PROFILES displays a list of the most recent statements sent to the
server. The size of the list is controlled by the
profiling_history_size session variable, which has a default value of
15. The maximum value is 100. Setting the value to 0 has the practical
effect of disabling profiling.

All statements are profiled except SHOW PROFILE and SHOW PROFILES, so
neither of those statements appears in the profile list. Malformed
statements are profiled. For example, SHOW PROFILING is an illegal
statement, and a syntax error occurs if you try to execute it, but it
shows up in the profiling list.

SHOW PROFILE displays detailed information about a single statement.
Without the FOR QUERY n clause, the output pertains to the most
recently executed statement. If FOR QUERY n is included, SHOW PROFILE
displays information for statement n. The values of n correspond to the
Query_ID values displayed by SHOW PROFILES.

The LIMIT row_count clause may be given to limit the output to
row_count rows. If LIMIT is given, OFFSET offset may be added to begin
the output offset rows into the full set of rows.

By default, SHOW PROFILE displays Status and Duration columns. The
Status values are like the State values displayed by SHOW PROCESSLIST,
although there might be some minor differences in interpretation for
the two statements for some status values (see
https://dev.mysql.com/doc/refman/8.0/en/thread-information.html).

Optional type values may be specified to display specific additional
types of information:

o ALL displays all information

o BLOCK IO displays counts for block input and output operations

o CONTEXT SWITCHES displays counts for voluntary and involuntary
  context switches

o CPU displays user and system CPU usage times

o IPC displays counts for messages sent and received

o MEMORY is not currently implemented

o PAGE FAULTS displays counts for major and minor page faults

o SOURCE displays the names of functions from the source code, together
  with the name and line number of the file in which the function
  occurs

o SWAPS displays swap counts

Profiling is enabled per session. When a session ends, its profiling
information is lost.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-profile.html

</field>
		<field name="example">mysql&gt; SELECT @@profiling;
+-------------+
| @@profiling |
+-------------+
|           0 |
+-------------+
1 row in set (0.00 sec)

mysql&gt; SET profiling = 1;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; DROP TABLE IF EXISTS t1;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; CREATE TABLE T1 (id INT);
Query OK, 0 rows affected (0.01 sec)

mysql&gt; SHOW PROFILES;
+----------+----------+--------------------------+
| Query_ID | Duration | Query                    |
+----------+----------+--------------------------+
|        0 | 0.000088 | SET PROFILING = 1        |
|        1 | 0.000136 | DROP TABLE IF EXISTS t1  |
|        2 | 0.011947 | CREATE TABLE t1 (id INT) |
+----------+----------+--------------------------+
3 rows in set (0.00 sec)

mysql&gt; SHOW PROFILE;
+----------------------+----------+
| Status               | Duration |
+----------------------+----------+
| checking permissions | 0.000040 |
| creating table       | 0.000056 |
| After create         | 0.011363 |
| query end            | 0.000375 |
| freeing items        | 0.000089 |
| logging slow query   | 0.000019 |
| cleaning up          | 0.000005 |
+----------------------+----------+
7 rows in set (0.00 sec)

mysql&gt; SHOW PROFILE FOR QUERY 1;
+--------------------+----------+
| Status             | Duration |
+--------------------+----------+
| query end          | 0.000107 |
| freeing items      | 0.000008 |
| logging slow query | 0.000015 |
| cleaning up        | 0.000006 |
+--------------------+----------+
4 rows in set (0.00 sec)

mysql&gt; SHOW PROFILE CPU FOR QUERY 2;
+----------------------+----------+----------+------------+
| Status               | Duration | CPU_user | CPU_system |
+----------------------+----------+----------+------------+
| checking permissions | 0.000040 | 0.000038 |   0.000002 |
| creating table       | 0.000056 | 0.000028 |   0.000028 |
| After create         | 0.011363 | 0.000217 |   0.001571 |
| query end            | 0.000375 | 0.000013 |   0.000028 |
| freeing items        | 0.000089 | 0.000010 |   0.000014 |
| logging slow query   | 0.000019 | 0.000009 |   0.000010 |
| cleaning up          | 0.000005 | 0.000003 |   0.000002 |
+----------------------+----------+----------+------------+
7 rows in set (0.00 sec)
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-profile.html</field>
	</row>
	<row>
		<field name="help_topic_id">676</field>
		<field name="name">SHOW PROFILES</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW PROFILES

The SHOW PROFILES statement, together with SHOW PROFILE, displays
profiling information that indicates resource usage for statements
executed during the course of the current session. For more
information, see [HELP SHOW PROFILE].

*Note*:

The SHOW PROFILE and SHOW PROFILES statements are deprecated; expect it
to be removed in a future MySQL release. Use the Performance Schema
instead; see
https://dev.mysql.com/doc/refman/8.0/en/performance-schema-query-profil
ing.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-profiles.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-profiles.html</field>
	</row>
	<row>
		<field name="help_topic_id">677</field>
		<field name="name">SHOW RELAYLOG EVENTS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW RELAYLOG EVENTS
    [IN 'log_name']
    [FROM pos]
    [LIMIT [offset,] row_count]
    [channel_option]

channel_option:
    FOR CHANNEL channel

Shows the events in the relay log of a replica. If you do not specify
'log_name', the first relay log is displayed. This statement has no
effect on the source. SHOW RELAYLOG EVENTS requires the REPLICATION
SLAVE privilege.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-relaylog-events.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-relaylog-events.html</field>
	</row>
	<row>
		<field name="help_topic_id">678</field>
		<field name="name">SHOW REPLICAS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
{SHOW REPLICAS}

Displays a list of replicas currently registered with the source. From
MySQL 8.0.22, use SHOW REPLICAS in place of SHOW SLAVE HOSTS, which is
deprecated from that release. In releases before MySQL 8.0.22, use SHOW
SLAVE HOSTS. SHOW REPLICAS requires the REPLICATION SLAVE privilege.

SHOW REPLICAS should be executed on a server that acts as a replication
source. The statement displays information about servers that are or
have been connected as replicas, with each row of the result
corresponding to one replica server, as shown here:

mysql&gt; SHOW REPLICAS;
+------------+-----------+------+-----------+--------------------------------------+
| Server_id  | Host      | Port | Source_id | Replica_UUID                         |
+------------+-----------+------+-----------+--------------------------------------+
|         10 | iconnect2 | 3306 |         3 | 14cb6624-7f93-11e0-b2c0-c80aa9429562 |
|         21 | athena    | 3306 |         3 | 07af4990-f41f-11df-a566-7ac56fdaf645 |
+------------+-----------+------+-----------+--------------------------------------+

o Server_id: The unique server ID of the replica server, as configured
  in the replica server's option file, or on the command line with
  --server-id=value.

o Host: The host name of the replica server, as specified on the
  replica with the --report-host option. This can differ from the
  machine name as configured in the operating system.

o User: The replica server user name, as specified on the replica with
  the --report-user option. Statement output includes this column only
  if the source server is started with the --show-replica-auth-info or
  --show-slave-auth-info option.

o Password: The replica server password, as specified on the replica
  with the --report-password option. Statement output includes this
  column only if the source server is started with the
  --show-replica-auth-info or --show-slave-auth-info option.

o Port: The port on the source to which the replica server is
  listening, as specified on the replica with the --report-port option.

  A zero in this column means that the replica port (--report-port) was
  not set.

o Source_id: The unique server ID of the source server that the replica
  server is replicating from. This is the server ID of the server on
  which SHOW REPLICAS is executed, so this same value is listed for
  each row in the result.

o Replica_UUID: The globally unique ID of this replica, as generated on
  the replica and found in the replica's auto.cnf file.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-replicas.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-replicas.html</field>
	</row>
	<row>
		<field name="help_topic_id">679</field>
		<field name="name">SHOW SLAVE HOSTS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
{SHOW SLAVE HOSTS | SHOW REPLICAS}

Displays a list of replicas currently registered with the source. From
MySQL 8.0.22, SHOW SLAVE HOSTS is deprecated and the alias SHOW
REPLICAS should be used instead. The statement works in the same way as
before, only the terminology used for the statement and its output has
changed. Both versions of the statement update the same status
variables when used. Please see the documentation for SHOW REPLICAS for
a description of the statement.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-slave-hosts.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-slave-hosts.html</field>
	</row>
	<row>
		<field name="help_topic_id">680</field>
		<field name="name">SHOW REPLICA STATUS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW {REPLICA | SLAVE} STATUS [FOR CHANNEL channel]

This statement provides status information on essential parameters of
the replica threads. From MySQL 8.0.22, use SHOW REPLICA STATUS in
place of SHOW SLAVE STATUS, which is deprecated from that release. In
releases before MySQL 8.0.22, use SHOW SLAVE STATUS. The statement
requires the REPLICATION CLIENT privilege (or the deprecated SUPER
privilege).

SHOW REPLICA STATUS is nonblocking. When run concurrently with STOP
REPLICA, SHOW REPLICA STATUS returns without waiting for STOP REPLICA
to finish shutting down the replication SQL (applier) thread or
replication I/O (receiver) thread (or both). This permits use in
monitoring and other applications where getting an immediate response
from SHOW REPLICA STATUS is more important than ensuring that it
returned the latest data. The SLAVE keyword was replaced with REPLICA
in MySQL 8.0.22.

If you issue this statement using the mysql client, you can use a \G
statement terminator rather than a semicolon to obtain a more readable
vertical layout:

mysql&gt; SHOW REPLICA STATUS\G
*************************** 1. row ***************************
             Replica_IO_State: Waiting for source to send event
                  Source_Host: localhost
                  Source_User: repl
                  Source_Port: 13000
                Connect_Retry: 60
              Source_Log_File: source-bin.000002
          Read_Source_Log_Pos: 1307
               Relay_Log_File: replica-relay-bin.000003
                Relay_Log_Pos: 1508
        Relay_Source_Log_File: source-bin.000002
           Replica_IO_Running: Yes
          Replica_SQL_Running: Yes
              Replicate_Do_DB:
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Source_Log_Pos: 1307
              Relay_Log_Space: 1858
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Source_SSL_Allowed: No
           Source_SSL_CA_File:
           Source_SSL_CA_Path:
              Source_SSL_Cert:
            Source_SSL_Cipher:
               Source_SSL_Key:
        Seconds_Behind_Source: 0
Source_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Source_Server_Id: 1
                  Source_UUID: 3e11fa47-71ca-11e1-9e33-c80aa9429562
             Source_Info_File:
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
    Replica_SQL_Running_State: Reading event from the relay log
           Source_Retry_Count: 10
                  Source_Bind:
      Last_IO_Error_Timestamp:
     Last_SQL_Error_Timestamp:
               Source_SSL_Crl:
           Source_SSL_Crlpath:
           Retrieved_Gtid_Set: 3e11fa47-71ca-11e1-9e33-c80aa9429562:1-5
            Executed_Gtid_Set: 3e11fa47-71ca-11e1-9e33-c80aa9429562:1-5
                Auto_Position: 1
         Replicate_Rewrite_DB:
                 Channel_name:
           Source_TLS_Version: TLSv1.2
       Source_public_key_path: public_key.pem
        Get_source_public_key: 0
            Network_Namespace:

The Performance Schema provides tables that expose replication
information. This is similar to the information available from the SHOW
REPLICA STATUS statement, but represented in table form. For details,
see
https://dev.mysql.com/doc/refman/8.0/en/performance-schema-replication-
tables.html.

From MySQL 8.0.27, you can set the GTID_ONLY option on the CHANGE
REPLICATION SOURCE TO statement to stop a replication channel from
persisting file names and file positions in the replication metadata
repositories. With this setting, file positions for the source binary
log file and the relay log file are tracked in memory. The SHOW REPLICA
STATUS statement still displays file positions in normal use. However,
because the file positions are not being regularly updated in the
connection metadata repository and the applier metadata repository
except in a few situations, they are likely to be out of date if the
server is restarted.

For a replication channel with the GTID_ONLY setting after a server
start, the read and applied file positions for the source binary log
file (Read_Source_Log_Pos and Exec_Source_Log_Pos) are set to zero, and
the file names (Source_Log_File and Relay_Source_Log_File) are set to
INVALID. The relay log file name (Relay_Log_File) is set according to
the relay_log_recovery setting, either a new file that was created at
server start or the first relay log file present. The file position
(Relay_Log_Pos) is set to position 4, and GTID auto-skip is used to
skip any transactions in the file that were already applied.

When the receiver thread contacts the source and gets valid position
information, the read position (Read_Source_Log_Pos) and file name
(Source_Log_File) are updated with the correct data and become valid.
When the applier thread applies a transaction from the source, or skips
an already executed transaction, the executed position
(Exec_Source_Log_Pos) and file name (Relay_Source_Log_File) are updated
with the correct data and become valid. The relay log file position
(Relay_Log_Pos) is also updated at that time.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-replica-status.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-replica-status.html</field>
	</row>
	<row>
		<field name="help_topic_id">681</field>
		<field name="name">SHOW SLAVE STATUS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW {SLAVE | REPLICA} STATUS [FOR CHANNEL channel]

This statement provides status information on essential parameters of
the replica threads. From MySQL 8.0.22, SHOW SLAVE STATUS is deprecated
and the alias SHOW REPLICA STATUS should be used instead. The statement
works in the same way as before, only the terminology used for the
statement and its output has changed. Both versions of the statement
update the same status variables when used. Please see the
documentation for SHOW REPLICA STATUS for a description of the
statement.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-slave-status.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-slave-status.html</field>
	</row>
	<row>
		<field name="help_topic_id">682</field>
		<field name="name">SHOW STATUS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW [GLOBAL | SESSION] STATUS
    [LIKE 'pattern' | WHERE expr]

SHOW STATUS provides server status information (see
https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html).
This statement does not require any privilege. It requires only the
ability to connect to the server.

Status variable information is also available from these sources:

o Performance Schema tables. See
  https://dev.mysql.com/doc/refman/8.0/en/performance-schema-status-var
  iable-tables.html.

o The mysqladmin extended-status command. See
  https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html.

For SHOW STATUS, a LIKE clause, if present, indicates which variable
names to match. A WHERE clause can be given to select rows using more
general conditions, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

SHOW STATUS accepts an optional GLOBAL or SESSION variable scope
modifier:

o With a GLOBAL modifier, the statement displays the global status
  values. A global status variable may represent status for some aspect
  of the server itself (for example, Aborted_connects), or the
  aggregated status over all connections to MySQL (for example,
  Bytes_received and Bytes_sent). If a variable has no global value,
  the session value is displayed.

o With a SESSION modifier, the statement displays the status variable
  values for the current connection. If a variable has no session
  value, the global value is displayed. LOCAL is a synonym for SESSION.

o If no modifier is present, the default is SESSION.

The scope for each status variable is listed at
https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html.

Each invocation of the SHOW STATUS statement uses an internal temporary
table and increments the global Created_tmp_tables value.

With a LIKE clause, the statement displays only rows for those
variables with names that match the pattern:

mysql&gt; SHOW STATUS LIKE 'Key%';
+--------------------+----------+
| Variable_name      | Value    |
+--------------------+----------+
| Key_blocks_used    | 14955    |
| Key_read_requests  | 96854827 |
| Key_reads          | 162040   |
| Key_write_requests | 7589728  |
| Key_writes         | 3813196  |
+--------------------+----------+

URL: https://dev.mysql.com/doc/refman/8.0/en/show-status.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-status.html</field>
	</row>
	<row>
		<field name="help_topic_id">683</field>
		<field name="name">SHOW TABLE STATUS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW TABLE STATUS
    [{FROM | IN} db_name]
    [LIKE 'pattern' | WHERE expr]

SHOW TABLE STATUS works likes SHOW TABLES, but provides a lot of
information about each non-TEMPORARY table. You can also get this list
using the mysqlshow --status db_name command. The LIKE clause, if
present, indicates which table names to match. The WHERE clause can be
given to select rows using more general conditions, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-table-status.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-table-status.html</field>
	</row>
	<row>
		<field name="help_topic_id">684</field>
		<field name="name">SHOW TABLES</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW [EXTENDED] [FULL] TABLES
    [{FROM | IN} db_name]
    [LIKE 'pattern' | WHERE expr]

SHOW TABLES lists the non-TEMPORARY tables in a given database. You can
also get this list using the mysqlshow db_name command. The LIKE
clause, if present, indicates which table names to match. The WHERE
clause can be given to select rows using more general conditions, as
discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

Matching performed by the LIKE clause is dependent on the setting of
the lower_case_table_names system variable.

The optional EXTENDED modifier causes SHOW TABLES to list hidden tables
created by failed ALTER TABLE statements. These temporary tables have
names beginning with #sql and can be dropped using DROP TABLE.

This statement also lists any views in the database. The optional FULL
modifier causes SHOW TABLES to display a second output column with
values of BASE TABLE for a table, VIEW for a view, or SYSTEM VIEW for
an INFORMATION_SCHEMA table.

If you have no privileges for a base table or view, it does not show up
in the output from SHOW TABLES or mysqlshow db_name.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-tables.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-tables.html</field>
	</row>
	<row>
		<field name="help_topic_id">685</field>
		<field name="name">SHOW TRIGGERS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW TRIGGERS
    [{FROM | IN} db_name]
    [LIKE 'pattern' | WHERE expr]

SHOW TRIGGERS lists the triggers currently defined for tables in a
database (the default database unless a FROM clause is given). This
statement returns results only for databases and tables for which you
have the TRIGGER privilege. The LIKE clause, if present, indicates
which table names (not trigger names) to match and causes the statement
to display triggers for those tables. The WHERE clause can be given to
select rows using more general conditions, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

For the ins_sum trigger defined in
https://dev.mysql.com/doc/refman/8.0/en/triggers.html, the output of
SHOW TRIGGERS is as shown here:

mysql&gt; SHOW TRIGGERS LIKE 'acc%'\G
*************************** 1. row ***************************
             Trigger: ins_sum
               Event: INSERT
               Table: account
           Statement: SET @sum = @sum + NEW.amount
              Timing: BEFORE
             Created: 2018-08-08 10:10:12.61
            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,
                      NO_ZERO_IN_DATE,NO_ZERO_DATE,
                      ERROR_FOR_DIVISION_BY_ZERO,
                      NO_ENGINE_SUBSTITUTION
             Definer: me@localhost
character_set_client: utf8mb4
collation_connection: utf8mb4_0900_ai_ci
  Database Collation: utf8mb4_0900_ai_ci

URL: https://dev.mysql.com/doc/refman/8.0/en/show-triggers.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-triggers.html</field>
	</row>
	<row>
		<field name="help_topic_id">686</field>
		<field name="name">SHOW VARIABLES</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW [GLOBAL | SESSION] VARIABLES
    [LIKE 'pattern' | WHERE expr]

SHOW VARIABLES shows the values of MySQL system variables (see
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html).
This statement does not require any privilege. It requires only the
ability to connect to the server.

System variable information is also available from these sources:

o Performance Schema tables. See
  https://dev.mysql.com/doc/refman/8.0/en/performance-schema-system-var
  iable-tables.html.

o The mysqladmin variables command. See
  https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html.

For SHOW VARIABLES, a LIKE clause, if present, indicates which variable
names to match. A WHERE clause can be given to select rows using more
general conditions, as discussed in
https://dev.mysql.com/doc/refman/8.0/en/extended-show.html.

SHOW VARIABLES accepts an optional GLOBAL or SESSION variable scope
modifier:

o With a GLOBAL modifier, the statement displays global system variable
  values. These are the values used to initialize the corresponding
  session variables for new connections to MySQL. If a variable has no
  global value, no value is displayed.

o With a SESSION modifier, the statement displays the system variable
  values that are in effect for the current connection. If a variable
  has no session value, the global value is displayed. LOCAL is a
  synonym for SESSION.

o If no modifier is present, the default is SESSION.

The scope for each system variable is listed at
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html.

SHOW VARIABLES is subject to a version-dependent display-width limit.
For variables with very long values that are not completely displayed,
use SELECT as a workaround. For example:

SELECT @@GLOBAL.innodb_data_file_path;

Most system variables can be set at server startup (read-only variables
such as version_comment are exceptions). Many can be changed at runtime
with the SET statement. See
https://dev.mysql.com/doc/refman/8.0/en/using-system-variables.html,
and [HELP SET].

With a LIKE clause, the statement displays only rows for those
variables with names that match the pattern. To obtain the row for a
specific variable, use a LIKE clause as shown:

SHOW VARIABLES LIKE 'max_join_size';
SHOW SESSION VARIABLES LIKE 'max_join_size';

To get a list of variables whose name match a pattern, use the %
wildcard character in a LIKE clause:

SHOW VARIABLES LIKE '%size%';
SHOW GLOBAL VARIABLES LIKE '%size%';

Wildcard characters can be used in any position within the pattern to
be matched. Strictly speaking, because _ is a wildcard that matches any
single character, you should escape it as \_ to match it literally. In
practice, this is rarely necessary.

URL: https://dev.mysql.com/doc/refman/8.0/en/show-variables.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-variables.html</field>
	</row>
	<row>
		<field name="help_topic_id">687</field>
		<field name="name">SHOW WARNINGS</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHOW WARNINGS [LIMIT [offset,] row_count]
SHOW COUNT(*) WARNINGS

SHOW WARNINGS is a diagnostic statement that displays information about
the conditions (errors, warnings, and notes) resulting from executing a
statement in the current session. Warnings are generated for DML
statements such as INSERT, UPDATE, and LOAD DATA as well as DDL
statements such as CREATE TABLE and ALTER TABLE.

The LIMIT clause has the same syntax as for the SELECT statement. See
https://dev.mysql.com/doc/refman/8.0/en/select.html.

SHOW WARNINGS is also used following EXPLAIN, to display the extended
information generated by EXPLAIN. See
https://dev.mysql.com/doc/refman/8.0/en/explain-extended.html.

SHOW WARNINGS displays information about the conditions resulting from
execution of the most recent nondiagnostic statement in the current
session. If the most recent statement resulted in an error during
parsing, SHOW WARNINGS shows the resulting conditions, regardless of
statement type (diagnostic or nondiagnostic).

The SHOW COUNT(*) WARNINGS diagnostic statement displays the total
number of errors, warnings, and notes. You can also retrieve this
number from the warning_count system variable:

SHOW COUNT(*) WARNINGS;
SELECT @@warning_count;

A difference in these statements is that the first is a diagnostic
statement that does not clear the message list. The second, because it
is a SELECT statement is considered nondiagnostic and does clear the
message list.

A related diagnostic statement, SHOW ERRORS, shows only error
conditions (it excludes warnings and notes), and SHOW COUNT(*) ERRORS
statement displays the total number of errors. See [HELP SHOW ERRORS].
GET DIAGNOSTICS can be used to examine information for individual
conditions. See [HELP GET DIAGNOSTICS].

URL: https://dev.mysql.com/doc/refman/8.0/en/show-warnings.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/show-warnings.html</field>
	</row>
	<row>
		<field name="help_topic_id">688</field>
		<field name="name">BINLOG</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
BINLOG 'str'

BINLOG is an internal-use statement. It is generated by the mysqlbinlog
program as the printable representation of certain events in binary log
files. (See https://dev.mysql.com/doc/refman/8.0/en/mysqlbinlog.html.)
The 'str' value is a base 64-encoded string the that server decodes to
determine the data change indicated by the corresponding event.

To execute BINLOG statements when applying mysqlbinlog output, a user
account requires the BINLOG_ADMIN privilege (or the deprecated SUPER
privilege), or the REPLICATION_APPLIER privilege plus the appropriate
privileges to execute each log event.

URL: https://dev.mysql.com/doc/refman/8.0/en/binlog.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/binlog.html</field>
	</row>
	<row>
		<field name="help_topic_id">689</field>
		<field name="name">CACHE INDEX</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
CACHE INDEX {
      tbl_index_list [, tbl_index_list] ...
    | tbl_name PARTITION (partition_list)
  }
  IN key_cache_name

tbl_index_list:
  tbl_name [{INDEX|KEY} (index_name[, index_name] ...)]

partition_list: {
    partition_name[, partition_name] ...
  | ALL
}

The CACHE INDEX statement assigns table indexes to a specific key
cache. It applies only to MyISAM tables, including partitioned MyISAM
tables. After the indexes have been assigned, they can be preloaded
into the cache if desired with LOAD INDEX INTO CACHE.

The following statement assigns indexes from the tables t1, t2, and t3
to the key cache named hot_cache:

mysql&gt; CACHE INDEX t1, t2, t3 IN hot_cache;
+---------+--------------------+----------+----------+
| Table   | Op                 | Msg_type | Msg_text |
+---------+--------------------+----------+----------+
| test.t1 | assign_to_keycache | status   | OK       |
| test.t2 | assign_to_keycache | status   | OK       |
| test.t3 | assign_to_keycache | status   | OK       |
+---------+--------------------+----------+----------+

URL: https://dev.mysql.com/doc/refman/8.0/en/cache-index.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/cache-index.html</field>
	</row>
	<row>
		<field name="help_topic_id">690</field>
		<field name="name">FLUSH</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
FLUSH [NO_WRITE_TO_BINLOG | LOCAL] {
    flush_option [, flush_option] ...
  | tables_option
}

flush_option: {
    BINARY LOGS
  | ENGINE LOGS
  | ERROR LOGS
  | GENERAL LOGS
  | HOSTS
  | LOGS
  | PRIVILEGES
  | OPTIMIZER_COSTS
  | RELAY LOGS [FOR CHANNEL channel]
  | SLOW LOGS
  | STATUS
  | USER_RESOURCES
}

tables_option: {
    TABLES
  | TABLES tbl_name [, tbl_name] ...
  | TABLES WITH READ LOCK
  | TABLES tbl_name [, tbl_name] ... WITH READ LOCK
  | TABLES tbl_name [, tbl_name] ... FOR EXPORT
}

The FLUSH statement has several variant forms that clear or reload
various internal caches, flush tables, or acquire locks. Each FLUSH
operation requires the privileges indicated in its description.

*Note*:

It is not possible to issue FLUSH statements within stored functions or
triggers. However, you may use FLUSH in stored procedures, so long as
these are not called from stored functions or triggers. See
https://dev.mysql.com/doc/refman/8.0/en/stored-program-restrictions.html
.

By default, the server writes FLUSH statements to the binary log so
that they replicate to replicas. To suppress logging, specify the
optional NO_WRITE_TO_BINLOG keyword or its alias LOCAL.

*Note*:

FLUSH LOGS, FLUSH BINARY LOGS, FLUSH TABLES WITH READ LOCK (with or
without a table list), and FLUSH TABLES tbl_name ... FOR EXPORT are not
written to the binary log in any case because they would cause problems
if replicated to a replica.

The FLUSH statement causes an implicit commit. See
https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html.

The mysqladmin utility provides a command-line interface to some flush
operations, using commands such as flush-hosts, flush-logs,
flush-privileges, flush-status, and flush-tables. See
https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html.

Sending a SIGHUP or SIGUSR1 signal to the server causes several flush
operations to occur that are similar to various forms of the FLUSH
statement. Signals can be sent by the root system account or the system
account that owns the server process. This enables the flush operations
to be performed without having to connect to the server, which requires
a MySQL account that has privileges sufficient for those operations.
See https://dev.mysql.com/doc/refman/8.0/en/unix-signal-response.html.

The RESET statement is similar to FLUSH. See [HELP RESET], for
information about using RESET with replication.

URL: https://dev.mysql.com/doc/refman/8.0/en/flush.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/flush.html</field>
	</row>
	<row>
		<field name="help_topic_id">691</field>
		<field name="name">KILL</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
KILL [CONNECTION | QUERY] processlist_id

Each connection to mysqld runs in a separate thread. You can kill a
thread with the KILL processlist_id statement.

Thread processlist identifiers can be determined from the ID column of
the INFORMATION_SCHEMA PROCESSLIST table, the Id column of SHOW
PROCESSLIST output, and the PROCESSLIST_ID column of the Performance
Schema threads table. The value for the current thread is returned by
the CONNECTION_ID() function.

KILL permits an optional CONNECTION or QUERY modifier:

o KILL CONNECTION is the same as KILL with no modifier: It terminates
  the connection associated with the given processlist_id, after
  terminating any statement the connection is executing.

o KILL QUERY terminates the statement the connection is currently
  executing, but leaves the connection itself intact.

The ability to see which threads are available to be killed depends on
the PROCESS privilege:

o Without PROCESS, you can see only your own threads.

o With PROCESS, you can see all threads.

The ability to kill threads and statements depends on the
CONNECTION_ADMIN privilege and the deprecated SUPER privilege:

o Without CONNECTION_ADMIN or SUPER, you can kill only your own threads
  and statements.

o With CONNECTION_ADMIN or SUPER, you can kill all threads and
  statements, except that to affect a thread or statement that is
  executing with the SYSTEM_USER privilege, your own session must
  additionally have the SYSTEM_USER privilege.

You can also use the mysqladmin processlist and mysqladmin kill
commands to examine and kill threads.

URL: https://dev.mysql.com/doc/refman/8.0/en/kill.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/kill.html</field>
	</row>
	<row>
		<field name="help_topic_id">692</field>
		<field name="name">LOAD INDEX</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
LOAD INDEX INTO CACHE
  tbl_index_list [, tbl_index_list] ...

tbl_index_list:
  tbl_name
    [PARTITION (partition_list)]
    [{INDEX|KEY} (index_name[, index_name] ...)]
    [IGNORE LEAVES]

partition_list: {
    partition_name[, partition_name] ...
  | ALL
}

The LOAD INDEX INTO CACHE statement preloads a table index into the key
cache to which it has been assigned by an explicit CACHE INDEX
statement, or into the default key cache otherwise.

LOAD INDEX INTO CACHE applies only to MyISAM tables, including
partitioned MyISAM tables. In addition, indexes on partitioned tables
can be preloaded for one, several, or all partitions.

The IGNORE LEAVES modifier causes only blocks for the nonleaf nodes of
the index to be preloaded.

IGNORE LEAVES is also supported for partitioned MyISAM tables.

URL: https://dev.mysql.com/doc/refman/8.0/en/load-index.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/load-index.html</field>
	</row>
	<row>
		<field name="help_topic_id">693</field>
		<field name="name">RESET</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
RESET reset_option [, reset_option] ...

reset_option: {
    MASTER
  | REPLICA
  | SLAVE
}

The RESET statement is used to clear the state of various server
operations. You must have the RELOAD privilege to execute RESET.

For information about the RESET PERSIST statement that removes
persisted global system variables, see [HELP RESET PERSIST].

RESET acts as a stronger version of the FLUSH statement. See [HELP
FLUSH].

The RESET statement causes an implicit commit. See
https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html.

The following list describes the permitted RESET statement reset_option
values:

o RESET MASTER

  Deletes all binary logs listed in the index file, resets the binary
  log index file to be empty, and creates a new binary log file.

o RESET REPLICA

  Makes the replica forget its replication position in the source
  binary logs. Also resets the relay log by deleting any existing relay
  log files and beginning a new one. Use RESET REPLICA in place of
  RESET SLAVE from MySQL 8.0.22.

URL: https://dev.mysql.com/doc/refman/8.0/en/reset.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/reset.html</field>
	</row>
	<row>
		<field name="help_topic_id">694</field>
		<field name="name">RESET PERSIST</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
RESET PERSIST [[IF EXISTS] system_var_name]

RESET PERSIST removes persisted global system variable settings from
the mysqld-auto.cnf option file in the data directory. Removing a
persisted system variable causes the variable no longer to be
initialized from mysqld-auto.cnf at server startup. For more
information about persisting system variables and the mysqld-auto.cnf
file, see
https://dev.mysql.com/doc/refman/8.0/en/persisted-system-variables.html
.

Prior to MySQL 8.0.32, this statement did not work with variables whose
name contained a dot character (.), such as MyISAM multiple key cache
variables and variables registered by components. (Bug #33417357)

The privileges required for RESET PERSIST depend on the type of system
variable to be removed:

o For dynamic system variables, this statement requires the
  SYSTEM_VARIABLES_ADMIN privilege (or the deprecated SUPER privilege).

o For read-only system variables, this statement requires the
  SYSTEM_VARIABLES_ADMIN and PERSIST_RO_VARIABLES_ADMIN privileges.

See
https://dev.mysql.com/doc/refman/8.0/en/system-variable-privileges.html
.

Depending on whether the variable name and IF EXISTS clauses are
present, the RESET PERSIST statement has these forms:

o To remove all persisted variables from mysqld-auto.cnf, use RESET
  PERSIST without naming any system variable:

RESET PERSIST;

  You must have privileges for removing both dynamic and read-only
  system variables if mysqld-auto.cnf contains both kinds of variables.

o To remove a specific persisted variable from mysqld-auto.cnf, name it
  in the statement:

RESET PERSIST system_var_name;

  This includes plugin system variables, even if the plugin is not
  currently installed. If the variable is not present in the file, an
  error occurs.

o To remove a specific persisted variable from mysqld-auto.cnf, but
  produce a warning rather than an error if the variable is not present
  in the file, add an IF EXISTS clause to the previous syntax:

RESET PERSIST IF EXISTS system_var_name;

URL: https://dev.mysql.com/doc/refman/8.0/en/reset-persist.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/reset-persist.html</field>
	</row>
	<row>
		<field name="help_topic_id">695</field>
		<field name="name">RESTART</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
RESTART

This statement stops and restarts the MySQL server. It requires the
SHUTDOWN privilege.

One use for RESTART is when it is not possible or convenient to gain
command-line access to the MySQL server on the server host to restart
it. For example, SET PERSIST_ONLY can be used at runtime to make
configuration changes to system variables that can be set only at
server startup, but the server must still be restarted for those
changes to take effect. The RESTART statement provides a way to do so
from within client sessions, without requiring command-line access on
the server host.

*Note*:

After executing a RESTART statement, the client can expect the current
connection to be lost. If auto-reconnect is enabled, the connection is
reestablished after the server restarts. Otherwise, the connection must
be reestablished manually.

A successful RESTART operation requires mysqld to be running in an
environment that has a monitoring process available to detect a server
shutdown performed for restart purposes:

o In the presence of a monitoring process, RESTART causes mysqld to
  terminate such that the monitoring process can determine that it
  should start a new mysqld instance.

o If no monitoring process is present, RESTART fails with an error.

These platforms provide the necessary monitoring support for the
RESTART statement:

o Windows, when mysqld is started as a Windows service or standalone.
  (mysqld forks, and one process acts as a monitor to the other, which
  acts as the server.)

o Unix and Unix-like systems that use systemd or mysqld_safe to manage
  mysqld.

To configure a monitoring environment such that mysqld enables the
RESTART statement:

1. Set the MYSQLD_PARENT_PID environment variable to the value of the
   process ID of the process that starts mysqld, before starting
   mysqld.

2. When mysqld performs a shutdown due to use of the RESTART statement,
   it returns exit code 16.

3. When the monitoring process detects an exit code of 16, it starts
   mysqld again. Otherwise, it exits.

Here is a minimal example as implemented in the bash shell:

#!/bin/bash

export MYSQLD_PARENT_PID=$$

export MYSQLD_RESTART_EXIT=16

while true ; do
  bin/mysqld mysqld options here
  if [ $? -ne $MYSQLD_RESTART_EXIT ]; then
    break
  fi
done

On Windows, the forking used to implement RESTART makes determining the
server process to attach to for debugging more difficult. To alleviate
this, starting the server with --gdb suppresses forking, in addition to
its other actions done to set up a debugging environment. In non-debug
settings, --no-monitor may be used for the sole purpose of suppressing
forking the monitor process. For a server started with either --gdb or
--no-monitor, executing RESTART causes the server to simply exit
without restarting.

URL: https://dev.mysql.com/doc/refman/8.0/en/restart.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/restart.html</field>
	</row>
	<row>
		<field name="help_topic_id">696</field>
		<field name="name">SHUTDOWN</field>
		<field name="help_category_id">3</field>
		<field name="description">Syntax:
SHUTDOWN

This statement stops the MySQL server. It requires the SHUTDOWN
privilege.

SHUTDOWN provides an SQL-level interface to the same functionality
available using the mysqladmin shutdown command or the mysql_shutdown()
(https://dev.mysql.com/doc/c-api/8.0/en/mysql-shutdown.html) C API
function. A successful SHUTDOWN sequence consists of checking the
privileges, validating the arguments, and sending an OK packet to the
client. Then the server is shut down.

URL: https://dev.mysql.com/doc/refman/8.0/en/shutdown.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/shutdown.html</field>
	</row>
	<row>
		<field name="help_topic_id">697</field>
		<field name="name">EXPLAIN</field>
		<field name="help_category_id">51</field>
		<field name="description">Syntax:
{EXPLAIN | DESCRIBE | DESC}
    tbl_name [col_name | wild]

{EXPLAIN | DESCRIBE | DESC}
    [explain_type]
    {explainable_stmt | FOR CONNECTION connection_id}

{EXPLAIN | DESCRIBE | DESC} ANALYZE [FORMAT = TREE] select_statement

explain_type: {
    FORMAT = format_name
}

format_name: {
    TRADITIONAL
  | JSON
  | TREE
}

explainable_stmt: {
    SELECT statement
  | TABLE statement
  | DELETE statement
  | INSERT statement
  | REPLACE statement
  | UPDATE statement
}

The DESCRIBE and EXPLAIN statements are synonyms. In practice, the
DESCRIBE keyword is more often used to obtain information about table
structure, whereas EXPLAIN is used to obtain a query execution plan
(that is, an explanation of how MySQL would execute a query).

URL: https://dev.mysql.com/doc/refman/8.0/en/explain.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/explain.html</field>
	</row>
	<row>
		<field name="help_topic_id">698</field>
		<field name="name">DESCRIBE</field>
		<field name="help_category_id">51</field>
		<field name="description">Syntax:
{EXPLAIN | DESCRIBE | DESC}
    tbl_name [col_name | wild]

{EXPLAIN | DESCRIBE | DESC}
    [explain_type]
    {explainable_stmt | FOR CONNECTION connection_id}

{EXPLAIN | DESCRIBE | DESC} ANALYZE [FORMAT = TREE] select_statement

explain_type: {
    FORMAT = format_name
}

format_name: {
    TRADITIONAL
  | JSON
  | TREE
}

explainable_stmt: {
    SELECT statement
  | TABLE statement
  | DELETE statement
  | INSERT statement
  | REPLACE statement
  | UPDATE statement
}

The DESCRIBE and EXPLAIN statements are synonyms. In practice, the
DESCRIBE keyword is more often used to obtain information about table
structure, whereas EXPLAIN is used to obtain a query execution plan
(that is, an explanation of how MySQL would execute a query).

URL: https://dev.mysql.com/doc/refman/8.0/en/explain.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/explain.html</field>
	</row>
	<row>
		<field name="help_topic_id">699</field>
		<field name="name">DESC</field>
		<field name="help_category_id">51</field>
		<field name="description">Syntax:
{EXPLAIN | DESCRIBE | DESC}
    tbl_name [col_name | wild]

{EXPLAIN | DESCRIBE | DESC}
    [explain_type]
    {explainable_stmt | FOR CONNECTION connection_id}

{EXPLAIN | DESCRIBE | DESC} ANALYZE [FORMAT = TREE] select_statement

explain_type: {
    FORMAT = format_name
}

format_name: {
    TRADITIONAL
  | JSON
  | TREE
}

explainable_stmt: {
    SELECT statement
  | TABLE statement
  | DELETE statement
  | INSERT statement
  | REPLACE statement
  | UPDATE statement
}

The DESCRIBE and EXPLAIN statements are synonyms. In practice, the
DESCRIBE keyword is more often used to obtain information about table
structure, whereas EXPLAIN is used to obtain a query execution plan
(that is, an explanation of how MySQL would execute a query).

URL: https://dev.mysql.com/doc/refman/8.0/en/explain.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/explain.html</field>
	</row>
	<row>
		<field name="help_topic_id">700</field>
		<field name="name">HELP STATEMENT</field>
		<field name="help_category_id">51</field>
		<field name="description">Syntax:
HELP 'search_string'

The HELP statement returns online information from the MySQL Reference
Manual. Its proper operation requires that the help tables in the mysql
database be initialized with help topic information (see
https://dev.mysql.com/doc/refman/8.0/en/server-side-help-support.html).

The HELP statement searches the help tables for the given search string
and displays the result of the search. The search string is not
case-sensitive.

The search string can contain the wildcard characters % and _. These
have the same meaning as for pattern-matching operations performed with
the LIKE operator. For example, HELP 'rep%' returns a list of topics
that begin with rep.

The HELP statement does not require a terminator such as ; or \G.

URL: https://dev.mysql.com/doc/refman/8.0/en/help.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/help.html</field>
	</row>
	<row>
		<field name="help_topic_id">701</field>
		<field name="name">USE</field>
		<field name="help_category_id">51</field>
		<field name="description">Syntax:
USE db_name

The USE statement tells MySQL to use the named database as the default
(current) database for subsequent statements. This statement requires
some privilege for the database or some object within it.

The named database remains the default until the end of the session or
another USE statement is issued:

USE db1;
SELECT COUNT(*) FROM mytable;   # selects from db1.mytable
USE db2;
SELECT COUNT(*) FROM mytable;   # selects from db2.mytable

The database name must be specified on a single line. Newlines in
database names are not supported.

URL: https://dev.mysql.com/doc/refman/8.0/en/use.html

</field>
		<field name="example"></field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/use.html</field>
	</row>
	<row>
		<field name="help_topic_id">702</field>
		<field name="name">MERGE</field>
		<field name="help_category_id">52</field>
		<field name="description">The MERGE storage engine, also known as the MRG_MyISAM engine, is a
collection of identical MyISAM tables that can be used as one.
&quot;Identical&quot; means that all tables have identical column data types and
index information. You cannot merge MyISAM tables in which the columns
are listed in a different order, do not have exactly the same data
types in corresponding columns, or have the indexes in different order.
However, any or all of the MyISAM tables can be compressed with
myisampack. See
https://dev.mysql.com/doc/refman/8.0/en/myisampack.html. Differences
between tables such as these do not matter:

o Names of corresponding columns and indexes can differ.

o Comments for tables, columns, and indexes can differ.

o Table options such as AVG_ROW_LENGTH, MAX_ROWS, or PACK_KEYS can
  differ.

URL: https://dev.mysql.com/doc/refman/8.0/en/merge-storage-engine.html

</field>
		<field name="example">mysql&gt; CREATE TABLE t1 (
    -&gt;    a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -&gt;    message CHAR(20)) ENGINE=MyISAM;
mysql&gt; CREATE TABLE t2 (
    -&gt;    a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -&gt;    message CHAR(20)) ENGINE=MyISAM;
mysql&gt; INSERT INTO t1 (message) VALUES ('Testing'),('table'),('t1');
mysql&gt; INSERT INTO t2 (message) VALUES ('Testing'),('table'),('t2');
mysql&gt; CREATE TABLE total (
    -&gt;    a INT NOT NULL AUTO_INCREMENT,
    -&gt;    message CHAR(20), INDEX(a))
    -&gt;    ENGINE=MERGE UNION=(t1,t2) INSERT_METHOD=LAST;
</field>
		<field name="url">https://dev.mysql.com/doc/refman/8.0/en/merge-storage-engine.html</field>
	</row>
	</table_data>
	<table_structure name="innodb_index_stats">
		<field Field="database_name" Type="varchar(64)" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="table_name" Type="varchar(199)" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="index_name" Type="varchar(64)" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="last_update" Type="timestamp" Null="NO" Key="" Default="CURRENT_TIMESTAMP" Extra="DEFAULT_GENERATED on update CURRENT_TIMESTAMP" Comment="" />
		<field Field="stat_name" Type="varchar(64)" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="stat_value" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="sample_size" Type="bigint unsigned" Null="YES" Key="" Extra="" Comment="" />
		<field Field="stat_description" Type="varchar(1024)" Null="NO" Key="" Extra="" Comment="" />
		<key Table="innodb_index_stats" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="database_name" Collation="A" Cardinality="4" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="innodb_index_stats" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="table_name" Collation="A" Cardinality="6" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="innodb_index_stats" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="index_name" Collation="A" Cardinality="6" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="innodb_index_stats" Non_unique="0" Key_name="PRIMARY" Seq_in_index="4" Column_name="stat_name" Collation="A" Cardinality="18" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="innodb_index_stats" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="18" Avg_row_length="910" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-30 10:37:02" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="" />
	</table_structure>
	<table_data name="innodb_index_stats">
	<row>
		<field name="database_name">mysql</field>
		<field name="table_name">component</field>
		<field name="index_name">PRIMARY</field>
		<field name="last_update">2024-01-31 06:24:08</field>
		<field name="stat_name">n_diff_pfx01</field>
		<field name="stat_value">0</field>
		<field name="sample_size">1</field>
		<field name="stat_description">component_id</field>
	</row>
	<row>
		<field name="database_name">mysql</field>
		<field name="table_name">component</field>
		<field name="index_name">PRIMARY</field>
		<field name="last_update">2024-01-31 06:24:08</field>
		<field name="stat_name">n_leaf_pages</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of leaf pages in the index</field>
	</row>
	<row>
		<field name="database_name">mysql</field>
		<field name="table_name">component</field>
		<field name="index_name">PRIMARY</field>
		<field name="last_update">2024-01-31 06:24:08</field>
		<field name="stat_name">size</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of pages in the index</field>
	</row>
	<row>
		<field name="database_name">sys</field>
		<field name="table_name">sys_config</field>
		<field name="index_name">PRIMARY</field>
		<field name="last_update">2024-01-30 10:37:08</field>
		<field name="stat_name">n_diff_pfx01</field>
		<field name="stat_value">6</field>
		<field name="sample_size">1</field>
		<field name="stat_description">variable</field>
	</row>
	<row>
		<field name="database_name">sys</field>
		<field name="table_name">sys_config</field>
		<field name="index_name">PRIMARY</field>
		<field name="last_update">2024-01-30 10:37:08</field>
		<field name="stat_name">n_leaf_pages</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of leaf pages in the index</field>
	</row>
	<row>
		<field name="database_name">sys</field>
		<field name="table_name">sys_config</field>
		<field name="index_name">PRIMARY</field>
		<field name="last_update">2024-01-30 10:37:08</field>
		<field name="stat_name">size</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of pages in the index</field>
	</row>
	<row>
		<field name="database_name">test1</field>
		<field name="table_name">Persons</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:43:08</field>
		<field name="stat_name">n_diff_pfx01</field>
		<field name="stat_value">0</field>
		<field name="sample_size">1</field>
		<field name="stat_description">DB_ROW_ID</field>
	</row>
	<row>
		<field name="database_name">test1</field>
		<field name="table_name">Persons</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:43:08</field>
		<field name="stat_name">n_leaf_pages</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of leaf pages in the index</field>
	</row>
	<row>
		<field name="database_name">test1</field>
		<field name="table_name">Persons</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:43:08</field>
		<field name="stat_name">size</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of pages in the index</field>
	</row>
	<row>
		<field name="database_name">test1</field>
		<field name="table_name">Persons1</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:47:08</field>
		<field name="stat_name">n_diff_pfx01</field>
		<field name="stat_value">0</field>
		<field name="sample_size">1</field>
		<field name="stat_description">DB_ROW_ID</field>
	</row>
	<row>
		<field name="database_name">test1</field>
		<field name="table_name">Persons1</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:47:08</field>
		<field name="stat_name">n_leaf_pages</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of leaf pages in the index</field>
	</row>
	<row>
		<field name="database_name">test1</field>
		<field name="table_name">Persons1</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:47:08</field>
		<field name="stat_name">size</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of pages in the index</field>
	</row>
	<row>
		<field name="database_name">test2</field>
		<field name="table_name">Persons</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:50:48</field>
		<field name="stat_name">n_diff_pfx01</field>
		<field name="stat_value">0</field>
		<field name="sample_size">1</field>
		<field name="stat_description">DB_ROW_ID</field>
	</row>
	<row>
		<field name="database_name">test2</field>
		<field name="table_name">Persons</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:50:48</field>
		<field name="stat_name">n_leaf_pages</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of leaf pages in the index</field>
	</row>
	<row>
		<field name="database_name">test2</field>
		<field name="table_name">Persons</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:50:48</field>
		<field name="stat_name">size</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of pages in the index</field>
	</row>
	<row>
		<field name="database_name">test2</field>
		<field name="table_name">Persons2</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:50:03</field>
		<field name="stat_name">n_diff_pfx01</field>
		<field name="stat_value">0</field>
		<field name="sample_size">1</field>
		<field name="stat_description">DB_ROW_ID</field>
	</row>
	<row>
		<field name="database_name">test2</field>
		<field name="table_name">Persons2</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:50:03</field>
		<field name="stat_name">n_leaf_pages</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of leaf pages in the index</field>
	</row>
	<row>
		<field name="database_name">test2</field>
		<field name="table_name">Persons2</field>
		<field name="index_name">GEN_CLUST_INDEX</field>
		<field name="last_update">2024-01-30 10:50:03</field>
		<field name="stat_name">size</field>
		<field name="stat_value">1</field>
		<field name="sample_size" xsi:nil="true" />
		<field name="stat_description">Number of pages in the index</field>
	</row>
	</table_data>
	<table_structure name="innodb_table_stats">
		<field Field="database_name" Type="varchar(64)" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="table_name" Type="varchar(199)" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="last_update" Type="timestamp" Null="NO" Key="" Default="CURRENT_TIMESTAMP" Extra="DEFAULT_GENERATED on update CURRENT_TIMESTAMP" Comment="" />
		<field Field="n_rows" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="clustered_index_size" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="sum_of_other_index_sizes" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<key Table="innodb_table_stats" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="database_name" Collation="A" Cardinality="4" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="innodb_table_stats" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="table_name" Collation="A" Cardinality="6" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="innodb_table_stats" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="6" Avg_row_length="2730" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-30 10:37:02" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="" />
	</table_structure>
	<table_data name="innodb_table_stats">
	<row>
		<field name="database_name">mysql</field>
		<field name="table_name">component</field>
		<field name="last_update">2024-01-31 06:24:08</field>
		<field name="n_rows">0</field>
		<field name="clustered_index_size">1</field>
		<field name="sum_of_other_index_sizes">0</field>
	</row>
	<row>
		<field name="database_name">sys</field>
		<field name="table_name">sys_config</field>
		<field name="last_update">2024-01-30 10:37:08</field>
		<field name="n_rows">6</field>
		<field name="clustered_index_size">1</field>
		<field name="sum_of_other_index_sizes">0</field>
	</row>
	<row>
		<field name="database_name">test1</field>
		<field name="table_name">Persons</field>
		<field name="last_update">2024-01-30 10:43:08</field>
		<field name="n_rows">0</field>
		<field name="clustered_index_size">1</field>
		<field name="sum_of_other_index_sizes">0</field>
	</row>
	<row>
		<field name="database_name">test1</field>
		<field name="table_name">Persons1</field>
		<field name="last_update">2024-01-30 10:47:08</field>
		<field name="n_rows">0</field>
		<field name="clustered_index_size">1</field>
		<field name="sum_of_other_index_sizes">0</field>
	</row>
	<row>
		<field name="database_name">test2</field>
		<field name="table_name">Persons</field>
		<field name="last_update">2024-01-30 10:50:48</field>
		<field name="n_rows">0</field>
		<field name="clustered_index_size">1</field>
		<field name="sum_of_other_index_sizes">0</field>
	</row>
	<row>
		<field name="database_name">test2</field>
		<field name="table_name">Persons2</field>
		<field name="last_update">2024-01-30 10:50:03</field>
		<field name="n_rows">0</field>
		<field name="clustered_index_size">1</field>
		<field name="sum_of_other_index_sizes">0</field>
	</row>
	</table_data>
	<table_structure name="password_history">
		<field Field="Host" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="User" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Password_timestamp" Type="timestamp(6)" Null="NO" Key="PRI" Default="CURRENT_TIMESTAMP(6)" Extra="DEFAULT_GENERATED" Comment="" />
		<field Field="Password" Type="text" Null="YES" Key="" Extra="" Comment="" />
		<key Table="password_history" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Host" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="password_history" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="User" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="password_history" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="Password_timestamp" Collation="D" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="password_history" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Password history for user accounts" />
	</table_structure>
	<table_data name="password_history">
	</table_data>
	<table_structure name="plugin">
		<field Field="name" Type="varchar(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="dl" Type="varchar(128)" Null="NO" Key="" Default="" Extra="" Comment="" />
		<key Table="plugin" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="name" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="plugin" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="1" Avg_row_length="16384" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="MySQL plugins" />
	</table_structure>
	<table_data name="plugin">
	<row>
		<field name="name">auth_socket</field>
		<field name="dl">auth_socket.so</field>
	</row>
	</table_data>
	<table_structure name="procs_priv">
		<field Field="Host" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Db" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="User" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Routine_name" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Routine_type" Type="enum('FUNCTION','PROCEDURE')" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="Grantor" Type="varchar(288)" Null="NO" Key="MUL" Default="" Extra="" Comment="" />
		<field Field="Proc_priv" Type="set('Execute','Alter Routine','Grant')" Null="NO" Key="" Default="" Extra="" Comment="" />
		<field Field="Timestamp" Type="timestamp" Null="NO" Key="" Default="CURRENT_TIMESTAMP" Extra="DEFAULT_GENERATED on update CURRENT_TIMESTAMP" Comment="" />
		<key Table="procs_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Host" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="procs_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="User" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="procs_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="Db" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="procs_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="4" Column_name="Routine_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="procs_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="5" Column_name="Routine_type" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="procs_priv" Non_unique="1" Key_name="Grantor" Seq_in_index="1" Column_name="Grantor" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="procs_priv" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="16384" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Procedure privileges" />
	</table_structure>
	<table_data name="procs_priv">
	</table_data>
	<table_structure name="proxies_priv">
		<field Field="Host" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="User" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Proxied_host" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Proxied_user" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="With_grant" Type="tinyint(1)" Null="NO" Key="" Default="0" Extra="" Comment="" />
		<field Field="Grantor" Type="varchar(288)" Null="NO" Key="MUL" Default="" Extra="" Comment="" />
		<field Field="Timestamp" Type="timestamp" Null="NO" Key="" Default="CURRENT_TIMESTAMP" Extra="DEFAULT_GENERATED on update CURRENT_TIMESTAMP" Comment="" />
		<key Table="proxies_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Host" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="proxies_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="User" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="proxies_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="Proxied_host" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="proxies_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="4" Column_name="Proxied_user" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="proxies_priv" Non_unique="1" Key_name="Grantor" Seq_in_index="1" Column_name="Grantor" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="proxies_priv" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="1" Avg_row_length="16384" Data_length="16384" Max_data_length="0" Index_length="16384" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="User proxy privileges" />
	</table_structure>
	<table_data name="proxies_priv">
	<row>
		<field name="Host">localhost</field>
		<field name="User">root</field>
		<field name="Proxied_host"></field>
		<field name="Proxied_user"></field>
		<field name="With_grant">1</field>
		<field name="Grantor">boot@</field>
		<field name="Timestamp">2024-01-30 10:37:06</field>
	</row>
	</table_data>
	<table_structure name="replication_asynchronous_connection_failover">
		<field Field="Channel_name" Type="char(64)" Null="NO" Key="PRI" Extra="" Comment="The replication channel name that connects source and replica." />
		<field Field="Host" Type="char(255)" Null="NO" Key="PRI" Extra="" Comment="The source hostname that the replica will attempt to switch over the replication connection to in case of a failure." />
		<field Field="Port" Type="int unsigned" Null="NO" Key="PRI" Extra="" Comment="The source port that the replica will attempt to switch over the replication connection to in case of a failure." />
		<field Field="Network_namespace" Type="char(64)" Null="NO" Key="PRI" Extra="" Comment="The source network namespace that the replica will attempt to switch over the replication connection to in case of a failure. If its value is empty, connections use the default (global) namespace." />
		<field Field="Weight" Type="tinyint unsigned" Null="NO" Key="" Extra="" Comment="The order in which the replica shall try to switch the connection over to when there are failures. Weight can be set to a number between 1 and 100, where 100 is the highest weight and 1 the lowest." />
		<field Field="Managed_name" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="The name of the group which this server belongs to." />
		<key Table="replication_asynchronous_connection_failover" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Channel_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="replication_asynchronous_connection_failover" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="Host" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="replication_asynchronous_connection_failover" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="Port" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="replication_asynchronous_connection_failover" Non_unique="0" Key_name="PRIMARY" Seq_in_index="4" Column_name="Network_namespace" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="replication_asynchronous_connection_failover" Non_unique="0" Key_name="PRIMARY" Seq_in_index="5" Column_name="Managed_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="replication_asynchronous_connection_failover" Non_unique="1" Key_name="Channel_name" Seq_in_index="1" Column_name="Channel_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="replication_asynchronous_connection_failover" Non_unique="1" Key_name="Channel_name" Seq_in_index="2" Column_name="Managed_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="replication_asynchronous_connection_failover" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="16384" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="The source configuration details" />
	</table_structure>
	<table_data name="replication_asynchronous_connection_failover">
	</table_data>
	<table_structure name="replication_asynchronous_connection_failover_managed">
		<field Field="Channel_name" Type="char(64)" Null="NO" Key="PRI" Extra="" Comment="The replication channel name that connects source and replica." />
		<field Field="Managed_name" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="The name of the source which needs to be managed." />
		<field Field="Managed_type" Type="char(64)" Null="NO" Key="" Default="" Extra="" Comment="Determines the managed type." />
		<field Field="Configuration" Type="json" Null="YES" Key="" Extra="" Comment="The data to help manage group. For Managed_type = GroupReplication, Configuration value should contain {&quot;Primary_weight&quot;: 80, &quot;Secondary_weight&quot;: 60}, so that it assigns weight=80 to PRIMARY of the group, and weight=60 for rest of the members in mysql.replication_asynchronous_connection_failover table." />
		<key Table="replication_asynchronous_connection_failover_managed" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Channel_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="replication_asynchronous_connection_failover_managed" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="Managed_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="replication_asynchronous_connection_failover_managed" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="The managed source configuration details" />
	</table_structure>
	<table_data name="replication_asynchronous_connection_failover_managed">
	</table_data>
	<table_structure name="replication_group_configuration_version">
		<field Field="name" Type="char(255)" Null="NO" Key="PRI" Extra="" Comment="The configuration name." />
		<field Field="version" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="The version of the configuration name." />
		<key Table="replication_group_configuration_version" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="name" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="replication_group_configuration_version" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="1" Avg_row_length="16384" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-30 10:37:05" Collation="utf8mb4_0900_ai_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="The group configuration version." />
	</table_structure>
	<table_data name="replication_group_configuration_version">
	<row>
		<field name="name">replication_group_member_actions</field>
		<field name="version">1</field>
	</row>
	</table_data>
	<table_structure name="replication_group_member_actions">
		<field Field="name" Type="char(255)" Null="NO" Key="PRI" Extra="" Comment="The action name." />
		<field Field="event" Type="char(64)" Null="NO" Key="PRI" Extra="" Comment="The event that will trigger the action." />
		<field Field="enabled" Type="tinyint(1)" Null="NO" Key="" Extra="" Comment="Whether the action is enabled." />
		<field Field="type" Type="char(64)" Null="NO" Key="" Extra="" Comment="The action type." />
		<field Field="priority" Type="tinyint unsigned" Null="NO" Key="" Extra="" Comment="The order on which the action will be run, value between 1 and 100, lower values first." />
		<field Field="error_handling" Type="char(64)" Null="NO" Key="" Extra="" Comment="On errors during the action will be handled: IGNORE, CRITICAL." />
		<key Table="replication_group_member_actions" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="name" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="replication_group_member_actions" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="event" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="replication_group_member_actions" Non_unique="1" Key_name="event" Seq_in_index="1" Column_name="event" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="replication_group_member_actions" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="2" Avg_row_length="8192" Data_length="16384" Max_data_length="0" Index_length="16384" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb4_0900_ai_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="The member actions configuration." />
	</table_structure>
	<table_data name="replication_group_member_actions">
	<row>
		<field name="name">mysql_disable_super_read_only_if_primary</field>
		<field name="event">AFTER_PRIMARY_ELECTION</field>
		<field name="enabled">1</field>
		<field name="type">INTERNAL</field>
		<field name="priority">1</field>
		<field name="error_handling">IGNORE</field>
	</row>
	<row>
		<field name="name">mysql_start_failover_channels_if_primary</field>
		<field name="event">AFTER_PRIMARY_ELECTION</field>
		<field name="enabled">1</field>
		<field name="type">INTERNAL</field>
		<field name="priority">10</field>
		<field name="error_handling">CRITICAL</field>
	</row>
	</table_data>
	<table_structure name="role_edges">
		<field Field="FROM_HOST" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="FROM_USER" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="TO_HOST" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="TO_USER" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="WITH_ADMIN_OPTION" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<key Table="role_edges" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="FROM_HOST" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="role_edges" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="FROM_USER" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="role_edges" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="TO_HOST" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="role_edges" Non_unique="0" Key_name="PRIMARY" Seq_in_index="4" Column_name="TO_USER" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="role_edges" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Role hierarchy and role grants" />
	</table_structure>
	<table_data name="role_edges">
	</table_data>
	<table_structure name="server_cost">
		<field Field="cost_name" Type="varchar(64)" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="cost_value" Type="float" Null="YES" Key="" Extra="" Comment="" />
		<field Field="last_update" Type="timestamp" Null="NO" Key="" Default="CURRENT_TIMESTAMP" Extra="DEFAULT_GENERATED on update CURRENT_TIMESTAMP" Comment="" />
		<field Field="comment" Type="varchar(1024)" Null="YES" Key="" Extra="" Comment="" />
		<key Table="server_cost" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="cost_name" Collation="A" Cardinality="6" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="server_cost" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="6" Avg_row_length="2730" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="" />
	</table_structure>
	<table_data name="server_cost">
	<row>
		<field name="cost_name">disk_temptable_create_cost</field>
		<field name="cost_value" xsi:nil="true" />
		<field name="last_update">2024-01-30 10:37:05</field>
		<field name="comment" xsi:nil="true" />
	</row>
	<row>
		<field name="cost_name">disk_temptable_row_cost</field>
		<field name="cost_value" xsi:nil="true" />
		<field name="last_update">2024-01-30 10:37:05</field>
		<field name="comment" xsi:nil="true" />
	</row>
	<row>
		<field name="cost_name">key_compare_cost</field>
		<field name="cost_value" xsi:nil="true" />
		<field name="last_update">2024-01-30 10:37:05</field>
		<field name="comment" xsi:nil="true" />
	</row>
	<row>
		<field name="cost_name">memory_temptable_create_cost</field>
		<field name="cost_value" xsi:nil="true" />
		<field name="last_update">2024-01-30 10:37:05</field>
		<field name="comment" xsi:nil="true" />
	</row>
	<row>
		<field name="cost_name">memory_temptable_row_cost</field>
		<field name="cost_value" xsi:nil="true" />
		<field name="last_update">2024-01-30 10:37:05</field>
		<field name="comment" xsi:nil="true" />
	</row>
	<row>
		<field name="cost_name">row_evaluate_cost</field>
		<field name="cost_value" xsi:nil="true" />
		<field name="last_update">2024-01-30 10:37:05</field>
		<field name="comment" xsi:nil="true" />
	</row>
	</table_data>
	<table_structure name="servers">
		<field Field="Server_name" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Host" Type="char(255)" Null="NO" Key="" Default="" Extra="" Comment="" />
		<field Field="Db" Type="char(64)" Null="NO" Key="" Default="" Extra="" Comment="" />
		<field Field="Username" Type="char(64)" Null="NO" Key="" Default="" Extra="" Comment="" />
		<field Field="Password" Type="char(64)" Null="NO" Key="" Default="" Extra="" Comment="" />
		<field Field="Port" Type="int" Null="NO" Key="" Default="0" Extra="" Comment="" />
		<field Field="Socket" Type="char(64)" Null="NO" Key="" Default="" Extra="" Comment="" />
		<field Field="Wrapper" Type="char(64)" Null="NO" Key="" Default="" Extra="" Comment="" />
		<field Field="Owner" Type="char(64)" Null="NO" Key="" Default="" Extra="" Comment="" />
		<key Table="servers" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Server_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="servers" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="MySQL Foreign Servers table" />
	</table_structure>
	<table_data name="servers">
	</table_data>
	<table_structure name="slave_master_info">
		<field Field="Number_of_lines" Type="int unsigned" Null="NO" Key="" Extra="" Comment="Number of lines in the file." />
		<field Field="Master_log_name" Type="text" Null="NO" Key="" Extra="" Comment="The name of the master binary log currently being read from the master." />
		<field Field="Master_log_pos" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="The master log position of the last read event." />
		<field Field="Host" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="The host name of the source." />
		<field Field="User_name" Type="text" Null="YES" Key="" Extra="" Comment="The user name used to connect to the master." />
		<field Field="User_password" Type="text" Null="YES" Key="" Extra="" Comment="The password used to connect to the master." />
		<field Field="Port" Type="int unsigned" Null="NO" Key="" Extra="" Comment="The network port used to connect to the master." />
		<field Field="Connect_retry" Type="int unsigned" Null="NO" Key="" Extra="" Comment="The period (in seconds) that the slave will wait before trying to reconnect to the master." />
		<field Field="Enabled_ssl" Type="tinyint(1)" Null="NO" Key="" Extra="" Comment="Indicates whether the server supports SSL connections." />
		<field Field="Ssl_ca" Type="text" Null="YES" Key="" Extra="" Comment="The file used for the Certificate Authority (CA) certificate." />
		<field Field="Ssl_capath" Type="text" Null="YES" Key="" Extra="" Comment="The path to the Certificate Authority (CA) certificates." />
		<field Field="Ssl_cert" Type="text" Null="YES" Key="" Extra="" Comment="The name of the SSL certificate file." />
		<field Field="Ssl_cipher" Type="text" Null="YES" Key="" Extra="" Comment="The name of the cipher in use for the SSL connection." />
		<field Field="Ssl_key" Type="text" Null="YES" Key="" Extra="" Comment="The name of the SSL key file." />
		<field Field="Ssl_verify_server_cert" Type="tinyint(1)" Null="NO" Key="" Extra="" Comment="Whether to verify the server certificate." />
		<field Field="Heartbeat" Type="float" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Bind" Type="text" Null="YES" Key="" Extra="" Comment="Displays which interface is employed when connecting to the MySQL server" />
		<field Field="Ignored_server_ids" Type="text" Null="YES" Key="" Extra="" Comment="The number of server IDs to be ignored, followed by the actual server IDs" />
		<field Field="Uuid" Type="text" Null="YES" Key="" Extra="" Comment="The master server uuid." />
		<field Field="Retry_count" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="Number of reconnect attempts, to the master, before giving up." />
		<field Field="Ssl_crl" Type="text" Null="YES" Key="" Extra="" Comment="The file used for the Certificate Revocation List (CRL)" />
		<field Field="Ssl_crlpath" Type="text" Null="YES" Key="" Extra="" Comment="The path used for Certificate Revocation List (CRL) files" />
		<field Field="Enabled_auto_position" Type="tinyint(1)" Null="NO" Key="" Extra="" Comment="Indicates whether GTIDs will be used to retrieve events from the master." />
		<field Field="Channel_name" Type="varchar(64)" Null="NO" Key="PRI" Extra="" Comment="The channel on which the replica is connected to a source. Used in Multisource Replication" />
		<field Field="Tls_version" Type="text" Null="YES" Key="" Extra="" Comment="Tls version" />
		<field Field="Public_key_path" Type="text" Null="YES" Key="" Extra="" Comment="The file containing public key of master server." />
		<field Field="Get_public_key" Type="tinyint(1)" Null="NO" Key="" Extra="" Comment="Preference to get public key from master." />
		<field Field="Network_namespace" Type="text" Null="YES" Key="" Extra="" Comment="Network namespace used for communication with the master server." />
		<field Field="Master_compression_algorithm" Type="varchar(64)" Null="NO" Key="" Extra="" Comment="Compression algorithm supported for data transfer between source and replica." />
		<field Field="Master_zstd_compression_level" Type="int unsigned" Null="NO" Key="" Extra="" Comment="Compression level associated with zstd compression algorithm." />
		<field Field="Tls_ciphersuites" Type="text" Null="YES" Key="" Extra="" Comment="Ciphersuites used for TLS 1.3 communication with the master server." />
		<field Field="Source_connection_auto_failover" Type="tinyint(1)" Null="NO" Key="" Default="0" Extra="" Comment="Indicates whether the channel connection failover is enabled." />
		<field Field="Gtid_only" Type="tinyint(1)" Null="NO" Key="" Default="0" Extra="" Comment="Indicates if this channel only uses GTIDs and does not persist positions." />
		<key Table="slave_master_info" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Channel_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="slave_master_info" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Master Information" />
	</table_structure>
	<table_structure name="slave_relay_log_info">
		<field Field="Number_of_lines" Type="int unsigned" Null="NO" Key="" Extra="" Comment="Number of lines in the file or rows in the table. Used to version table definitions." />
		<field Field="Relay_log_name" Type="text" Null="YES" Key="" Extra="" Comment="The name of the current relay log file." />
		<field Field="Relay_log_pos" Type="bigint unsigned" Null="YES" Key="" Extra="" Comment="The relay log position of the last executed event." />
		<field Field="Master_log_name" Type="text" Null="YES" Key="" Extra="" Comment="The name of the master binary log file from which the events in the relay log file were read." />
		<field Field="Master_log_pos" Type="bigint unsigned" Null="YES" Key="" Extra="" Comment="The master log position of the last executed event." />
		<field Field="Sql_delay" Type="int" Null="YES" Key="" Extra="" Comment="The number of seconds that the slave must lag behind the master." />
		<field Field="Number_of_workers" Type="int unsigned" Null="YES" Key="" Extra="" Comment="" />
		<field Field="Id" Type="int unsigned" Null="YES" Key="" Extra="" Comment="Internal Id that uniquely identifies this record." />
		<field Field="Channel_name" Type="varchar(64)" Null="NO" Key="PRI" Extra="" Comment="The channel on which the replica is connected to a source. Used in Multisource Replication" />
		<field Field="Privilege_checks_username" Type="varchar(32)" Null="YES" Key="" Extra="" Comment="Username part of PRIVILEGE_CHECKS_USER." />
		<field Field="Privilege_checks_hostname" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="Hostname part of PRIVILEGE_CHECKS_USER." />
		<field Field="Require_row_format" Type="tinyint(1)" Null="NO" Key="" Extra="" Comment="Indicates whether the channel shall only accept row based events." />
		<field Field="Require_table_primary_key_check" Type="enum('STREAM','ON','OFF','GENERATE')" Null="NO" Key="" Default="STREAM" Extra="" Comment="Indicates what is the channel policy regarding tables without primary keys on create and alter table queries" />
		<field Field="Assign_gtids_to_anonymous_transactions_type" Type="enum('OFF','LOCAL','UUID')" Null="NO" Key="" Default="OFF" Extra="" Comment="Indicates whether the channel will generate a new GTID for anonymous transactions. OFF means that anonymous transactions will remain anonymous. LOCAL means that anonymous transactions will be assigned a newly generated GTID based on server_uuid. UUID indicates that anonymous transactions will be assigned a newly generated GTID based on Assign_gtids_to_anonymous_transactions_value" />
		<field Field="Assign_gtids_to_anonymous_transactions_value" Type="text" Null="YES" Key="" Extra="" Comment="Indicates the UUID used while generating GTIDs for anonymous transactions" />
		<key Table="slave_relay_log_info" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Channel_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="slave_relay_log_info" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Relay Log Information" />
	</table_structure>
	<table_structure name="slave_worker_info">
		<field Field="Id" Type="int unsigned" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="Relay_log_name" Type="text" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Relay_log_pos" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Master_log_name" Type="text" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Master_log_pos" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Checkpoint_relay_log_name" Type="text" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Checkpoint_relay_log_pos" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Checkpoint_master_log_name" Type="text" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Checkpoint_master_log_pos" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Checkpoint_seqno" Type="int unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Checkpoint_group_size" Type="int unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Checkpoint_group_bitmap" Type="blob" Null="NO" Key="" Extra="" Comment="" />
		<field Field="Channel_name" Type="varchar(64)" Null="NO" Key="PRI" Extra="" Comment="The channel on which the replica is connected to a source. Used in Multisource Replication" />
		<key Table="slave_worker_info" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Channel_name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="slave_worker_info" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="Id" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="slave_worker_info" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Worker Information" />
	</table_structure>
	<table_data name="slave_worker_info">
	</table_data>
	<table_structure name="tables_priv">
		<field Field="Host" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Db" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="User" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Table_name" Type="char(64)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Grantor" Type="varchar(288)" Null="NO" Key="MUL" Default="" Extra="" Comment="" />
		<field Field="Timestamp" Type="timestamp" Null="NO" Key="" Default="CURRENT_TIMESTAMP" Extra="DEFAULT_GENERATED on update CURRENT_TIMESTAMP" Comment="" />
		<field Field="Table_priv" Type="set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger')" Null="NO" Key="" Default="" Extra="" Comment="" />
		<field Field="Column_priv" Type="set('Select','Insert','Update','References')" Null="NO" Key="" Default="" Extra="" Comment="" />
		<key Table="tables_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Host" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="tables_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="User" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="tables_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="3" Column_name="Db" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="tables_priv" Non_unique="0" Key_name="PRIMARY" Seq_in_index="4" Column_name="Table_name" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="tables_priv" Non_unique="1" Key_name="Grantor" Seq_in_index="1" Column_name="Grantor" Collation="A" Cardinality="2" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="tables_priv" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="2" Avg_row_length="8192" Data_length="16384" Max_data_length="0" Index_length="16384" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Table privileges" />
	</table_structure>
	<table_data name="tables_priv">
	<row>
		<field name="Host">localhost</field>
		<field name="Db">mysql</field>
		<field name="User">mysql.session</field>
		<field name="Table_name">user</field>
		<field name="Grantor">boot@</field>
		<field name="Timestamp">2024-01-30 10:37:07</field>
		<field name="Table_priv">Select</field>
		<field name="Column_priv"></field>
	</row>
	<row>
		<field name="Host">localhost</field>
		<field name="Db">sys</field>
		<field name="User">mysql.sys</field>
		<field name="Table_name">sys_config</field>
		<field name="Grantor">root@localhost</field>
		<field name="Timestamp">2024-01-30 10:37:08</field>
		<field name="Table_priv">Select</field>
		<field name="Column_priv"></field>
	</row>
	</table_data>
	<table_structure name="time_zone">
		<field Field="Time_zone_id" Type="int unsigned" Null="NO" Key="PRI" Extra="auto_increment" Comment="" />
		<field Field="Use_leap_seconds" Type="enum('Y','N')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<key Table="time_zone" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Time_zone_id" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="time_zone" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Auto_increment="1" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Time zones" />
	</table_structure>
	<table_data name="time_zone">
	</table_data>
	<table_structure name="time_zone_leap_second">
		<field Field="Transition_time" Type="bigint" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="Correction" Type="int" Null="NO" Key="" Extra="" Comment="" />
		<key Table="time_zone_leap_second" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Transition_time" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="time_zone_leap_second" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Leap seconds information for time zones" />
	</table_structure>
	<table_data name="time_zone_leap_second">
	</table_data>
	<table_structure name="time_zone_name">
		<field Field="Name" Type="char(64)" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="Time_zone_id" Type="int unsigned" Null="NO" Key="" Extra="" Comment="" />
		<key Table="time_zone_name" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Name" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="time_zone_name" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Time zone names" />
	</table_structure>
	<table_data name="time_zone_name">
	</table_data>
	<table_structure name="time_zone_transition">
		<field Field="Time_zone_id" Type="int unsigned" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="Transition_time" Type="bigint" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="Transition_type_id" Type="int unsigned" Null="NO" Key="" Extra="" Comment="" />
		<key Table="time_zone_transition" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Time_zone_id" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="time_zone_transition" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="Transition_time" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="time_zone_transition" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Time zone transitions" />
	</table_structure>
	<table_data name="time_zone_transition">
	</table_data>
	<table_structure name="time_zone_transition_type">
		<field Field="Time_zone_id" Type="int unsigned" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="Transition_type_id" Type="int unsigned" Null="NO" Key="PRI" Extra="" Comment="" />
		<field Field="Offset" Type="int" Null="NO" Key="" Default="0" Extra="" Comment="" />
		<field Field="Is_DST" Type="tinyint unsigned" Null="NO" Key="" Default="0" Extra="" Comment="" />
		<field Field="Abbreviation" Type="char(8)" Null="NO" Key="" Default="" Extra="" Comment="" />
		<key Table="time_zone_transition_type" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Time_zone_id" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="time_zone_transition_type" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="Transition_type_id" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="time_zone_transition_type" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Time zone transition types" />
	</table_structure>
	<table_data name="time_zone_transition_type">
	</table_data>
	<table_structure name="user">
		<field Field="Host" Type="char(255)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="User" Type="char(32)" Null="NO" Key="PRI" Default="" Extra="" Comment="" />
		<field Field="Select_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Insert_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Update_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Delete_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Drop_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Reload_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Shutdown_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Process_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="File_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Grant_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="References_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Index_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Alter_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Show_db_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Super_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_tmp_table_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Lock_tables_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Execute_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Repl_slave_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Repl_client_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_view_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Show_view_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_routine_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Alter_routine_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_user_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Event_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Trigger_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_tablespace_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="ssl_type" Type="enum('','ANY','X509','SPECIFIED')" Null="NO" Key="" Default="" Extra="" Comment="" />
		<field Field="ssl_cipher" Type="blob" Null="NO" Key="" Extra="" Comment="" />
		<field Field="x509_issuer" Type="blob" Null="NO" Key="" Extra="" Comment="" />
		<field Field="x509_subject" Type="blob" Null="NO" Key="" Extra="" Comment="" />
		<field Field="max_questions" Type="int unsigned" Null="NO" Key="" Default="0" Extra="" Comment="" />
		<field Field="max_updates" Type="int unsigned" Null="NO" Key="" Default="0" Extra="" Comment="" />
		<field Field="max_connections" Type="int unsigned" Null="NO" Key="" Default="0" Extra="" Comment="" />
		<field Field="max_user_connections" Type="int unsigned" Null="NO" Key="" Default="0" Extra="" Comment="" />
		<field Field="plugin" Type="char(64)" Null="NO" Key="" Default="caching_sha2_password" Extra="" Comment="" />
		<field Field="authentication_string" Type="text" Null="YES" Key="" Extra="" Comment="" />
		<field Field="password_expired" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="password_last_changed" Type="timestamp" Null="YES" Key="" Extra="" Comment="" />
		<field Field="password_lifetime" Type="smallint unsigned" Null="YES" Key="" Extra="" Comment="" />
		<field Field="account_locked" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Create_role_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Drop_role_priv" Type="enum('N','Y')" Null="NO" Key="" Default="N" Extra="" Comment="" />
		<field Field="Password_reuse_history" Type="smallint unsigned" Null="YES" Key="" Extra="" Comment="" />
		<field Field="Password_reuse_time" Type="smallint unsigned" Null="YES" Key="" Extra="" Comment="" />
		<field Field="Password_require_current" Type="enum('N','Y')" Null="YES" Key="" Extra="" Comment="" />
		<field Field="User_attributes" Type="json" Null="YES" Key="" Extra="" Comment="" />
		<key Table="user" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="Host" Collation="A" Cardinality="1" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<key Table="user" Non_unique="0" Key_name="PRIMARY" Seq_in_index="2" Column_name="User" Collation="A" Cardinality="5" Null="" Index_type="BTREE" Comment="" Index_comment="" Visible="YES" />
		<options Name="user" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="5" Avg_row_length="3276" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="5242880" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_bin" Create_options="row_format=DYNAMIC stats_persistent=0" Comment="Users and global privileges" />
	</table_structure>
	<table_data name="user">
	<row>
		<field name="Host">localhost</field>
		<field name="User">debian-sys-maint</field>
		<field name="Select_priv">Y</field>
		<field name="Insert_priv">Y</field>
		<field name="Update_priv">Y</field>
		<field name="Delete_priv">Y</field>
		<field name="Create_priv">Y</field>
		<field name="Drop_priv">Y</field>
		<field name="Reload_priv">Y</field>
		<field name="Shutdown_priv">Y</field>
		<field name="Process_priv">Y</field>
		<field name="File_priv">Y</field>
		<field name="Grant_priv">Y</field>
		<field name="References_priv">Y</field>
		<field name="Index_priv">Y</field>
		<field name="Alter_priv">Y</field>
		<field name="Show_db_priv">Y</field>
		<field name="Super_priv">Y</field>
		<field name="Create_tmp_table_priv">Y</field>
		<field name="Lock_tables_priv">Y</field>
		<field name="Execute_priv">Y</field>
		<field name="Repl_slave_priv">Y</field>
		<field name="Repl_client_priv">Y</field>
		<field name="Create_view_priv">Y</field>
		<field name="Show_view_priv">Y</field>
		<field name="Create_routine_priv">Y</field>
		<field name="Alter_routine_priv">Y</field>
		<field name="Create_user_priv">Y</field>
		<field name="Event_priv">Y</field>
		<field name="Trigger_priv">Y</field>
		<field name="Create_tablespace_priv">Y</field>
		<field name="ssl_type"></field>
		<field name="ssl_cipher"></field>
		<field name="x509_issuer"></field>
		<field name="x509_subject"></field>
		<field name="max_questions">0</field>
		<field name="max_updates">0</field>
		<field name="max_connections">0</field>
		<field name="max_user_connections">0</field>
		<field name="plugin">caching_sha2_password</field>
		<field name="authentication_string">$A$005$UOc{eMRLz@T6y?':pw2sD7syC63IZZNfE2n0blwtYNK5isUs0vLjH4aJXNYm0</field>
		<field name="password_expired">N</field>
		<field name="password_last_changed">2024-01-30 10:37:09</field>
		<field name="password_lifetime" xsi:nil="true" />
		<field name="account_locked">N</field>
		<field name="Create_role_priv">Y</field>
		<field name="Drop_role_priv">Y</field>
		<field name="Password_reuse_history" xsi:nil="true" />
		<field name="Password_reuse_time" xsi:nil="true" />
		<field name="Password_require_current" xsi:nil="true" />
		<field name="User_attributes" xsi:nil="true" />
	</row>
	<row>
		<field name="Host">localhost</field>
		<field name="User">mysql.infoschema</field>
		<field name="Select_priv">Y</field>
		<field name="Insert_priv">N</field>
		<field name="Update_priv">N</field>
		<field name="Delete_priv">N</field>
		<field name="Create_priv">N</field>
		<field name="Drop_priv">N</field>
		<field name="Reload_priv">N</field>
		<field name="Shutdown_priv">N</field>
		<field name="Process_priv">N</field>
		<field name="File_priv">N</field>
		<field name="Grant_priv">N</field>
		<field name="References_priv">N</field>
		<field name="Index_priv">N</field>
		<field name="Alter_priv">N</field>
		<field name="Show_db_priv">N</field>
		<field name="Super_priv">N</field>
		<field name="Create_tmp_table_priv">N</field>
		<field name="Lock_tables_priv">N</field>
		<field name="Execute_priv">N</field>
		<field name="Repl_slave_priv">N</field>
		<field name="Repl_client_priv">N</field>
		<field name="Create_view_priv">N</field>
		<field name="Show_view_priv">N</field>
		<field name="Create_routine_priv">N</field>
		<field name="Alter_routine_priv">N</field>
		<field name="Create_user_priv">N</field>
		<field name="Event_priv">N</field>
		<field name="Trigger_priv">N</field>
		<field name="Create_tablespace_priv">N</field>
		<field name="ssl_type"></field>
		<field name="ssl_cipher"></field>
		<field name="x509_issuer"></field>
		<field name="x509_subject"></field>
		<field name="max_questions">0</field>
		<field name="max_updates">0</field>
		<field name="max_connections">0</field>
		<field name="max_user_connections">0</field>
		<field name="plugin">caching_sha2_password</field>
		<field name="authentication_string">$A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED</field>
		<field name="password_expired">N</field>
		<field name="password_last_changed">2024-01-30 10:37:08</field>
		<field name="password_lifetime" xsi:nil="true" />
		<field name="account_locked">Y</field>
		<field name="Create_role_priv">N</field>
		<field name="Drop_role_priv">N</field>
		<field name="Password_reuse_history" xsi:nil="true" />
		<field name="Password_reuse_time" xsi:nil="true" />
		<field name="Password_require_current" xsi:nil="true" />
		<field name="User_attributes" xsi:nil="true" />
	</row>
	<row>
		<field name="Host">localhost</field>
		<field name="User">mysql.session</field>
		<field name="Select_priv">N</field>
		<field name="Insert_priv">N</field>
		<field name="Update_priv">N</field>
		<field name="Delete_priv">N</field>
		<field name="Create_priv">N</field>
		<field name="Drop_priv">N</field>
		<field name="Reload_priv">N</field>
		<field name="Shutdown_priv">Y</field>
		<field name="Process_priv">N</field>
		<field name="File_priv">N</field>
		<field name="Grant_priv">N</field>
		<field name="References_priv">N</field>
		<field name="Index_priv">N</field>
		<field name="Alter_priv">N</field>
		<field name="Show_db_priv">N</field>
		<field name="Super_priv">Y</field>
		<field name="Create_tmp_table_priv">N</field>
		<field name="Lock_tables_priv">N</field>
		<field name="Execute_priv">N</field>
		<field name="Repl_slave_priv">N</field>
		<field name="Repl_client_priv">N</field>
		<field name="Create_view_priv">N</field>
		<field name="Show_view_priv">N</field>
		<field name="Create_routine_priv">N</field>
		<field name="Alter_routine_priv">N</field>
		<field name="Create_user_priv">N</field>
		<field name="Event_priv">N</field>
		<field name="Trigger_priv">N</field>
		<field name="Create_tablespace_priv">N</field>
		<field name="ssl_type"></field>
		<field name="ssl_cipher"></field>
		<field name="x509_issuer"></field>
		<field name="x509_subject"></field>
		<field name="max_questions">0</field>
		<field name="max_updates">0</field>
		<field name="max_connections">0</field>
		<field name="max_user_connections">0</field>
		<field name="plugin">caching_sha2_password</field>
		<field name="authentication_string">$A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED</field>
		<field name="password_expired">N</field>
		<field name="password_last_changed">2024-01-30 10:37:07</field>
		<field name="password_lifetime" xsi:nil="true" />
		<field name="account_locked">Y</field>
		<field name="Create_role_priv">N</field>
		<field name="Drop_role_priv">N</field>
		<field name="Password_reuse_history" xsi:nil="true" />
		<field name="Password_reuse_time" xsi:nil="true" />
		<field name="Password_require_current" xsi:nil="true" />
		<field name="User_attributes" xsi:nil="true" />
	</row>
	<row>
		<field name="Host">localhost</field>
		<field name="User">mysql.sys</field>
		<field name="Select_priv">N</field>
		<field name="Insert_priv">N</field>
		<field name="Update_priv">N</field>
		<field name="Delete_priv">N</field>
		<field name="Create_priv">N</field>
		<field name="Drop_priv">N</field>
		<field name="Reload_priv">N</field>
		<field name="Shutdown_priv">N</field>
		<field name="Process_priv">N</field>
		<field name="File_priv">N</field>
		<field name="Grant_priv">N</field>
		<field name="References_priv">N</field>
		<field name="Index_priv">N</field>
		<field name="Alter_priv">N</field>
		<field name="Show_db_priv">N</field>
		<field name="Super_priv">N</field>
		<field name="Create_tmp_table_priv">N</field>
		<field name="Lock_tables_priv">N</field>
		<field name="Execute_priv">N</field>
		<field name="Repl_slave_priv">N</field>
		<field name="Repl_client_priv">N</field>
		<field name="Create_view_priv">N</field>
		<field name="Show_view_priv">N</field>
		<field name="Create_routine_priv">N</field>
		<field name="Alter_routine_priv">N</field>
		<field name="Create_user_priv">N</field>
		<field name="Event_priv">N</field>
		<field name="Trigger_priv">N</field>
		<field name="Create_tablespace_priv">N</field>
		<field name="ssl_type"></field>
		<field name="ssl_cipher"></field>
		<field name="x509_issuer"></field>
		<field name="x509_subject"></field>
		<field name="max_questions">0</field>
		<field name="max_updates">0</field>
		<field name="max_connections">0</field>
		<field name="max_user_connections">0</field>
		<field name="plugin">caching_sha2_password</field>
		<field name="authentication_string">$A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED</field>
		<field name="password_expired">N</field>
		<field name="password_last_changed">2024-01-30 10:37:08</field>
		<field name="password_lifetime" xsi:nil="true" />
		<field name="account_locked">Y</field>
		<field name="Create_role_priv">N</field>
		<field name="Drop_role_priv">N</field>
		<field name="Password_reuse_history" xsi:nil="true" />
		<field name="Password_reuse_time" xsi:nil="true" />
		<field name="Password_require_current" xsi:nil="true" />
		<field name="User_attributes" xsi:nil="true" />
	</row>
	<row>
		<field name="Host">localhost</field>
		<field name="User">root</field>
		<field name="Select_priv">Y</field>
		<field name="Insert_priv">Y</field>
		<field name="Update_priv">Y</field>
		<field name="Delete_priv">Y</field>
		<field name="Create_priv">Y</field>
		<field name="Drop_priv">Y</field>
		<field name="Reload_priv">Y</field>
		<field name="Shutdown_priv">Y</field>
		<field name="Process_priv">Y</field>
		<field name="File_priv">Y</field>
		<field name="Grant_priv">Y</field>
		<field name="References_priv">Y</field>
		<field name="Index_priv">Y</field>
		<field name="Alter_priv">Y</field>
		<field name="Show_db_priv">Y</field>
		<field name="Super_priv">Y</field>
		<field name="Create_tmp_table_priv">Y</field>
		<field name="Lock_tables_priv">Y</field>
		<field name="Execute_priv">Y</field>
		<field name="Repl_slave_priv">Y</field>
		<field name="Repl_client_priv">Y</field>
		<field name="Create_view_priv">Y</field>
		<field name="Show_view_priv">Y</field>
		<field name="Create_routine_priv">Y</field>
		<field name="Alter_routine_priv">Y</field>
		<field name="Create_user_priv">Y</field>
		<field name="Event_priv">Y</field>
		<field name="Trigger_priv">Y</field>
		<field name="Create_tablespace_priv">Y</field>
		<field name="ssl_type"></field>
		<field name="ssl_cipher"></field>
		<field name="x509_issuer"></field>
		<field name="x509_subject"></field>
		<field name="max_questions">0</field>
		<field name="max_updates">0</field>
		<field name="max_connections">0</field>
		<field name="max_user_connections">0</field>
		<field name="plugin">auth_socket</field>
		<field name="authentication_string"></field>
		<field name="password_expired">N</field>
		<field name="password_last_changed">2024-01-30 10:37:06</field>
		<field name="password_lifetime" xsi:nil="true" />
		<field name="account_locked">N</field>
		<field name="Create_role_priv">Y</field>
		<field name="Drop_role_priv">Y</field>
		<field name="Password_reuse_history" xsi:nil="true" />
		<field name="Password_reuse_time" xsi:nil="true" />
		<field name="Password_require_current" xsi:nil="true" />
		<field name="User_attributes" xsi:nil="true" />
	</row>
	</table_data>
</database>
	<table_structure name="general_log">
		<field Field="event_time" Type="timestamp(6)" Null="NO" Key="" Default="CURRENT_TIMESTAMP(6)" Extra="DEFAULT_GENERATED on update CURRENT_TIMESTAMP(6)" Comment="" />
		<field Field="user_host" Type="mediumtext" Null="NO" Key="" Extra="" Comment="" />
		<field Field="thread_id" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="server_id" Type="int unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="command_type" Type="varchar(64)" Null="NO" Key="" Extra="" Comment="" />
		<field Field="argument" Type="mediumblob" Null="NO" Key="" Extra="" Comment="" />
		<options Name="general_log" Engine="CSV" Version="10" Row_format="Dynamic" Rows="2" Avg_row_length="0" Data_length="0" Max_data_length="0" Index_length="0" Data_free="0" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="" Comment="General log" />
	</table_structure>
	<table_structure name="slow_log">
		<field Field="start_time" Type="timestamp(6)" Null="NO" Key="" Default="CURRENT_TIMESTAMP(6)" Extra="DEFAULT_GENERATED on update CURRENT_TIMESTAMP(6)" Comment="" />
		<field Field="user_host" Type="mediumtext" Null="NO" Key="" Extra="" Comment="" />
		<field Field="query_time" Type="time(6)" Null="NO" Key="" Extra="" Comment="" />
		<field Field="lock_time" Type="time(6)" Null="NO" Key="" Extra="" Comment="" />
		<field Field="rows_sent" Type="int" Null="NO" Key="" Extra="" Comment="" />
		<field Field="rows_examined" Type="int" Null="NO" Key="" Extra="" Comment="" />
		<field Field="db" Type="varchar(512)" Null="NO" Key="" Extra="" Comment="" />
		<field Field="last_insert_id" Type="int" Null="NO" Key="" Extra="" Comment="" />
		<field Field="insert_id" Type="int" Null="NO" Key="" Extra="" Comment="" />
		<field Field="server_id" Type="int unsigned" Null="NO" Key="" Extra="" Comment="" />
		<field Field="sql_text" Type="mediumblob" Null="NO" Key="" Extra="" Comment="" />
		<field Field="thread_id" Type="bigint unsigned" Null="NO" Key="" Extra="" Comment="" />
		<options Name="slow_log" Engine="CSV" Version="10" Row_format="Dynamic" Rows="2" Avg_row_length="0" Data_length="0" Max_data_length="0" Index_length="0" Data_free="0" Create_time="2024-01-31 06:24:07" Collation="utf8mb3_general_ci" Create_options="" Comment="Slow log" />
	</table_structure>
<database name="test1">
	<table_structure name="Persons">
		<field Field="PersonID" Type="int" Null="YES" Key="" Extra="" Comment="" />
		<field Field="LastName" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="FirstName" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="Address" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="City" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<options Name="Persons" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="0" Create_time="2024-01-30 10:43:08" Collation="utf8mb4_0900_ai_ci" Create_options="" Comment="" />
	</table_structure>
	<table_data name="Persons">
	</table_data>
	<table_structure name="Persons1">
		<field Field="PersonID" Type="int" Null="YES" Key="" Extra="" Comment="" />
		<field Field="rama" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="sita" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="Ayodhye" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="up" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<options Name="Persons1" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="0" Create_time="2024-01-30 10:47:08" Collation="utf8mb4_0900_ai_ci" Create_options="" Comment="" />
	</table_structure>
	<table_data name="Persons1">
	</table_data>
</database>
<database name="test2">
	<table_structure name="Persons">
		<field Field="rama" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="sita" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="Ayodhye" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="up" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<options Name="Persons" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="0" Create_time="2024-01-30 10:50:48" Collation="utf8mb4_0900_ai_ci" Create_options="" Comment="" />
	</table_structure>
	<table_data name="Persons">
	</table_data>
	<table_structure name="Persons2">
		<field Field="rama" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="sita" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="Ayodhye" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<field Field="up" Type="varchar(255)" Null="YES" Key="" Extra="" Comment="" />
		<options Name="Persons2" Engine="InnoDB" Version="10" Row_format="Dynamic" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="0" Data_free="0" Create_time="2024-01-30 10:50:03" Collation="utf8mb4_0900_ai_ci" Create_options="" Comment="" />
	</table_structure>
	<table_data name="Persons2">
	</table_data>
</database>
</mysqldump>
